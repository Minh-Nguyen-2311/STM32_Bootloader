
MainFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddfc  08080190  08080190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0808df8c  0808df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  08090bb4  08090bb4  00020bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000090  20000000  08090bbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
  6 .bss          00008310  20000090  20000090  00030090  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200083a0  200083a0  00030090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017b4d  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004a1e  00000000  00000000  00047c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011c0  00000000  00000000  0004c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001100  00000000  00000000  0004d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000d9ee  00000000  00000000  0004e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000203ca  00000000  00000000  0005c2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8e1d  00000000  00000000  0007c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001554c5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e80  00000000  00000000  00155518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080190 <memchr>:
 8080190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8080194:	2a10      	cmp	r2, #16
 8080196:	db2b      	blt.n	80801f0 <memchr+0x60>
 8080198:	f010 0f07 	tst.w	r0, #7
 808019c:	d008      	beq.n	80801b0 <memchr+0x20>
 808019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80801a2:	3a01      	subs	r2, #1
 80801a4:	428b      	cmp	r3, r1
 80801a6:	d02d      	beq.n	8080204 <memchr+0x74>
 80801a8:	f010 0f07 	tst.w	r0, #7
 80801ac:	b342      	cbz	r2, 8080200 <memchr+0x70>
 80801ae:	d1f6      	bne.n	808019e <memchr+0xe>
 80801b0:	b4f0      	push	{r4, r5, r6, r7}
 80801b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80801b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80801ba:	f022 0407 	bic.w	r4, r2, #7
 80801be:	f07f 0700 	mvns.w	r7, #0
 80801c2:	2300      	movs	r3, #0
 80801c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80801c8:	3c08      	subs	r4, #8
 80801ca:	ea85 0501 	eor.w	r5, r5, r1
 80801ce:	ea86 0601 	eor.w	r6, r6, r1
 80801d2:	fa85 f547 	uadd8	r5, r5, r7
 80801d6:	faa3 f587 	sel	r5, r3, r7
 80801da:	fa86 f647 	uadd8	r6, r6, r7
 80801de:	faa5 f687 	sel	r6, r5, r7
 80801e2:	b98e      	cbnz	r6, 8080208 <memchr+0x78>
 80801e4:	d1ee      	bne.n	80801c4 <memchr+0x34>
 80801e6:	bcf0      	pop	{r4, r5, r6, r7}
 80801e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80801ec:	f002 0207 	and.w	r2, r2, #7
 80801f0:	b132      	cbz	r2, 8080200 <memchr+0x70>
 80801f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80801f6:	3a01      	subs	r2, #1
 80801f8:	ea83 0301 	eor.w	r3, r3, r1
 80801fc:	b113      	cbz	r3, 8080204 <memchr+0x74>
 80801fe:	d1f8      	bne.n	80801f2 <memchr+0x62>
 8080200:	2000      	movs	r0, #0
 8080202:	4770      	bx	lr
 8080204:	3801      	subs	r0, #1
 8080206:	4770      	bx	lr
 8080208:	2d00      	cmp	r5, #0
 808020a:	bf06      	itte	eq
 808020c:	4635      	moveq	r5, r6
 808020e:	3803      	subeq	r0, #3
 8080210:	3807      	subne	r0, #7
 8080212:	f015 0f01 	tst.w	r5, #1
 8080216:	d107      	bne.n	8080228 <memchr+0x98>
 8080218:	3001      	adds	r0, #1
 808021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 808021e:	bf02      	ittt	eq
 8080220:	3001      	addeq	r0, #1
 8080222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8080226:	3001      	addeq	r0, #1
 8080228:	bcf0      	pop	{r4, r5, r6, r7}
 808022a:	3801      	subs	r0, #1
 808022c:	4770      	bx	lr
 808022e:	bf00      	nop

08080230 <__aeabi_uldivmod>:
 8080230:	b953      	cbnz	r3, 8080248 <__aeabi_uldivmod+0x18>
 8080232:	b94a      	cbnz	r2, 8080248 <__aeabi_uldivmod+0x18>
 8080234:	2900      	cmp	r1, #0
 8080236:	bf08      	it	eq
 8080238:	2800      	cmpeq	r0, #0
 808023a:	bf1c      	itt	ne
 808023c:	f04f 31ff 	movne.w	r1, #4294967295
 8080240:	f04f 30ff 	movne.w	r0, #4294967295
 8080244:	f000 b974 	b.w	8080530 <__aeabi_idiv0>
 8080248:	f1ad 0c08 	sub.w	ip, sp, #8
 808024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080250:	f000 f806 	bl	8080260 <__udivmoddi4>
 8080254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808025c:	b004      	add	sp, #16
 808025e:	4770      	bx	lr

08080260 <__udivmoddi4>:
 8080260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080264:	9d08      	ldr	r5, [sp, #32]
 8080266:	4604      	mov	r4, r0
 8080268:	468e      	mov	lr, r1
 808026a:	2b00      	cmp	r3, #0
 808026c:	d14d      	bne.n	808030a <__udivmoddi4+0xaa>
 808026e:	428a      	cmp	r2, r1
 8080270:	4694      	mov	ip, r2
 8080272:	d969      	bls.n	8080348 <__udivmoddi4+0xe8>
 8080274:	fab2 f282 	clz	r2, r2
 8080278:	b152      	cbz	r2, 8080290 <__udivmoddi4+0x30>
 808027a:	fa01 f302 	lsl.w	r3, r1, r2
 808027e:	f1c2 0120 	rsb	r1, r2, #32
 8080282:	fa20 f101 	lsr.w	r1, r0, r1
 8080286:	fa0c fc02 	lsl.w	ip, ip, r2
 808028a:	ea41 0e03 	orr.w	lr, r1, r3
 808028e:	4094      	lsls	r4, r2
 8080290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8080294:	0c21      	lsrs	r1, r4, #16
 8080296:	fbbe f6f8 	udiv	r6, lr, r8
 808029a:	fa1f f78c 	uxth.w	r7, ip
 808029e:	fb08 e316 	mls	r3, r8, r6, lr
 80802a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80802a6:	fb06 f107 	mul.w	r1, r6, r7
 80802aa:	4299      	cmp	r1, r3
 80802ac:	d90a      	bls.n	80802c4 <__udivmoddi4+0x64>
 80802ae:	eb1c 0303 	adds.w	r3, ip, r3
 80802b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80802b6:	f080 811f 	bcs.w	80804f8 <__udivmoddi4+0x298>
 80802ba:	4299      	cmp	r1, r3
 80802bc:	f240 811c 	bls.w	80804f8 <__udivmoddi4+0x298>
 80802c0:	3e02      	subs	r6, #2
 80802c2:	4463      	add	r3, ip
 80802c4:	1a5b      	subs	r3, r3, r1
 80802c6:	b2a4      	uxth	r4, r4
 80802c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80802cc:	fb08 3310 	mls	r3, r8, r0, r3
 80802d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80802d4:	fb00 f707 	mul.w	r7, r0, r7
 80802d8:	42a7      	cmp	r7, r4
 80802da:	d90a      	bls.n	80802f2 <__udivmoddi4+0x92>
 80802dc:	eb1c 0404 	adds.w	r4, ip, r4
 80802e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80802e4:	f080 810a 	bcs.w	80804fc <__udivmoddi4+0x29c>
 80802e8:	42a7      	cmp	r7, r4
 80802ea:	f240 8107 	bls.w	80804fc <__udivmoddi4+0x29c>
 80802ee:	4464      	add	r4, ip
 80802f0:	3802      	subs	r0, #2
 80802f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80802f6:	1be4      	subs	r4, r4, r7
 80802f8:	2600      	movs	r6, #0
 80802fa:	b11d      	cbz	r5, 8080304 <__udivmoddi4+0xa4>
 80802fc:	40d4      	lsrs	r4, r2
 80802fe:	2300      	movs	r3, #0
 8080300:	e9c5 4300 	strd	r4, r3, [r5]
 8080304:	4631      	mov	r1, r6
 8080306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808030a:	428b      	cmp	r3, r1
 808030c:	d909      	bls.n	8080322 <__udivmoddi4+0xc2>
 808030e:	2d00      	cmp	r5, #0
 8080310:	f000 80ef 	beq.w	80804f2 <__udivmoddi4+0x292>
 8080314:	2600      	movs	r6, #0
 8080316:	e9c5 0100 	strd	r0, r1, [r5]
 808031a:	4630      	mov	r0, r6
 808031c:	4631      	mov	r1, r6
 808031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080322:	fab3 f683 	clz	r6, r3
 8080326:	2e00      	cmp	r6, #0
 8080328:	d14a      	bne.n	80803c0 <__udivmoddi4+0x160>
 808032a:	428b      	cmp	r3, r1
 808032c:	d302      	bcc.n	8080334 <__udivmoddi4+0xd4>
 808032e:	4282      	cmp	r2, r0
 8080330:	f200 80f9 	bhi.w	8080526 <__udivmoddi4+0x2c6>
 8080334:	1a84      	subs	r4, r0, r2
 8080336:	eb61 0303 	sbc.w	r3, r1, r3
 808033a:	2001      	movs	r0, #1
 808033c:	469e      	mov	lr, r3
 808033e:	2d00      	cmp	r5, #0
 8080340:	d0e0      	beq.n	8080304 <__udivmoddi4+0xa4>
 8080342:	e9c5 4e00 	strd	r4, lr, [r5]
 8080346:	e7dd      	b.n	8080304 <__udivmoddi4+0xa4>
 8080348:	b902      	cbnz	r2, 808034c <__udivmoddi4+0xec>
 808034a:	deff      	udf	#255	; 0xff
 808034c:	fab2 f282 	clz	r2, r2
 8080350:	2a00      	cmp	r2, #0
 8080352:	f040 8092 	bne.w	808047a <__udivmoddi4+0x21a>
 8080356:	eba1 010c 	sub.w	r1, r1, ip
 808035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 808035e:	fa1f fe8c 	uxth.w	lr, ip
 8080362:	2601      	movs	r6, #1
 8080364:	0c20      	lsrs	r0, r4, #16
 8080366:	fbb1 f3f7 	udiv	r3, r1, r7
 808036a:	fb07 1113 	mls	r1, r7, r3, r1
 808036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8080372:	fb0e f003 	mul.w	r0, lr, r3
 8080376:	4288      	cmp	r0, r1
 8080378:	d908      	bls.n	808038c <__udivmoddi4+0x12c>
 808037a:	eb1c 0101 	adds.w	r1, ip, r1
 808037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8080382:	d202      	bcs.n	808038a <__udivmoddi4+0x12a>
 8080384:	4288      	cmp	r0, r1
 8080386:	f200 80cb 	bhi.w	8080520 <__udivmoddi4+0x2c0>
 808038a:	4643      	mov	r3, r8
 808038c:	1a09      	subs	r1, r1, r0
 808038e:	b2a4      	uxth	r4, r4
 8080390:	fbb1 f0f7 	udiv	r0, r1, r7
 8080394:	fb07 1110 	mls	r1, r7, r0, r1
 8080398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 808039c:	fb0e fe00 	mul.w	lr, lr, r0
 80803a0:	45a6      	cmp	lr, r4
 80803a2:	d908      	bls.n	80803b6 <__udivmoddi4+0x156>
 80803a4:	eb1c 0404 	adds.w	r4, ip, r4
 80803a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80803ac:	d202      	bcs.n	80803b4 <__udivmoddi4+0x154>
 80803ae:	45a6      	cmp	lr, r4
 80803b0:	f200 80bb 	bhi.w	808052a <__udivmoddi4+0x2ca>
 80803b4:	4608      	mov	r0, r1
 80803b6:	eba4 040e 	sub.w	r4, r4, lr
 80803ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80803be:	e79c      	b.n	80802fa <__udivmoddi4+0x9a>
 80803c0:	f1c6 0720 	rsb	r7, r6, #32
 80803c4:	40b3      	lsls	r3, r6
 80803c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80803ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80803ce:	fa20 f407 	lsr.w	r4, r0, r7
 80803d2:	fa01 f306 	lsl.w	r3, r1, r6
 80803d6:	431c      	orrs	r4, r3
 80803d8:	40f9      	lsrs	r1, r7
 80803da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80803de:	fa00 f306 	lsl.w	r3, r0, r6
 80803e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80803e6:	0c20      	lsrs	r0, r4, #16
 80803e8:	fa1f fe8c 	uxth.w	lr, ip
 80803ec:	fb09 1118 	mls	r1, r9, r8, r1
 80803f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80803f4:	fb08 f00e 	mul.w	r0, r8, lr
 80803f8:	4288      	cmp	r0, r1
 80803fa:	fa02 f206 	lsl.w	r2, r2, r6
 80803fe:	d90b      	bls.n	8080418 <__udivmoddi4+0x1b8>
 8080400:	eb1c 0101 	adds.w	r1, ip, r1
 8080404:	f108 3aff 	add.w	sl, r8, #4294967295
 8080408:	f080 8088 	bcs.w	808051c <__udivmoddi4+0x2bc>
 808040c:	4288      	cmp	r0, r1
 808040e:	f240 8085 	bls.w	808051c <__udivmoddi4+0x2bc>
 8080412:	f1a8 0802 	sub.w	r8, r8, #2
 8080416:	4461      	add	r1, ip
 8080418:	1a09      	subs	r1, r1, r0
 808041a:	b2a4      	uxth	r4, r4
 808041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8080420:	fb09 1110 	mls	r1, r9, r0, r1
 8080424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8080428:	fb00 fe0e 	mul.w	lr, r0, lr
 808042c:	458e      	cmp	lr, r1
 808042e:	d908      	bls.n	8080442 <__udivmoddi4+0x1e2>
 8080430:	eb1c 0101 	adds.w	r1, ip, r1
 8080434:	f100 34ff 	add.w	r4, r0, #4294967295
 8080438:	d26c      	bcs.n	8080514 <__udivmoddi4+0x2b4>
 808043a:	458e      	cmp	lr, r1
 808043c:	d96a      	bls.n	8080514 <__udivmoddi4+0x2b4>
 808043e:	3802      	subs	r0, #2
 8080440:	4461      	add	r1, ip
 8080442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8080446:	fba0 9402 	umull	r9, r4, r0, r2
 808044a:	eba1 010e 	sub.w	r1, r1, lr
 808044e:	42a1      	cmp	r1, r4
 8080450:	46c8      	mov	r8, r9
 8080452:	46a6      	mov	lr, r4
 8080454:	d356      	bcc.n	8080504 <__udivmoddi4+0x2a4>
 8080456:	d053      	beq.n	8080500 <__udivmoddi4+0x2a0>
 8080458:	b15d      	cbz	r5, 8080472 <__udivmoddi4+0x212>
 808045a:	ebb3 0208 	subs.w	r2, r3, r8
 808045e:	eb61 010e 	sbc.w	r1, r1, lr
 8080462:	fa01 f707 	lsl.w	r7, r1, r7
 8080466:	fa22 f306 	lsr.w	r3, r2, r6
 808046a:	40f1      	lsrs	r1, r6
 808046c:	431f      	orrs	r7, r3
 808046e:	e9c5 7100 	strd	r7, r1, [r5]
 8080472:	2600      	movs	r6, #0
 8080474:	4631      	mov	r1, r6
 8080476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808047a:	f1c2 0320 	rsb	r3, r2, #32
 808047e:	40d8      	lsrs	r0, r3
 8080480:	fa0c fc02 	lsl.w	ip, ip, r2
 8080484:	fa21 f303 	lsr.w	r3, r1, r3
 8080488:	4091      	lsls	r1, r2
 808048a:	4301      	orrs	r1, r0
 808048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080490:	fa1f fe8c 	uxth.w	lr, ip
 8080494:	fbb3 f0f7 	udiv	r0, r3, r7
 8080498:	fb07 3610 	mls	r6, r7, r0, r3
 808049c:	0c0b      	lsrs	r3, r1, #16
 808049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80804a2:	fb00 f60e 	mul.w	r6, r0, lr
 80804a6:	429e      	cmp	r6, r3
 80804a8:	fa04 f402 	lsl.w	r4, r4, r2
 80804ac:	d908      	bls.n	80804c0 <__udivmoddi4+0x260>
 80804ae:	eb1c 0303 	adds.w	r3, ip, r3
 80804b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80804b6:	d22f      	bcs.n	8080518 <__udivmoddi4+0x2b8>
 80804b8:	429e      	cmp	r6, r3
 80804ba:	d92d      	bls.n	8080518 <__udivmoddi4+0x2b8>
 80804bc:	3802      	subs	r0, #2
 80804be:	4463      	add	r3, ip
 80804c0:	1b9b      	subs	r3, r3, r6
 80804c2:	b289      	uxth	r1, r1
 80804c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80804c8:	fb07 3316 	mls	r3, r7, r6, r3
 80804cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80804d0:	fb06 f30e 	mul.w	r3, r6, lr
 80804d4:	428b      	cmp	r3, r1
 80804d6:	d908      	bls.n	80804ea <__udivmoddi4+0x28a>
 80804d8:	eb1c 0101 	adds.w	r1, ip, r1
 80804dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80804e0:	d216      	bcs.n	8080510 <__udivmoddi4+0x2b0>
 80804e2:	428b      	cmp	r3, r1
 80804e4:	d914      	bls.n	8080510 <__udivmoddi4+0x2b0>
 80804e6:	3e02      	subs	r6, #2
 80804e8:	4461      	add	r1, ip
 80804ea:	1ac9      	subs	r1, r1, r3
 80804ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80804f0:	e738      	b.n	8080364 <__udivmoddi4+0x104>
 80804f2:	462e      	mov	r6, r5
 80804f4:	4628      	mov	r0, r5
 80804f6:	e705      	b.n	8080304 <__udivmoddi4+0xa4>
 80804f8:	4606      	mov	r6, r0
 80804fa:	e6e3      	b.n	80802c4 <__udivmoddi4+0x64>
 80804fc:	4618      	mov	r0, r3
 80804fe:	e6f8      	b.n	80802f2 <__udivmoddi4+0x92>
 8080500:	454b      	cmp	r3, r9
 8080502:	d2a9      	bcs.n	8080458 <__udivmoddi4+0x1f8>
 8080504:	ebb9 0802 	subs.w	r8, r9, r2
 8080508:	eb64 0e0c 	sbc.w	lr, r4, ip
 808050c:	3801      	subs	r0, #1
 808050e:	e7a3      	b.n	8080458 <__udivmoddi4+0x1f8>
 8080510:	4646      	mov	r6, r8
 8080512:	e7ea      	b.n	80804ea <__udivmoddi4+0x28a>
 8080514:	4620      	mov	r0, r4
 8080516:	e794      	b.n	8080442 <__udivmoddi4+0x1e2>
 8080518:	4640      	mov	r0, r8
 808051a:	e7d1      	b.n	80804c0 <__udivmoddi4+0x260>
 808051c:	46d0      	mov	r8, sl
 808051e:	e77b      	b.n	8080418 <__udivmoddi4+0x1b8>
 8080520:	3b02      	subs	r3, #2
 8080522:	4461      	add	r1, ip
 8080524:	e732      	b.n	808038c <__udivmoddi4+0x12c>
 8080526:	4630      	mov	r0, r6
 8080528:	e709      	b.n	808033e <__udivmoddi4+0xde>
 808052a:	4464      	add	r4, ip
 808052c:	3802      	subs	r0, #2
 808052e:	e742      	b.n	80803b6 <__udivmoddi4+0x156>

08080530 <__aeabi_idiv0>:
 8080530:	4770      	bx	lr
 8080532:	bf00      	nop

08080534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8080534:	b480      	push	{r7}
 8080536:	b087      	sub	sp, #28
 8080538:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 808053a:	2300      	movs	r3, #0
 808053c:	617b      	str	r3, [r7, #20]
 808053e:	4b25      	ldr	r3, [pc, #148]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080542:	4a24      	ldr	r2, [pc, #144]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080544:	f043 0310 	orr.w	r3, r3, #16
 8080548:	6313      	str	r3, [r2, #48]	; 0x30
 808054a:	4b22      	ldr	r3, [pc, #136]	; (80805d4 <MX_GPIO_Init+0xa0>)
 808054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808054e:	f003 0310 	and.w	r3, r3, #16
 8080552:	617b      	str	r3, [r7, #20]
 8080554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8080556:	2300      	movs	r3, #0
 8080558:	613b      	str	r3, [r7, #16]
 808055a:	4b1e      	ldr	r3, [pc, #120]	; (80805d4 <MX_GPIO_Init+0xa0>)
 808055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808055e:	4a1d      	ldr	r2, [pc, #116]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8080564:	6313      	str	r3, [r2, #48]	; 0x30
 8080566:	4b1b      	ldr	r3, [pc, #108]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808056e:	613b      	str	r3, [r7, #16]
 8080570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8080572:	2300      	movs	r3, #0
 8080574:	60fb      	str	r3, [r7, #12]
 8080576:	4b17      	ldr	r3, [pc, #92]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808057a:	4a16      	ldr	r2, [pc, #88]	; (80805d4 <MX_GPIO_Init+0xa0>)
 808057c:	f043 0304 	orr.w	r3, r3, #4
 8080580:	6313      	str	r3, [r2, #48]	; 0x30
 8080582:	4b14      	ldr	r3, [pc, #80]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080586:	f003 0304 	and.w	r3, r3, #4
 808058a:	60fb      	str	r3, [r7, #12]
 808058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 808058e:	2300      	movs	r3, #0
 8080590:	60bb      	str	r3, [r7, #8]
 8080592:	4b10      	ldr	r3, [pc, #64]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080596:	4a0f      	ldr	r2, [pc, #60]	; (80805d4 <MX_GPIO_Init+0xa0>)
 8080598:	f043 0301 	orr.w	r3, r3, #1
 808059c:	6313      	str	r3, [r2, #48]	; 0x30
 808059e:	4b0d      	ldr	r3, [pc, #52]	; (80805d4 <MX_GPIO_Init+0xa0>)
 80805a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805a2:	f003 0301 	and.w	r3, r3, #1
 80805a6:	60bb      	str	r3, [r7, #8]
 80805a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80805aa:	2300      	movs	r3, #0
 80805ac:	607b      	str	r3, [r7, #4]
 80805ae:	4b09      	ldr	r3, [pc, #36]	; (80805d4 <MX_GPIO_Init+0xa0>)
 80805b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805b2:	4a08      	ldr	r2, [pc, #32]	; (80805d4 <MX_GPIO_Init+0xa0>)
 80805b4:	f043 0302 	orr.w	r3, r3, #2
 80805b8:	6313      	str	r3, [r2, #48]	; 0x30
 80805ba:	4b06      	ldr	r3, [pc, #24]	; (80805d4 <MX_GPIO_Init+0xa0>)
 80805bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805be:	f003 0302 	and.w	r3, r3, #2
 80805c2:	607b      	str	r3, [r7, #4]
 80805c4:	687b      	ldr	r3, [r7, #4]

}
 80805c6:	bf00      	nop
 80805c8:	371c      	adds	r7, #28
 80805ca:	46bd      	mov	sp, r7
 80805cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80805d0:	4770      	bx	lr
 80805d2:	bf00      	nop
 80805d4:	40023800 	.word	0x40023800

080805d8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80805d8:	b580      	push	{r7, lr}
 80805da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80805dc:	4b09      	ldr	r3, [pc, #36]	; (8080604 <MX_IWDG_Init+0x2c>)
 80805de:	4a0a      	ldr	r2, [pc, #40]	; (8080608 <MX_IWDG_Init+0x30>)
 80805e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80805e2:	4b08      	ldr	r3, [pc, #32]	; (8080604 <MX_IWDG_Init+0x2c>)
 80805e4:	2200      	movs	r2, #0
 80805e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80805e8:	4b06      	ldr	r3, [pc, #24]	; (8080604 <MX_IWDG_Init+0x2c>)
 80805ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80805ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80805f0:	4804      	ldr	r0, [pc, #16]	; (8080604 <MX_IWDG_Init+0x2c>)
 80805f2:	f001 fe8f 	bl	8082314 <HAL_IWDG_Init>
 80805f6:	4603      	mov	r3, r0
 80805f8:	2b00      	cmp	r3, #0
 80805fa:	d001      	beq.n	8080600 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80805fc:	f000 f898 	bl	8080730 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8080600:	bf00      	nop
 8080602:	bd80      	pop	{r7, pc}
 8080604:	20000090 	.word	0x20000090
 8080608:	40003000 	.word	0x40003000

0808060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 808060c:	b580      	push	{r7, lr}
 808060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)MAIN_MEMORY;
 8080610:	4b0f      	ldr	r3, [pc, #60]	; (8080650 <main+0x44>)
 8080612:	4a10      	ldr	r2, [pc, #64]	; (8080654 <main+0x48>)
 8080614:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8080616:	f000 faef 	bl	8080bf8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*Activate mask fault*/
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 808061a:	4b0d      	ldr	r3, [pc, #52]	; (8080650 <main+0x44>)
 808061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808061e:	4a0c      	ldr	r2, [pc, #48]	; (8080650 <main+0x44>)
 8080620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8080624:	6253      	str	r3, [r2, #36]	; 0x24
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTACT_Msk;
 8080626:	4b0a      	ldr	r3, [pc, #40]	; (8080650 <main+0x44>)
 8080628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808062a:	4a09      	ldr	r2, [pc, #36]	; (8080650 <main+0x44>)
 808062c:	f043 0302 	orr.w	r3, r3, #2
 8080630:	6253      	str	r3, [r2, #36]	; 0x24
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 8080632:	4b07      	ldr	r3, [pc, #28]	; (8080650 <main+0x44>)
 8080634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080636:	4a06      	ldr	r2, [pc, #24]	; (8080650 <main+0x44>)
 8080638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 808063c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 808063e:	f000 f80b 	bl	8080658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8080642:	f7ff ff77 	bl	8080534 <MX_GPIO_Init>
  MX_IWDG_Init();
 8080646:	f7ff ffc7 	bl	80805d8 <MX_IWDG_Init>
  MX_LWIP_Init();
 808064a:	f002 fad7 	bl	8082bfc <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 808064e:	e7fe      	b.n	808064e <main+0x42>
 8080650:	e000ed00 	.word	0xe000ed00
 8080654:	08080000 	.word	0x08080000

08080658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8080658:	b580      	push	{r7, lr}
 808065a:	b094      	sub	sp, #80	; 0x50
 808065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 808065e:	f107 0320 	add.w	r3, r7, #32
 8080662:	2230      	movs	r2, #48	; 0x30
 8080664:	2100      	movs	r1, #0
 8080666:	4618      	mov	r0, r3
 8080668:	f00c fc2c 	bl	808cec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 808066c:	f107 030c 	add.w	r3, r7, #12
 8080670:	2200      	movs	r2, #0
 8080672:	601a      	str	r2, [r3, #0]
 8080674:	605a      	str	r2, [r3, #4]
 8080676:	609a      	str	r2, [r3, #8]
 8080678:	60da      	str	r2, [r3, #12]
 808067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 808067c:	2300      	movs	r3, #0
 808067e:	60bb      	str	r3, [r7, #8]
 8080680:	4b29      	ldr	r3, [pc, #164]	; (8080728 <SystemClock_Config+0xd0>)
 8080682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080684:	4a28      	ldr	r2, [pc, #160]	; (8080728 <SystemClock_Config+0xd0>)
 8080686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808068a:	6413      	str	r3, [r2, #64]	; 0x40
 808068c:	4b26      	ldr	r3, [pc, #152]	; (8080728 <SystemClock_Config+0xd0>)
 808068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8080694:	60bb      	str	r3, [r7, #8]
 8080696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8080698:	2300      	movs	r3, #0
 808069a:	607b      	str	r3, [r7, #4]
 808069c:	4b23      	ldr	r3, [pc, #140]	; (808072c <SystemClock_Config+0xd4>)
 808069e:	681b      	ldr	r3, [r3, #0]
 80806a0:	4a22      	ldr	r2, [pc, #136]	; (808072c <SystemClock_Config+0xd4>)
 80806a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80806a6:	6013      	str	r3, [r2, #0]
 80806a8:	4b20      	ldr	r3, [pc, #128]	; (808072c <SystemClock_Config+0xd4>)
 80806aa:	681b      	ldr	r3, [r3, #0]
 80806ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80806b0:	607b      	str	r3, [r7, #4]
 80806b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80806b4:	230a      	movs	r3, #10
 80806b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80806b8:	2301      	movs	r3, #1
 80806ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80806bc:	2310      	movs	r3, #16
 80806be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80806c0:	2301      	movs	r3, #1
 80806c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80806c4:	2302      	movs	r3, #2
 80806c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80806c8:	2300      	movs	r3, #0
 80806ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80806cc:	2308      	movs	r3, #8
 80806ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80806d0:	23a8      	movs	r3, #168	; 0xa8
 80806d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80806d4:	2302      	movs	r3, #2
 80806d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80806d8:	2304      	movs	r3, #4
 80806da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80806dc:	f107 0320 	add.w	r3, r7, #32
 80806e0:	4618      	mov	r0, r3
 80806e2:	f001 fe5b 	bl	808239c <HAL_RCC_OscConfig>
 80806e6:	4603      	mov	r3, r0
 80806e8:	2b00      	cmp	r3, #0
 80806ea:	d001      	beq.n	80806f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80806ec:	f000 f820 	bl	8080730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80806f0:	230f      	movs	r3, #15
 80806f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80806f4:	2302      	movs	r3, #2
 80806f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80806f8:	2300      	movs	r3, #0
 80806fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80806fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8080700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8080702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8080706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8080708:	f107 030c 	add.w	r3, r7, #12
 808070c:	2105      	movs	r1, #5
 808070e:	4618      	mov	r0, r3
 8080710:	f002 f8bc 	bl	808288c <HAL_RCC_ClockConfig>
 8080714:	4603      	mov	r3, r0
 8080716:	2b00      	cmp	r3, #0
 8080718:	d001      	beq.n	808071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 808071a:	f000 f809 	bl	8080730 <Error_Handler>
  }
}
 808071e:	bf00      	nop
 8080720:	3750      	adds	r7, #80	; 0x50
 8080722:	46bd      	mov	sp, r7
 8080724:	bd80      	pop	{r7, pc}
 8080726:	bf00      	nop
 8080728:	40023800 	.word	0x40023800
 808072c:	40007000 	.word	0x40007000

08080730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8080730:	b480      	push	{r7}
 8080732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8080734:	b672      	cpsid	i
}
 8080736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8080738:	e7fe      	b.n	8080738 <Error_Handler+0x8>
	...

0808073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 808073c:	b480      	push	{r7}
 808073e:	b083      	sub	sp, #12
 8080740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8080742:	2300      	movs	r3, #0
 8080744:	607b      	str	r3, [r7, #4]
 8080746:	4b10      	ldr	r3, [pc, #64]	; (8080788 <HAL_MspInit+0x4c>)
 8080748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808074a:	4a0f      	ldr	r2, [pc, #60]	; (8080788 <HAL_MspInit+0x4c>)
 808074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8080750:	6453      	str	r3, [r2, #68]	; 0x44
 8080752:	4b0d      	ldr	r3, [pc, #52]	; (8080788 <HAL_MspInit+0x4c>)
 8080754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808075a:	607b      	str	r3, [r7, #4]
 808075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 808075e:	2300      	movs	r3, #0
 8080760:	603b      	str	r3, [r7, #0]
 8080762:	4b09      	ldr	r3, [pc, #36]	; (8080788 <HAL_MspInit+0x4c>)
 8080764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080766:	4a08      	ldr	r2, [pc, #32]	; (8080788 <HAL_MspInit+0x4c>)
 8080768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808076c:	6413      	str	r3, [r2, #64]	; 0x40
 808076e:	4b06      	ldr	r3, [pc, #24]	; (8080788 <HAL_MspInit+0x4c>)
 8080770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8080776:	603b      	str	r3, [r7, #0]
 8080778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 808077a:	bf00      	nop
 808077c:	370c      	adds	r7, #12
 808077e:	46bd      	mov	sp, r7
 8080780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080784:	4770      	bx	lr
 8080786:	bf00      	nop
 8080788:	40023800 	.word	0x40023800

0808078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 808078c:	b480      	push	{r7}
 808078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8080790:	e7fe      	b.n	8080790 <NMI_Handler+0x4>

08080792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8080792:	b480      	push	{r7}
 8080794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8080796:	e7fe      	b.n	8080796 <HardFault_Handler+0x4>

08080798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8080798:	b480      	push	{r7}
 808079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 808079c:	e7fe      	b.n	808079c <MemManage_Handler+0x4>

0808079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 808079e:	b480      	push	{r7}
 80807a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80807a2:	e7fe      	b.n	80807a2 <BusFault_Handler+0x4>

080807a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80807a4:	b480      	push	{r7}
 80807a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80807a8:	e7fe      	b.n	80807a8 <UsageFault_Handler+0x4>

080807aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80807aa:	b480      	push	{r7}
 80807ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80807ae:	bf00      	nop
 80807b0:	46bd      	mov	sp, r7
 80807b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807b6:	4770      	bx	lr

080807b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80807b8:	b480      	push	{r7}
 80807ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80807bc:	bf00      	nop
 80807be:	46bd      	mov	sp, r7
 80807c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807c4:	4770      	bx	lr

080807c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80807c6:	b480      	push	{r7}
 80807c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80807ca:	bf00      	nop
 80807cc:	46bd      	mov	sp, r7
 80807ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807d2:	4770      	bx	lr

080807d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80807d4:	b580      	push	{r7, lr}
 80807d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80807d8:	f000 fa60 	bl	8080c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80807dc:	bf00      	nop
 80807de:	bd80      	pop	{r7, pc}

080807e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80807e0:	b480      	push	{r7}
 80807e2:	af00      	add	r7, sp, #0
  return 1;
 80807e4:	2301      	movs	r3, #1
}
 80807e6:	4618      	mov	r0, r3
 80807e8:	46bd      	mov	sp, r7
 80807ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80807ee:	4770      	bx	lr

080807f0 <_kill>:

int _kill(int pid, int sig)
{
 80807f0:	b480      	push	{r7}
 80807f2:	b083      	sub	sp, #12
 80807f4:	af00      	add	r7, sp, #0
 80807f6:	6078      	str	r0, [r7, #4]
 80807f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80807fa:	4b05      	ldr	r3, [pc, #20]	; (8080810 <_kill+0x20>)
 80807fc:	2216      	movs	r2, #22
 80807fe:	601a      	str	r2, [r3, #0]
  return -1;
 8080800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8080804:	4618      	mov	r0, r3
 8080806:	370c      	adds	r7, #12
 8080808:	46bd      	mov	sp, r7
 808080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808080e:	4770      	bx	lr
 8080810:	20008390 	.word	0x20008390

08080814 <_exit>:

void _exit (int status)
{
 8080814:	b580      	push	{r7, lr}
 8080816:	b082      	sub	sp, #8
 8080818:	af00      	add	r7, sp, #0
 808081a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 808081c:	f04f 31ff 	mov.w	r1, #4294967295
 8080820:	6878      	ldr	r0, [r7, #4]
 8080822:	f7ff ffe5 	bl	80807f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8080826:	e7fe      	b.n	8080826 <_exit+0x12>

08080828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8080828:	b580      	push	{r7, lr}
 808082a:	b086      	sub	sp, #24
 808082c:	af00      	add	r7, sp, #0
 808082e:	60f8      	str	r0, [r7, #12]
 8080830:	60b9      	str	r1, [r7, #8]
 8080832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8080834:	2300      	movs	r3, #0
 8080836:	617b      	str	r3, [r7, #20]
 8080838:	e00a      	b.n	8080850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 808083a:	f3af 8000 	nop.w
 808083e:	4601      	mov	r1, r0
 8080840:	68bb      	ldr	r3, [r7, #8]
 8080842:	1c5a      	adds	r2, r3, #1
 8080844:	60ba      	str	r2, [r7, #8]
 8080846:	b2ca      	uxtb	r2, r1
 8080848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 808084a:	697b      	ldr	r3, [r7, #20]
 808084c:	3301      	adds	r3, #1
 808084e:	617b      	str	r3, [r7, #20]
 8080850:	697a      	ldr	r2, [r7, #20]
 8080852:	687b      	ldr	r3, [r7, #4]
 8080854:	429a      	cmp	r2, r3
 8080856:	dbf0      	blt.n	808083a <_read+0x12>
  }

  return len;
 8080858:	687b      	ldr	r3, [r7, #4]
}
 808085a:	4618      	mov	r0, r3
 808085c:	3718      	adds	r7, #24
 808085e:	46bd      	mov	sp, r7
 8080860:	bd80      	pop	{r7, pc}

08080862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8080862:	b580      	push	{r7, lr}
 8080864:	b086      	sub	sp, #24
 8080866:	af00      	add	r7, sp, #0
 8080868:	60f8      	str	r0, [r7, #12]
 808086a:	60b9      	str	r1, [r7, #8]
 808086c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 808086e:	2300      	movs	r3, #0
 8080870:	617b      	str	r3, [r7, #20]
 8080872:	e009      	b.n	8080888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8080874:	68bb      	ldr	r3, [r7, #8]
 8080876:	1c5a      	adds	r2, r3, #1
 8080878:	60ba      	str	r2, [r7, #8]
 808087a:	781b      	ldrb	r3, [r3, #0]
 808087c:	4618      	mov	r0, r3
 808087e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8080882:	697b      	ldr	r3, [r7, #20]
 8080884:	3301      	adds	r3, #1
 8080886:	617b      	str	r3, [r7, #20]
 8080888:	697a      	ldr	r2, [r7, #20]
 808088a:	687b      	ldr	r3, [r7, #4]
 808088c:	429a      	cmp	r2, r3
 808088e:	dbf1      	blt.n	8080874 <_write+0x12>
  }
  return len;
 8080890:	687b      	ldr	r3, [r7, #4]
}
 8080892:	4618      	mov	r0, r3
 8080894:	3718      	adds	r7, #24
 8080896:	46bd      	mov	sp, r7
 8080898:	bd80      	pop	{r7, pc}

0808089a <_close>:

int _close(int file)
{
 808089a:	b480      	push	{r7}
 808089c:	b083      	sub	sp, #12
 808089e:	af00      	add	r7, sp, #0
 80808a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80808a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80808a6:	4618      	mov	r0, r3
 80808a8:	370c      	adds	r7, #12
 80808aa:	46bd      	mov	sp, r7
 80808ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808b0:	4770      	bx	lr

080808b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80808b2:	b480      	push	{r7}
 80808b4:	b083      	sub	sp, #12
 80808b6:	af00      	add	r7, sp, #0
 80808b8:	6078      	str	r0, [r7, #4]
 80808ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80808bc:	683b      	ldr	r3, [r7, #0]
 80808be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80808c2:	605a      	str	r2, [r3, #4]
  return 0;
 80808c4:	2300      	movs	r3, #0
}
 80808c6:	4618      	mov	r0, r3
 80808c8:	370c      	adds	r7, #12
 80808ca:	46bd      	mov	sp, r7
 80808cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808d0:	4770      	bx	lr

080808d2 <_isatty>:

int _isatty(int file)
{
 80808d2:	b480      	push	{r7}
 80808d4:	b083      	sub	sp, #12
 80808d6:	af00      	add	r7, sp, #0
 80808d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80808da:	2301      	movs	r3, #1
}
 80808dc:	4618      	mov	r0, r3
 80808de:	370c      	adds	r7, #12
 80808e0:	46bd      	mov	sp, r7
 80808e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808e6:	4770      	bx	lr

080808e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80808e8:	b480      	push	{r7}
 80808ea:	b085      	sub	sp, #20
 80808ec:	af00      	add	r7, sp, #0
 80808ee:	60f8      	str	r0, [r7, #12]
 80808f0:	60b9      	str	r1, [r7, #8]
 80808f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80808f4:	2300      	movs	r3, #0
}
 80808f6:	4618      	mov	r0, r3
 80808f8:	3714      	adds	r7, #20
 80808fa:	46bd      	mov	sp, r7
 80808fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080900:	4770      	bx	lr
	...

08080904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8080904:	b480      	push	{r7}
 8080906:	b087      	sub	sp, #28
 8080908:	af00      	add	r7, sp, #0
 808090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 808090c:	4a14      	ldr	r2, [pc, #80]	; (8080960 <_sbrk+0x5c>)
 808090e:	4b15      	ldr	r3, [pc, #84]	; (8080964 <_sbrk+0x60>)
 8080910:	1ad3      	subs	r3, r2, r3
 8080912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8080914:	697b      	ldr	r3, [r7, #20]
 8080916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8080918:	4b13      	ldr	r3, [pc, #76]	; (8080968 <_sbrk+0x64>)
 808091a:	681b      	ldr	r3, [r3, #0]
 808091c:	2b00      	cmp	r3, #0
 808091e:	d102      	bne.n	8080926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8080920:	4b11      	ldr	r3, [pc, #68]	; (8080968 <_sbrk+0x64>)
 8080922:	4a12      	ldr	r2, [pc, #72]	; (808096c <_sbrk+0x68>)
 8080924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8080926:	4b10      	ldr	r3, [pc, #64]	; (8080968 <_sbrk+0x64>)
 8080928:	681a      	ldr	r2, [r3, #0]
 808092a:	687b      	ldr	r3, [r7, #4]
 808092c:	4413      	add	r3, r2
 808092e:	693a      	ldr	r2, [r7, #16]
 8080930:	429a      	cmp	r2, r3
 8080932:	d205      	bcs.n	8080940 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8080934:	4b0e      	ldr	r3, [pc, #56]	; (8080970 <_sbrk+0x6c>)
 8080936:	220c      	movs	r2, #12
 8080938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 808093a:	f04f 33ff 	mov.w	r3, #4294967295
 808093e:	e009      	b.n	8080954 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8080940:	4b09      	ldr	r3, [pc, #36]	; (8080968 <_sbrk+0x64>)
 8080942:	681b      	ldr	r3, [r3, #0]
 8080944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8080946:	4b08      	ldr	r3, [pc, #32]	; (8080968 <_sbrk+0x64>)
 8080948:	681a      	ldr	r2, [r3, #0]
 808094a:	687b      	ldr	r3, [r7, #4]
 808094c:	4413      	add	r3, r2
 808094e:	4a06      	ldr	r2, [pc, #24]	; (8080968 <_sbrk+0x64>)
 8080950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8080952:	68fb      	ldr	r3, [r7, #12]
}
 8080954:	4618      	mov	r0, r3
 8080956:	371c      	adds	r7, #28
 8080958:	46bd      	mov	sp, r7
 808095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808095e:	4770      	bx	lr
 8080960:	20020000 	.word	0x20020000
 8080964:	00000400 	.word	0x00000400
 8080968:	2000009c 	.word	0x2000009c
 808096c:	200083a0 	.word	0x200083a0
 8080970:	20008390 	.word	0x20008390

08080974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8080974:	b480      	push	{r7}
 8080976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8080978:	4b06      	ldr	r3, [pc, #24]	; (8080994 <SystemInit+0x20>)
 808097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808097e:	4a05      	ldr	r2, [pc, #20]	; (8080994 <SystemInit+0x20>)
 8080980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8080984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8080988:	bf00      	nop
 808098a:	46bd      	mov	sp, r7
 808098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080990:	4770      	bx	lr
 8080992:	bf00      	nop
 8080994:	e000ed00 	.word	0xe000ed00

08080998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8080998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80809d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 808099c:	f7ff ffea 	bl	8080974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80809a0:	480c      	ldr	r0, [pc, #48]	; (80809d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80809a2:	490d      	ldr	r1, [pc, #52]	; (80809d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80809a4:	4a0d      	ldr	r2, [pc, #52]	; (80809dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80809a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80809a8:	e002      	b.n	80809b0 <LoopCopyDataInit>

080809aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80809aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80809ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80809ae:	3304      	adds	r3, #4

080809b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80809b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80809b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80809b4:	d3f9      	bcc.n	80809aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80809b6:	4a0a      	ldr	r2, [pc, #40]	; (80809e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80809b8:	4c0a      	ldr	r4, [pc, #40]	; (80809e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80809ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80809bc:	e001      	b.n	80809c2 <LoopFillZerobss>

080809be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80809be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80809c0:	3204      	adds	r2, #4

080809c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80809c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80809c4:	d3fb      	bcc.n	80809be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80809c6:	f00c fa3b 	bl	808ce40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80809ca:	f7ff fe1f 	bl	808060c <main>
  bx  lr    
 80809ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80809d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80809d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80809d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80809dc:	08090bbc 	.word	0x08090bbc
  ldr r2, =_sbss
 80809e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80809e4:	200083a0 	.word	0x200083a0

080809e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80809e8:	e7fe      	b.n	80809e8 <ADC_IRQHandler>

080809ea <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80809ea:	b480      	push	{r7}
 80809ec:	b083      	sub	sp, #12
 80809ee:	af00      	add	r7, sp, #0
 80809f0:	6078      	str	r0, [r7, #4]
 80809f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80809f4:	687b      	ldr	r3, [r7, #4]
 80809f6:	2b00      	cmp	r3, #0
 80809f8:	d00b      	beq.n	8080a12 <DP83848_RegisterBusIO+0x28>
 80809fa:	683b      	ldr	r3, [r7, #0]
 80809fc:	68db      	ldr	r3, [r3, #12]
 80809fe:	2b00      	cmp	r3, #0
 8080a00:	d007      	beq.n	8080a12 <DP83848_RegisterBusIO+0x28>
 8080a02:	683b      	ldr	r3, [r7, #0]
 8080a04:	689b      	ldr	r3, [r3, #8]
 8080a06:	2b00      	cmp	r3, #0
 8080a08:	d003      	beq.n	8080a12 <DP83848_RegisterBusIO+0x28>
 8080a0a:	683b      	ldr	r3, [r7, #0]
 8080a0c:	691b      	ldr	r3, [r3, #16]
 8080a0e:	2b00      	cmp	r3, #0
 8080a10:	d102      	bne.n	8080a18 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8080a12:	f04f 33ff 	mov.w	r3, #4294967295
 8080a16:	e014      	b.n	8080a42 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8080a18:	683b      	ldr	r3, [r7, #0]
 8080a1a:	681a      	ldr	r2, [r3, #0]
 8080a1c:	687b      	ldr	r3, [r7, #4]
 8080a1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8080a20:	683b      	ldr	r3, [r7, #0]
 8080a22:	685a      	ldr	r2, [r3, #4]
 8080a24:	687b      	ldr	r3, [r7, #4]
 8080a26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8080a28:	683b      	ldr	r3, [r7, #0]
 8080a2a:	68da      	ldr	r2, [r3, #12]
 8080a2c:	687b      	ldr	r3, [r7, #4]
 8080a2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8080a30:	683b      	ldr	r3, [r7, #0]
 8080a32:	689a      	ldr	r2, [r3, #8]
 8080a34:	687b      	ldr	r3, [r7, #4]
 8080a36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8080a38:	683b      	ldr	r3, [r7, #0]
 8080a3a:	691a      	ldr	r2, [r3, #16]
 8080a3c:	687b      	ldr	r3, [r7, #4]
 8080a3e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8080a40:	2300      	movs	r3, #0
}
 8080a42:	4618      	mov	r0, r3
 8080a44:	370c      	adds	r7, #12
 8080a46:	46bd      	mov	sp, r7
 8080a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080a4c:	4770      	bx	lr

08080a4e <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8080a4e:	b580      	push	{r7, lr}
 8080a50:	b086      	sub	sp, #24
 8080a52:	af00      	add	r7, sp, #0
 8080a54:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8080a56:	2300      	movs	r3, #0
 8080a58:	60fb      	str	r3, [r7, #12]
 8080a5a:	2300      	movs	r3, #0
 8080a5c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8080a5e:	2300      	movs	r3, #0
 8080a60:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8080a62:	687b      	ldr	r3, [r7, #4]
 8080a64:	685b      	ldr	r3, [r3, #4]
 8080a66:	2b00      	cmp	r3, #0
 8080a68:	d139      	bne.n	8080ade <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8080a6a:	687b      	ldr	r3, [r7, #4]
 8080a6c:	689b      	ldr	r3, [r3, #8]
 8080a6e:	2b00      	cmp	r3, #0
 8080a70:	d002      	beq.n	8080a78 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8080a72:	687b      	ldr	r3, [r7, #4]
 8080a74:	689b      	ldr	r3, [r3, #8]
 8080a76:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8080a78:	687b      	ldr	r3, [r7, #4]
 8080a7a:	2220      	movs	r2, #32
 8080a7c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8080a7e:	2300      	movs	r3, #0
 8080a80:	617b      	str	r3, [r7, #20]
 8080a82:	e01c      	b.n	8080abe <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8080a84:	687b      	ldr	r3, [r7, #4]
 8080a86:	695b      	ldr	r3, [r3, #20]
 8080a88:	f107 020c 	add.w	r2, r7, #12
 8080a8c:	2119      	movs	r1, #25
 8080a8e:	6978      	ldr	r0, [r7, #20]
 8080a90:	4798      	blx	r3
 8080a92:	4603      	mov	r3, r0
 8080a94:	2b00      	cmp	r3, #0
 8080a96:	da03      	bge.n	8080aa0 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 8080a98:	f06f 0304 	mvn.w	r3, #4
 8080a9c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8080a9e:	e00b      	b.n	8080ab8 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8080aa0:	68fb      	ldr	r3, [r7, #12]
 8080aa2:	f003 031f 	and.w	r3, r3, #31
 8080aa6:	697a      	ldr	r2, [r7, #20]
 8080aa8:	429a      	cmp	r2, r3
 8080aaa:	d105      	bne.n	8080ab8 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8080aac:	687b      	ldr	r3, [r7, #4]
 8080aae:	697a      	ldr	r2, [r7, #20]
 8080ab0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8080ab2:	2300      	movs	r3, #0
 8080ab4:	613b      	str	r3, [r7, #16]
         break;
 8080ab6:	e005      	b.n	8080ac4 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8080ab8:	697b      	ldr	r3, [r7, #20]
 8080aba:	3301      	adds	r3, #1
 8080abc:	617b      	str	r3, [r7, #20]
 8080abe:	697b      	ldr	r3, [r7, #20]
 8080ac0:	2b1f      	cmp	r3, #31
 8080ac2:	d9df      	bls.n	8080a84 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8080ac4:	687b      	ldr	r3, [r7, #4]
 8080ac6:	681b      	ldr	r3, [r3, #0]
 8080ac8:	2b1f      	cmp	r3, #31
 8080aca:	d902      	bls.n	8080ad2 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8080acc:	f06f 0302 	mvn.w	r3, #2
 8080ad0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8080ad2:	693b      	ldr	r3, [r7, #16]
 8080ad4:	2b00      	cmp	r3, #0
 8080ad6:	d102      	bne.n	8080ade <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8080ad8:	687b      	ldr	r3, [r7, #4]
 8080ada:	2201      	movs	r2, #1
 8080adc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8080ade:	693b      	ldr	r3, [r7, #16]
 }
 8080ae0:	4618      	mov	r0, r3
 8080ae2:	3718      	adds	r7, #24
 8080ae4:	46bd      	mov	sp, r7
 8080ae6:	bd80      	pop	{r7, pc}

08080ae8 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8080ae8:	b580      	push	{r7, lr}
 8080aea:	b084      	sub	sp, #16
 8080aec:	af00      	add	r7, sp, #0
 8080aee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8080af0:	2300      	movs	r3, #0
 8080af2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8080af4:	687b      	ldr	r3, [r7, #4]
 8080af6:	695b      	ldr	r3, [r3, #20]
 8080af8:	687a      	ldr	r2, [r7, #4]
 8080afa:	6810      	ldr	r0, [r2, #0]
 8080afc:	f107 020c 	add.w	r2, r7, #12
 8080b00:	2101      	movs	r1, #1
 8080b02:	4798      	blx	r3
 8080b04:	4603      	mov	r3, r0
 8080b06:	2b00      	cmp	r3, #0
 8080b08:	da02      	bge.n	8080b10 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8080b0a:	f06f 0304 	mvn.w	r3, #4
 8080b0e:	e06e      	b.n	8080bee <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8080b10:	687b      	ldr	r3, [r7, #4]
 8080b12:	695b      	ldr	r3, [r3, #20]
 8080b14:	687a      	ldr	r2, [r7, #4]
 8080b16:	6810      	ldr	r0, [r2, #0]
 8080b18:	f107 020c 	add.w	r2, r7, #12
 8080b1c:	2101      	movs	r1, #1
 8080b1e:	4798      	blx	r3
 8080b20:	4603      	mov	r3, r0
 8080b22:	2b00      	cmp	r3, #0
 8080b24:	da02      	bge.n	8080b2c <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8080b26:	f06f 0304 	mvn.w	r3, #4
 8080b2a:	e060      	b.n	8080bee <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8080b2c:	68fb      	ldr	r3, [r7, #12]
 8080b2e:	f003 0304 	and.w	r3, r3, #4
 8080b32:	2b00      	cmp	r3, #0
 8080b34:	d101      	bne.n	8080b3a <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8080b36:	2301      	movs	r3, #1
 8080b38:	e059      	b.n	8080bee <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8080b3a:	687b      	ldr	r3, [r7, #4]
 8080b3c:	695b      	ldr	r3, [r3, #20]
 8080b3e:	687a      	ldr	r2, [r7, #4]
 8080b40:	6810      	ldr	r0, [r2, #0]
 8080b42:	f107 020c 	add.w	r2, r7, #12
 8080b46:	2100      	movs	r1, #0
 8080b48:	4798      	blx	r3
 8080b4a:	4603      	mov	r3, r0
 8080b4c:	2b00      	cmp	r3, #0
 8080b4e:	da02      	bge.n	8080b56 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8080b50:	f06f 0304 	mvn.w	r3, #4
 8080b54:	e04b      	b.n	8080bee <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8080b56:	68fb      	ldr	r3, [r7, #12]
 8080b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8080b5c:	2b00      	cmp	r3, #0
 8080b5e:	d11b      	bne.n	8080b98 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8080b60:	68fb      	ldr	r3, [r7, #12]
 8080b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8080b66:	2b00      	cmp	r3, #0
 8080b68:	d006      	beq.n	8080b78 <DP83848_GetLinkState+0x90>
 8080b6a:	68fb      	ldr	r3, [r7, #12]
 8080b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8080b70:	2b00      	cmp	r3, #0
 8080b72:	d001      	beq.n	8080b78 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8080b74:	2302      	movs	r3, #2
 8080b76:	e03a      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8080b78:	68fb      	ldr	r3, [r7, #12]
 8080b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8080b7e:	2b00      	cmp	r3, #0
 8080b80:	d001      	beq.n	8080b86 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8080b82:	2303      	movs	r3, #3
 8080b84:	e033      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8080b86:	68fb      	ldr	r3, [r7, #12]
 8080b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8080b8c:	2b00      	cmp	r3, #0
 8080b8e:	d001      	beq.n	8080b94 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8080b90:	2304      	movs	r3, #4
 8080b92:	e02c      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8080b94:	2305      	movs	r3, #5
 8080b96:	e02a      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8080b98:	687b      	ldr	r3, [r7, #4]
 8080b9a:	695b      	ldr	r3, [r3, #20]
 8080b9c:	687a      	ldr	r2, [r7, #4]
 8080b9e:	6810      	ldr	r0, [r2, #0]
 8080ba0:	f107 020c 	add.w	r2, r7, #12
 8080ba4:	2110      	movs	r1, #16
 8080ba6:	4798      	blx	r3
 8080ba8:	4603      	mov	r3, r0
 8080baa:	2b00      	cmp	r3, #0
 8080bac:	da02      	bge.n	8080bb4 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8080bae:	f06f 0304 	mvn.w	r3, #4
 8080bb2:	e01c      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8080bb4:	68fb      	ldr	r3, [r7, #12]
 8080bb6:	f003 0310 	and.w	r3, r3, #16
 8080bba:	2b00      	cmp	r3, #0
 8080bbc:	d101      	bne.n	8080bc2 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8080bbe:	2306      	movs	r3, #6
 8080bc0:	e015      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8080bc2:	68fb      	ldr	r3, [r7, #12]
 8080bc4:	f003 0306 	and.w	r3, r3, #6
 8080bc8:	2b04      	cmp	r3, #4
 8080bca:	d101      	bne.n	8080bd0 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8080bcc:	2302      	movs	r3, #2
 8080bce:	e00e      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8080bd0:	68fb      	ldr	r3, [r7, #12]
 8080bd2:	f003 0306 	and.w	r3, r3, #6
 8080bd6:	2b00      	cmp	r3, #0
 8080bd8:	d101      	bne.n	8080bde <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8080bda:	2303      	movs	r3, #3
 8080bdc:	e007      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8080bde:	68fb      	ldr	r3, [r7, #12]
 8080be0:	f003 0306 	and.w	r3, r3, #6
 8080be4:	2b06      	cmp	r3, #6
 8080be6:	d101      	bne.n	8080bec <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8080be8:	2304      	movs	r3, #4
 8080bea:	e000      	b.n	8080bee <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8080bec:	2305      	movs	r3, #5
    }
  }
}
 8080bee:	4618      	mov	r0, r3
 8080bf0:	3710      	adds	r7, #16
 8080bf2:	46bd      	mov	sp, r7
 8080bf4:	bd80      	pop	{r7, pc}
	...

08080bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8080bf8:	b580      	push	{r7, lr}
 8080bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8080bfc:	4b0e      	ldr	r3, [pc, #56]	; (8080c38 <HAL_Init+0x40>)
 8080bfe:	681b      	ldr	r3, [r3, #0]
 8080c00:	4a0d      	ldr	r2, [pc, #52]	; (8080c38 <HAL_Init+0x40>)
 8080c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8080c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8080c08:	4b0b      	ldr	r3, [pc, #44]	; (8080c38 <HAL_Init+0x40>)
 8080c0a:	681b      	ldr	r3, [r3, #0]
 8080c0c:	4a0a      	ldr	r2, [pc, #40]	; (8080c38 <HAL_Init+0x40>)
 8080c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8080c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8080c14:	4b08      	ldr	r3, [pc, #32]	; (8080c38 <HAL_Init+0x40>)
 8080c16:	681b      	ldr	r3, [r3, #0]
 8080c18:	4a07      	ldr	r2, [pc, #28]	; (8080c38 <HAL_Init+0x40>)
 8080c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8080c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8080c20:	2003      	movs	r0, #3
 8080c22:	f000 f931 	bl	8080e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8080c26:	200f      	movs	r0, #15
 8080c28:	f000 f808 	bl	8080c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8080c2c:	f7ff fd86 	bl	808073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8080c30:	2300      	movs	r3, #0
}
 8080c32:	4618      	mov	r0, r3
 8080c34:	bd80      	pop	{r7, pc}
 8080c36:	bf00      	nop
 8080c38:	40023c00 	.word	0x40023c00

08080c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8080c3c:	b580      	push	{r7, lr}
 8080c3e:	b082      	sub	sp, #8
 8080c40:	af00      	add	r7, sp, #0
 8080c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8080c44:	4b12      	ldr	r3, [pc, #72]	; (8080c90 <HAL_InitTick+0x54>)
 8080c46:	681a      	ldr	r2, [r3, #0]
 8080c48:	4b12      	ldr	r3, [pc, #72]	; (8080c94 <HAL_InitTick+0x58>)
 8080c4a:	781b      	ldrb	r3, [r3, #0]
 8080c4c:	4619      	mov	r1, r3
 8080c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8080c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8080c5a:	4618      	mov	r0, r3
 8080c5c:	f000 f93b 	bl	8080ed6 <HAL_SYSTICK_Config>
 8080c60:	4603      	mov	r3, r0
 8080c62:	2b00      	cmp	r3, #0
 8080c64:	d001      	beq.n	8080c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8080c66:	2301      	movs	r3, #1
 8080c68:	e00e      	b.n	8080c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8080c6a:	687b      	ldr	r3, [r7, #4]
 8080c6c:	2b0f      	cmp	r3, #15
 8080c6e:	d80a      	bhi.n	8080c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8080c70:	2200      	movs	r2, #0
 8080c72:	6879      	ldr	r1, [r7, #4]
 8080c74:	f04f 30ff 	mov.w	r0, #4294967295
 8080c78:	f000 f911 	bl	8080e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8080c7c:	4a06      	ldr	r2, [pc, #24]	; (8080c98 <HAL_InitTick+0x5c>)
 8080c7e:	687b      	ldr	r3, [r7, #4]
 8080c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8080c82:	2300      	movs	r3, #0
 8080c84:	e000      	b.n	8080c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8080c86:	2301      	movs	r3, #1
}
 8080c88:	4618      	mov	r0, r3
 8080c8a:	3708      	adds	r7, #8
 8080c8c:	46bd      	mov	sp, r7
 8080c8e:	bd80      	pop	{r7, pc}
 8080c90:	20000000 	.word	0x20000000
 8080c94:	20000008 	.word	0x20000008
 8080c98:	20000004 	.word	0x20000004

08080c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8080c9c:	b480      	push	{r7}
 8080c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8080ca0:	4b06      	ldr	r3, [pc, #24]	; (8080cbc <HAL_IncTick+0x20>)
 8080ca2:	781b      	ldrb	r3, [r3, #0]
 8080ca4:	461a      	mov	r2, r3
 8080ca6:	4b06      	ldr	r3, [pc, #24]	; (8080cc0 <HAL_IncTick+0x24>)
 8080ca8:	681b      	ldr	r3, [r3, #0]
 8080caa:	4413      	add	r3, r2
 8080cac:	4a04      	ldr	r2, [pc, #16]	; (8080cc0 <HAL_IncTick+0x24>)
 8080cae:	6013      	str	r3, [r2, #0]
}
 8080cb0:	bf00      	nop
 8080cb2:	46bd      	mov	sp, r7
 8080cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080cb8:	4770      	bx	lr
 8080cba:	bf00      	nop
 8080cbc:	20000008 	.word	0x20000008
 8080cc0:	200000a0 	.word	0x200000a0

08080cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8080cc4:	b480      	push	{r7}
 8080cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8080cc8:	4b03      	ldr	r3, [pc, #12]	; (8080cd8 <HAL_GetTick+0x14>)
 8080cca:	681b      	ldr	r3, [r3, #0]
}
 8080ccc:	4618      	mov	r0, r3
 8080cce:	46bd      	mov	sp, r7
 8080cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080cd4:	4770      	bx	lr
 8080cd6:	bf00      	nop
 8080cd8:	200000a0 	.word	0x200000a0

08080cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8080cdc:	b580      	push	{r7, lr}
 8080cde:	b084      	sub	sp, #16
 8080ce0:	af00      	add	r7, sp, #0
 8080ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8080ce4:	f7ff ffee 	bl	8080cc4 <HAL_GetTick>
 8080ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8080cea:	687b      	ldr	r3, [r7, #4]
 8080cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8080cee:	68fb      	ldr	r3, [r7, #12]
 8080cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8080cf4:	d005      	beq.n	8080d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8080cf6:	4b0a      	ldr	r3, [pc, #40]	; (8080d20 <HAL_Delay+0x44>)
 8080cf8:	781b      	ldrb	r3, [r3, #0]
 8080cfa:	461a      	mov	r2, r3
 8080cfc:	68fb      	ldr	r3, [r7, #12]
 8080cfe:	4413      	add	r3, r2
 8080d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8080d02:	bf00      	nop
 8080d04:	f7ff ffde 	bl	8080cc4 <HAL_GetTick>
 8080d08:	4602      	mov	r2, r0
 8080d0a:	68bb      	ldr	r3, [r7, #8]
 8080d0c:	1ad3      	subs	r3, r2, r3
 8080d0e:	68fa      	ldr	r2, [r7, #12]
 8080d10:	429a      	cmp	r2, r3
 8080d12:	d8f7      	bhi.n	8080d04 <HAL_Delay+0x28>
  {
  }
}
 8080d14:	bf00      	nop
 8080d16:	bf00      	nop
 8080d18:	3710      	adds	r7, #16
 8080d1a:	46bd      	mov	sp, r7
 8080d1c:	bd80      	pop	{r7, pc}
 8080d1e:	bf00      	nop
 8080d20:	20000008 	.word	0x20000008

08080d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8080d24:	b480      	push	{r7}
 8080d26:	b085      	sub	sp, #20
 8080d28:	af00      	add	r7, sp, #0
 8080d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8080d2c:	687b      	ldr	r3, [r7, #4]
 8080d2e:	f003 0307 	and.w	r3, r3, #7
 8080d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8080d34:	4b0c      	ldr	r3, [pc, #48]	; (8080d68 <__NVIC_SetPriorityGrouping+0x44>)
 8080d36:	68db      	ldr	r3, [r3, #12]
 8080d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8080d3a:	68ba      	ldr	r2, [r7, #8]
 8080d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8080d40:	4013      	ands	r3, r2
 8080d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8080d44:	68fb      	ldr	r3, [r7, #12]
 8080d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8080d48:	68bb      	ldr	r3, [r7, #8]
 8080d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8080d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8080d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8080d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8080d56:	4a04      	ldr	r2, [pc, #16]	; (8080d68 <__NVIC_SetPriorityGrouping+0x44>)
 8080d58:	68bb      	ldr	r3, [r7, #8]
 8080d5a:	60d3      	str	r3, [r2, #12]
}
 8080d5c:	bf00      	nop
 8080d5e:	3714      	adds	r7, #20
 8080d60:	46bd      	mov	sp, r7
 8080d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080d66:	4770      	bx	lr
 8080d68:	e000ed00 	.word	0xe000ed00

08080d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8080d6c:	b480      	push	{r7}
 8080d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8080d70:	4b04      	ldr	r3, [pc, #16]	; (8080d84 <__NVIC_GetPriorityGrouping+0x18>)
 8080d72:	68db      	ldr	r3, [r3, #12]
 8080d74:	0a1b      	lsrs	r3, r3, #8
 8080d76:	f003 0307 	and.w	r3, r3, #7
}
 8080d7a:	4618      	mov	r0, r3
 8080d7c:	46bd      	mov	sp, r7
 8080d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080d82:	4770      	bx	lr
 8080d84:	e000ed00 	.word	0xe000ed00

08080d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8080d88:	b480      	push	{r7}
 8080d8a:	b083      	sub	sp, #12
 8080d8c:	af00      	add	r7, sp, #0
 8080d8e:	4603      	mov	r3, r0
 8080d90:	6039      	str	r1, [r7, #0]
 8080d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8080d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080d98:	2b00      	cmp	r3, #0
 8080d9a:	db0a      	blt.n	8080db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080d9c:	683b      	ldr	r3, [r7, #0]
 8080d9e:	b2da      	uxtb	r2, r3
 8080da0:	490c      	ldr	r1, [pc, #48]	; (8080dd4 <__NVIC_SetPriority+0x4c>)
 8080da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080da6:	0112      	lsls	r2, r2, #4
 8080da8:	b2d2      	uxtb	r2, r2
 8080daa:	440b      	add	r3, r1
 8080dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8080db0:	e00a      	b.n	8080dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080db2:	683b      	ldr	r3, [r7, #0]
 8080db4:	b2da      	uxtb	r2, r3
 8080db6:	4908      	ldr	r1, [pc, #32]	; (8080dd8 <__NVIC_SetPriority+0x50>)
 8080db8:	79fb      	ldrb	r3, [r7, #7]
 8080dba:	f003 030f 	and.w	r3, r3, #15
 8080dbe:	3b04      	subs	r3, #4
 8080dc0:	0112      	lsls	r2, r2, #4
 8080dc2:	b2d2      	uxtb	r2, r2
 8080dc4:	440b      	add	r3, r1
 8080dc6:	761a      	strb	r2, [r3, #24]
}
 8080dc8:	bf00      	nop
 8080dca:	370c      	adds	r7, #12
 8080dcc:	46bd      	mov	sp, r7
 8080dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080dd2:	4770      	bx	lr
 8080dd4:	e000e100 	.word	0xe000e100
 8080dd8:	e000ed00 	.word	0xe000ed00

08080ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8080ddc:	b480      	push	{r7}
 8080dde:	b089      	sub	sp, #36	; 0x24
 8080de0:	af00      	add	r7, sp, #0
 8080de2:	60f8      	str	r0, [r7, #12]
 8080de4:	60b9      	str	r1, [r7, #8]
 8080de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8080de8:	68fb      	ldr	r3, [r7, #12]
 8080dea:	f003 0307 	and.w	r3, r3, #7
 8080dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8080df0:	69fb      	ldr	r3, [r7, #28]
 8080df2:	f1c3 0307 	rsb	r3, r3, #7
 8080df6:	2b04      	cmp	r3, #4
 8080df8:	bf28      	it	cs
 8080dfa:	2304      	movcs	r3, #4
 8080dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8080dfe:	69fb      	ldr	r3, [r7, #28]
 8080e00:	3304      	adds	r3, #4
 8080e02:	2b06      	cmp	r3, #6
 8080e04:	d902      	bls.n	8080e0c <NVIC_EncodePriority+0x30>
 8080e06:	69fb      	ldr	r3, [r7, #28]
 8080e08:	3b03      	subs	r3, #3
 8080e0a:	e000      	b.n	8080e0e <NVIC_EncodePriority+0x32>
 8080e0c:	2300      	movs	r3, #0
 8080e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080e10:	f04f 32ff 	mov.w	r2, #4294967295
 8080e14:	69bb      	ldr	r3, [r7, #24]
 8080e16:	fa02 f303 	lsl.w	r3, r2, r3
 8080e1a:	43da      	mvns	r2, r3
 8080e1c:	68bb      	ldr	r3, [r7, #8]
 8080e1e:	401a      	ands	r2, r3
 8080e20:	697b      	ldr	r3, [r7, #20]
 8080e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8080e24:	f04f 31ff 	mov.w	r1, #4294967295
 8080e28:	697b      	ldr	r3, [r7, #20]
 8080e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8080e2e:	43d9      	mvns	r1, r3
 8080e30:	687b      	ldr	r3, [r7, #4]
 8080e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080e34:	4313      	orrs	r3, r2
         );
}
 8080e36:	4618      	mov	r0, r3
 8080e38:	3724      	adds	r7, #36	; 0x24
 8080e3a:	46bd      	mov	sp, r7
 8080e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e40:	4770      	bx	lr
	...

08080e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8080e44:	b580      	push	{r7, lr}
 8080e46:	b082      	sub	sp, #8
 8080e48:	af00      	add	r7, sp, #0
 8080e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8080e4c:	687b      	ldr	r3, [r7, #4]
 8080e4e:	3b01      	subs	r3, #1
 8080e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8080e54:	d301      	bcc.n	8080e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8080e56:	2301      	movs	r3, #1
 8080e58:	e00f      	b.n	8080e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8080e5a:	4a0a      	ldr	r2, [pc, #40]	; (8080e84 <SysTick_Config+0x40>)
 8080e5c:	687b      	ldr	r3, [r7, #4]
 8080e5e:	3b01      	subs	r3, #1
 8080e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8080e62:	210f      	movs	r1, #15
 8080e64:	f04f 30ff 	mov.w	r0, #4294967295
 8080e68:	f7ff ff8e 	bl	8080d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8080e6c:	4b05      	ldr	r3, [pc, #20]	; (8080e84 <SysTick_Config+0x40>)
 8080e6e:	2200      	movs	r2, #0
 8080e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8080e72:	4b04      	ldr	r3, [pc, #16]	; (8080e84 <SysTick_Config+0x40>)
 8080e74:	2207      	movs	r2, #7
 8080e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8080e78:	2300      	movs	r3, #0
}
 8080e7a:	4618      	mov	r0, r3
 8080e7c:	3708      	adds	r7, #8
 8080e7e:	46bd      	mov	sp, r7
 8080e80:	bd80      	pop	{r7, pc}
 8080e82:	bf00      	nop
 8080e84:	e000e010 	.word	0xe000e010

08080e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8080e88:	b580      	push	{r7, lr}
 8080e8a:	b082      	sub	sp, #8
 8080e8c:	af00      	add	r7, sp, #0
 8080e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8080e90:	6878      	ldr	r0, [r7, #4]
 8080e92:	f7ff ff47 	bl	8080d24 <__NVIC_SetPriorityGrouping>
}
 8080e96:	bf00      	nop
 8080e98:	3708      	adds	r7, #8
 8080e9a:	46bd      	mov	sp, r7
 8080e9c:	bd80      	pop	{r7, pc}

08080e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8080e9e:	b580      	push	{r7, lr}
 8080ea0:	b086      	sub	sp, #24
 8080ea2:	af00      	add	r7, sp, #0
 8080ea4:	4603      	mov	r3, r0
 8080ea6:	60b9      	str	r1, [r7, #8]
 8080ea8:	607a      	str	r2, [r7, #4]
 8080eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8080eac:	2300      	movs	r3, #0
 8080eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8080eb0:	f7ff ff5c 	bl	8080d6c <__NVIC_GetPriorityGrouping>
 8080eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8080eb6:	687a      	ldr	r2, [r7, #4]
 8080eb8:	68b9      	ldr	r1, [r7, #8]
 8080eba:	6978      	ldr	r0, [r7, #20]
 8080ebc:	f7ff ff8e 	bl	8080ddc <NVIC_EncodePriority>
 8080ec0:	4602      	mov	r2, r0
 8080ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8080ec6:	4611      	mov	r1, r2
 8080ec8:	4618      	mov	r0, r3
 8080eca:	f7ff ff5d 	bl	8080d88 <__NVIC_SetPriority>
}
 8080ece:	bf00      	nop
 8080ed0:	3718      	adds	r7, #24
 8080ed2:	46bd      	mov	sp, r7
 8080ed4:	bd80      	pop	{r7, pc}

08080ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8080ed6:	b580      	push	{r7, lr}
 8080ed8:	b082      	sub	sp, #8
 8080eda:	af00      	add	r7, sp, #0
 8080edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8080ede:	6878      	ldr	r0, [r7, #4]
 8080ee0:	f7ff ffb0 	bl	8080e44 <SysTick_Config>
 8080ee4:	4603      	mov	r3, r0
}
 8080ee6:	4618      	mov	r0, r3
 8080ee8:	3708      	adds	r7, #8
 8080eea:	46bd      	mov	sp, r7
 8080eec:	bd80      	pop	{r7, pc}
	...

08080ef0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8080ef0:	b580      	push	{r7, lr}
 8080ef2:	b084      	sub	sp, #16
 8080ef4:	af00      	add	r7, sp, #0
 8080ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8080ef8:	687b      	ldr	r3, [r7, #4]
 8080efa:	2b00      	cmp	r3, #0
 8080efc:	d101      	bne.n	8080f02 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8080efe:	2301      	movs	r3, #1
 8080f00:	e08a      	b.n	8081018 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8080f02:	687b      	ldr	r3, [r7, #4]
 8080f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8080f08:	2b00      	cmp	r3, #0
 8080f0a:	d106      	bne.n	8080f1a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8080f0c:	687b      	ldr	r3, [r7, #4]
 8080f0e:	2220      	movs	r2, #32
 8080f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8080f14:	6878      	ldr	r0, [r7, #4]
 8080f16:	f002 f913 	bl	8083140 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8080f1a:	2300      	movs	r3, #0
 8080f1c:	60bb      	str	r3, [r7, #8]
 8080f1e:	4b40      	ldr	r3, [pc, #256]	; (8081020 <HAL_ETH_Init+0x130>)
 8080f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080f22:	4a3f      	ldr	r2, [pc, #252]	; (8081020 <HAL_ETH_Init+0x130>)
 8080f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8080f28:	6453      	str	r3, [r2, #68]	; 0x44
 8080f2a:	4b3d      	ldr	r3, [pc, #244]	; (8081020 <HAL_ETH_Init+0x130>)
 8080f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8080f32:	60bb      	str	r3, [r7, #8]
 8080f34:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8080f36:	4b3b      	ldr	r3, [pc, #236]	; (8081024 <HAL_ETH_Init+0x134>)
 8080f38:	685b      	ldr	r3, [r3, #4]
 8080f3a:	4a3a      	ldr	r2, [pc, #232]	; (8081024 <HAL_ETH_Init+0x134>)
 8080f3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8080f40:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8080f42:	4b38      	ldr	r3, [pc, #224]	; (8081024 <HAL_ETH_Init+0x134>)
 8080f44:	685a      	ldr	r2, [r3, #4]
 8080f46:	687b      	ldr	r3, [r7, #4]
 8080f48:	689b      	ldr	r3, [r3, #8]
 8080f4a:	4936      	ldr	r1, [pc, #216]	; (8081024 <HAL_ETH_Init+0x134>)
 8080f4c:	4313      	orrs	r3, r2
 8080f4e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8080f50:	4b34      	ldr	r3, [pc, #208]	; (8081024 <HAL_ETH_Init+0x134>)
 8080f52:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8080f54:	687b      	ldr	r3, [r7, #4]
 8080f56:	681b      	ldr	r3, [r3, #0]
 8080f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8080f5c:	681b      	ldr	r3, [r3, #0]
 8080f5e:	687a      	ldr	r2, [r7, #4]
 8080f60:	6812      	ldr	r2, [r2, #0]
 8080f62:	f043 0301 	orr.w	r3, r3, #1
 8080f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8080f6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8080f6c:	f7ff feaa 	bl	8080cc4 <HAL_GetTick>
 8080f70:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8080f72:	e011      	b.n	8080f98 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8080f74:	f7ff fea6 	bl	8080cc4 <HAL_GetTick>
 8080f78:	4602      	mov	r2, r0
 8080f7a:	68fb      	ldr	r3, [r7, #12]
 8080f7c:	1ad3      	subs	r3, r2, r3
 8080f7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8080f82:	d909      	bls.n	8080f98 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8080f84:	687b      	ldr	r3, [r7, #4]
 8080f86:	2204      	movs	r2, #4
 8080f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8080f8c:	687b      	ldr	r3, [r7, #4]
 8080f8e:	22e0      	movs	r2, #224	; 0xe0
 8080f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8080f94:	2301      	movs	r3, #1
 8080f96:	e03f      	b.n	8081018 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8080f98:	687b      	ldr	r3, [r7, #4]
 8080f9a:	681b      	ldr	r3, [r3, #0]
 8080f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8080fa0:	681b      	ldr	r3, [r3, #0]
 8080fa2:	f003 0301 	and.w	r3, r3, #1
 8080fa6:	2b00      	cmp	r3, #0
 8080fa8:	d1e4      	bne.n	8080f74 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8080faa:	6878      	ldr	r0, [r7, #4]
 8080fac:	f000 fd58 	bl	8081a60 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8080fb0:	6878      	ldr	r0, [r7, #4]
 8080fb2:	f000 fe03 	bl	8081bbc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8080fb6:	6878      	ldr	r0, [r7, #4]
 8080fb8:	f000 fe59 	bl	8081c6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8080fbc:	687b      	ldr	r3, [r7, #4]
 8080fbe:	685b      	ldr	r3, [r3, #4]
 8080fc0:	461a      	mov	r2, r3
 8080fc2:	2100      	movs	r1, #0
 8080fc4:	6878      	ldr	r0, [r7, #4]
 8080fc6:	f000 fdc1 	bl	8081b4c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8080fca:	687b      	ldr	r3, [r7, #4]
 8080fcc:	681b      	ldr	r3, [r3, #0]
 8080fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8080fd0:	687b      	ldr	r3, [r7, #4]
 8080fd2:	681b      	ldr	r3, [r3, #0]
 8080fd4:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8080fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8080fda:	687b      	ldr	r3, [r7, #4]
 8080fdc:	681b      	ldr	r3, [r3, #0]
 8080fde:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8080fe2:	687a      	ldr	r2, [r7, #4]
 8080fe4:	6812      	ldr	r2, [r2, #0]
 8080fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8080fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8080fee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8080ff2:	687b      	ldr	r3, [r7, #4]
 8080ff4:	681b      	ldr	r3, [r3, #0]
 8080ff6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8080ffa:	687b      	ldr	r3, [r7, #4]
 8080ffc:	681b      	ldr	r3, [r3, #0]
 8080ffe:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8081002:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8081006:	687b      	ldr	r3, [r7, #4]
 8081008:	2200      	movs	r2, #0
 808100a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 808100e:	687b      	ldr	r3, [r7, #4]
 8081010:	2210      	movs	r2, #16
 8081012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8081016:	2300      	movs	r3, #0
}
 8081018:	4618      	mov	r0, r3
 808101a:	3710      	adds	r7, #16
 808101c:	46bd      	mov	sp, r7
 808101e:	bd80      	pop	{r7, pc}
 8081020:	40023800 	.word	0x40023800
 8081024:	40013800 	.word	0x40013800

08081028 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8081028:	b580      	push	{r7, lr}
 808102a:	b084      	sub	sp, #16
 808102c:	af00      	add	r7, sp, #0
 808102e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8081030:	687b      	ldr	r3, [r7, #4]
 8081032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8081036:	2b10      	cmp	r3, #16
 8081038:	d150      	bne.n	80810dc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 808103a:	687b      	ldr	r3, [r7, #4]
 808103c:	2220      	movs	r2, #32
 808103e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8081042:	687b      	ldr	r3, [r7, #4]
 8081044:	2204      	movs	r2, #4
 8081046:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8081048:	6878      	ldr	r0, [r7, #4]
 808104a:	f000 f939 	bl	80812c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 808104e:	687b      	ldr	r3, [r7, #4]
 8081050:	681b      	ldr	r3, [r3, #0]
 8081052:	681a      	ldr	r2, [r3, #0]
 8081054:	687b      	ldr	r3, [r7, #4]
 8081056:	681b      	ldr	r3, [r3, #0]
 8081058:	f042 0208 	orr.w	r2, r2, #8
 808105c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 808105e:	687b      	ldr	r3, [r7, #4]
 8081060:	681b      	ldr	r3, [r3, #0]
 8081062:	681b      	ldr	r3, [r3, #0]
 8081064:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8081066:	2001      	movs	r0, #1
 8081068:	f7ff fe38 	bl	8080cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 808106c:	687b      	ldr	r3, [r7, #4]
 808106e:	681b      	ldr	r3, [r3, #0]
 8081070:	68fa      	ldr	r2, [r7, #12]
 8081072:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8081074:	687b      	ldr	r3, [r7, #4]
 8081076:	681b      	ldr	r3, [r3, #0]
 8081078:	681a      	ldr	r2, [r3, #0]
 808107a:	687b      	ldr	r3, [r7, #4]
 808107c:	681b      	ldr	r3, [r3, #0]
 808107e:	f042 0204 	orr.w	r2, r2, #4
 8081082:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8081084:	687b      	ldr	r3, [r7, #4]
 8081086:	681b      	ldr	r3, [r3, #0]
 8081088:	681b      	ldr	r3, [r3, #0]
 808108a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 808108c:	2001      	movs	r0, #1
 808108e:	f7ff fe25 	bl	8080cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8081092:	687b      	ldr	r3, [r7, #4]
 8081094:	681b      	ldr	r3, [r3, #0]
 8081096:	68fa      	ldr	r2, [r7, #12]
 8081098:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 808109a:	6878      	ldr	r0, [r7, #4]
 808109c:	f000 fb7c 	bl	8081798 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80810a0:	687b      	ldr	r3, [r7, #4]
 80810a2:	681b      	ldr	r3, [r3, #0]
 80810a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80810a8:	699b      	ldr	r3, [r3, #24]
 80810aa:	687a      	ldr	r2, [r7, #4]
 80810ac:	6812      	ldr	r2, [r2, #0]
 80810ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80810b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80810b6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80810b8:	687b      	ldr	r3, [r7, #4]
 80810ba:	681b      	ldr	r3, [r3, #0]
 80810bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80810c0:	699b      	ldr	r3, [r3, #24]
 80810c2:	687a      	ldr	r2, [r7, #4]
 80810c4:	6812      	ldr	r2, [r2, #0]
 80810c6:	f043 0302 	orr.w	r3, r3, #2
 80810ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80810ce:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80810d0:	687b      	ldr	r3, [r7, #4]
 80810d2:	2240      	movs	r2, #64	; 0x40
 80810d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80810d8:	2300      	movs	r3, #0
 80810da:	e000      	b.n	80810de <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80810dc:	2301      	movs	r3, #1
  }
}
 80810de:	4618      	mov	r0, r3
 80810e0:	3710      	adds	r7, #16
 80810e2:	46bd      	mov	sp, r7
 80810e4:	bd80      	pop	{r7, pc}

080810e6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80810e6:	b580      	push	{r7, lr}
 80810e8:	b084      	sub	sp, #16
 80810ea:	af00      	add	r7, sp, #0
 80810ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80810ee:	687b      	ldr	r3, [r7, #4]
 80810f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80810f4:	2b40      	cmp	r3, #64	; 0x40
 80810f6:	d14a      	bne.n	808118e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80810f8:	687b      	ldr	r3, [r7, #4]
 80810fa:	2220      	movs	r2, #32
 80810fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8081100:	687b      	ldr	r3, [r7, #4]
 8081102:	681b      	ldr	r3, [r3, #0]
 8081104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081108:	699b      	ldr	r3, [r3, #24]
 808110a:	687a      	ldr	r2, [r7, #4]
 808110c:	6812      	ldr	r2, [r2, #0]
 808110e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8081112:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8081116:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8081118:	687b      	ldr	r3, [r7, #4]
 808111a:	681b      	ldr	r3, [r3, #0]
 808111c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081120:	699b      	ldr	r3, [r3, #24]
 8081122:	687a      	ldr	r2, [r7, #4]
 8081124:	6812      	ldr	r2, [r2, #0]
 8081126:	f023 0302 	bic.w	r3, r3, #2
 808112a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 808112e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8081130:	687b      	ldr	r3, [r7, #4]
 8081132:	681b      	ldr	r3, [r3, #0]
 8081134:	681a      	ldr	r2, [r3, #0]
 8081136:	687b      	ldr	r3, [r7, #4]
 8081138:	681b      	ldr	r3, [r3, #0]
 808113a:	f022 0204 	bic.w	r2, r2, #4
 808113e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8081140:	687b      	ldr	r3, [r7, #4]
 8081142:	681b      	ldr	r3, [r3, #0]
 8081144:	681b      	ldr	r3, [r3, #0]
 8081146:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8081148:	2001      	movs	r0, #1
 808114a:	f7ff fdc7 	bl	8080cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 808114e:	687b      	ldr	r3, [r7, #4]
 8081150:	681b      	ldr	r3, [r3, #0]
 8081152:	68fa      	ldr	r2, [r7, #12]
 8081154:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8081156:	6878      	ldr	r0, [r7, #4]
 8081158:	f000 fb1e 	bl	8081798 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 808115c:	687b      	ldr	r3, [r7, #4]
 808115e:	681b      	ldr	r3, [r3, #0]
 8081160:	681a      	ldr	r2, [r3, #0]
 8081162:	687b      	ldr	r3, [r7, #4]
 8081164:	681b      	ldr	r3, [r3, #0]
 8081166:	f022 0208 	bic.w	r2, r2, #8
 808116a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 808116c:	687b      	ldr	r3, [r7, #4]
 808116e:	681b      	ldr	r3, [r3, #0]
 8081170:	681b      	ldr	r3, [r3, #0]
 8081172:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8081174:	2001      	movs	r0, #1
 8081176:	f7ff fdb1 	bl	8080cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 808117a:	687b      	ldr	r3, [r7, #4]
 808117c:	681b      	ldr	r3, [r3, #0]
 808117e:	68fa      	ldr	r2, [r7, #12]
 8081180:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8081182:	687b      	ldr	r3, [r7, #4]
 8081184:	2210      	movs	r2, #16
 8081186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 808118a:	2300      	movs	r3, #0
 808118c:	e000      	b.n	8081190 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 808118e:	2301      	movs	r3, #1
  }
}
 8081190:	4618      	mov	r0, r3
 8081192:	3710      	adds	r7, #16
 8081194:	46bd      	mov	sp, r7
 8081196:	bd80      	pop	{r7, pc}

08081198 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8081198:	b580      	push	{r7, lr}
 808119a:	b086      	sub	sp, #24
 808119c:	af00      	add	r7, sp, #0
 808119e:	60f8      	str	r0, [r7, #12]
 80811a0:	60b9      	str	r1, [r7, #8]
 80811a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80811a4:	68bb      	ldr	r3, [r7, #8]
 80811a6:	2b00      	cmp	r3, #0
 80811a8:	d109      	bne.n	80811be <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80811aa:	68fb      	ldr	r3, [r7, #12]
 80811ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80811b0:	f043 0201 	orr.w	r2, r3, #1
 80811b4:	68fb      	ldr	r3, [r7, #12]
 80811b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80811ba:	2301      	movs	r3, #1
 80811bc:	e07c      	b.n	80812b8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80811be:	68fb      	ldr	r3, [r7, #12]
 80811c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80811c4:	2b40      	cmp	r3, #64	; 0x40
 80811c6:	d176      	bne.n	80812b6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80811c8:	2200      	movs	r2, #0
 80811ca:	68b9      	ldr	r1, [r7, #8]
 80811cc:	68f8      	ldr	r0, [r7, #12]
 80811ce:	f000 fdbd 	bl	8081d4c <ETH_Prepare_Tx_Descriptors>
 80811d2:	4603      	mov	r3, r0
 80811d4:	2b00      	cmp	r3, #0
 80811d6:	d009      	beq.n	80811ec <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80811d8:	68fb      	ldr	r3, [r7, #12]
 80811da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80811de:	f043 0202 	orr.w	r2, r3, #2
 80811e2:	68fb      	ldr	r3, [r7, #12]
 80811e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80811e8:	2301      	movs	r3, #1
 80811ea:	e065      	b.n	80812b8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80811ec:	f3bf 8f4f 	dsb	sy
}
 80811f0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80811f2:	68fb      	ldr	r3, [r7, #12]
 80811f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80811f6:	68fb      	ldr	r3, [r7, #12]
 80811f8:	3206      	adds	r2, #6
 80811fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80811fe:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8081200:	68fb      	ldr	r3, [r7, #12]
 8081202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081204:	1c5a      	adds	r2, r3, #1
 8081206:	68fb      	ldr	r3, [r7, #12]
 8081208:	629a      	str	r2, [r3, #40]	; 0x28
 808120a:	68fb      	ldr	r3, [r7, #12]
 808120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808120e:	2b03      	cmp	r3, #3
 8081210:	d904      	bls.n	808121c <HAL_ETH_Transmit+0x84>
 8081212:	68fb      	ldr	r3, [r7, #12]
 8081214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081216:	1f1a      	subs	r2, r3, #4
 8081218:	68fb      	ldr	r3, [r7, #12]
 808121a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 808121c:	68fb      	ldr	r3, [r7, #12]
 808121e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8081220:	68fb      	ldr	r3, [r7, #12]
 8081222:	681a      	ldr	r2, [r3, #0]
 8081224:	68fb      	ldr	r3, [r7, #12]
 8081226:	3106      	adds	r1, #6
 8081228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808122c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8081230:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8081232:	f7ff fd47 	bl	8080cc4 <HAL_GetTick>
 8081236:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8081238:	e037      	b.n	80812aa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 808123a:	68fb      	ldr	r3, [r7, #12]
 808123c:	681b      	ldr	r3, [r3, #0]
 808123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081242:	695b      	ldr	r3, [r3, #20]
 8081244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8081248:	2b00      	cmp	r3, #0
 808124a:	d011      	beq.n	8081270 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 808124c:	68fb      	ldr	r3, [r7, #12]
 808124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8081252:	f043 0208 	orr.w	r2, r3, #8
 8081256:	68fb      	ldr	r3, [r7, #12]
 8081258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 808125c:	68fb      	ldr	r3, [r7, #12]
 808125e:	681b      	ldr	r3, [r3, #0]
 8081260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081264:	695a      	ldr	r2, [r3, #20]
 8081266:	68fb      	ldr	r3, [r7, #12]
 8081268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 808126c:	2301      	movs	r3, #1
 808126e:	e023      	b.n	80812b8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8081270:	687b      	ldr	r3, [r7, #4]
 8081272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8081276:	d018      	beq.n	80812aa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8081278:	f7ff fd24 	bl	8080cc4 <HAL_GetTick>
 808127c:	4602      	mov	r2, r0
 808127e:	693b      	ldr	r3, [r7, #16]
 8081280:	1ad3      	subs	r3, r2, r3
 8081282:	687a      	ldr	r2, [r7, #4]
 8081284:	429a      	cmp	r2, r3
 8081286:	d302      	bcc.n	808128e <HAL_ETH_Transmit+0xf6>
 8081288:	687b      	ldr	r3, [r7, #4]
 808128a:	2b00      	cmp	r3, #0
 808128c:	d10d      	bne.n	80812aa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 808128e:	68fb      	ldr	r3, [r7, #12]
 8081290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8081294:	f043 0204 	orr.w	r2, r3, #4
 8081298:	68fb      	ldr	r3, [r7, #12]
 808129a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 808129e:	697b      	ldr	r3, [r7, #20]
 80812a0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80812a4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80812a6:	2301      	movs	r3, #1
 80812a8:	e006      	b.n	80812b8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80812aa:	697b      	ldr	r3, [r7, #20]
 80812ac:	681b      	ldr	r3, [r3, #0]
 80812ae:	2b00      	cmp	r3, #0
 80812b0:	dbc3      	blt.n	808123a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80812b2:	2300      	movs	r3, #0
 80812b4:	e000      	b.n	80812b8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80812b6:	2301      	movs	r3, #1
  }
}
 80812b8:	4618      	mov	r0, r3
 80812ba:	3718      	adds	r7, #24
 80812bc:	46bd      	mov	sp, r7
 80812be:	bd80      	pop	{r7, pc}

080812c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80812c0:	b580      	push	{r7, lr}
 80812c2:	b088      	sub	sp, #32
 80812c4:	af00      	add	r7, sp, #0
 80812c6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80812c8:	2300      	movs	r3, #0
 80812ca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80812cc:	2301      	movs	r3, #1
 80812ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80812d0:	687b      	ldr	r3, [r7, #4]
 80812d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80812d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80812d6:	687b      	ldr	r3, [r7, #4]
 80812d8:	69fa      	ldr	r2, [r7, #28]
 80812da:	3212      	adds	r2, #18
 80812dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80812e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80812e2:	687b      	ldr	r3, [r7, #4]
 80812e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80812e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80812e8:	e044      	b.n	8081374 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80812ea:	697b      	ldr	r3, [r7, #20]
 80812ec:	6a1b      	ldr	r3, [r3, #32]
 80812ee:	2b00      	cmp	r3, #0
 80812f0:	d112      	bne.n	8081318 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80812f2:	f107 0308 	add.w	r3, r7, #8
 80812f6:	4618      	mov	r0, r3
 80812f8:	f002 f8c2 	bl	8083480 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80812fc:	68bb      	ldr	r3, [r7, #8]
 80812fe:	2b00      	cmp	r3, #0
 8081300:	d102      	bne.n	8081308 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8081302:	2300      	movs	r3, #0
 8081304:	74fb      	strb	r3, [r7, #19]
 8081306:	e007      	b.n	8081318 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8081308:	68bb      	ldr	r3, [r7, #8]
 808130a:	461a      	mov	r2, r3
 808130c:	697b      	ldr	r3, [r7, #20]
 808130e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8081310:	68bb      	ldr	r3, [r7, #8]
 8081312:	461a      	mov	r2, r3
 8081314:	697b      	ldr	r3, [r7, #20]
 8081316:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8081318:	7cfb      	ldrb	r3, [r7, #19]
 808131a:	2b00      	cmp	r3, #0
 808131c:	d02a      	beq.n	8081374 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 808131e:	687b      	ldr	r3, [r7, #4]
 8081320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081322:	2b00      	cmp	r3, #0
 8081324:	d108      	bne.n	8081338 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8081326:	687b      	ldr	r3, [r7, #4]
 8081328:	695b      	ldr	r3, [r3, #20]
 808132a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8081332:	697a      	ldr	r2, [r7, #20]
 8081334:	6053      	str	r3, [r2, #4]
 8081336:	e005      	b.n	8081344 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8081338:	687b      	ldr	r3, [r7, #4]
 808133a:	695b      	ldr	r3, [r3, #20]
 808133c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8081340:	697b      	ldr	r3, [r7, #20]
 8081342:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8081344:	697b      	ldr	r3, [r7, #20]
 8081346:	681b      	ldr	r3, [r3, #0]
 8081348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 808134c:	697b      	ldr	r3, [r7, #20]
 808134e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8081350:	69fb      	ldr	r3, [r7, #28]
 8081352:	3301      	adds	r3, #1
 8081354:	61fb      	str	r3, [r7, #28]
 8081356:	69fb      	ldr	r3, [r7, #28]
 8081358:	2b03      	cmp	r3, #3
 808135a:	d902      	bls.n	8081362 <ETH_UpdateDescriptor+0xa2>
 808135c:	69fb      	ldr	r3, [r7, #28]
 808135e:	3b04      	subs	r3, #4
 8081360:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8081362:	687b      	ldr	r3, [r7, #4]
 8081364:	69fa      	ldr	r2, [r7, #28]
 8081366:	3212      	adds	r2, #18
 8081368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808136c:	617b      	str	r3, [r7, #20]
      desccount--;
 808136e:	69bb      	ldr	r3, [r7, #24]
 8081370:	3b01      	subs	r3, #1
 8081372:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8081374:	69bb      	ldr	r3, [r7, #24]
 8081376:	2b00      	cmp	r3, #0
 8081378:	d002      	beq.n	8081380 <ETH_UpdateDescriptor+0xc0>
 808137a:	7cfb      	ldrb	r3, [r7, #19]
 808137c:	2b00      	cmp	r3, #0
 808137e:	d1b4      	bne.n	80812ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8081380:	687b      	ldr	r3, [r7, #4]
 8081382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081384:	69ba      	ldr	r2, [r7, #24]
 8081386:	429a      	cmp	r2, r3
 8081388:	d01a      	beq.n	80813c0 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 808138a:	69fb      	ldr	r3, [r7, #28]
 808138c:	3303      	adds	r3, #3
 808138e:	f003 0303 	and.w	r3, r3, #3
 8081392:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8081394:	f3bf 8f5f 	dmb	sy
}
 8081398:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 808139a:	687b      	ldr	r3, [r7, #4]
 808139c:	6919      	ldr	r1, [r3, #16]
 808139e:	68fa      	ldr	r2, [r7, #12]
 80813a0:	4613      	mov	r3, r2
 80813a2:	009b      	lsls	r3, r3, #2
 80813a4:	4413      	add	r3, r2
 80813a6:	00db      	lsls	r3, r3, #3
 80813a8:	18ca      	adds	r2, r1, r3
 80813aa:	687b      	ldr	r3, [r7, #4]
 80813ac:	681b      	ldr	r3, [r3, #0]
 80813ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80813b2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80813b4:	687b      	ldr	r3, [r7, #4]
 80813b6:	69fa      	ldr	r2, [r7, #28]
 80813b8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80813ba:	687b      	ldr	r3, [r7, #4]
 80813bc:	69ba      	ldr	r2, [r7, #24]
 80813be:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80813c0:	bf00      	nop
 80813c2:	3720      	adds	r7, #32
 80813c4:	46bd      	mov	sp, r7
 80813c6:	bd80      	pop	{r7, pc}

080813c8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80813c8:	b580      	push	{r7, lr}
 80813ca:	b086      	sub	sp, #24
 80813cc:	af00      	add	r7, sp, #0
 80813ce:	60f8      	str	r0, [r7, #12]
 80813d0:	60b9      	str	r1, [r7, #8]
 80813d2:	607a      	str	r2, [r7, #4]
 80813d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80813d6:	68fb      	ldr	r3, [r7, #12]
 80813d8:	681b      	ldr	r3, [r3, #0]
 80813da:	691b      	ldr	r3, [r3, #16]
 80813dc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80813de:	697b      	ldr	r3, [r7, #20]
 80813e0:	f003 031c 	and.w	r3, r3, #28
 80813e4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80813e6:	68bb      	ldr	r3, [r7, #8]
 80813e8:	02db      	lsls	r3, r3, #11
 80813ea:	b29b      	uxth	r3, r3
 80813ec:	697a      	ldr	r2, [r7, #20]
 80813ee:	4313      	orrs	r3, r2
 80813f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80813f2:	687b      	ldr	r3, [r7, #4]
 80813f4:	019b      	lsls	r3, r3, #6
 80813f6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80813fa:	697a      	ldr	r2, [r7, #20]
 80813fc:	4313      	orrs	r3, r2
 80813fe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8081400:	697b      	ldr	r3, [r7, #20]
 8081402:	f023 0302 	bic.w	r3, r3, #2
 8081406:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8081408:	697b      	ldr	r3, [r7, #20]
 808140a:	f043 0301 	orr.w	r3, r3, #1
 808140e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8081410:	68fb      	ldr	r3, [r7, #12]
 8081412:	681b      	ldr	r3, [r3, #0]
 8081414:	697a      	ldr	r2, [r7, #20]
 8081416:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8081418:	f7ff fc54 	bl	8080cc4 <HAL_GetTick>
 808141c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 808141e:	e00d      	b.n	808143c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8081420:	f7ff fc50 	bl	8080cc4 <HAL_GetTick>
 8081424:	4602      	mov	r2, r0
 8081426:	693b      	ldr	r3, [r7, #16]
 8081428:	1ad3      	subs	r3, r2, r3
 808142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808142e:	d301      	bcc.n	8081434 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8081430:	2301      	movs	r3, #1
 8081432:	e010      	b.n	8081456 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8081434:	68fb      	ldr	r3, [r7, #12]
 8081436:	681b      	ldr	r3, [r3, #0]
 8081438:	691b      	ldr	r3, [r3, #16]
 808143a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 808143c:	697b      	ldr	r3, [r7, #20]
 808143e:	f003 0301 	and.w	r3, r3, #1
 8081442:	2b00      	cmp	r3, #0
 8081444:	d1ec      	bne.n	8081420 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8081446:	68fb      	ldr	r3, [r7, #12]
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	695b      	ldr	r3, [r3, #20]
 808144c:	b29b      	uxth	r3, r3
 808144e:	461a      	mov	r2, r3
 8081450:	683b      	ldr	r3, [r7, #0]
 8081452:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8081454:	2300      	movs	r3, #0
}
 8081456:	4618      	mov	r0, r3
 8081458:	3718      	adds	r7, #24
 808145a:	46bd      	mov	sp, r7
 808145c:	bd80      	pop	{r7, pc}

0808145e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 808145e:	b580      	push	{r7, lr}
 8081460:	b086      	sub	sp, #24
 8081462:	af00      	add	r7, sp, #0
 8081464:	60f8      	str	r0, [r7, #12]
 8081466:	60b9      	str	r1, [r7, #8]
 8081468:	607a      	str	r2, [r7, #4]
 808146a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 808146c:	68fb      	ldr	r3, [r7, #12]
 808146e:	681b      	ldr	r3, [r3, #0]
 8081470:	691b      	ldr	r3, [r3, #16]
 8081472:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8081474:	697b      	ldr	r3, [r7, #20]
 8081476:	f003 031c 	and.w	r3, r3, #28
 808147a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 808147c:	68bb      	ldr	r3, [r7, #8]
 808147e:	02db      	lsls	r3, r3, #11
 8081480:	b29b      	uxth	r3, r3
 8081482:	697a      	ldr	r2, [r7, #20]
 8081484:	4313      	orrs	r3, r2
 8081486:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8081488:	687b      	ldr	r3, [r7, #4]
 808148a:	019b      	lsls	r3, r3, #6
 808148c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8081490:	697a      	ldr	r2, [r7, #20]
 8081492:	4313      	orrs	r3, r2
 8081494:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8081496:	697b      	ldr	r3, [r7, #20]
 8081498:	f043 0302 	orr.w	r3, r3, #2
 808149c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 808149e:	697b      	ldr	r3, [r7, #20]
 80814a0:	f043 0301 	orr.w	r3, r3, #1
 80814a4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80814a6:	683b      	ldr	r3, [r7, #0]
 80814a8:	b29a      	uxth	r2, r3
 80814aa:	68fb      	ldr	r3, [r7, #12]
 80814ac:	681b      	ldr	r3, [r3, #0]
 80814ae:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80814b0:	68fb      	ldr	r3, [r7, #12]
 80814b2:	681b      	ldr	r3, [r3, #0]
 80814b4:	697a      	ldr	r2, [r7, #20]
 80814b6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80814b8:	f7ff fc04 	bl	8080cc4 <HAL_GetTick>
 80814bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80814be:	e00d      	b.n	80814dc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80814c0:	f7ff fc00 	bl	8080cc4 <HAL_GetTick>
 80814c4:	4602      	mov	r2, r0
 80814c6:	693b      	ldr	r3, [r7, #16]
 80814c8:	1ad3      	subs	r3, r2, r3
 80814ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80814ce:	d301      	bcc.n	80814d4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80814d0:	2301      	movs	r3, #1
 80814d2:	e009      	b.n	80814e8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80814d4:	68fb      	ldr	r3, [r7, #12]
 80814d6:	681b      	ldr	r3, [r3, #0]
 80814d8:	691b      	ldr	r3, [r3, #16]
 80814da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80814dc:	697b      	ldr	r3, [r7, #20]
 80814de:	f003 0301 	and.w	r3, r3, #1
 80814e2:	2b00      	cmp	r3, #0
 80814e4:	d1ec      	bne.n	80814c0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80814e6:	2300      	movs	r3, #0
}
 80814e8:	4618      	mov	r0, r3
 80814ea:	3718      	adds	r7, #24
 80814ec:	46bd      	mov	sp, r7
 80814ee:	bd80      	pop	{r7, pc}

080814f0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80814f0:	b480      	push	{r7}
 80814f2:	b083      	sub	sp, #12
 80814f4:	af00      	add	r7, sp, #0
 80814f6:	6078      	str	r0, [r7, #4]
 80814f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80814fa:	683b      	ldr	r3, [r7, #0]
 80814fc:	2b00      	cmp	r3, #0
 80814fe:	d101      	bne.n	8081504 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8081500:	2301      	movs	r3, #1
 8081502:	e0e6      	b.n	80816d2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8081504:	687b      	ldr	r3, [r7, #4]
 8081506:	681b      	ldr	r3, [r3, #0]
 8081508:	681b      	ldr	r3, [r3, #0]
 808150a:	f003 0310 	and.w	r3, r3, #16
 808150e:	2b00      	cmp	r3, #0
 8081510:	bf14      	ite	ne
 8081512:	2301      	movne	r3, #1
 8081514:	2300      	moveq	r3, #0
 8081516:	b2db      	uxtb	r3, r3
 8081518:	461a      	mov	r2, r3
 808151a:	683b      	ldr	r3, [r7, #0]
 808151c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8081520:	687b      	ldr	r3, [r7, #4]
 8081522:	681b      	ldr	r3, [r3, #0]
 8081524:	681b      	ldr	r3, [r3, #0]
 8081526:	f003 0260 	and.w	r2, r3, #96	; 0x60
 808152a:	683b      	ldr	r3, [r7, #0]
 808152c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 808152e:	687b      	ldr	r3, [r7, #4]
 8081530:	681b      	ldr	r3, [r3, #0]
 8081532:	681b      	ldr	r3, [r3, #0]
 8081534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8081538:	2b00      	cmp	r3, #0
 808153a:	bf0c      	ite	eq
 808153c:	2301      	moveq	r3, #1
 808153e:	2300      	movne	r3, #0
 8081540:	b2db      	uxtb	r3, r3
 8081542:	461a      	mov	r2, r3
 8081544:	683b      	ldr	r3, [r7, #0]
 8081546:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 808154a:	687b      	ldr	r3, [r7, #4]
 808154c:	681b      	ldr	r3, [r3, #0]
 808154e:	681b      	ldr	r3, [r3, #0]
 8081550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8081554:	2b00      	cmp	r3, #0
 8081556:	bf14      	ite	ne
 8081558:	2301      	movne	r3, #1
 808155a:	2300      	moveq	r3, #0
 808155c:	b2db      	uxtb	r3, r3
 808155e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8081560:	683b      	ldr	r3, [r7, #0]
 8081562:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8081564:	687b      	ldr	r3, [r7, #4]
 8081566:	681b      	ldr	r3, [r3, #0]
 8081568:	681b      	ldr	r3, [r3, #0]
 808156a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 808156e:	2b00      	cmp	r3, #0
 8081570:	bf0c      	ite	eq
 8081572:	2301      	moveq	r3, #1
 8081574:	2300      	movne	r3, #0
 8081576:	b2db      	uxtb	r3, r3
 8081578:	461a      	mov	r2, r3
 808157a:	683b      	ldr	r3, [r7, #0]
 808157c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 808157e:	687b      	ldr	r3, [r7, #4]
 8081580:	681b      	ldr	r3, [r3, #0]
 8081582:	681b      	ldr	r3, [r3, #0]
 8081584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8081588:	2b00      	cmp	r3, #0
 808158a:	bf14      	ite	ne
 808158c:	2301      	movne	r3, #1
 808158e:	2300      	moveq	r3, #0
 8081590:	b2db      	uxtb	r3, r3
 8081592:	461a      	mov	r2, r3
 8081594:	683b      	ldr	r3, [r7, #0]
 8081596:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8081598:	687b      	ldr	r3, [r7, #4]
 808159a:	681b      	ldr	r3, [r3, #0]
 808159c:	681b      	ldr	r3, [r3, #0]
 808159e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80815a2:	683b      	ldr	r3, [r7, #0]
 80815a4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80815a6:	687b      	ldr	r3, [r7, #4]
 80815a8:	681b      	ldr	r3, [r3, #0]
 80815aa:	681b      	ldr	r3, [r3, #0]
 80815ac:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80815b0:	683b      	ldr	r3, [r7, #0]
 80815b2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80815b4:	687b      	ldr	r3, [r7, #4]
 80815b6:	681b      	ldr	r3, [r3, #0]
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80815be:	2b00      	cmp	r3, #0
 80815c0:	bf0c      	ite	eq
 80815c2:	2301      	moveq	r3, #1
 80815c4:	2300      	movne	r3, #0
 80815c6:	b2db      	uxtb	r3, r3
 80815c8:	461a      	mov	r2, r3
 80815ca:	683b      	ldr	r3, [r7, #0]
 80815cc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80815ce:	687b      	ldr	r3, [r7, #4]
 80815d0:	681b      	ldr	r3, [r3, #0]
 80815d2:	681b      	ldr	r3, [r3, #0]
 80815d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80815d8:	2b00      	cmp	r3, #0
 80815da:	bf0c      	ite	eq
 80815dc:	2301      	moveq	r3, #1
 80815de:	2300      	movne	r3, #0
 80815e0:	b2db      	uxtb	r3, r3
 80815e2:	461a      	mov	r2, r3
 80815e4:	683b      	ldr	r3, [r7, #0]
 80815e6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80815e8:	687b      	ldr	r3, [r7, #4]
 80815ea:	681b      	ldr	r3, [r3, #0]
 80815ec:	681b      	ldr	r3, [r3, #0]
 80815ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80815f2:	2b00      	cmp	r3, #0
 80815f4:	bf14      	ite	ne
 80815f6:	2301      	movne	r3, #1
 80815f8:	2300      	moveq	r3, #0
 80815fa:	b2db      	uxtb	r3, r3
 80815fc:	461a      	mov	r2, r3
 80815fe:	683b      	ldr	r3, [r7, #0]
 8081600:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8081602:	687b      	ldr	r3, [r7, #4]
 8081604:	681b      	ldr	r3, [r3, #0]
 8081606:	681b      	ldr	r3, [r3, #0]
 8081608:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 808160c:	683b      	ldr	r3, [r7, #0]
 808160e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8081610:	687b      	ldr	r3, [r7, #4]
 8081612:	681b      	ldr	r3, [r3, #0]
 8081614:	681b      	ldr	r3, [r3, #0]
 8081616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 808161a:	2b00      	cmp	r3, #0
 808161c:	bf14      	ite	ne
 808161e:	2301      	movne	r3, #1
 8081620:	2300      	moveq	r3, #0
 8081622:	b2db      	uxtb	r3, r3
 8081624:	461a      	mov	r2, r3
 8081626:	683b      	ldr	r3, [r7, #0]
 8081628:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 808162a:	687b      	ldr	r3, [r7, #4]
 808162c:	681b      	ldr	r3, [r3, #0]
 808162e:	681b      	ldr	r3, [r3, #0]
 8081630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8081634:	2b00      	cmp	r3, #0
 8081636:	bf14      	ite	ne
 8081638:	2301      	movne	r3, #1
 808163a:	2300      	moveq	r3, #0
 808163c:	b2db      	uxtb	r3, r3
 808163e:	461a      	mov	r2, r3
 8081640:	683b      	ldr	r3, [r7, #0]
 8081642:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8081644:	687b      	ldr	r3, [r7, #4]
 8081646:	681b      	ldr	r3, [r3, #0]
 8081648:	699b      	ldr	r3, [r3, #24]
 808164a:	f003 0302 	and.w	r3, r3, #2
 808164e:	2b00      	cmp	r3, #0
 8081650:	bf14      	ite	ne
 8081652:	2301      	movne	r3, #1
 8081654:	2300      	moveq	r3, #0
 8081656:	b2db      	uxtb	r3, r3
 8081658:	461a      	mov	r2, r3
 808165a:	683b      	ldr	r3, [r7, #0]
 808165c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8081660:	687b      	ldr	r3, [r7, #4]
 8081662:	681b      	ldr	r3, [r3, #0]
 8081664:	699b      	ldr	r3, [r3, #24]
 8081666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808166a:	2b00      	cmp	r3, #0
 808166c:	bf0c      	ite	eq
 808166e:	2301      	moveq	r3, #1
 8081670:	2300      	movne	r3, #0
 8081672:	b2db      	uxtb	r3, r3
 8081674:	461a      	mov	r2, r3
 8081676:	683b      	ldr	r3, [r7, #0]
 8081678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 808167c:	687b      	ldr	r3, [r7, #4]
 808167e:	681b      	ldr	r3, [r3, #0]
 8081680:	699b      	ldr	r3, [r3, #24]
 8081682:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8081686:	683b      	ldr	r3, [r7, #0]
 8081688:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 808168a:	687b      	ldr	r3, [r7, #4]
 808168c:	681b      	ldr	r3, [r3, #0]
 808168e:	699b      	ldr	r3, [r3, #24]
 8081690:	0c1b      	lsrs	r3, r3, #16
 8081692:	b29a      	uxth	r2, r3
 8081694:	683b      	ldr	r3, [r7, #0]
 8081696:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8081698:	687b      	ldr	r3, [r7, #4]
 808169a:	681b      	ldr	r3, [r3, #0]
 808169c:	699b      	ldr	r3, [r3, #24]
 808169e:	f003 0304 	and.w	r3, r3, #4
 80816a2:	2b00      	cmp	r3, #0
 80816a4:	bf14      	ite	ne
 80816a6:	2301      	movne	r3, #1
 80816a8:	2300      	moveq	r3, #0
 80816aa:	b2db      	uxtb	r3, r3
 80816ac:	461a      	mov	r2, r3
 80816ae:	683b      	ldr	r3, [r7, #0]
 80816b0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80816b4:	687b      	ldr	r3, [r7, #4]
 80816b6:	681b      	ldr	r3, [r3, #0]
 80816b8:	699b      	ldr	r3, [r3, #24]
 80816ba:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80816be:	2b00      	cmp	r3, #0
 80816c0:	bf14      	ite	ne
 80816c2:	2301      	movne	r3, #1
 80816c4:	2300      	moveq	r3, #0
 80816c6:	b2db      	uxtb	r3, r3
 80816c8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80816ca:	683b      	ldr	r3, [r7, #0]
 80816cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80816d0:	2300      	movs	r3, #0
}
 80816d2:	4618      	mov	r0, r3
 80816d4:	370c      	adds	r7, #12
 80816d6:	46bd      	mov	sp, r7
 80816d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80816dc:	4770      	bx	lr

080816de <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80816de:	b580      	push	{r7, lr}
 80816e0:	b082      	sub	sp, #8
 80816e2:	af00      	add	r7, sp, #0
 80816e4:	6078      	str	r0, [r7, #4]
 80816e6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80816e8:	683b      	ldr	r3, [r7, #0]
 80816ea:	2b00      	cmp	r3, #0
 80816ec:	d101      	bne.n	80816f2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80816ee:	2301      	movs	r3, #1
 80816f0:	e00b      	b.n	808170a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80816f2:	687b      	ldr	r3, [r7, #4]
 80816f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80816f8:	2b10      	cmp	r3, #16
 80816fa:	d105      	bne.n	8081708 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80816fc:	6839      	ldr	r1, [r7, #0]
 80816fe:	6878      	ldr	r0, [r7, #4]
 8081700:	f000 f870 	bl	80817e4 <ETH_SetMACConfig>

    return HAL_OK;
 8081704:	2300      	movs	r3, #0
 8081706:	e000      	b.n	808170a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8081708:	2301      	movs	r3, #1
  }
}
 808170a:	4618      	mov	r0, r3
 808170c:	3708      	adds	r7, #8
 808170e:	46bd      	mov	sp, r7
 8081710:	bd80      	pop	{r7, pc}
	...

08081714 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8081714:	b580      	push	{r7, lr}
 8081716:	b084      	sub	sp, #16
 8081718:	af00      	add	r7, sp, #0
 808171a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 808171c:	687b      	ldr	r3, [r7, #4]
 808171e:	681b      	ldr	r3, [r3, #0]
 8081720:	691b      	ldr	r3, [r3, #16]
 8081722:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8081724:	68fb      	ldr	r3, [r7, #12]
 8081726:	f023 031c 	bic.w	r3, r3, #28
 808172a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 808172c:	f001 fa5a 	bl	8082be4 <HAL_RCC_GetHCLKFreq>
 8081730:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8081732:	68bb      	ldr	r3, [r7, #8]
 8081734:	4a14      	ldr	r2, [pc, #80]	; (8081788 <HAL_ETH_SetMDIOClockRange+0x74>)
 8081736:	4293      	cmp	r3, r2
 8081738:	d804      	bhi.n	8081744 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 808173a:	68fb      	ldr	r3, [r7, #12]
 808173c:	f043 0308 	orr.w	r3, r3, #8
 8081740:	60fb      	str	r3, [r7, #12]
 8081742:	e019      	b.n	8081778 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8081744:	68bb      	ldr	r3, [r7, #8]
 8081746:	4a11      	ldr	r2, [pc, #68]	; (808178c <HAL_ETH_SetMDIOClockRange+0x78>)
 8081748:	4293      	cmp	r3, r2
 808174a:	d204      	bcs.n	8081756 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 808174c:	68fb      	ldr	r3, [r7, #12]
 808174e:	f043 030c 	orr.w	r3, r3, #12
 8081752:	60fb      	str	r3, [r7, #12]
 8081754:	e010      	b.n	8081778 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8081756:	68bb      	ldr	r3, [r7, #8]
 8081758:	4a0d      	ldr	r2, [pc, #52]	; (8081790 <HAL_ETH_SetMDIOClockRange+0x7c>)
 808175a:	4293      	cmp	r3, r2
 808175c:	d90c      	bls.n	8081778 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 808175e:	68bb      	ldr	r3, [r7, #8]
 8081760:	4a0c      	ldr	r2, [pc, #48]	; (8081794 <HAL_ETH_SetMDIOClockRange+0x80>)
 8081762:	4293      	cmp	r3, r2
 8081764:	d804      	bhi.n	8081770 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8081766:	68fb      	ldr	r3, [r7, #12]
 8081768:	f043 0304 	orr.w	r3, r3, #4
 808176c:	60fb      	str	r3, [r7, #12]
 808176e:	e003      	b.n	8081778 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8081770:	68fb      	ldr	r3, [r7, #12]
 8081772:	f043 0310 	orr.w	r3, r3, #16
 8081776:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8081778:	687b      	ldr	r3, [r7, #4]
 808177a:	681b      	ldr	r3, [r3, #0]
 808177c:	68fa      	ldr	r2, [r7, #12]
 808177e:	611a      	str	r2, [r3, #16]
}
 8081780:	bf00      	nop
 8081782:	3710      	adds	r7, #16
 8081784:	46bd      	mov	sp, r7
 8081786:	bd80      	pop	{r7, pc}
 8081788:	02160ebf 	.word	0x02160ebf
 808178c:	03938700 	.word	0x03938700
 8081790:	05f5e0ff 	.word	0x05f5e0ff
 8081794:	08f0d17f 	.word	0x08f0d17f

08081798 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8081798:	b580      	push	{r7, lr}
 808179a:	b084      	sub	sp, #16
 808179c:	af00      	add	r7, sp, #0
 808179e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80817a0:	2300      	movs	r3, #0
 80817a2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80817a4:	687b      	ldr	r3, [r7, #4]
 80817a6:	681b      	ldr	r3, [r3, #0]
 80817a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80817ac:	699b      	ldr	r3, [r3, #24]
 80817ae:	687a      	ldr	r2, [r7, #4]
 80817b0:	6812      	ldr	r2, [r2, #0]
 80817b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80817b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80817ba:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80817bc:	687b      	ldr	r3, [r7, #4]
 80817be:	681b      	ldr	r3, [r3, #0]
 80817c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80817c4:	699b      	ldr	r3, [r3, #24]
 80817c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80817c8:	2001      	movs	r0, #1
 80817ca:	f7ff fa87 	bl	8080cdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80817ce:	687b      	ldr	r3, [r7, #4]
 80817d0:	681a      	ldr	r2, [r3, #0]
 80817d2:	68fb      	ldr	r3, [r7, #12]
 80817d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80817d8:	6193      	str	r3, [r2, #24]
}
 80817da:	bf00      	nop
 80817dc:	3710      	adds	r7, #16
 80817de:	46bd      	mov	sp, r7
 80817e0:	bd80      	pop	{r7, pc}
	...

080817e4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80817e4:	b580      	push	{r7, lr}
 80817e6:	b084      	sub	sp, #16
 80817e8:	af00      	add	r7, sp, #0
 80817ea:	6078      	str	r0, [r7, #4]
 80817ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80817ee:	687b      	ldr	r3, [r7, #4]
 80817f0:	681b      	ldr	r3, [r3, #0]
 80817f2:	681b      	ldr	r3, [r3, #0]
 80817f4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80817f6:	68fa      	ldr	r2, [r7, #12]
 80817f8:	4b53      	ldr	r3, [pc, #332]	; (8081948 <ETH_SetMACConfig+0x164>)
 80817fa:	4013      	ands	r3, r2
 80817fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80817fe:	683b      	ldr	r3, [r7, #0]
 8081800:	7b9b      	ldrb	r3, [r3, #14]
 8081802:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8081804:	683a      	ldr	r2, [r7, #0]
 8081806:	7c12      	ldrb	r2, [r2, #16]
 8081808:	2a00      	cmp	r2, #0
 808180a:	d102      	bne.n	8081812 <ETH_SetMACConfig+0x2e>
 808180c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8081810:	e000      	b.n	8081814 <ETH_SetMACConfig+0x30>
 8081812:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8081814:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8081816:	683a      	ldr	r2, [r7, #0]
 8081818:	7c52      	ldrb	r2, [r2, #17]
 808181a:	2a00      	cmp	r2, #0
 808181c:	d102      	bne.n	8081824 <ETH_SetMACConfig+0x40>
 808181e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8081822:	e000      	b.n	8081826 <ETH_SetMACConfig+0x42>
 8081824:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8081826:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8081828:	683b      	ldr	r3, [r7, #0]
 808182a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 808182c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 808182e:	683b      	ldr	r3, [r7, #0]
 8081830:	7fdb      	ldrb	r3, [r3, #31]
 8081832:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8081834:	431a      	orrs	r2, r3
                        macconf->Speed |
 8081836:	683b      	ldr	r3, [r7, #0]
 8081838:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 808183a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 808183c:	683a      	ldr	r2, [r7, #0]
 808183e:	7f92      	ldrb	r2, [r2, #30]
 8081840:	2a00      	cmp	r2, #0
 8081842:	d102      	bne.n	808184a <ETH_SetMACConfig+0x66>
 8081844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8081848:	e000      	b.n	808184c <ETH_SetMACConfig+0x68>
 808184a:	2200      	movs	r2, #0
                        macconf->Speed |
 808184c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 808184e:	683b      	ldr	r3, [r7, #0]
 8081850:	7f1b      	ldrb	r3, [r3, #28]
 8081852:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8081854:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8081856:	683b      	ldr	r3, [r7, #0]
 8081858:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 808185a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 808185c:	683b      	ldr	r3, [r7, #0]
 808185e:	791b      	ldrb	r3, [r3, #4]
 8081860:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8081862:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8081864:	683a      	ldr	r2, [r7, #0]
 8081866:	f892 2020 	ldrb.w	r2, [r2, #32]
 808186a:	2a00      	cmp	r2, #0
 808186c:	d102      	bne.n	8081874 <ETH_SetMACConfig+0x90>
 808186e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081872:	e000      	b.n	8081876 <ETH_SetMACConfig+0x92>
 8081874:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8081876:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8081878:	683b      	ldr	r3, [r7, #0]
 808187a:	7bdb      	ldrb	r3, [r3, #15]
 808187c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 808187e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8081880:	683b      	ldr	r3, [r7, #0]
 8081882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8081884:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8081886:	683b      	ldr	r3, [r7, #0]
 8081888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 808188c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 808188e:	4313      	orrs	r3, r2
 8081890:	68fa      	ldr	r2, [r7, #12]
 8081892:	4313      	orrs	r3, r2
 8081894:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8081896:	687b      	ldr	r3, [r7, #4]
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	68fa      	ldr	r2, [r7, #12]
 808189c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 808189e:	687b      	ldr	r3, [r7, #4]
 80818a0:	681b      	ldr	r3, [r3, #0]
 80818a2:	681b      	ldr	r3, [r3, #0]
 80818a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80818a6:	2001      	movs	r0, #1
 80818a8:	f7ff fa18 	bl	8080cdc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80818ac:	687b      	ldr	r3, [r7, #4]
 80818ae:	681b      	ldr	r3, [r3, #0]
 80818b0:	68fa      	ldr	r2, [r7, #12]
 80818b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80818b4:	687b      	ldr	r3, [r7, #4]
 80818b6:	681b      	ldr	r3, [r3, #0]
 80818b8:	699b      	ldr	r3, [r3, #24]
 80818ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80818bc:	68fa      	ldr	r2, [r7, #12]
 80818be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80818c2:	4013      	ands	r3, r2
 80818c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80818c6:	683b      	ldr	r3, [r7, #0]
 80818c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80818ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80818cc:	683a      	ldr	r2, [r7, #0]
 80818ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80818d2:	2a00      	cmp	r2, #0
 80818d4:	d101      	bne.n	80818da <ETH_SetMACConfig+0xf6>
 80818d6:	2280      	movs	r2, #128	; 0x80
 80818d8:	e000      	b.n	80818dc <ETH_SetMACConfig+0xf8>
 80818da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80818dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80818de:	683b      	ldr	r3, [r7, #0]
 80818e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80818e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80818e4:	683a      	ldr	r2, [r7, #0]
 80818e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80818ea:	2a01      	cmp	r2, #1
 80818ec:	d101      	bne.n	80818f2 <ETH_SetMACConfig+0x10e>
 80818ee:	2208      	movs	r2, #8
 80818f0:	e000      	b.n	80818f4 <ETH_SetMACConfig+0x110>
 80818f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80818f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80818f6:	683a      	ldr	r2, [r7, #0]
 80818f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80818fc:	2a01      	cmp	r2, #1
 80818fe:	d101      	bne.n	8081904 <ETH_SetMACConfig+0x120>
 8081900:	2204      	movs	r2, #4
 8081902:	e000      	b.n	8081906 <ETH_SetMACConfig+0x122>
 8081904:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8081906:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8081908:	683a      	ldr	r2, [r7, #0]
 808190a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 808190e:	2a01      	cmp	r2, #1
 8081910:	d101      	bne.n	8081916 <ETH_SetMACConfig+0x132>
 8081912:	2202      	movs	r2, #2
 8081914:	e000      	b.n	8081918 <ETH_SetMACConfig+0x134>
 8081916:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8081918:	4313      	orrs	r3, r2
 808191a:	68fa      	ldr	r2, [r7, #12]
 808191c:	4313      	orrs	r3, r2
 808191e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8081920:	687b      	ldr	r3, [r7, #4]
 8081922:	681b      	ldr	r3, [r3, #0]
 8081924:	68fa      	ldr	r2, [r7, #12]
 8081926:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8081928:	687b      	ldr	r3, [r7, #4]
 808192a:	681b      	ldr	r3, [r3, #0]
 808192c:	699b      	ldr	r3, [r3, #24]
 808192e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8081930:	2001      	movs	r0, #1
 8081932:	f7ff f9d3 	bl	8080cdc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8081936:	687b      	ldr	r3, [r7, #4]
 8081938:	681b      	ldr	r3, [r3, #0]
 808193a:	68fa      	ldr	r2, [r7, #12]
 808193c:	619a      	str	r2, [r3, #24]
}
 808193e:	bf00      	nop
 8081940:	3710      	adds	r7, #16
 8081942:	46bd      	mov	sp, r7
 8081944:	bd80      	pop	{r7, pc}
 8081946:	bf00      	nop
 8081948:	fd20810f 	.word	0xfd20810f

0808194c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 808194c:	b580      	push	{r7, lr}
 808194e:	b084      	sub	sp, #16
 8081950:	af00      	add	r7, sp, #0
 8081952:	6078      	str	r0, [r7, #4]
 8081954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8081956:	687b      	ldr	r3, [r7, #4]
 8081958:	681b      	ldr	r3, [r3, #0]
 808195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 808195e:	699b      	ldr	r3, [r3, #24]
 8081960:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8081962:	68fa      	ldr	r2, [r7, #12]
 8081964:	4b3d      	ldr	r3, [pc, #244]	; (8081a5c <ETH_SetDMAConfig+0x110>)
 8081966:	4013      	ands	r3, r2
 8081968:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 808196a:	683b      	ldr	r3, [r7, #0]
 808196c:	7b1b      	ldrb	r3, [r3, #12]
 808196e:	2b00      	cmp	r3, #0
 8081970:	d102      	bne.n	8081978 <ETH_SetDMAConfig+0x2c>
 8081972:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8081976:	e000      	b.n	808197a <ETH_SetDMAConfig+0x2e>
 8081978:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 808197a:	683b      	ldr	r3, [r7, #0]
 808197c:	7b5b      	ldrb	r3, [r3, #13]
 808197e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8081980:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8081982:	683a      	ldr	r2, [r7, #0]
 8081984:	7f52      	ldrb	r2, [r2, #29]
 8081986:	2a00      	cmp	r2, #0
 8081988:	d102      	bne.n	8081990 <ETH_SetDMAConfig+0x44>
 808198a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 808198e:	e000      	b.n	8081992 <ETH_SetDMAConfig+0x46>
 8081990:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8081992:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8081994:	683b      	ldr	r3, [r7, #0]
 8081996:	7b9b      	ldrb	r3, [r3, #14]
 8081998:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 808199a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 808199c:	683b      	ldr	r3, [r7, #0]
 808199e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80819a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80819a2:	683b      	ldr	r3, [r7, #0]
 80819a4:	7f1b      	ldrb	r3, [r3, #28]
 80819a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80819a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80819aa:	683b      	ldr	r3, [r7, #0]
 80819ac:	7f9b      	ldrb	r3, [r3, #30]
 80819ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80819b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80819b2:	683b      	ldr	r3, [r7, #0]
 80819b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80819b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80819b8:	683b      	ldr	r3, [r7, #0]
 80819ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80819be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80819c0:	4313      	orrs	r3, r2
 80819c2:	68fa      	ldr	r2, [r7, #12]
 80819c4:	4313      	orrs	r3, r2
 80819c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80819c8:	687b      	ldr	r3, [r7, #4]
 80819ca:	681b      	ldr	r3, [r3, #0]
 80819cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80819d0:	461a      	mov	r2, r3
 80819d2:	68fb      	ldr	r3, [r7, #12]
 80819d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80819d6:	687b      	ldr	r3, [r7, #4]
 80819d8:	681b      	ldr	r3, [r3, #0]
 80819da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80819de:	699b      	ldr	r3, [r3, #24]
 80819e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80819e2:	2001      	movs	r0, #1
 80819e4:	f7ff f97a 	bl	8080cdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80819e8:	687b      	ldr	r3, [r7, #4]
 80819ea:	681b      	ldr	r3, [r3, #0]
 80819ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80819f0:	461a      	mov	r2, r3
 80819f2:	68fb      	ldr	r3, [r7, #12]
 80819f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80819f6:	683b      	ldr	r3, [r7, #0]
 80819f8:	791b      	ldrb	r3, [r3, #4]
 80819fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80819fc:	683b      	ldr	r3, [r7, #0]
 80819fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8081a00:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8081a02:	683b      	ldr	r3, [r7, #0]
 8081a04:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8081a06:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8081a08:	683b      	ldr	r3, [r7, #0]
 8081a0a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8081a0c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8081a0e:	683b      	ldr	r3, [r7, #0]
 8081a10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8081a14:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8081a16:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8081a18:	683b      	ldr	r3, [r7, #0]
 8081a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081a1c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8081a1e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8081a20:	683b      	ldr	r3, [r7, #0]
 8081a22:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8081a24:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8081a26:	687a      	ldr	r2, [r7, #4]
 8081a28:	6812      	ldr	r2, [r2, #0]
 8081a2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8081a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8081a32:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8081a34:	687b      	ldr	r3, [r7, #4]
 8081a36:	681b      	ldr	r3, [r3, #0]
 8081a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081a3c:	681b      	ldr	r3, [r3, #0]
 8081a3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8081a40:	2001      	movs	r0, #1
 8081a42:	f7ff f94b 	bl	8080cdc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8081a46:	687b      	ldr	r3, [r7, #4]
 8081a48:	681b      	ldr	r3, [r3, #0]
 8081a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081a4e:	461a      	mov	r2, r3
 8081a50:	68fb      	ldr	r3, [r7, #12]
 8081a52:	6013      	str	r3, [r2, #0]
}
 8081a54:	bf00      	nop
 8081a56:	3710      	adds	r7, #16
 8081a58:	46bd      	mov	sp, r7
 8081a5a:	bd80      	pop	{r7, pc}
 8081a5c:	f8de3f23 	.word	0xf8de3f23

08081a60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8081a60:	b580      	push	{r7, lr}
 8081a62:	b0a6      	sub	sp, #152	; 0x98
 8081a64:	af00      	add	r7, sp, #0
 8081a66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8081a68:	2301      	movs	r3, #1
 8081a6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8081a6e:	2301      	movs	r3, #1
 8081a70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8081a74:	2300      	movs	r3, #0
 8081a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8081a78:	2300      	movs	r3, #0
 8081a7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8081a7e:	2301      	movs	r3, #1
 8081a80:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8081a84:	2300      	movs	r3, #0
 8081a86:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8081a8a:	2301      	movs	r3, #1
 8081a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8081a90:	2301      	movs	r3, #1
 8081a92:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8081a96:	2300      	movs	r3, #0
 8081a98:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8081a9c:	2300      	movs	r3, #0
 8081a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8081aa2:	2300      	movs	r3, #0
 8081aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8081aa6:	2300      	movs	r3, #0
 8081aa8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8081aac:	2300      	movs	r3, #0
 8081aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8081ab0:	2300      	movs	r3, #0
 8081ab2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8081ab6:	2300      	movs	r3, #0
 8081ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8081abc:	2300      	movs	r3, #0
 8081abe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8081ac2:	2300      	movs	r3, #0
 8081ac4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8081ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8081acc:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8081ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8081ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8081ad4:	2300      	movs	r3, #0
 8081ad6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8081ada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8081ade:	4619      	mov	r1, r3
 8081ae0:	6878      	ldr	r0, [r7, #4]
 8081ae2:	f7ff fe7f 	bl	80817e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8081ae6:	2301      	movs	r3, #1
 8081ae8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8081aea:	2301      	movs	r3, #1
 8081aec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8081aee:	2301      	movs	r3, #1
 8081af0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8081af4:	2301      	movs	r3, #1
 8081af6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8081af8:	2300      	movs	r3, #0
 8081afa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8081afc:	2300      	movs	r3, #0
 8081afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8081b02:	2300      	movs	r3, #0
 8081b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8081b08:	2300      	movs	r3, #0
 8081b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8081b0c:	2301      	movs	r3, #1
 8081b0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8081b12:	2301      	movs	r3, #1
 8081b14:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8081b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8081b1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8081b1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8081b20:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8081b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8081b26:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8081b28:	2301      	movs	r3, #1
 8081b2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8081b2e:	2300      	movs	r3, #0
 8081b30:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8081b32:	2300      	movs	r3, #0
 8081b34:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8081b36:	f107 0308 	add.w	r3, r7, #8
 8081b3a:	4619      	mov	r1, r3
 8081b3c:	6878      	ldr	r0, [r7, #4]
 8081b3e:	f7ff ff05 	bl	808194c <ETH_SetDMAConfig>
}
 8081b42:	bf00      	nop
 8081b44:	3798      	adds	r7, #152	; 0x98
 8081b46:	46bd      	mov	sp, r7
 8081b48:	bd80      	pop	{r7, pc}
	...

08081b4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8081b4c:	b480      	push	{r7}
 8081b4e:	b087      	sub	sp, #28
 8081b50:	af00      	add	r7, sp, #0
 8081b52:	60f8      	str	r0, [r7, #12]
 8081b54:	60b9      	str	r1, [r7, #8]
 8081b56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8081b58:	687b      	ldr	r3, [r7, #4]
 8081b5a:	3305      	adds	r3, #5
 8081b5c:	781b      	ldrb	r3, [r3, #0]
 8081b5e:	021b      	lsls	r3, r3, #8
 8081b60:	687a      	ldr	r2, [r7, #4]
 8081b62:	3204      	adds	r2, #4
 8081b64:	7812      	ldrb	r2, [r2, #0]
 8081b66:	4313      	orrs	r3, r2
 8081b68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8081b6a:	68ba      	ldr	r2, [r7, #8]
 8081b6c:	4b11      	ldr	r3, [pc, #68]	; (8081bb4 <ETH_MACAddressConfig+0x68>)
 8081b6e:	4413      	add	r3, r2
 8081b70:	461a      	mov	r2, r3
 8081b72:	697b      	ldr	r3, [r7, #20]
 8081b74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8081b76:	687b      	ldr	r3, [r7, #4]
 8081b78:	3303      	adds	r3, #3
 8081b7a:	781b      	ldrb	r3, [r3, #0]
 8081b7c:	061a      	lsls	r2, r3, #24
 8081b7e:	687b      	ldr	r3, [r7, #4]
 8081b80:	3302      	adds	r3, #2
 8081b82:	781b      	ldrb	r3, [r3, #0]
 8081b84:	041b      	lsls	r3, r3, #16
 8081b86:	431a      	orrs	r2, r3
 8081b88:	687b      	ldr	r3, [r7, #4]
 8081b8a:	3301      	adds	r3, #1
 8081b8c:	781b      	ldrb	r3, [r3, #0]
 8081b8e:	021b      	lsls	r3, r3, #8
 8081b90:	4313      	orrs	r3, r2
 8081b92:	687a      	ldr	r2, [r7, #4]
 8081b94:	7812      	ldrb	r2, [r2, #0]
 8081b96:	4313      	orrs	r3, r2
 8081b98:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8081b9a:	68ba      	ldr	r2, [r7, #8]
 8081b9c:	4b06      	ldr	r3, [pc, #24]	; (8081bb8 <ETH_MACAddressConfig+0x6c>)
 8081b9e:	4413      	add	r3, r2
 8081ba0:	461a      	mov	r2, r3
 8081ba2:	697b      	ldr	r3, [r7, #20]
 8081ba4:	6013      	str	r3, [r2, #0]
}
 8081ba6:	bf00      	nop
 8081ba8:	371c      	adds	r7, #28
 8081baa:	46bd      	mov	sp, r7
 8081bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081bb0:	4770      	bx	lr
 8081bb2:	bf00      	nop
 8081bb4:	40028040 	.word	0x40028040
 8081bb8:	40028044 	.word	0x40028044

08081bbc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8081bbc:	b480      	push	{r7}
 8081bbe:	b085      	sub	sp, #20
 8081bc0:	af00      	add	r7, sp, #0
 8081bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8081bc4:	2300      	movs	r3, #0
 8081bc6:	60fb      	str	r3, [r7, #12]
 8081bc8:	e03e      	b.n	8081c48 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8081bca:	687b      	ldr	r3, [r7, #4]
 8081bcc:	68d9      	ldr	r1, [r3, #12]
 8081bce:	68fa      	ldr	r2, [r7, #12]
 8081bd0:	4613      	mov	r3, r2
 8081bd2:	009b      	lsls	r3, r3, #2
 8081bd4:	4413      	add	r3, r2
 8081bd6:	00db      	lsls	r3, r3, #3
 8081bd8:	440b      	add	r3, r1
 8081bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8081bdc:	68bb      	ldr	r3, [r7, #8]
 8081bde:	2200      	movs	r2, #0
 8081be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8081be2:	68bb      	ldr	r3, [r7, #8]
 8081be4:	2200      	movs	r2, #0
 8081be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8081be8:	68bb      	ldr	r3, [r7, #8]
 8081bea:	2200      	movs	r2, #0
 8081bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8081bee:	68bb      	ldr	r3, [r7, #8]
 8081bf0:	2200      	movs	r2, #0
 8081bf2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8081bf4:	68b9      	ldr	r1, [r7, #8]
 8081bf6:	687b      	ldr	r3, [r7, #4]
 8081bf8:	68fa      	ldr	r2, [r7, #12]
 8081bfa:	3206      	adds	r2, #6
 8081bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8081c00:	68bb      	ldr	r3, [r7, #8]
 8081c02:	681b      	ldr	r3, [r3, #0]
 8081c04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8081c08:	68bb      	ldr	r3, [r7, #8]
 8081c0a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8081c0c:	68fb      	ldr	r3, [r7, #12]
 8081c0e:	2b02      	cmp	r3, #2
 8081c10:	d80c      	bhi.n	8081c2c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8081c12:	687b      	ldr	r3, [r7, #4]
 8081c14:	68d9      	ldr	r1, [r3, #12]
 8081c16:	68fb      	ldr	r3, [r7, #12]
 8081c18:	1c5a      	adds	r2, r3, #1
 8081c1a:	4613      	mov	r3, r2
 8081c1c:	009b      	lsls	r3, r3, #2
 8081c1e:	4413      	add	r3, r2
 8081c20:	00db      	lsls	r3, r3, #3
 8081c22:	440b      	add	r3, r1
 8081c24:	461a      	mov	r2, r3
 8081c26:	68bb      	ldr	r3, [r7, #8]
 8081c28:	60da      	str	r2, [r3, #12]
 8081c2a:	e004      	b.n	8081c36 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8081c2c:	687b      	ldr	r3, [r7, #4]
 8081c2e:	68db      	ldr	r3, [r3, #12]
 8081c30:	461a      	mov	r2, r3
 8081c32:	68bb      	ldr	r3, [r7, #8]
 8081c34:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8081c36:	68bb      	ldr	r3, [r7, #8]
 8081c38:	681b      	ldr	r3, [r3, #0]
 8081c3a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8081c3e:	68bb      	ldr	r3, [r7, #8]
 8081c40:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8081c42:	68fb      	ldr	r3, [r7, #12]
 8081c44:	3301      	adds	r3, #1
 8081c46:	60fb      	str	r3, [r7, #12]
 8081c48:	68fb      	ldr	r3, [r7, #12]
 8081c4a:	2b03      	cmp	r3, #3
 8081c4c:	d9bd      	bls.n	8081bca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8081c4e:	687b      	ldr	r3, [r7, #4]
 8081c50:	2200      	movs	r2, #0
 8081c52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8081c54:	687b      	ldr	r3, [r7, #4]
 8081c56:	68da      	ldr	r2, [r3, #12]
 8081c58:	687b      	ldr	r3, [r7, #4]
 8081c5a:	681b      	ldr	r3, [r3, #0]
 8081c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081c60:	611a      	str	r2, [r3, #16]
}
 8081c62:	bf00      	nop
 8081c64:	3714      	adds	r7, #20
 8081c66:	46bd      	mov	sp, r7
 8081c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081c6c:	4770      	bx	lr

08081c6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8081c6e:	b480      	push	{r7}
 8081c70:	b085      	sub	sp, #20
 8081c72:	af00      	add	r7, sp, #0
 8081c74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8081c76:	2300      	movs	r3, #0
 8081c78:	60fb      	str	r3, [r7, #12]
 8081c7a:	e048      	b.n	8081d0e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8081c7c:	687b      	ldr	r3, [r7, #4]
 8081c7e:	6919      	ldr	r1, [r3, #16]
 8081c80:	68fa      	ldr	r2, [r7, #12]
 8081c82:	4613      	mov	r3, r2
 8081c84:	009b      	lsls	r3, r3, #2
 8081c86:	4413      	add	r3, r2
 8081c88:	00db      	lsls	r3, r3, #3
 8081c8a:	440b      	add	r3, r1
 8081c8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8081c8e:	68bb      	ldr	r3, [r7, #8]
 8081c90:	2200      	movs	r2, #0
 8081c92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8081c94:	68bb      	ldr	r3, [r7, #8]
 8081c96:	2200      	movs	r2, #0
 8081c98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8081c9a:	68bb      	ldr	r3, [r7, #8]
 8081c9c:	2200      	movs	r2, #0
 8081c9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8081ca0:	68bb      	ldr	r3, [r7, #8]
 8081ca2:	2200      	movs	r2, #0
 8081ca4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8081ca6:	68bb      	ldr	r3, [r7, #8]
 8081ca8:	2200      	movs	r2, #0
 8081caa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8081cac:	68bb      	ldr	r3, [r7, #8]
 8081cae:	2200      	movs	r2, #0
 8081cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8081cb2:	68bb      	ldr	r3, [r7, #8]
 8081cb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8081cb8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8081cba:	687b      	ldr	r3, [r7, #4]
 8081cbc:	695b      	ldr	r3, [r3, #20]
 8081cbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8081cc2:	68bb      	ldr	r3, [r7, #8]
 8081cc4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8081cc6:	68bb      	ldr	r3, [r7, #8]
 8081cc8:	685b      	ldr	r3, [r3, #4]
 8081cca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8081cce:	68bb      	ldr	r3, [r7, #8]
 8081cd0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8081cd2:	68b9      	ldr	r1, [r7, #8]
 8081cd4:	687b      	ldr	r3, [r7, #4]
 8081cd6:	68fa      	ldr	r2, [r7, #12]
 8081cd8:	3212      	adds	r2, #18
 8081cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8081cde:	68fb      	ldr	r3, [r7, #12]
 8081ce0:	2b02      	cmp	r3, #2
 8081ce2:	d80c      	bhi.n	8081cfe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8081ce4:	687b      	ldr	r3, [r7, #4]
 8081ce6:	6919      	ldr	r1, [r3, #16]
 8081ce8:	68fb      	ldr	r3, [r7, #12]
 8081cea:	1c5a      	adds	r2, r3, #1
 8081cec:	4613      	mov	r3, r2
 8081cee:	009b      	lsls	r3, r3, #2
 8081cf0:	4413      	add	r3, r2
 8081cf2:	00db      	lsls	r3, r3, #3
 8081cf4:	440b      	add	r3, r1
 8081cf6:	461a      	mov	r2, r3
 8081cf8:	68bb      	ldr	r3, [r7, #8]
 8081cfa:	60da      	str	r2, [r3, #12]
 8081cfc:	e004      	b.n	8081d08 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8081cfe:	687b      	ldr	r3, [r7, #4]
 8081d00:	691b      	ldr	r3, [r3, #16]
 8081d02:	461a      	mov	r2, r3
 8081d04:	68bb      	ldr	r3, [r7, #8]
 8081d06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8081d08:	68fb      	ldr	r3, [r7, #12]
 8081d0a:	3301      	adds	r3, #1
 8081d0c:	60fb      	str	r3, [r7, #12]
 8081d0e:	68fb      	ldr	r3, [r7, #12]
 8081d10:	2b03      	cmp	r3, #3
 8081d12:	d9b3      	bls.n	8081c7c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8081d14:	687b      	ldr	r3, [r7, #4]
 8081d16:	2200      	movs	r2, #0
 8081d18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8081d1a:	687b      	ldr	r3, [r7, #4]
 8081d1c:	2200      	movs	r2, #0
 8081d1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8081d20:	687b      	ldr	r3, [r7, #4]
 8081d22:	2200      	movs	r2, #0
 8081d24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8081d26:	687b      	ldr	r3, [r7, #4]
 8081d28:	2200      	movs	r2, #0
 8081d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8081d2c:	687b      	ldr	r3, [r7, #4]
 8081d2e:	2200      	movs	r2, #0
 8081d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8081d32:	687b      	ldr	r3, [r7, #4]
 8081d34:	691a      	ldr	r2, [r3, #16]
 8081d36:	687b      	ldr	r3, [r7, #4]
 8081d38:	681b      	ldr	r3, [r3, #0]
 8081d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8081d3e:	60da      	str	r2, [r3, #12]
}
 8081d40:	bf00      	nop
 8081d42:	3714      	adds	r7, #20
 8081d44:	46bd      	mov	sp, r7
 8081d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081d4a:	4770      	bx	lr

08081d4c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8081d4c:	b480      	push	{r7}
 8081d4e:	b091      	sub	sp, #68	; 0x44
 8081d50:	af00      	add	r7, sp, #0
 8081d52:	60f8      	str	r0, [r7, #12]
 8081d54:	60b9      	str	r1, [r7, #8]
 8081d56:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8081d58:	68fb      	ldr	r3, [r7, #12]
 8081d5a:	3318      	adds	r3, #24
 8081d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8081d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d60:	691b      	ldr	r3, [r3, #16]
 8081d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8081d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d66:	691b      	ldr	r3, [r3, #16]
 8081d68:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8081d6a:	2300      	movs	r3, #0
 8081d6c:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8081d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8081d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8081d76:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8081d78:	68bb      	ldr	r3, [r7, #8]
 8081d7a:	689b      	ldr	r3, [r3, #8]
 8081d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8081d7e:	2300      	movs	r3, #0
 8081d80:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8081d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081d84:	681b      	ldr	r3, [r3, #0]
 8081d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8081d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8081d8e:	d007      	beq.n	8081da0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8081d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8081d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081d94:	3304      	adds	r3, #4
 8081d96:	009b      	lsls	r3, r3, #2
 8081d98:	4413      	add	r3, r2
 8081d9a:	685b      	ldr	r3, [r3, #4]
 8081d9c:	2b00      	cmp	r3, #0
 8081d9e:	d001      	beq.n	8081da4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8081da0:	2302      	movs	r3, #2
 8081da2:	e115      	b.n	8081fd0 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8081da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8081da6:	3301      	adds	r3, #1
 8081da8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8081daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8081dac:	681b      	ldr	r3, [r3, #0]
 8081dae:	461a      	mov	r2, r3
 8081db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081db2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8081db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081db6:	685b      	ldr	r3, [r3, #4]
 8081db8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8081dbc:	f023 031f 	bic.w	r3, r3, #31
 8081dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8081dc2:	6852      	ldr	r2, [r2, #4]
 8081dc4:	431a      	orrs	r2, r3
 8081dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081dc8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8081dca:	68bb      	ldr	r3, [r7, #8]
 8081dcc:	681b      	ldr	r3, [r3, #0]
 8081dce:	f003 0301 	and.w	r3, r3, #1
 8081dd2:	2b00      	cmp	r3, #0
 8081dd4:	d008      	beq.n	8081de8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8081dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081dd8:	681b      	ldr	r3, [r3, #0]
 8081dda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8081dde:	68bb      	ldr	r3, [r7, #8]
 8081de0:	695b      	ldr	r3, [r3, #20]
 8081de2:	431a      	orrs	r2, r3
 8081de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081de6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8081de8:	68bb      	ldr	r3, [r7, #8]
 8081dea:	681b      	ldr	r3, [r3, #0]
 8081dec:	f003 0320 	and.w	r3, r3, #32
 8081df0:	2b00      	cmp	r3, #0
 8081df2:	d008      	beq.n	8081e06 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8081df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081df6:	681b      	ldr	r3, [r3, #0]
 8081df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8081dfc:	68bb      	ldr	r3, [r7, #8]
 8081dfe:	691b      	ldr	r3, [r3, #16]
 8081e00:	431a      	orrs	r2, r3
 8081e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e04:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8081e06:	68bb      	ldr	r3, [r7, #8]
 8081e08:	681b      	ldr	r3, [r3, #0]
 8081e0a:	f003 0304 	and.w	r3, r3, #4
 8081e0e:	2b00      	cmp	r3, #0
 8081e10:	d005      	beq.n	8081e1e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8081e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8081e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e1c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8081e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e20:	681b      	ldr	r3, [r3, #0]
 8081e22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8081e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e28:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8081e2a:	e084      	b.n	8081f36 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8081e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e2e:	681b      	ldr	r3, [r3, #0]
 8081e30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8081e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e36:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8081e38:	687b      	ldr	r3, [r7, #4]
 8081e3a:	2b00      	cmp	r3, #0
 8081e3c:	d006      	beq.n	8081e4c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8081e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e40:	681b      	ldr	r3, [r3, #0]
 8081e42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8081e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e48:	601a      	str	r2, [r3, #0]
 8081e4a:	e005      	b.n	8081e58 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8081e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e4e:	681b      	ldr	r3, [r3, #0]
 8081e50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8081e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e56:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8081e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081e5a:	3301      	adds	r3, #1
 8081e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8081e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081e60:	2b03      	cmp	r3, #3
 8081e62:	d902      	bls.n	8081e6a <ETH_Prepare_Tx_Descriptors+0x11e>
 8081e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081e66:	3b04      	subs	r3, #4
 8081e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8081e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8081e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8081e72:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8081e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081e76:	681b      	ldr	r3, [r3, #0]
 8081e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8081e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8081e80:	d007      	beq.n	8081e92 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8081e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8081e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081e86:	3304      	adds	r3, #4
 8081e88:	009b      	lsls	r3, r3, #2
 8081e8a:	4413      	add	r3, r2
 8081e8c:	685b      	ldr	r3, [r3, #4]
 8081e8e:	2b00      	cmp	r3, #0
 8081e90:	d029      	beq.n	8081ee6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8081e92:	6a3b      	ldr	r3, [r7, #32]
 8081e94:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8081e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8081e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8081e9e:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8081ea0:	2300      	movs	r3, #0
 8081ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8081ea4:	e019      	b.n	8081eda <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8081ea6:	f3bf 8f5f 	dmb	sy
}
 8081eaa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8081eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081eae:	681b      	ldr	r3, [r3, #0]
 8081eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8081eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081eb6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8081eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081eba:	3301      	adds	r3, #1
 8081ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8081ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081ec0:	2b03      	cmp	r3, #3
 8081ec2:	d902      	bls.n	8081eca <ETH_Prepare_Tx_Descriptors+0x17e>
 8081ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081ec6:	3b04      	subs	r3, #4
 8081ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8081eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8081ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8081ed2:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8081ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8081ed6:	3301      	adds	r3, #1
 8081ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8081eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8081edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8081ede:	429a      	cmp	r2, r3
 8081ee0:	d3e1      	bcc.n	8081ea6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8081ee2:	2302      	movs	r3, #2
 8081ee4:	e074      	b.n	8081fd0 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8081ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081ee8:	681b      	ldr	r3, [r3, #0]
 8081eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8081eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081ef0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8081ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8081ef4:	3301      	adds	r3, #1
 8081ef6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8081ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8081efa:	689b      	ldr	r3, [r3, #8]
 8081efc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8081efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8081f00:	681b      	ldr	r3, [r3, #0]
 8081f02:	461a      	mov	r2, r3
 8081f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f06:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8081f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f0a:	685b      	ldr	r3, [r3, #4]
 8081f0c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8081f10:	f023 031f 	bic.w	r3, r3, #31
 8081f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8081f16:	6852      	ldr	r2, [r2, #4]
 8081f18:	431a      	orrs	r2, r3
 8081f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f1c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8081f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8081f20:	3301      	adds	r3, #1
 8081f22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8081f24:	f3bf 8f5f 	dmb	sy
}
 8081f28:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8081f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f2c:	681b      	ldr	r3, [r3, #0]
 8081f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8081f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f34:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8081f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8081f38:	689b      	ldr	r3, [r3, #8]
 8081f3a:	2b00      	cmp	r3, #0
 8081f3c:	f47f af76 	bne.w	8081e2c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8081f40:	687b      	ldr	r3, [r7, #4]
 8081f42:	2b00      	cmp	r3, #0
 8081f44:	d006      	beq.n	8081f54 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8081f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f48:	681b      	ldr	r3, [r3, #0]
 8081f4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8081f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f50:	601a      	str	r2, [r3, #0]
 8081f52:	e005      	b.n	8081f60 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8081f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f56:	681b      	ldr	r3, [r3, #0]
 8081f58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8081f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f5e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8081f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f62:	681b      	ldr	r3, [r3, #0]
 8081f64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8081f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f6a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8081f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081f6e:	6a3a      	ldr	r2, [r7, #32]
 8081f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8081f74:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8081f76:	f3bf 8f5f 	dmb	sy
}
 8081f7a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8081f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f7e:	681b      	ldr	r3, [r3, #0]
 8081f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8081f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8081f86:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8081f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8081f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8081f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8081f90:	3304      	adds	r3, #4
 8081f92:	009b      	lsls	r3, r3, #2
 8081f94:	440b      	add	r3, r1
 8081f96:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8081f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8081f9c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8081f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8081fa2:	613b      	str	r3, [r7, #16]
  return(result);
 8081fa4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8081fa6:	61fb      	str	r3, [r7, #28]
 8081fa8:	2301      	movs	r3, #1
 8081faa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8081fac:	697b      	ldr	r3, [r7, #20]
 8081fae:	f383 8810 	msr	PRIMASK, r3
}
 8081fb2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8081fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8081fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8081fba:	4413      	add	r3, r2
 8081fbc:	1c5a      	adds	r2, r3, #1
 8081fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081fc0:	629a      	str	r2, [r3, #40]	; 0x28
 8081fc2:	69fb      	ldr	r3, [r7, #28]
 8081fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8081fc6:	69bb      	ldr	r3, [r7, #24]
 8081fc8:	f383 8810 	msr	PRIMASK, r3
}
 8081fcc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8081fce:	2300      	movs	r3, #0
}
 8081fd0:	4618      	mov	r0, r3
 8081fd2:	3744      	adds	r7, #68	; 0x44
 8081fd4:	46bd      	mov	sp, r7
 8081fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081fda:	4770      	bx	lr

08081fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8081fdc:	b480      	push	{r7}
 8081fde:	b089      	sub	sp, #36	; 0x24
 8081fe0:	af00      	add	r7, sp, #0
 8081fe2:	6078      	str	r0, [r7, #4]
 8081fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8081fe6:	2300      	movs	r3, #0
 8081fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8081fea:	2300      	movs	r3, #0
 8081fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8081fee:	2300      	movs	r3, #0
 8081ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8081ff2:	2300      	movs	r3, #0
 8081ff4:	61fb      	str	r3, [r7, #28]
 8081ff6:	e16b      	b.n	80822d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8081ff8:	2201      	movs	r2, #1
 8081ffa:	69fb      	ldr	r3, [r7, #28]
 8081ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8082000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8082002:	683b      	ldr	r3, [r7, #0]
 8082004:	681b      	ldr	r3, [r3, #0]
 8082006:	697a      	ldr	r2, [r7, #20]
 8082008:	4013      	ands	r3, r2
 808200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 808200c:	693a      	ldr	r2, [r7, #16]
 808200e:	697b      	ldr	r3, [r7, #20]
 8082010:	429a      	cmp	r2, r3
 8082012:	f040 815a 	bne.w	80822ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8082016:	683b      	ldr	r3, [r7, #0]
 8082018:	685b      	ldr	r3, [r3, #4]
 808201a:	f003 0303 	and.w	r3, r3, #3
 808201e:	2b01      	cmp	r3, #1
 8082020:	d005      	beq.n	808202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8082022:	683b      	ldr	r3, [r7, #0]
 8082024:	685b      	ldr	r3, [r3, #4]
 8082026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 808202a:	2b02      	cmp	r3, #2
 808202c:	d130      	bne.n	8082090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 808202e:	687b      	ldr	r3, [r7, #4]
 8082030:	689b      	ldr	r3, [r3, #8]
 8082032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8082034:	69fb      	ldr	r3, [r7, #28]
 8082036:	005b      	lsls	r3, r3, #1
 8082038:	2203      	movs	r2, #3
 808203a:	fa02 f303 	lsl.w	r3, r2, r3
 808203e:	43db      	mvns	r3, r3
 8082040:	69ba      	ldr	r2, [r7, #24]
 8082042:	4013      	ands	r3, r2
 8082044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8082046:	683b      	ldr	r3, [r7, #0]
 8082048:	68da      	ldr	r2, [r3, #12]
 808204a:	69fb      	ldr	r3, [r7, #28]
 808204c:	005b      	lsls	r3, r3, #1
 808204e:	fa02 f303 	lsl.w	r3, r2, r3
 8082052:	69ba      	ldr	r2, [r7, #24]
 8082054:	4313      	orrs	r3, r2
 8082056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8082058:	687b      	ldr	r3, [r7, #4]
 808205a:	69ba      	ldr	r2, [r7, #24]
 808205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 808205e:	687b      	ldr	r3, [r7, #4]
 8082060:	685b      	ldr	r3, [r3, #4]
 8082062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8082064:	2201      	movs	r2, #1
 8082066:	69fb      	ldr	r3, [r7, #28]
 8082068:	fa02 f303 	lsl.w	r3, r2, r3
 808206c:	43db      	mvns	r3, r3
 808206e:	69ba      	ldr	r2, [r7, #24]
 8082070:	4013      	ands	r3, r2
 8082072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8082074:	683b      	ldr	r3, [r7, #0]
 8082076:	685b      	ldr	r3, [r3, #4]
 8082078:	091b      	lsrs	r3, r3, #4
 808207a:	f003 0201 	and.w	r2, r3, #1
 808207e:	69fb      	ldr	r3, [r7, #28]
 8082080:	fa02 f303 	lsl.w	r3, r2, r3
 8082084:	69ba      	ldr	r2, [r7, #24]
 8082086:	4313      	orrs	r3, r2
 8082088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 808208a:	687b      	ldr	r3, [r7, #4]
 808208c:	69ba      	ldr	r2, [r7, #24]
 808208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8082090:	683b      	ldr	r3, [r7, #0]
 8082092:	685b      	ldr	r3, [r3, #4]
 8082094:	f003 0303 	and.w	r3, r3, #3
 8082098:	2b03      	cmp	r3, #3
 808209a:	d017      	beq.n	80820cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 808209c:	687b      	ldr	r3, [r7, #4]
 808209e:	68db      	ldr	r3, [r3, #12]
 80820a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80820a2:	69fb      	ldr	r3, [r7, #28]
 80820a4:	005b      	lsls	r3, r3, #1
 80820a6:	2203      	movs	r2, #3
 80820a8:	fa02 f303 	lsl.w	r3, r2, r3
 80820ac:	43db      	mvns	r3, r3
 80820ae:	69ba      	ldr	r2, [r7, #24]
 80820b0:	4013      	ands	r3, r2
 80820b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80820b4:	683b      	ldr	r3, [r7, #0]
 80820b6:	689a      	ldr	r2, [r3, #8]
 80820b8:	69fb      	ldr	r3, [r7, #28]
 80820ba:	005b      	lsls	r3, r3, #1
 80820bc:	fa02 f303 	lsl.w	r3, r2, r3
 80820c0:	69ba      	ldr	r2, [r7, #24]
 80820c2:	4313      	orrs	r3, r2
 80820c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80820c6:	687b      	ldr	r3, [r7, #4]
 80820c8:	69ba      	ldr	r2, [r7, #24]
 80820ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80820cc:	683b      	ldr	r3, [r7, #0]
 80820ce:	685b      	ldr	r3, [r3, #4]
 80820d0:	f003 0303 	and.w	r3, r3, #3
 80820d4:	2b02      	cmp	r3, #2
 80820d6:	d123      	bne.n	8082120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80820d8:	69fb      	ldr	r3, [r7, #28]
 80820da:	08da      	lsrs	r2, r3, #3
 80820dc:	687b      	ldr	r3, [r7, #4]
 80820de:	3208      	adds	r2, #8
 80820e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80820e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80820e6:	69fb      	ldr	r3, [r7, #28]
 80820e8:	f003 0307 	and.w	r3, r3, #7
 80820ec:	009b      	lsls	r3, r3, #2
 80820ee:	220f      	movs	r2, #15
 80820f0:	fa02 f303 	lsl.w	r3, r2, r3
 80820f4:	43db      	mvns	r3, r3
 80820f6:	69ba      	ldr	r2, [r7, #24]
 80820f8:	4013      	ands	r3, r2
 80820fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80820fc:	683b      	ldr	r3, [r7, #0]
 80820fe:	691a      	ldr	r2, [r3, #16]
 8082100:	69fb      	ldr	r3, [r7, #28]
 8082102:	f003 0307 	and.w	r3, r3, #7
 8082106:	009b      	lsls	r3, r3, #2
 8082108:	fa02 f303 	lsl.w	r3, r2, r3
 808210c:	69ba      	ldr	r2, [r7, #24]
 808210e:	4313      	orrs	r3, r2
 8082110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8082112:	69fb      	ldr	r3, [r7, #28]
 8082114:	08da      	lsrs	r2, r3, #3
 8082116:	687b      	ldr	r3, [r7, #4]
 8082118:	3208      	adds	r2, #8
 808211a:	69b9      	ldr	r1, [r7, #24]
 808211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8082120:	687b      	ldr	r3, [r7, #4]
 8082122:	681b      	ldr	r3, [r3, #0]
 8082124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8082126:	69fb      	ldr	r3, [r7, #28]
 8082128:	005b      	lsls	r3, r3, #1
 808212a:	2203      	movs	r2, #3
 808212c:	fa02 f303 	lsl.w	r3, r2, r3
 8082130:	43db      	mvns	r3, r3
 8082132:	69ba      	ldr	r2, [r7, #24]
 8082134:	4013      	ands	r3, r2
 8082136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8082138:	683b      	ldr	r3, [r7, #0]
 808213a:	685b      	ldr	r3, [r3, #4]
 808213c:	f003 0203 	and.w	r2, r3, #3
 8082140:	69fb      	ldr	r3, [r7, #28]
 8082142:	005b      	lsls	r3, r3, #1
 8082144:	fa02 f303 	lsl.w	r3, r2, r3
 8082148:	69ba      	ldr	r2, [r7, #24]
 808214a:	4313      	orrs	r3, r2
 808214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 808214e:	687b      	ldr	r3, [r7, #4]
 8082150:	69ba      	ldr	r2, [r7, #24]
 8082152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8082154:	683b      	ldr	r3, [r7, #0]
 8082156:	685b      	ldr	r3, [r3, #4]
 8082158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 808215c:	2b00      	cmp	r3, #0
 808215e:	f000 80b4 	beq.w	80822ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8082162:	2300      	movs	r3, #0
 8082164:	60fb      	str	r3, [r7, #12]
 8082166:	4b60      	ldr	r3, [pc, #384]	; (80822e8 <HAL_GPIO_Init+0x30c>)
 8082168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808216a:	4a5f      	ldr	r2, [pc, #380]	; (80822e8 <HAL_GPIO_Init+0x30c>)
 808216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8082170:	6453      	str	r3, [r2, #68]	; 0x44
 8082172:	4b5d      	ldr	r3, [pc, #372]	; (80822e8 <HAL_GPIO_Init+0x30c>)
 8082174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808217a:	60fb      	str	r3, [r7, #12]
 808217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 808217e:	4a5b      	ldr	r2, [pc, #364]	; (80822ec <HAL_GPIO_Init+0x310>)
 8082180:	69fb      	ldr	r3, [r7, #28]
 8082182:	089b      	lsrs	r3, r3, #2
 8082184:	3302      	adds	r3, #2
 8082186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 808218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 808218c:	69fb      	ldr	r3, [r7, #28]
 808218e:	f003 0303 	and.w	r3, r3, #3
 8082192:	009b      	lsls	r3, r3, #2
 8082194:	220f      	movs	r2, #15
 8082196:	fa02 f303 	lsl.w	r3, r2, r3
 808219a:	43db      	mvns	r3, r3
 808219c:	69ba      	ldr	r2, [r7, #24]
 808219e:	4013      	ands	r3, r2
 80821a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80821a2:	687b      	ldr	r3, [r7, #4]
 80821a4:	4a52      	ldr	r2, [pc, #328]	; (80822f0 <HAL_GPIO_Init+0x314>)
 80821a6:	4293      	cmp	r3, r2
 80821a8:	d02b      	beq.n	8082202 <HAL_GPIO_Init+0x226>
 80821aa:	687b      	ldr	r3, [r7, #4]
 80821ac:	4a51      	ldr	r2, [pc, #324]	; (80822f4 <HAL_GPIO_Init+0x318>)
 80821ae:	4293      	cmp	r3, r2
 80821b0:	d025      	beq.n	80821fe <HAL_GPIO_Init+0x222>
 80821b2:	687b      	ldr	r3, [r7, #4]
 80821b4:	4a50      	ldr	r2, [pc, #320]	; (80822f8 <HAL_GPIO_Init+0x31c>)
 80821b6:	4293      	cmp	r3, r2
 80821b8:	d01f      	beq.n	80821fa <HAL_GPIO_Init+0x21e>
 80821ba:	687b      	ldr	r3, [r7, #4]
 80821bc:	4a4f      	ldr	r2, [pc, #316]	; (80822fc <HAL_GPIO_Init+0x320>)
 80821be:	4293      	cmp	r3, r2
 80821c0:	d019      	beq.n	80821f6 <HAL_GPIO_Init+0x21a>
 80821c2:	687b      	ldr	r3, [r7, #4]
 80821c4:	4a4e      	ldr	r2, [pc, #312]	; (8082300 <HAL_GPIO_Init+0x324>)
 80821c6:	4293      	cmp	r3, r2
 80821c8:	d013      	beq.n	80821f2 <HAL_GPIO_Init+0x216>
 80821ca:	687b      	ldr	r3, [r7, #4]
 80821cc:	4a4d      	ldr	r2, [pc, #308]	; (8082304 <HAL_GPIO_Init+0x328>)
 80821ce:	4293      	cmp	r3, r2
 80821d0:	d00d      	beq.n	80821ee <HAL_GPIO_Init+0x212>
 80821d2:	687b      	ldr	r3, [r7, #4]
 80821d4:	4a4c      	ldr	r2, [pc, #304]	; (8082308 <HAL_GPIO_Init+0x32c>)
 80821d6:	4293      	cmp	r3, r2
 80821d8:	d007      	beq.n	80821ea <HAL_GPIO_Init+0x20e>
 80821da:	687b      	ldr	r3, [r7, #4]
 80821dc:	4a4b      	ldr	r2, [pc, #300]	; (808230c <HAL_GPIO_Init+0x330>)
 80821de:	4293      	cmp	r3, r2
 80821e0:	d101      	bne.n	80821e6 <HAL_GPIO_Init+0x20a>
 80821e2:	2307      	movs	r3, #7
 80821e4:	e00e      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821e6:	2308      	movs	r3, #8
 80821e8:	e00c      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821ea:	2306      	movs	r3, #6
 80821ec:	e00a      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821ee:	2305      	movs	r3, #5
 80821f0:	e008      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821f2:	2304      	movs	r3, #4
 80821f4:	e006      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821f6:	2303      	movs	r3, #3
 80821f8:	e004      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821fa:	2302      	movs	r3, #2
 80821fc:	e002      	b.n	8082204 <HAL_GPIO_Init+0x228>
 80821fe:	2301      	movs	r3, #1
 8082200:	e000      	b.n	8082204 <HAL_GPIO_Init+0x228>
 8082202:	2300      	movs	r3, #0
 8082204:	69fa      	ldr	r2, [r7, #28]
 8082206:	f002 0203 	and.w	r2, r2, #3
 808220a:	0092      	lsls	r2, r2, #2
 808220c:	4093      	lsls	r3, r2
 808220e:	69ba      	ldr	r2, [r7, #24]
 8082210:	4313      	orrs	r3, r2
 8082212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8082214:	4935      	ldr	r1, [pc, #212]	; (80822ec <HAL_GPIO_Init+0x310>)
 8082216:	69fb      	ldr	r3, [r7, #28]
 8082218:	089b      	lsrs	r3, r3, #2
 808221a:	3302      	adds	r3, #2
 808221c:	69ba      	ldr	r2, [r7, #24]
 808221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8082222:	4b3b      	ldr	r3, [pc, #236]	; (8082310 <HAL_GPIO_Init+0x334>)
 8082224:	689b      	ldr	r3, [r3, #8]
 8082226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8082228:	693b      	ldr	r3, [r7, #16]
 808222a:	43db      	mvns	r3, r3
 808222c:	69ba      	ldr	r2, [r7, #24]
 808222e:	4013      	ands	r3, r2
 8082230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8082232:	683b      	ldr	r3, [r7, #0]
 8082234:	685b      	ldr	r3, [r3, #4]
 8082236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 808223a:	2b00      	cmp	r3, #0
 808223c:	d003      	beq.n	8082246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 808223e:	69ba      	ldr	r2, [r7, #24]
 8082240:	693b      	ldr	r3, [r7, #16]
 8082242:	4313      	orrs	r3, r2
 8082244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8082246:	4a32      	ldr	r2, [pc, #200]	; (8082310 <HAL_GPIO_Init+0x334>)
 8082248:	69bb      	ldr	r3, [r7, #24]
 808224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 808224c:	4b30      	ldr	r3, [pc, #192]	; (8082310 <HAL_GPIO_Init+0x334>)
 808224e:	68db      	ldr	r3, [r3, #12]
 8082250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8082252:	693b      	ldr	r3, [r7, #16]
 8082254:	43db      	mvns	r3, r3
 8082256:	69ba      	ldr	r2, [r7, #24]
 8082258:	4013      	ands	r3, r2
 808225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 808225c:	683b      	ldr	r3, [r7, #0]
 808225e:	685b      	ldr	r3, [r3, #4]
 8082260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8082264:	2b00      	cmp	r3, #0
 8082266:	d003      	beq.n	8082270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8082268:	69ba      	ldr	r2, [r7, #24]
 808226a:	693b      	ldr	r3, [r7, #16]
 808226c:	4313      	orrs	r3, r2
 808226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8082270:	4a27      	ldr	r2, [pc, #156]	; (8082310 <HAL_GPIO_Init+0x334>)
 8082272:	69bb      	ldr	r3, [r7, #24]
 8082274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8082276:	4b26      	ldr	r3, [pc, #152]	; (8082310 <HAL_GPIO_Init+0x334>)
 8082278:	685b      	ldr	r3, [r3, #4]
 808227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808227c:	693b      	ldr	r3, [r7, #16]
 808227e:	43db      	mvns	r3, r3
 8082280:	69ba      	ldr	r2, [r7, #24]
 8082282:	4013      	ands	r3, r2
 8082284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8082286:	683b      	ldr	r3, [r7, #0]
 8082288:	685b      	ldr	r3, [r3, #4]
 808228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808228e:	2b00      	cmp	r3, #0
 8082290:	d003      	beq.n	808229a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8082292:	69ba      	ldr	r2, [r7, #24]
 8082294:	693b      	ldr	r3, [r7, #16]
 8082296:	4313      	orrs	r3, r2
 8082298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 808229a:	4a1d      	ldr	r2, [pc, #116]	; (8082310 <HAL_GPIO_Init+0x334>)
 808229c:	69bb      	ldr	r3, [r7, #24]
 808229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80822a0:	4b1b      	ldr	r3, [pc, #108]	; (8082310 <HAL_GPIO_Init+0x334>)
 80822a2:	681b      	ldr	r3, [r3, #0]
 80822a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80822a6:	693b      	ldr	r3, [r7, #16]
 80822a8:	43db      	mvns	r3, r3
 80822aa:	69ba      	ldr	r2, [r7, #24]
 80822ac:	4013      	ands	r3, r2
 80822ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80822b0:	683b      	ldr	r3, [r7, #0]
 80822b2:	685b      	ldr	r3, [r3, #4]
 80822b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80822b8:	2b00      	cmp	r3, #0
 80822ba:	d003      	beq.n	80822c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80822bc:	69ba      	ldr	r2, [r7, #24]
 80822be:	693b      	ldr	r3, [r7, #16]
 80822c0:	4313      	orrs	r3, r2
 80822c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80822c4:	4a12      	ldr	r2, [pc, #72]	; (8082310 <HAL_GPIO_Init+0x334>)
 80822c6:	69bb      	ldr	r3, [r7, #24]
 80822c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80822ca:	69fb      	ldr	r3, [r7, #28]
 80822cc:	3301      	adds	r3, #1
 80822ce:	61fb      	str	r3, [r7, #28]
 80822d0:	69fb      	ldr	r3, [r7, #28]
 80822d2:	2b0f      	cmp	r3, #15
 80822d4:	f67f ae90 	bls.w	8081ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80822d8:	bf00      	nop
 80822da:	bf00      	nop
 80822dc:	3724      	adds	r7, #36	; 0x24
 80822de:	46bd      	mov	sp, r7
 80822e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822e4:	4770      	bx	lr
 80822e6:	bf00      	nop
 80822e8:	40023800 	.word	0x40023800
 80822ec:	40013800 	.word	0x40013800
 80822f0:	40020000 	.word	0x40020000
 80822f4:	40020400 	.word	0x40020400
 80822f8:	40020800 	.word	0x40020800
 80822fc:	40020c00 	.word	0x40020c00
 8082300:	40021000 	.word	0x40021000
 8082304:	40021400 	.word	0x40021400
 8082308:	40021800 	.word	0x40021800
 808230c:	40021c00 	.word	0x40021c00
 8082310:	40013c00 	.word	0x40013c00

08082314 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8082314:	b580      	push	{r7, lr}
 8082316:	b084      	sub	sp, #16
 8082318:	af00      	add	r7, sp, #0
 808231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 808231c:	687b      	ldr	r3, [r7, #4]
 808231e:	2b00      	cmp	r3, #0
 8082320:	d101      	bne.n	8082326 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8082322:	2301      	movs	r3, #1
 8082324:	e036      	b.n	8082394 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8082326:	687b      	ldr	r3, [r7, #4]
 8082328:	681b      	ldr	r3, [r3, #0]
 808232a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 808232e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8082330:	687b      	ldr	r3, [r7, #4]
 8082332:	681b      	ldr	r3, [r3, #0]
 8082334:	f245 5255 	movw	r2, #21845	; 0x5555
 8082338:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 808233a:	687b      	ldr	r3, [r7, #4]
 808233c:	681b      	ldr	r3, [r3, #0]
 808233e:	687a      	ldr	r2, [r7, #4]
 8082340:	6852      	ldr	r2, [r2, #4]
 8082342:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8082344:	687b      	ldr	r3, [r7, #4]
 8082346:	681b      	ldr	r3, [r3, #0]
 8082348:	687a      	ldr	r2, [r7, #4]
 808234a:	6892      	ldr	r2, [r2, #8]
 808234c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 808234e:	f7fe fcb9 	bl	8080cc4 <HAL_GetTick>
 8082352:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8082354:	e011      	b.n	808237a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8082356:	f7fe fcb5 	bl	8080cc4 <HAL_GetTick>
 808235a:	4602      	mov	r2, r0
 808235c:	68fb      	ldr	r3, [r7, #12]
 808235e:	1ad3      	subs	r3, r2, r3
 8082360:	f641 0201 	movw	r2, #6145	; 0x1801
 8082364:	4293      	cmp	r3, r2
 8082366:	d908      	bls.n	808237a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8082368:	687b      	ldr	r3, [r7, #4]
 808236a:	681b      	ldr	r3, [r3, #0]
 808236c:	68db      	ldr	r3, [r3, #12]
 808236e:	f003 0303 	and.w	r3, r3, #3
 8082372:	2b00      	cmp	r3, #0
 8082374:	d001      	beq.n	808237a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8082376:	2303      	movs	r3, #3
 8082378:	e00c      	b.n	8082394 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 808237a:	687b      	ldr	r3, [r7, #4]
 808237c:	681b      	ldr	r3, [r3, #0]
 808237e:	68db      	ldr	r3, [r3, #12]
 8082380:	f003 0303 	and.w	r3, r3, #3
 8082384:	2b00      	cmp	r3, #0
 8082386:	d1e6      	bne.n	8082356 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8082388:	687b      	ldr	r3, [r7, #4]
 808238a:	681b      	ldr	r3, [r3, #0]
 808238c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8082390:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8082392:	2300      	movs	r3, #0
}
 8082394:	4618      	mov	r0, r3
 8082396:	3710      	adds	r7, #16
 8082398:	46bd      	mov	sp, r7
 808239a:	bd80      	pop	{r7, pc}

0808239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 808239c:	b580      	push	{r7, lr}
 808239e:	b086      	sub	sp, #24
 80823a0:	af00      	add	r7, sp, #0
 80823a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80823a4:	687b      	ldr	r3, [r7, #4]
 80823a6:	2b00      	cmp	r3, #0
 80823a8:	d101      	bne.n	80823ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80823aa:	2301      	movs	r3, #1
 80823ac:	e267      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80823ae:	687b      	ldr	r3, [r7, #4]
 80823b0:	681b      	ldr	r3, [r3, #0]
 80823b2:	f003 0301 	and.w	r3, r3, #1
 80823b6:	2b00      	cmp	r3, #0
 80823b8:	d075      	beq.n	80824a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80823ba:	4b88      	ldr	r3, [pc, #544]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80823bc:	689b      	ldr	r3, [r3, #8]
 80823be:	f003 030c 	and.w	r3, r3, #12
 80823c2:	2b04      	cmp	r3, #4
 80823c4:	d00c      	beq.n	80823e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80823c6:	4b85      	ldr	r3, [pc, #532]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80823c8:	689b      	ldr	r3, [r3, #8]
 80823ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80823ce:	2b08      	cmp	r3, #8
 80823d0:	d112      	bne.n	80823f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80823d2:	4b82      	ldr	r3, [pc, #520]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80823d4:	685b      	ldr	r3, [r3, #4]
 80823d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80823da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80823de:	d10b      	bne.n	80823f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80823e0:	4b7e      	ldr	r3, [pc, #504]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80823e2:	681b      	ldr	r3, [r3, #0]
 80823e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80823e8:	2b00      	cmp	r3, #0
 80823ea:	d05b      	beq.n	80824a4 <HAL_RCC_OscConfig+0x108>
 80823ec:	687b      	ldr	r3, [r7, #4]
 80823ee:	685b      	ldr	r3, [r3, #4]
 80823f0:	2b00      	cmp	r3, #0
 80823f2:	d157      	bne.n	80824a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80823f4:	2301      	movs	r3, #1
 80823f6:	e242      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80823f8:	687b      	ldr	r3, [r7, #4]
 80823fa:	685b      	ldr	r3, [r3, #4]
 80823fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8082400:	d106      	bne.n	8082410 <HAL_RCC_OscConfig+0x74>
 8082402:	4b76      	ldr	r3, [pc, #472]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082404:	681b      	ldr	r3, [r3, #0]
 8082406:	4a75      	ldr	r2, [pc, #468]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808240c:	6013      	str	r3, [r2, #0]
 808240e:	e01d      	b.n	808244c <HAL_RCC_OscConfig+0xb0>
 8082410:	687b      	ldr	r3, [r7, #4]
 8082412:	685b      	ldr	r3, [r3, #4]
 8082414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8082418:	d10c      	bne.n	8082434 <HAL_RCC_OscConfig+0x98>
 808241a:	4b70      	ldr	r3, [pc, #448]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 808241c:	681b      	ldr	r3, [r3, #0]
 808241e:	4a6f      	ldr	r2, [pc, #444]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8082424:	6013      	str	r3, [r2, #0]
 8082426:	4b6d      	ldr	r3, [pc, #436]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082428:	681b      	ldr	r3, [r3, #0]
 808242a:	4a6c      	ldr	r2, [pc, #432]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 808242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8082430:	6013      	str	r3, [r2, #0]
 8082432:	e00b      	b.n	808244c <HAL_RCC_OscConfig+0xb0>
 8082434:	4b69      	ldr	r3, [pc, #420]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082436:	681b      	ldr	r3, [r3, #0]
 8082438:	4a68      	ldr	r2, [pc, #416]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 808243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 808243e:	6013      	str	r3, [r2, #0]
 8082440:	4b66      	ldr	r3, [pc, #408]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082442:	681b      	ldr	r3, [r3, #0]
 8082444:	4a65      	ldr	r2, [pc, #404]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 808244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 808244c:	687b      	ldr	r3, [r7, #4]
 808244e:	685b      	ldr	r3, [r3, #4]
 8082450:	2b00      	cmp	r3, #0
 8082452:	d013      	beq.n	808247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082454:	f7fe fc36 	bl	8080cc4 <HAL_GetTick>
 8082458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808245a:	e008      	b.n	808246e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 808245c:	f7fe fc32 	bl	8080cc4 <HAL_GetTick>
 8082460:	4602      	mov	r2, r0
 8082462:	693b      	ldr	r3, [r7, #16]
 8082464:	1ad3      	subs	r3, r2, r3
 8082466:	2b64      	cmp	r3, #100	; 0x64
 8082468:	d901      	bls.n	808246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 808246a:	2303      	movs	r3, #3
 808246c:	e207      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808246e:	4b5b      	ldr	r3, [pc, #364]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082470:	681b      	ldr	r3, [r3, #0]
 8082472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082476:	2b00      	cmp	r3, #0
 8082478:	d0f0      	beq.n	808245c <HAL_RCC_OscConfig+0xc0>
 808247a:	e014      	b.n	80824a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 808247c:	f7fe fc22 	bl	8080cc4 <HAL_GetTick>
 8082480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8082482:	e008      	b.n	8082496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8082484:	f7fe fc1e 	bl	8080cc4 <HAL_GetTick>
 8082488:	4602      	mov	r2, r0
 808248a:	693b      	ldr	r3, [r7, #16]
 808248c:	1ad3      	subs	r3, r2, r3
 808248e:	2b64      	cmp	r3, #100	; 0x64
 8082490:	d901      	bls.n	8082496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8082492:	2303      	movs	r3, #3
 8082494:	e1f3      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8082496:	4b51      	ldr	r3, [pc, #324]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082498:	681b      	ldr	r3, [r3, #0]
 808249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808249e:	2b00      	cmp	r3, #0
 80824a0:	d1f0      	bne.n	8082484 <HAL_RCC_OscConfig+0xe8>
 80824a2:	e000      	b.n	80824a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80824a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80824a6:	687b      	ldr	r3, [r7, #4]
 80824a8:	681b      	ldr	r3, [r3, #0]
 80824aa:	f003 0302 	and.w	r3, r3, #2
 80824ae:	2b00      	cmp	r3, #0
 80824b0:	d063      	beq.n	808257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80824b2:	4b4a      	ldr	r3, [pc, #296]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824b4:	689b      	ldr	r3, [r3, #8]
 80824b6:	f003 030c 	and.w	r3, r3, #12
 80824ba:	2b00      	cmp	r3, #0
 80824bc:	d00b      	beq.n	80824d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80824be:	4b47      	ldr	r3, [pc, #284]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824c0:	689b      	ldr	r3, [r3, #8]
 80824c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80824c6:	2b08      	cmp	r3, #8
 80824c8:	d11c      	bne.n	8082504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80824ca:	4b44      	ldr	r3, [pc, #272]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824cc:	685b      	ldr	r3, [r3, #4]
 80824ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80824d2:	2b00      	cmp	r3, #0
 80824d4:	d116      	bne.n	8082504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80824d6:	4b41      	ldr	r3, [pc, #260]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824d8:	681b      	ldr	r3, [r3, #0]
 80824da:	f003 0302 	and.w	r3, r3, #2
 80824de:	2b00      	cmp	r3, #0
 80824e0:	d005      	beq.n	80824ee <HAL_RCC_OscConfig+0x152>
 80824e2:	687b      	ldr	r3, [r7, #4]
 80824e4:	68db      	ldr	r3, [r3, #12]
 80824e6:	2b01      	cmp	r3, #1
 80824e8:	d001      	beq.n	80824ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80824ea:	2301      	movs	r3, #1
 80824ec:	e1c7      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80824ee:	4b3b      	ldr	r3, [pc, #236]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824f0:	681b      	ldr	r3, [r3, #0]
 80824f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80824f6:	687b      	ldr	r3, [r7, #4]
 80824f8:	691b      	ldr	r3, [r3, #16]
 80824fa:	00db      	lsls	r3, r3, #3
 80824fc:	4937      	ldr	r1, [pc, #220]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80824fe:	4313      	orrs	r3, r2
 8082500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8082502:	e03a      	b.n	808257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8082504:	687b      	ldr	r3, [r7, #4]
 8082506:	68db      	ldr	r3, [r3, #12]
 8082508:	2b00      	cmp	r3, #0
 808250a:	d020      	beq.n	808254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 808250c:	4b34      	ldr	r3, [pc, #208]	; (80825e0 <HAL_RCC_OscConfig+0x244>)
 808250e:	2201      	movs	r2, #1
 8082510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082512:	f7fe fbd7 	bl	8080cc4 <HAL_GetTick>
 8082516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8082518:	e008      	b.n	808252c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 808251a:	f7fe fbd3 	bl	8080cc4 <HAL_GetTick>
 808251e:	4602      	mov	r2, r0
 8082520:	693b      	ldr	r3, [r7, #16]
 8082522:	1ad3      	subs	r3, r2, r3
 8082524:	2b02      	cmp	r3, #2
 8082526:	d901      	bls.n	808252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8082528:	2303      	movs	r3, #3
 808252a:	e1a8      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808252c:	4b2b      	ldr	r3, [pc, #172]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 808252e:	681b      	ldr	r3, [r3, #0]
 8082530:	f003 0302 	and.w	r3, r3, #2
 8082534:	2b00      	cmp	r3, #0
 8082536:	d0f0      	beq.n	808251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8082538:	4b28      	ldr	r3, [pc, #160]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 808253a:	681b      	ldr	r3, [r3, #0]
 808253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8082540:	687b      	ldr	r3, [r7, #4]
 8082542:	691b      	ldr	r3, [r3, #16]
 8082544:	00db      	lsls	r3, r3, #3
 8082546:	4925      	ldr	r1, [pc, #148]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082548:	4313      	orrs	r3, r2
 808254a:	600b      	str	r3, [r1, #0]
 808254c:	e015      	b.n	808257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 808254e:	4b24      	ldr	r3, [pc, #144]	; (80825e0 <HAL_RCC_OscConfig+0x244>)
 8082550:	2200      	movs	r2, #0
 8082552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082554:	f7fe fbb6 	bl	8080cc4 <HAL_GetTick>
 8082558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808255a:	e008      	b.n	808256e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 808255c:	f7fe fbb2 	bl	8080cc4 <HAL_GetTick>
 8082560:	4602      	mov	r2, r0
 8082562:	693b      	ldr	r3, [r7, #16]
 8082564:	1ad3      	subs	r3, r2, r3
 8082566:	2b02      	cmp	r3, #2
 8082568:	d901      	bls.n	808256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 808256a:	2303      	movs	r3, #3
 808256c:	e187      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808256e:	4b1b      	ldr	r3, [pc, #108]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 8082570:	681b      	ldr	r3, [r3, #0]
 8082572:	f003 0302 	and.w	r3, r3, #2
 8082576:	2b00      	cmp	r3, #0
 8082578:	d1f0      	bne.n	808255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 808257a:	687b      	ldr	r3, [r7, #4]
 808257c:	681b      	ldr	r3, [r3, #0]
 808257e:	f003 0308 	and.w	r3, r3, #8
 8082582:	2b00      	cmp	r3, #0
 8082584:	d036      	beq.n	80825f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8082586:	687b      	ldr	r3, [r7, #4]
 8082588:	695b      	ldr	r3, [r3, #20]
 808258a:	2b00      	cmp	r3, #0
 808258c:	d016      	beq.n	80825bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 808258e:	4b15      	ldr	r3, [pc, #84]	; (80825e4 <HAL_RCC_OscConfig+0x248>)
 8082590:	2201      	movs	r2, #1
 8082592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082594:	f7fe fb96 	bl	8080cc4 <HAL_GetTick>
 8082598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 808259a:	e008      	b.n	80825ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 808259c:	f7fe fb92 	bl	8080cc4 <HAL_GetTick>
 80825a0:	4602      	mov	r2, r0
 80825a2:	693b      	ldr	r3, [r7, #16]
 80825a4:	1ad3      	subs	r3, r2, r3
 80825a6:	2b02      	cmp	r3, #2
 80825a8:	d901      	bls.n	80825ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80825aa:	2303      	movs	r3, #3
 80825ac:	e167      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80825ae:	4b0b      	ldr	r3, [pc, #44]	; (80825dc <HAL_RCC_OscConfig+0x240>)
 80825b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80825b2:	f003 0302 	and.w	r3, r3, #2
 80825b6:	2b00      	cmp	r3, #0
 80825b8:	d0f0      	beq.n	808259c <HAL_RCC_OscConfig+0x200>
 80825ba:	e01b      	b.n	80825f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80825bc:	4b09      	ldr	r3, [pc, #36]	; (80825e4 <HAL_RCC_OscConfig+0x248>)
 80825be:	2200      	movs	r2, #0
 80825c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80825c2:	f7fe fb7f 	bl	8080cc4 <HAL_GetTick>
 80825c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80825c8:	e00e      	b.n	80825e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80825ca:	f7fe fb7b 	bl	8080cc4 <HAL_GetTick>
 80825ce:	4602      	mov	r2, r0
 80825d0:	693b      	ldr	r3, [r7, #16]
 80825d2:	1ad3      	subs	r3, r2, r3
 80825d4:	2b02      	cmp	r3, #2
 80825d6:	d907      	bls.n	80825e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80825d8:	2303      	movs	r3, #3
 80825da:	e150      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
 80825dc:	40023800 	.word	0x40023800
 80825e0:	42470000 	.word	0x42470000
 80825e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80825e8:	4b88      	ldr	r3, [pc, #544]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80825ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80825ec:	f003 0302 	and.w	r3, r3, #2
 80825f0:	2b00      	cmp	r3, #0
 80825f2:	d1ea      	bne.n	80825ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80825f4:	687b      	ldr	r3, [r7, #4]
 80825f6:	681b      	ldr	r3, [r3, #0]
 80825f8:	f003 0304 	and.w	r3, r3, #4
 80825fc:	2b00      	cmp	r3, #0
 80825fe:	f000 8097 	beq.w	8082730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8082602:	2300      	movs	r3, #0
 8082604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8082606:	4b81      	ldr	r3, [pc, #516]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808260e:	2b00      	cmp	r3, #0
 8082610:	d10f      	bne.n	8082632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8082612:	2300      	movs	r3, #0
 8082614:	60bb      	str	r3, [r7, #8]
 8082616:	4b7d      	ldr	r3, [pc, #500]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808261a:	4a7c      	ldr	r2, [pc, #496]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8082620:	6413      	str	r3, [r2, #64]	; 0x40
 8082622:	4b7a      	ldr	r3, [pc, #488]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808262a:	60bb      	str	r3, [r7, #8]
 808262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 808262e:	2301      	movs	r3, #1
 8082630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082632:	4b77      	ldr	r3, [pc, #476]	; (8082810 <HAL_RCC_OscConfig+0x474>)
 8082634:	681b      	ldr	r3, [r3, #0]
 8082636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808263a:	2b00      	cmp	r3, #0
 808263c:	d118      	bne.n	8082670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 808263e:	4b74      	ldr	r3, [pc, #464]	; (8082810 <HAL_RCC_OscConfig+0x474>)
 8082640:	681b      	ldr	r3, [r3, #0]
 8082642:	4a73      	ldr	r2, [pc, #460]	; (8082810 <HAL_RCC_OscConfig+0x474>)
 8082644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8082648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 808264a:	f7fe fb3b 	bl	8080cc4 <HAL_GetTick>
 808264e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082650:	e008      	b.n	8082664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8082652:	f7fe fb37 	bl	8080cc4 <HAL_GetTick>
 8082656:	4602      	mov	r2, r0
 8082658:	693b      	ldr	r3, [r7, #16]
 808265a:	1ad3      	subs	r3, r2, r3
 808265c:	2b02      	cmp	r3, #2
 808265e:	d901      	bls.n	8082664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8082660:	2303      	movs	r3, #3
 8082662:	e10c      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082664:	4b6a      	ldr	r3, [pc, #424]	; (8082810 <HAL_RCC_OscConfig+0x474>)
 8082666:	681b      	ldr	r3, [r3, #0]
 8082668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808266c:	2b00      	cmp	r3, #0
 808266e:	d0f0      	beq.n	8082652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8082670:	687b      	ldr	r3, [r7, #4]
 8082672:	689b      	ldr	r3, [r3, #8]
 8082674:	2b01      	cmp	r3, #1
 8082676:	d106      	bne.n	8082686 <HAL_RCC_OscConfig+0x2ea>
 8082678:	4b64      	ldr	r3, [pc, #400]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808267c:	4a63      	ldr	r2, [pc, #396]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808267e:	f043 0301 	orr.w	r3, r3, #1
 8082682:	6713      	str	r3, [r2, #112]	; 0x70
 8082684:	e01c      	b.n	80826c0 <HAL_RCC_OscConfig+0x324>
 8082686:	687b      	ldr	r3, [r7, #4]
 8082688:	689b      	ldr	r3, [r3, #8]
 808268a:	2b05      	cmp	r3, #5
 808268c:	d10c      	bne.n	80826a8 <HAL_RCC_OscConfig+0x30c>
 808268e:	4b5f      	ldr	r3, [pc, #380]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082692:	4a5e      	ldr	r2, [pc, #376]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082694:	f043 0304 	orr.w	r3, r3, #4
 8082698:	6713      	str	r3, [r2, #112]	; 0x70
 808269a:	4b5c      	ldr	r3, [pc, #368]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808269e:	4a5b      	ldr	r2, [pc, #364]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826a0:	f043 0301 	orr.w	r3, r3, #1
 80826a4:	6713      	str	r3, [r2, #112]	; 0x70
 80826a6:	e00b      	b.n	80826c0 <HAL_RCC_OscConfig+0x324>
 80826a8:	4b58      	ldr	r3, [pc, #352]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80826ac:	4a57      	ldr	r2, [pc, #348]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826ae:	f023 0301 	bic.w	r3, r3, #1
 80826b2:	6713      	str	r3, [r2, #112]	; 0x70
 80826b4:	4b55      	ldr	r3, [pc, #340]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80826b8:	4a54      	ldr	r2, [pc, #336]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826ba:	f023 0304 	bic.w	r3, r3, #4
 80826be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80826c0:	687b      	ldr	r3, [r7, #4]
 80826c2:	689b      	ldr	r3, [r3, #8]
 80826c4:	2b00      	cmp	r3, #0
 80826c6:	d015      	beq.n	80826f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80826c8:	f7fe fafc 	bl	8080cc4 <HAL_GetTick>
 80826cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80826ce:	e00a      	b.n	80826e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80826d0:	f7fe faf8 	bl	8080cc4 <HAL_GetTick>
 80826d4:	4602      	mov	r2, r0
 80826d6:	693b      	ldr	r3, [r7, #16]
 80826d8:	1ad3      	subs	r3, r2, r3
 80826da:	f241 3288 	movw	r2, #5000	; 0x1388
 80826de:	4293      	cmp	r3, r2
 80826e0:	d901      	bls.n	80826e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80826e2:	2303      	movs	r3, #3
 80826e4:	e0cb      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80826e6:	4b49      	ldr	r3, [pc, #292]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80826e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80826ea:	f003 0302 	and.w	r3, r3, #2
 80826ee:	2b00      	cmp	r3, #0
 80826f0:	d0ee      	beq.n	80826d0 <HAL_RCC_OscConfig+0x334>
 80826f2:	e014      	b.n	808271e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80826f4:	f7fe fae6 	bl	8080cc4 <HAL_GetTick>
 80826f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80826fa:	e00a      	b.n	8082712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80826fc:	f7fe fae2 	bl	8080cc4 <HAL_GetTick>
 8082700:	4602      	mov	r2, r0
 8082702:	693b      	ldr	r3, [r7, #16]
 8082704:	1ad3      	subs	r3, r2, r3
 8082706:	f241 3288 	movw	r2, #5000	; 0x1388
 808270a:	4293      	cmp	r3, r2
 808270c:	d901      	bls.n	8082712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 808270e:	2303      	movs	r3, #3
 8082710:	e0b5      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8082712:	4b3e      	ldr	r3, [pc, #248]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082716:	f003 0302 	and.w	r3, r3, #2
 808271a:	2b00      	cmp	r3, #0
 808271c:	d1ee      	bne.n	80826fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 808271e:	7dfb      	ldrb	r3, [r7, #23]
 8082720:	2b01      	cmp	r3, #1
 8082722:	d105      	bne.n	8082730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8082724:	4b39      	ldr	r3, [pc, #228]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082728:	4a38      	ldr	r2, [pc, #224]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 808272e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8082730:	687b      	ldr	r3, [r7, #4]
 8082732:	699b      	ldr	r3, [r3, #24]
 8082734:	2b00      	cmp	r3, #0
 8082736:	f000 80a1 	beq.w	808287c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 808273a:	4b34      	ldr	r3, [pc, #208]	; (808280c <HAL_RCC_OscConfig+0x470>)
 808273c:	689b      	ldr	r3, [r3, #8]
 808273e:	f003 030c 	and.w	r3, r3, #12
 8082742:	2b08      	cmp	r3, #8
 8082744:	d05c      	beq.n	8082800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8082746:	687b      	ldr	r3, [r7, #4]
 8082748:	699b      	ldr	r3, [r3, #24]
 808274a:	2b02      	cmp	r3, #2
 808274c:	d141      	bne.n	80827d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 808274e:	4b31      	ldr	r3, [pc, #196]	; (8082814 <HAL_RCC_OscConfig+0x478>)
 8082750:	2200      	movs	r2, #0
 8082752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082754:	f7fe fab6 	bl	8080cc4 <HAL_GetTick>
 8082758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808275a:	e008      	b.n	808276e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 808275c:	f7fe fab2 	bl	8080cc4 <HAL_GetTick>
 8082760:	4602      	mov	r2, r0
 8082762:	693b      	ldr	r3, [r7, #16]
 8082764:	1ad3      	subs	r3, r2, r3
 8082766:	2b02      	cmp	r3, #2
 8082768:	d901      	bls.n	808276e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 808276a:	2303      	movs	r3, #3
 808276c:	e087      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808276e:	4b27      	ldr	r3, [pc, #156]	; (808280c <HAL_RCC_OscConfig+0x470>)
 8082770:	681b      	ldr	r3, [r3, #0]
 8082772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8082776:	2b00      	cmp	r3, #0
 8082778:	d1f0      	bne.n	808275c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 808277a:	687b      	ldr	r3, [r7, #4]
 808277c:	69da      	ldr	r2, [r3, #28]
 808277e:	687b      	ldr	r3, [r7, #4]
 8082780:	6a1b      	ldr	r3, [r3, #32]
 8082782:	431a      	orrs	r2, r3
 8082784:	687b      	ldr	r3, [r7, #4]
 8082786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082788:	019b      	lsls	r3, r3, #6
 808278a:	431a      	orrs	r2, r3
 808278c:	687b      	ldr	r3, [r7, #4]
 808278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082790:	085b      	lsrs	r3, r3, #1
 8082792:	3b01      	subs	r3, #1
 8082794:	041b      	lsls	r3, r3, #16
 8082796:	431a      	orrs	r2, r3
 8082798:	687b      	ldr	r3, [r7, #4]
 808279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808279c:	061b      	lsls	r3, r3, #24
 808279e:	491b      	ldr	r1, [pc, #108]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80827a0:	4313      	orrs	r3, r2
 80827a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80827a4:	4b1b      	ldr	r3, [pc, #108]	; (8082814 <HAL_RCC_OscConfig+0x478>)
 80827a6:	2201      	movs	r2, #1
 80827a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80827aa:	f7fe fa8b 	bl	8080cc4 <HAL_GetTick>
 80827ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80827b0:	e008      	b.n	80827c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80827b2:	f7fe fa87 	bl	8080cc4 <HAL_GetTick>
 80827b6:	4602      	mov	r2, r0
 80827b8:	693b      	ldr	r3, [r7, #16]
 80827ba:	1ad3      	subs	r3, r2, r3
 80827bc:	2b02      	cmp	r3, #2
 80827be:	d901      	bls.n	80827c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80827c0:	2303      	movs	r3, #3
 80827c2:	e05c      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80827c4:	4b11      	ldr	r3, [pc, #68]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80827c6:	681b      	ldr	r3, [r3, #0]
 80827c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80827cc:	2b00      	cmp	r3, #0
 80827ce:	d0f0      	beq.n	80827b2 <HAL_RCC_OscConfig+0x416>
 80827d0:	e054      	b.n	808287c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80827d2:	4b10      	ldr	r3, [pc, #64]	; (8082814 <HAL_RCC_OscConfig+0x478>)
 80827d4:	2200      	movs	r2, #0
 80827d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80827d8:	f7fe fa74 	bl	8080cc4 <HAL_GetTick>
 80827dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80827de:	e008      	b.n	80827f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80827e0:	f7fe fa70 	bl	8080cc4 <HAL_GetTick>
 80827e4:	4602      	mov	r2, r0
 80827e6:	693b      	ldr	r3, [r7, #16]
 80827e8:	1ad3      	subs	r3, r2, r3
 80827ea:	2b02      	cmp	r3, #2
 80827ec:	d901      	bls.n	80827f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80827ee:	2303      	movs	r3, #3
 80827f0:	e045      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80827f2:	4b06      	ldr	r3, [pc, #24]	; (808280c <HAL_RCC_OscConfig+0x470>)
 80827f4:	681b      	ldr	r3, [r3, #0]
 80827f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80827fa:	2b00      	cmp	r3, #0
 80827fc:	d1f0      	bne.n	80827e0 <HAL_RCC_OscConfig+0x444>
 80827fe:	e03d      	b.n	808287c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8082800:	687b      	ldr	r3, [r7, #4]
 8082802:	699b      	ldr	r3, [r3, #24]
 8082804:	2b01      	cmp	r3, #1
 8082806:	d107      	bne.n	8082818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8082808:	2301      	movs	r3, #1
 808280a:	e038      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
 808280c:	40023800 	.word	0x40023800
 8082810:	40007000 	.word	0x40007000
 8082814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8082818:	4b1b      	ldr	r3, [pc, #108]	; (8082888 <HAL_RCC_OscConfig+0x4ec>)
 808281a:	685b      	ldr	r3, [r3, #4]
 808281c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 808281e:	687b      	ldr	r3, [r7, #4]
 8082820:	699b      	ldr	r3, [r3, #24]
 8082822:	2b01      	cmp	r3, #1
 8082824:	d028      	beq.n	8082878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8082826:	68fb      	ldr	r3, [r7, #12]
 8082828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 808282c:	687b      	ldr	r3, [r7, #4]
 808282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8082830:	429a      	cmp	r2, r3
 8082832:	d121      	bne.n	8082878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8082834:	68fb      	ldr	r3, [r7, #12]
 8082836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 808283a:	687b      	ldr	r3, [r7, #4]
 808283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 808283e:	429a      	cmp	r2, r3
 8082840:	d11a      	bne.n	8082878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8082842:	68fa      	ldr	r2, [r7, #12]
 8082844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8082848:	4013      	ands	r3, r2
 808284a:	687a      	ldr	r2, [r7, #4]
 808284c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 808284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8082850:	4293      	cmp	r3, r2
 8082852:	d111      	bne.n	8082878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8082854:	68fb      	ldr	r3, [r7, #12]
 8082856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 808285a:	687b      	ldr	r3, [r7, #4]
 808285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808285e:	085b      	lsrs	r3, r3, #1
 8082860:	3b01      	subs	r3, #1
 8082862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8082864:	429a      	cmp	r2, r3
 8082866:	d107      	bne.n	8082878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8082868:	68fb      	ldr	r3, [r7, #12]
 808286a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 808286e:	687b      	ldr	r3, [r7, #4]
 8082870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8082874:	429a      	cmp	r2, r3
 8082876:	d001      	beq.n	808287c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8082878:	2301      	movs	r3, #1
 808287a:	e000      	b.n	808287e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 808287c:	2300      	movs	r3, #0
}
 808287e:	4618      	mov	r0, r3
 8082880:	3718      	adds	r7, #24
 8082882:	46bd      	mov	sp, r7
 8082884:	bd80      	pop	{r7, pc}
 8082886:	bf00      	nop
 8082888:	40023800 	.word	0x40023800

0808288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 808288c:	b580      	push	{r7, lr}
 808288e:	b084      	sub	sp, #16
 8082890:	af00      	add	r7, sp, #0
 8082892:	6078      	str	r0, [r7, #4]
 8082894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8082896:	687b      	ldr	r3, [r7, #4]
 8082898:	2b00      	cmp	r3, #0
 808289a:	d101      	bne.n	80828a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 808289c:	2301      	movs	r3, #1
 808289e:	e0cc      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80828a0:	4b68      	ldr	r3, [pc, #416]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80828a2:	681b      	ldr	r3, [r3, #0]
 80828a4:	f003 0307 	and.w	r3, r3, #7
 80828a8:	683a      	ldr	r2, [r7, #0]
 80828aa:	429a      	cmp	r2, r3
 80828ac:	d90c      	bls.n	80828c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80828ae:	4b65      	ldr	r3, [pc, #404]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80828b0:	683a      	ldr	r2, [r7, #0]
 80828b2:	b2d2      	uxtb	r2, r2
 80828b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80828b6:	4b63      	ldr	r3, [pc, #396]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80828b8:	681b      	ldr	r3, [r3, #0]
 80828ba:	f003 0307 	and.w	r3, r3, #7
 80828be:	683a      	ldr	r2, [r7, #0]
 80828c0:	429a      	cmp	r2, r3
 80828c2:	d001      	beq.n	80828c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80828c4:	2301      	movs	r3, #1
 80828c6:	e0b8      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80828c8:	687b      	ldr	r3, [r7, #4]
 80828ca:	681b      	ldr	r3, [r3, #0]
 80828cc:	f003 0302 	and.w	r3, r3, #2
 80828d0:	2b00      	cmp	r3, #0
 80828d2:	d020      	beq.n	8082916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80828d4:	687b      	ldr	r3, [r7, #4]
 80828d6:	681b      	ldr	r3, [r3, #0]
 80828d8:	f003 0304 	and.w	r3, r3, #4
 80828dc:	2b00      	cmp	r3, #0
 80828de:	d005      	beq.n	80828ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80828e0:	4b59      	ldr	r3, [pc, #356]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80828e2:	689b      	ldr	r3, [r3, #8]
 80828e4:	4a58      	ldr	r2, [pc, #352]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80828e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80828ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80828ec:	687b      	ldr	r3, [r7, #4]
 80828ee:	681b      	ldr	r3, [r3, #0]
 80828f0:	f003 0308 	and.w	r3, r3, #8
 80828f4:	2b00      	cmp	r3, #0
 80828f6:	d005      	beq.n	8082904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80828f8:	4b53      	ldr	r3, [pc, #332]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80828fa:	689b      	ldr	r3, [r3, #8]
 80828fc:	4a52      	ldr	r2, [pc, #328]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80828fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8082902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8082904:	4b50      	ldr	r3, [pc, #320]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082906:	689b      	ldr	r3, [r3, #8]
 8082908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 808290c:	687b      	ldr	r3, [r7, #4]
 808290e:	689b      	ldr	r3, [r3, #8]
 8082910:	494d      	ldr	r1, [pc, #308]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082912:	4313      	orrs	r3, r2
 8082914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8082916:	687b      	ldr	r3, [r7, #4]
 8082918:	681b      	ldr	r3, [r3, #0]
 808291a:	f003 0301 	and.w	r3, r3, #1
 808291e:	2b00      	cmp	r3, #0
 8082920:	d044      	beq.n	80829ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8082922:	687b      	ldr	r3, [r7, #4]
 8082924:	685b      	ldr	r3, [r3, #4]
 8082926:	2b01      	cmp	r3, #1
 8082928:	d107      	bne.n	808293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808292a:	4b47      	ldr	r3, [pc, #284]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 808292c:	681b      	ldr	r3, [r3, #0]
 808292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082932:	2b00      	cmp	r3, #0
 8082934:	d119      	bne.n	808296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8082936:	2301      	movs	r3, #1
 8082938:	e07f      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 808293a:	687b      	ldr	r3, [r7, #4]
 808293c:	685b      	ldr	r3, [r3, #4]
 808293e:	2b02      	cmp	r3, #2
 8082940:	d003      	beq.n	808294a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8082942:	687b      	ldr	r3, [r7, #4]
 8082944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8082946:	2b03      	cmp	r3, #3
 8082948:	d107      	bne.n	808295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808294a:	4b3f      	ldr	r3, [pc, #252]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 808294c:	681b      	ldr	r3, [r3, #0]
 808294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8082952:	2b00      	cmp	r3, #0
 8082954:	d109      	bne.n	808296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8082956:	2301      	movs	r3, #1
 8082958:	e06f      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808295a:	4b3b      	ldr	r3, [pc, #236]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 808295c:	681b      	ldr	r3, [r3, #0]
 808295e:	f003 0302 	and.w	r3, r3, #2
 8082962:	2b00      	cmp	r3, #0
 8082964:	d101      	bne.n	808296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8082966:	2301      	movs	r3, #1
 8082968:	e067      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 808296a:	4b37      	ldr	r3, [pc, #220]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 808296c:	689b      	ldr	r3, [r3, #8]
 808296e:	f023 0203 	bic.w	r2, r3, #3
 8082972:	687b      	ldr	r3, [r7, #4]
 8082974:	685b      	ldr	r3, [r3, #4]
 8082976:	4934      	ldr	r1, [pc, #208]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082978:	4313      	orrs	r3, r2
 808297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 808297c:	f7fe f9a2 	bl	8080cc4 <HAL_GetTick>
 8082980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8082982:	e00a      	b.n	808299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8082984:	f7fe f99e 	bl	8080cc4 <HAL_GetTick>
 8082988:	4602      	mov	r2, r0
 808298a:	68fb      	ldr	r3, [r7, #12]
 808298c:	1ad3      	subs	r3, r2, r3
 808298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8082992:	4293      	cmp	r3, r2
 8082994:	d901      	bls.n	808299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8082996:	2303      	movs	r3, #3
 8082998:	e04f      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808299a:	4b2b      	ldr	r3, [pc, #172]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 808299c:	689b      	ldr	r3, [r3, #8]
 808299e:	f003 020c 	and.w	r2, r3, #12
 80829a2:	687b      	ldr	r3, [r7, #4]
 80829a4:	685b      	ldr	r3, [r3, #4]
 80829a6:	009b      	lsls	r3, r3, #2
 80829a8:	429a      	cmp	r2, r3
 80829aa:	d1eb      	bne.n	8082984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80829ac:	4b25      	ldr	r3, [pc, #148]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80829ae:	681b      	ldr	r3, [r3, #0]
 80829b0:	f003 0307 	and.w	r3, r3, #7
 80829b4:	683a      	ldr	r2, [r7, #0]
 80829b6:	429a      	cmp	r2, r3
 80829b8:	d20c      	bcs.n	80829d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80829ba:	4b22      	ldr	r3, [pc, #136]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80829bc:	683a      	ldr	r2, [r7, #0]
 80829be:	b2d2      	uxtb	r2, r2
 80829c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80829c2:	4b20      	ldr	r3, [pc, #128]	; (8082a44 <HAL_RCC_ClockConfig+0x1b8>)
 80829c4:	681b      	ldr	r3, [r3, #0]
 80829c6:	f003 0307 	and.w	r3, r3, #7
 80829ca:	683a      	ldr	r2, [r7, #0]
 80829cc:	429a      	cmp	r2, r3
 80829ce:	d001      	beq.n	80829d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80829d0:	2301      	movs	r3, #1
 80829d2:	e032      	b.n	8082a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80829d4:	687b      	ldr	r3, [r7, #4]
 80829d6:	681b      	ldr	r3, [r3, #0]
 80829d8:	f003 0304 	and.w	r3, r3, #4
 80829dc:	2b00      	cmp	r3, #0
 80829de:	d008      	beq.n	80829f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80829e0:	4b19      	ldr	r3, [pc, #100]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80829e2:	689b      	ldr	r3, [r3, #8]
 80829e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80829e8:	687b      	ldr	r3, [r7, #4]
 80829ea:	68db      	ldr	r3, [r3, #12]
 80829ec:	4916      	ldr	r1, [pc, #88]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 80829ee:	4313      	orrs	r3, r2
 80829f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80829f2:	687b      	ldr	r3, [r7, #4]
 80829f4:	681b      	ldr	r3, [r3, #0]
 80829f6:	f003 0308 	and.w	r3, r3, #8
 80829fa:	2b00      	cmp	r3, #0
 80829fc:	d009      	beq.n	8082a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80829fe:	4b12      	ldr	r3, [pc, #72]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082a00:	689b      	ldr	r3, [r3, #8]
 8082a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8082a06:	687b      	ldr	r3, [r7, #4]
 8082a08:	691b      	ldr	r3, [r3, #16]
 8082a0a:	00db      	lsls	r3, r3, #3
 8082a0c:	490e      	ldr	r1, [pc, #56]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082a0e:	4313      	orrs	r3, r2
 8082a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8082a12:	f000 f821 	bl	8082a58 <HAL_RCC_GetSysClockFreq>
 8082a16:	4602      	mov	r2, r0
 8082a18:	4b0b      	ldr	r3, [pc, #44]	; (8082a48 <HAL_RCC_ClockConfig+0x1bc>)
 8082a1a:	689b      	ldr	r3, [r3, #8]
 8082a1c:	091b      	lsrs	r3, r3, #4
 8082a1e:	f003 030f 	and.w	r3, r3, #15
 8082a22:	490a      	ldr	r1, [pc, #40]	; (8082a4c <HAL_RCC_ClockConfig+0x1c0>)
 8082a24:	5ccb      	ldrb	r3, [r1, r3]
 8082a26:	fa22 f303 	lsr.w	r3, r2, r3
 8082a2a:	4a09      	ldr	r2, [pc, #36]	; (8082a50 <HAL_RCC_ClockConfig+0x1c4>)
 8082a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8082a2e:	4b09      	ldr	r3, [pc, #36]	; (8082a54 <HAL_RCC_ClockConfig+0x1c8>)
 8082a30:	681b      	ldr	r3, [r3, #0]
 8082a32:	4618      	mov	r0, r3
 8082a34:	f7fe f902 	bl	8080c3c <HAL_InitTick>

  return HAL_OK;
 8082a38:	2300      	movs	r3, #0
}
 8082a3a:	4618      	mov	r0, r3
 8082a3c:	3710      	adds	r7, #16
 8082a3e:	46bd      	mov	sp, r7
 8082a40:	bd80      	pop	{r7, pc}
 8082a42:	bf00      	nop
 8082a44:	40023c00 	.word	0x40023c00
 8082a48:	40023800 	.word	0x40023800
 8082a4c:	0809096c 	.word	0x0809096c
 8082a50:	20000000 	.word	0x20000000
 8082a54:	20000004 	.word	0x20000004

08082a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8082a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8082a5c:	b090      	sub	sp, #64	; 0x40
 8082a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8082a60:	2300      	movs	r3, #0
 8082a62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8082a64:	2300      	movs	r3, #0
 8082a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8082a68:	2300      	movs	r3, #0
 8082a6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8082a6c:	2300      	movs	r3, #0
 8082a6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8082a70:	4b59      	ldr	r3, [pc, #356]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082a72:	689b      	ldr	r3, [r3, #8]
 8082a74:	f003 030c 	and.w	r3, r3, #12
 8082a78:	2b08      	cmp	r3, #8
 8082a7a:	d00d      	beq.n	8082a98 <HAL_RCC_GetSysClockFreq+0x40>
 8082a7c:	2b08      	cmp	r3, #8
 8082a7e:	f200 80a1 	bhi.w	8082bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8082a82:	2b00      	cmp	r3, #0
 8082a84:	d002      	beq.n	8082a8c <HAL_RCC_GetSysClockFreq+0x34>
 8082a86:	2b04      	cmp	r3, #4
 8082a88:	d003      	beq.n	8082a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8082a8a:	e09b      	b.n	8082bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8082a8c:	4b53      	ldr	r3, [pc, #332]	; (8082bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8082a8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8082a90:	e09b      	b.n	8082bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8082a92:	4b53      	ldr	r3, [pc, #332]	; (8082be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8082a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8082a96:	e098      	b.n	8082bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8082a98:	4b4f      	ldr	r3, [pc, #316]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082a9a:	685b      	ldr	r3, [r3, #4]
 8082a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8082aa0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8082aa2:	4b4d      	ldr	r3, [pc, #308]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082aa4:	685b      	ldr	r3, [r3, #4]
 8082aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8082aaa:	2b00      	cmp	r3, #0
 8082aac:	d028      	beq.n	8082b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8082aae:	4b4a      	ldr	r3, [pc, #296]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082ab0:	685b      	ldr	r3, [r3, #4]
 8082ab2:	099b      	lsrs	r3, r3, #6
 8082ab4:	2200      	movs	r2, #0
 8082ab6:	623b      	str	r3, [r7, #32]
 8082ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8082aba:	6a3b      	ldr	r3, [r7, #32]
 8082abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8082ac0:	2100      	movs	r1, #0
 8082ac2:	4b47      	ldr	r3, [pc, #284]	; (8082be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8082ac4:	fb03 f201 	mul.w	r2, r3, r1
 8082ac8:	2300      	movs	r3, #0
 8082aca:	fb00 f303 	mul.w	r3, r0, r3
 8082ace:	4413      	add	r3, r2
 8082ad0:	4a43      	ldr	r2, [pc, #268]	; (8082be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8082ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8082ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8082ad8:	460a      	mov	r2, r1
 8082ada:	62ba      	str	r2, [r7, #40]	; 0x28
 8082adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8082ade:	4413      	add	r3, r2
 8082ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8082ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8082ae4:	2200      	movs	r2, #0
 8082ae6:	61bb      	str	r3, [r7, #24]
 8082ae8:	61fa      	str	r2, [r7, #28]
 8082aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8082aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8082af2:	f7fd fb9d 	bl	8080230 <__aeabi_uldivmod>
 8082af6:	4602      	mov	r2, r0
 8082af8:	460b      	mov	r3, r1
 8082afa:	4613      	mov	r3, r2
 8082afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8082afe:	e053      	b.n	8082ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8082b00:	4b35      	ldr	r3, [pc, #212]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082b02:	685b      	ldr	r3, [r3, #4]
 8082b04:	099b      	lsrs	r3, r3, #6
 8082b06:	2200      	movs	r2, #0
 8082b08:	613b      	str	r3, [r7, #16]
 8082b0a:	617a      	str	r2, [r7, #20]
 8082b0c:	693b      	ldr	r3, [r7, #16]
 8082b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8082b12:	f04f 0b00 	mov.w	fp, #0
 8082b16:	4652      	mov	r2, sl
 8082b18:	465b      	mov	r3, fp
 8082b1a:	f04f 0000 	mov.w	r0, #0
 8082b1e:	f04f 0100 	mov.w	r1, #0
 8082b22:	0159      	lsls	r1, r3, #5
 8082b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8082b28:	0150      	lsls	r0, r2, #5
 8082b2a:	4602      	mov	r2, r0
 8082b2c:	460b      	mov	r3, r1
 8082b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8082b32:	eb63 090b 	sbc.w	r9, r3, fp
 8082b36:	f04f 0200 	mov.w	r2, #0
 8082b3a:	f04f 0300 	mov.w	r3, #0
 8082b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8082b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8082b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8082b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8082b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8082b52:	f04f 0200 	mov.w	r2, #0
 8082b56:	f04f 0300 	mov.w	r3, #0
 8082b5a:	00eb      	lsls	r3, r5, #3
 8082b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8082b60:	00e2      	lsls	r2, r4, #3
 8082b62:	4614      	mov	r4, r2
 8082b64:	461d      	mov	r5, r3
 8082b66:	eb14 030a 	adds.w	r3, r4, sl
 8082b6a:	603b      	str	r3, [r7, #0]
 8082b6c:	eb45 030b 	adc.w	r3, r5, fp
 8082b70:	607b      	str	r3, [r7, #4]
 8082b72:	f04f 0200 	mov.w	r2, #0
 8082b76:	f04f 0300 	mov.w	r3, #0
 8082b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8082b7e:	4629      	mov	r1, r5
 8082b80:	028b      	lsls	r3, r1, #10
 8082b82:	4621      	mov	r1, r4
 8082b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8082b88:	4621      	mov	r1, r4
 8082b8a:	028a      	lsls	r2, r1, #10
 8082b8c:	4610      	mov	r0, r2
 8082b8e:	4619      	mov	r1, r3
 8082b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8082b92:	2200      	movs	r2, #0
 8082b94:	60bb      	str	r3, [r7, #8]
 8082b96:	60fa      	str	r2, [r7, #12]
 8082b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8082b9c:	f7fd fb48 	bl	8080230 <__aeabi_uldivmod>
 8082ba0:	4602      	mov	r2, r0
 8082ba2:	460b      	mov	r3, r1
 8082ba4:	4613      	mov	r3, r2
 8082ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8082ba8:	4b0b      	ldr	r3, [pc, #44]	; (8082bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8082baa:	685b      	ldr	r3, [r3, #4]
 8082bac:	0c1b      	lsrs	r3, r3, #16
 8082bae:	f003 0303 	and.w	r3, r3, #3
 8082bb2:	3301      	adds	r3, #1
 8082bb4:	005b      	lsls	r3, r3, #1
 8082bb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8082bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8082bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8082bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8082bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8082bc2:	e002      	b.n	8082bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8082bc4:	4b05      	ldr	r3, [pc, #20]	; (8082bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8082bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8082bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8082bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8082bcc:	4618      	mov	r0, r3
 8082bce:	3740      	adds	r7, #64	; 0x40
 8082bd0:	46bd      	mov	sp, r7
 8082bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8082bd6:	bf00      	nop
 8082bd8:	40023800 	.word	0x40023800
 8082bdc:	00f42400 	.word	0x00f42400
 8082be0:	017d7840 	.word	0x017d7840

08082be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8082be4:	b480      	push	{r7}
 8082be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8082be8:	4b03      	ldr	r3, [pc, #12]	; (8082bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8082bea:	681b      	ldr	r3, [r3, #0]
}
 8082bec:	4618      	mov	r0, r3
 8082bee:	46bd      	mov	sp, r7
 8082bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082bf4:	4770      	bx	lr
 8082bf6:	bf00      	nop
 8082bf8:	20000000 	.word	0x20000000

08082bfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8082bfc:	b580      	push	{r7, lr}
 8082bfe:	b084      	sub	sp, #16
 8082c00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8082c02:	4b87      	ldr	r3, [pc, #540]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c04:	22c0      	movs	r2, #192	; 0xc0
 8082c06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8082c08:	4b85      	ldr	r3, [pc, #532]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c0a:	22a8      	movs	r2, #168	; 0xa8
 8082c0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8082c0e:	4b84      	ldr	r3, [pc, #528]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c10:	220a      	movs	r2, #10
 8082c12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8082c14:	4b82      	ldr	r3, [pc, #520]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c16:	22c8      	movs	r2, #200	; 0xc8
 8082c18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8082c1a:	4b82      	ldr	r3, [pc, #520]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082c1c:	22ff      	movs	r2, #255	; 0xff
 8082c1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8082c20:	4b80      	ldr	r3, [pc, #512]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082c22:	22ff      	movs	r2, #255	; 0xff
 8082c24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8082c26:	4b7f      	ldr	r3, [pc, #508]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082c28:	22ff      	movs	r2, #255	; 0xff
 8082c2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8082c2c:	4b7d      	ldr	r3, [pc, #500]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082c2e:	2200      	movs	r2, #0
 8082c30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8082c32:	4b7d      	ldr	r3, [pc, #500]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082c34:	2200      	movs	r2, #0
 8082c36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8082c38:	4b7b      	ldr	r3, [pc, #492]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082c3a:	2200      	movs	r2, #0
 8082c3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8082c3e:	4b7a      	ldr	r3, [pc, #488]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082c40:	2200      	movs	r2, #0
 8082c42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8082c44:	4b78      	ldr	r3, [pc, #480]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082c46:	2200      	movs	r2, #0
 8082c48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8082c4a:	f000 fc77 	bl	808353c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8082c4e:	4b74      	ldr	r3, [pc, #464]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c50:	781b      	ldrb	r3, [r3, #0]
 8082c52:	061a      	lsls	r2, r3, #24
 8082c54:	4b72      	ldr	r3, [pc, #456]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c56:	785b      	ldrb	r3, [r3, #1]
 8082c58:	041b      	lsls	r3, r3, #16
 8082c5a:	431a      	orrs	r2, r3
 8082c5c:	4b70      	ldr	r3, [pc, #448]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c5e:	789b      	ldrb	r3, [r3, #2]
 8082c60:	021b      	lsls	r3, r3, #8
 8082c62:	4313      	orrs	r3, r2
 8082c64:	4a6e      	ldr	r2, [pc, #440]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c66:	78d2      	ldrb	r2, [r2, #3]
 8082c68:	4313      	orrs	r3, r2
 8082c6a:	061a      	lsls	r2, r3, #24
 8082c6c:	4b6c      	ldr	r3, [pc, #432]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c6e:	781b      	ldrb	r3, [r3, #0]
 8082c70:	0619      	lsls	r1, r3, #24
 8082c72:	4b6b      	ldr	r3, [pc, #428]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c74:	785b      	ldrb	r3, [r3, #1]
 8082c76:	041b      	lsls	r3, r3, #16
 8082c78:	4319      	orrs	r1, r3
 8082c7a:	4b69      	ldr	r3, [pc, #420]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c7c:	789b      	ldrb	r3, [r3, #2]
 8082c7e:	021b      	lsls	r3, r3, #8
 8082c80:	430b      	orrs	r3, r1
 8082c82:	4967      	ldr	r1, [pc, #412]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c84:	78c9      	ldrb	r1, [r1, #3]
 8082c86:	430b      	orrs	r3, r1
 8082c88:	021b      	lsls	r3, r3, #8
 8082c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8082c8e:	431a      	orrs	r2, r3
 8082c90:	4b63      	ldr	r3, [pc, #396]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c92:	781b      	ldrb	r3, [r3, #0]
 8082c94:	0619      	lsls	r1, r3, #24
 8082c96:	4b62      	ldr	r3, [pc, #392]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082c98:	785b      	ldrb	r3, [r3, #1]
 8082c9a:	041b      	lsls	r3, r3, #16
 8082c9c:	4319      	orrs	r1, r3
 8082c9e:	4b60      	ldr	r3, [pc, #384]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082ca0:	789b      	ldrb	r3, [r3, #2]
 8082ca2:	021b      	lsls	r3, r3, #8
 8082ca4:	430b      	orrs	r3, r1
 8082ca6:	495e      	ldr	r1, [pc, #376]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082ca8:	78c9      	ldrb	r1, [r1, #3]
 8082caa:	430b      	orrs	r3, r1
 8082cac:	0a1b      	lsrs	r3, r3, #8
 8082cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8082cb2:	431a      	orrs	r2, r3
 8082cb4:	4b5a      	ldr	r3, [pc, #360]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082cb6:	781b      	ldrb	r3, [r3, #0]
 8082cb8:	0619      	lsls	r1, r3, #24
 8082cba:	4b59      	ldr	r3, [pc, #356]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082cbc:	785b      	ldrb	r3, [r3, #1]
 8082cbe:	041b      	lsls	r3, r3, #16
 8082cc0:	4319      	orrs	r1, r3
 8082cc2:	4b57      	ldr	r3, [pc, #348]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082cc4:	789b      	ldrb	r3, [r3, #2]
 8082cc6:	021b      	lsls	r3, r3, #8
 8082cc8:	430b      	orrs	r3, r1
 8082cca:	4955      	ldr	r1, [pc, #340]	; (8082e20 <MX_LWIP_Init+0x224>)
 8082ccc:	78c9      	ldrb	r1, [r1, #3]
 8082cce:	430b      	orrs	r3, r1
 8082cd0:	0e1b      	lsrs	r3, r3, #24
 8082cd2:	4313      	orrs	r3, r2
 8082cd4:	4a55      	ldr	r2, [pc, #340]	; (8082e2c <MX_LWIP_Init+0x230>)
 8082cd6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8082cd8:	4b52      	ldr	r3, [pc, #328]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082cda:	781b      	ldrb	r3, [r3, #0]
 8082cdc:	061a      	lsls	r2, r3, #24
 8082cde:	4b51      	ldr	r3, [pc, #324]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082ce0:	785b      	ldrb	r3, [r3, #1]
 8082ce2:	041b      	lsls	r3, r3, #16
 8082ce4:	431a      	orrs	r2, r3
 8082ce6:	4b4f      	ldr	r3, [pc, #316]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082ce8:	789b      	ldrb	r3, [r3, #2]
 8082cea:	021b      	lsls	r3, r3, #8
 8082cec:	4313      	orrs	r3, r2
 8082cee:	4a4d      	ldr	r2, [pc, #308]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082cf0:	78d2      	ldrb	r2, [r2, #3]
 8082cf2:	4313      	orrs	r3, r2
 8082cf4:	061a      	lsls	r2, r3, #24
 8082cf6:	4b4b      	ldr	r3, [pc, #300]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082cf8:	781b      	ldrb	r3, [r3, #0]
 8082cfa:	0619      	lsls	r1, r3, #24
 8082cfc:	4b49      	ldr	r3, [pc, #292]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082cfe:	785b      	ldrb	r3, [r3, #1]
 8082d00:	041b      	lsls	r3, r3, #16
 8082d02:	4319      	orrs	r1, r3
 8082d04:	4b47      	ldr	r3, [pc, #284]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d06:	789b      	ldrb	r3, [r3, #2]
 8082d08:	021b      	lsls	r3, r3, #8
 8082d0a:	430b      	orrs	r3, r1
 8082d0c:	4945      	ldr	r1, [pc, #276]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d0e:	78c9      	ldrb	r1, [r1, #3]
 8082d10:	430b      	orrs	r3, r1
 8082d12:	021b      	lsls	r3, r3, #8
 8082d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8082d18:	431a      	orrs	r2, r3
 8082d1a:	4b42      	ldr	r3, [pc, #264]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d1c:	781b      	ldrb	r3, [r3, #0]
 8082d1e:	0619      	lsls	r1, r3, #24
 8082d20:	4b40      	ldr	r3, [pc, #256]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d22:	785b      	ldrb	r3, [r3, #1]
 8082d24:	041b      	lsls	r3, r3, #16
 8082d26:	4319      	orrs	r1, r3
 8082d28:	4b3e      	ldr	r3, [pc, #248]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d2a:	789b      	ldrb	r3, [r3, #2]
 8082d2c:	021b      	lsls	r3, r3, #8
 8082d2e:	430b      	orrs	r3, r1
 8082d30:	493c      	ldr	r1, [pc, #240]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d32:	78c9      	ldrb	r1, [r1, #3]
 8082d34:	430b      	orrs	r3, r1
 8082d36:	0a1b      	lsrs	r3, r3, #8
 8082d38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8082d3c:	431a      	orrs	r2, r3
 8082d3e:	4b39      	ldr	r3, [pc, #228]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d40:	781b      	ldrb	r3, [r3, #0]
 8082d42:	0619      	lsls	r1, r3, #24
 8082d44:	4b37      	ldr	r3, [pc, #220]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d46:	785b      	ldrb	r3, [r3, #1]
 8082d48:	041b      	lsls	r3, r3, #16
 8082d4a:	4319      	orrs	r1, r3
 8082d4c:	4b35      	ldr	r3, [pc, #212]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d4e:	789b      	ldrb	r3, [r3, #2]
 8082d50:	021b      	lsls	r3, r3, #8
 8082d52:	430b      	orrs	r3, r1
 8082d54:	4933      	ldr	r1, [pc, #204]	; (8082e24 <MX_LWIP_Init+0x228>)
 8082d56:	78c9      	ldrb	r1, [r1, #3]
 8082d58:	430b      	orrs	r3, r1
 8082d5a:	0e1b      	lsrs	r3, r3, #24
 8082d5c:	4313      	orrs	r3, r2
 8082d5e:	4a34      	ldr	r2, [pc, #208]	; (8082e30 <MX_LWIP_Init+0x234>)
 8082d60:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8082d62:	4b31      	ldr	r3, [pc, #196]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d64:	781b      	ldrb	r3, [r3, #0]
 8082d66:	061a      	lsls	r2, r3, #24
 8082d68:	4b2f      	ldr	r3, [pc, #188]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d6a:	785b      	ldrb	r3, [r3, #1]
 8082d6c:	041b      	lsls	r3, r3, #16
 8082d6e:	431a      	orrs	r2, r3
 8082d70:	4b2d      	ldr	r3, [pc, #180]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d72:	789b      	ldrb	r3, [r3, #2]
 8082d74:	021b      	lsls	r3, r3, #8
 8082d76:	4313      	orrs	r3, r2
 8082d78:	4a2b      	ldr	r2, [pc, #172]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d7a:	78d2      	ldrb	r2, [r2, #3]
 8082d7c:	4313      	orrs	r3, r2
 8082d7e:	061a      	lsls	r2, r3, #24
 8082d80:	4b29      	ldr	r3, [pc, #164]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d82:	781b      	ldrb	r3, [r3, #0]
 8082d84:	0619      	lsls	r1, r3, #24
 8082d86:	4b28      	ldr	r3, [pc, #160]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d88:	785b      	ldrb	r3, [r3, #1]
 8082d8a:	041b      	lsls	r3, r3, #16
 8082d8c:	4319      	orrs	r1, r3
 8082d8e:	4b26      	ldr	r3, [pc, #152]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d90:	789b      	ldrb	r3, [r3, #2]
 8082d92:	021b      	lsls	r3, r3, #8
 8082d94:	430b      	orrs	r3, r1
 8082d96:	4924      	ldr	r1, [pc, #144]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082d98:	78c9      	ldrb	r1, [r1, #3]
 8082d9a:	430b      	orrs	r3, r1
 8082d9c:	021b      	lsls	r3, r3, #8
 8082d9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8082da2:	431a      	orrs	r2, r3
 8082da4:	4b20      	ldr	r3, [pc, #128]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082da6:	781b      	ldrb	r3, [r3, #0]
 8082da8:	0619      	lsls	r1, r3, #24
 8082daa:	4b1f      	ldr	r3, [pc, #124]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082dac:	785b      	ldrb	r3, [r3, #1]
 8082dae:	041b      	lsls	r3, r3, #16
 8082db0:	4319      	orrs	r1, r3
 8082db2:	4b1d      	ldr	r3, [pc, #116]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082db4:	789b      	ldrb	r3, [r3, #2]
 8082db6:	021b      	lsls	r3, r3, #8
 8082db8:	430b      	orrs	r3, r1
 8082dba:	491b      	ldr	r1, [pc, #108]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082dbc:	78c9      	ldrb	r1, [r1, #3]
 8082dbe:	430b      	orrs	r3, r1
 8082dc0:	0a1b      	lsrs	r3, r3, #8
 8082dc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8082dc6:	431a      	orrs	r2, r3
 8082dc8:	4b17      	ldr	r3, [pc, #92]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082dca:	781b      	ldrb	r3, [r3, #0]
 8082dcc:	0619      	lsls	r1, r3, #24
 8082dce:	4b16      	ldr	r3, [pc, #88]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082dd0:	785b      	ldrb	r3, [r3, #1]
 8082dd2:	041b      	lsls	r3, r3, #16
 8082dd4:	4319      	orrs	r1, r3
 8082dd6:	4b14      	ldr	r3, [pc, #80]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082dd8:	789b      	ldrb	r3, [r3, #2]
 8082dda:	021b      	lsls	r3, r3, #8
 8082ddc:	430b      	orrs	r3, r1
 8082dde:	4912      	ldr	r1, [pc, #72]	; (8082e28 <MX_LWIP_Init+0x22c>)
 8082de0:	78c9      	ldrb	r1, [r1, #3]
 8082de2:	430b      	orrs	r3, r1
 8082de4:	0e1b      	lsrs	r3, r3, #24
 8082de6:	4313      	orrs	r3, r2
 8082de8:	4a12      	ldr	r2, [pc, #72]	; (8082e34 <MX_LWIP_Init+0x238>)
 8082dea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8082dec:	4b12      	ldr	r3, [pc, #72]	; (8082e38 <MX_LWIP_Init+0x23c>)
 8082dee:	9302      	str	r3, [sp, #8]
 8082df0:	4b12      	ldr	r3, [pc, #72]	; (8082e3c <MX_LWIP_Init+0x240>)
 8082df2:	9301      	str	r3, [sp, #4]
 8082df4:	2300      	movs	r3, #0
 8082df6:	9300      	str	r3, [sp, #0]
 8082df8:	4b0e      	ldr	r3, [pc, #56]	; (8082e34 <MX_LWIP_Init+0x238>)
 8082dfa:	4a0d      	ldr	r2, [pc, #52]	; (8082e30 <MX_LWIP_Init+0x234>)
 8082dfc:	490b      	ldr	r1, [pc, #44]	; (8082e2c <MX_LWIP_Init+0x230>)
 8082dfe:	4810      	ldr	r0, [pc, #64]	; (8082e40 <MX_LWIP_Init+0x244>)
 8082e00:	f001 f888 	bl	8083f14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8082e04:	480e      	ldr	r0, [pc, #56]	; (8082e40 <MX_LWIP_Init+0x244>)
 8082e06:	f001 fa37 	bl	8084278 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8082e0a:	480d      	ldr	r0, [pc, #52]	; (8082e40 <MX_LWIP_Init+0x244>)
 8082e0c:	f001 fa44 	bl	8084298 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8082e10:	490c      	ldr	r1, [pc, #48]	; (8082e44 <MX_LWIP_Init+0x248>)
 8082e12:	480b      	ldr	r0, [pc, #44]	; (8082e40 <MX_LWIP_Init+0x244>)
 8082e14:	f001 fb42 	bl	808449c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8082e18:	bf00      	nop
 8082e1a:	46bd      	mov	sp, r7
 8082e1c:	bd80      	pop	{r7, pc}
 8082e1e:	bf00      	nop
 8082e20:	200000e4 	.word	0x200000e4
 8082e24:	200000e8 	.word	0x200000e8
 8082e28:	200000ec 	.word	0x200000ec
 8082e2c:	200000d8 	.word	0x200000d8
 8082e30:	200000dc 	.word	0x200000dc
 8082e34:	200000e0 	.word	0x200000e0
 8082e38:	0808cc95 	.word	0x0808cc95
 8082e3c:	080830a1 	.word	0x080830a1
 8082e40:	200000a4 	.word	0x200000a4
 8082e44:	08082e49 	.word	0x08082e49

08082e48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8082e48:	b480      	push	{r7}
 8082e4a:	b083      	sub	sp, #12
 8082e4c:	af00      	add	r7, sp, #0
 8082e4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8082e50:	bf00      	nop
 8082e52:	370c      	adds	r7, #12
 8082e54:	46bd      	mov	sp, r7
 8082e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082e5a:	4770      	bx	lr

08082e5c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8082e5c:	b580      	push	{r7, lr}
 8082e5e:	b084      	sub	sp, #16
 8082e60:	af00      	add	r7, sp, #0
 8082e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8082e64:	2300      	movs	r3, #0
 8082e66:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8082e68:	4b44      	ldr	r3, [pc, #272]	; (8082f7c <low_level_init+0x120>)
 8082e6a:	4a45      	ldr	r2, [pc, #276]	; (8082f80 <low_level_init+0x124>)
 8082e6c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8082e6e:	2300      	movs	r3, #0
 8082e70:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8082e72:	2380      	movs	r3, #128	; 0x80
 8082e74:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8082e76:	23e1      	movs	r3, #225	; 0xe1
 8082e78:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8082e7a:	2300      	movs	r3, #0
 8082e7c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8082e7e:	2300      	movs	r3, #0
 8082e80:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8082e82:	2300      	movs	r3, #0
 8082e84:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8082e86:	4a3d      	ldr	r2, [pc, #244]	; (8082f7c <low_level_init+0x120>)
 8082e88:	f107 0308 	add.w	r3, r7, #8
 8082e8c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8082e8e:	4b3b      	ldr	r3, [pc, #236]	; (8082f7c <low_level_init+0x120>)
 8082e90:	2200      	movs	r2, #0
 8082e92:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8082e94:	4b39      	ldr	r3, [pc, #228]	; (8082f7c <low_level_init+0x120>)
 8082e96:	4a3b      	ldr	r2, [pc, #236]	; (8082f84 <low_level_init+0x128>)
 8082e98:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8082e9a:	4b38      	ldr	r3, [pc, #224]	; (8082f7c <low_level_init+0x120>)
 8082e9c:	4a3a      	ldr	r2, [pc, #232]	; (8082f88 <low_level_init+0x12c>)
 8082e9e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8082ea0:	4b36      	ldr	r3, [pc, #216]	; (8082f7c <low_level_init+0x120>)
 8082ea2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8082ea6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8082ea8:	4834      	ldr	r0, [pc, #208]	; (8082f7c <low_level_init+0x120>)
 8082eaa:	f7fe f821 	bl	8080ef0 <HAL_ETH_Init>
 8082eae:	4603      	mov	r3, r0
 8082eb0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8082eb2:	2238      	movs	r2, #56	; 0x38
 8082eb4:	2100      	movs	r1, #0
 8082eb6:	4835      	ldr	r0, [pc, #212]	; (8082f8c <low_level_init+0x130>)
 8082eb8:	f00a f804 	bl	808cec4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8082ebc:	4b33      	ldr	r3, [pc, #204]	; (8082f8c <low_level_init+0x130>)
 8082ebe:	2221      	movs	r2, #33	; 0x21
 8082ec0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8082ec2:	4b32      	ldr	r3, [pc, #200]	; (8082f8c <low_level_init+0x130>)
 8082ec4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8082ec8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8082eca:	4b30      	ldr	r3, [pc, #192]	; (8082f8c <low_level_init+0x130>)
 8082ecc:	2200      	movs	r2, #0
 8082ece:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8082ed0:	482f      	ldr	r0, [pc, #188]	; (8082f90 <low_level_init+0x134>)
 8082ed2:	f000 fee7 	bl	8083ca4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8082ed6:	687b      	ldr	r3, [r7, #4]
 8082ed8:	2206      	movs	r2, #6
 8082eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8082ede:	4b27      	ldr	r3, [pc, #156]	; (8082f7c <low_level_init+0x120>)
 8082ee0:	685b      	ldr	r3, [r3, #4]
 8082ee2:	781a      	ldrb	r2, [r3, #0]
 8082ee4:	687b      	ldr	r3, [r7, #4]
 8082ee6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8082eea:	4b24      	ldr	r3, [pc, #144]	; (8082f7c <low_level_init+0x120>)
 8082eec:	685b      	ldr	r3, [r3, #4]
 8082eee:	785a      	ldrb	r2, [r3, #1]
 8082ef0:	687b      	ldr	r3, [r7, #4]
 8082ef2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8082ef6:	4b21      	ldr	r3, [pc, #132]	; (8082f7c <low_level_init+0x120>)
 8082ef8:	685b      	ldr	r3, [r3, #4]
 8082efa:	789a      	ldrb	r2, [r3, #2]
 8082efc:	687b      	ldr	r3, [r7, #4]
 8082efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8082f02:	4b1e      	ldr	r3, [pc, #120]	; (8082f7c <low_level_init+0x120>)
 8082f04:	685b      	ldr	r3, [r3, #4]
 8082f06:	78da      	ldrb	r2, [r3, #3]
 8082f08:	687b      	ldr	r3, [r7, #4]
 8082f0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8082f0e:	4b1b      	ldr	r3, [pc, #108]	; (8082f7c <low_level_init+0x120>)
 8082f10:	685b      	ldr	r3, [r3, #4]
 8082f12:	791a      	ldrb	r2, [r3, #4]
 8082f14:	687b      	ldr	r3, [r7, #4]
 8082f16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8082f1a:	4b18      	ldr	r3, [pc, #96]	; (8082f7c <low_level_init+0x120>)
 8082f1c:	685b      	ldr	r3, [r3, #4]
 8082f1e:	795a      	ldrb	r2, [r3, #5]
 8082f20:	687b      	ldr	r3, [r7, #4]
 8082f22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8082f26:	687b      	ldr	r3, [r7, #4]
 8082f28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8082f2c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8082f2e:	687b      	ldr	r3, [r7, #4]
 8082f30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8082f34:	f043 030a 	orr.w	r3, r3, #10
 8082f38:	b2da      	uxtb	r2, r3
 8082f3a:	687b      	ldr	r3, [r7, #4]
 8082f3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8082f40:	4914      	ldr	r1, [pc, #80]	; (8082f94 <low_level_init+0x138>)
 8082f42:	4815      	ldr	r0, [pc, #84]	; (8082f98 <low_level_init+0x13c>)
 8082f44:	f7fd fd51 	bl	80809ea <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8082f48:	4813      	ldr	r0, [pc, #76]	; (8082f98 <low_level_init+0x13c>)
 8082f4a:	f7fd fd80 	bl	8080a4e <DP83848_Init>
 8082f4e:	4603      	mov	r3, r0
 8082f50:	2b00      	cmp	r3, #0
 8082f52:	d006      	beq.n	8082f62 <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 8082f54:	6878      	ldr	r0, [r7, #4]
 8082f56:	f001 fa71 	bl	808443c <netif_set_link_down>
    netif_set_down(netif);
 8082f5a:	6878      	ldr	r0, [r7, #4]
 8082f5c:	f001 fa08 	bl	8084370 <netif_set_down>
 8082f60:	e008      	b.n	8082f74 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8082f62:	7bfb      	ldrb	r3, [r7, #15]
 8082f64:	2b00      	cmp	r3, #0
 8082f66:	d103      	bne.n	8082f70 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8082f68:	6878      	ldr	r0, [r7, #4]
 8082f6a:	f000 f9fd 	bl	8083368 <ethernet_link_check_state>
 8082f6e:	e001      	b.n	8082f74 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 8082f70:	f7fd fbde 	bl	8080730 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8082f74:	3710      	adds	r7, #16
 8082f76:	46bd      	mov	sp, r7
 8082f78:	bd80      	pop	{r7, pc}
 8082f7a:	bf00      	nop
 8082f7c:	20004bbc 	.word	0x20004bbc
 8082f80:	40028000 	.word	0x40028000
 8082f84:	20004b1c 	.word	0x20004b1c
 8082f88:	20004a7c 	.word	0x20004a7c
 8082f8c:	20004c6c 	.word	0x20004c6c
 8082f90:	0809097c 	.word	0x0809097c
 8082f94:	2000000c 	.word	0x2000000c
 8082f98:	20004ca4 	.word	0x20004ca4

08082f9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8082f9c:	b580      	push	{r7, lr}
 8082f9e:	b092      	sub	sp, #72	; 0x48
 8082fa0:	af00      	add	r7, sp, #0
 8082fa2:	6078      	str	r0, [r7, #4]
 8082fa4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8082fa6:	2300      	movs	r3, #0
 8082fa8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8082faa:	2300      	movs	r3, #0
 8082fac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8082fae:	2300      	movs	r3, #0
 8082fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8082fb4:	f107 030c 	add.w	r3, r7, #12
 8082fb8:	2230      	movs	r2, #48	; 0x30
 8082fba:	2100      	movs	r1, #0
 8082fbc:	4618      	mov	r0, r3
 8082fbe:	f009 ff81 	bl	808cec4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8082fc2:	f107 030c 	add.w	r3, r7, #12
 8082fc6:	2230      	movs	r2, #48	; 0x30
 8082fc8:	2100      	movs	r1, #0
 8082fca:	4618      	mov	r0, r3
 8082fcc:	f009 ff7a 	bl	808cec4 <memset>

  for(q = p; q != NULL; q = q->next)
 8082fd0:	683b      	ldr	r3, [r7, #0]
 8082fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8082fd4:	e045      	b.n	8083062 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8082fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8082fd8:	2b03      	cmp	r3, #3
 8082fda:	d902      	bls.n	8082fe2 <low_level_output+0x46>
      return ERR_IF;
 8082fdc:	f06f 030b 	mvn.w	r3, #11
 8082fe0:	e055      	b.n	808308e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8082fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8082fe4:	6859      	ldr	r1, [r3, #4]
 8082fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8082fe8:	4613      	mov	r3, r2
 8082fea:	005b      	lsls	r3, r3, #1
 8082fec:	4413      	add	r3, r2
 8082fee:	009b      	lsls	r3, r3, #2
 8082ff0:	3348      	adds	r3, #72	; 0x48
 8082ff2:	443b      	add	r3, r7
 8082ff4:	3b3c      	subs	r3, #60	; 0x3c
 8082ff6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8082ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8082ffa:	895b      	ldrh	r3, [r3, #10]
 8082ffc:	4619      	mov	r1, r3
 8082ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8083000:	4613      	mov	r3, r2
 8083002:	005b      	lsls	r3, r3, #1
 8083004:	4413      	add	r3, r2
 8083006:	009b      	lsls	r3, r3, #2
 8083008:	3348      	adds	r3, #72	; 0x48
 808300a:	443b      	add	r3, r7
 808300c:	3b38      	subs	r3, #56	; 0x38
 808300e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8083010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8083012:	2b00      	cmp	r3, #0
 8083014:	d011      	beq.n	808303a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8083016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8083018:	1e5a      	subs	r2, r3, #1
 808301a:	f107 000c 	add.w	r0, r7, #12
 808301e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8083020:	460b      	mov	r3, r1
 8083022:	005b      	lsls	r3, r3, #1
 8083024:	440b      	add	r3, r1
 8083026:	009b      	lsls	r3, r3, #2
 8083028:	18c1      	adds	r1, r0, r3
 808302a:	4613      	mov	r3, r2
 808302c:	005b      	lsls	r3, r3, #1
 808302e:	4413      	add	r3, r2
 8083030:	009b      	lsls	r3, r3, #2
 8083032:	3348      	adds	r3, #72	; 0x48
 8083034:	443b      	add	r3, r7
 8083036:	3b34      	subs	r3, #52	; 0x34
 8083038:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 808303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 808303c:	681b      	ldr	r3, [r3, #0]
 808303e:	2b00      	cmp	r3, #0
 8083040:	d109      	bne.n	8083056 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8083042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8083044:	4613      	mov	r3, r2
 8083046:	005b      	lsls	r3, r3, #1
 8083048:	4413      	add	r3, r2
 808304a:	009b      	lsls	r3, r3, #2
 808304c:	3348      	adds	r3, #72	; 0x48
 808304e:	443b      	add	r3, r7
 8083050:	3b34      	subs	r3, #52	; 0x34
 8083052:	2200      	movs	r2, #0
 8083054:	601a      	str	r2, [r3, #0]
    }

    i++;
 8083056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8083058:	3301      	adds	r3, #1
 808305a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 808305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 808305e:	681b      	ldr	r3, [r3, #0]
 8083060:	643b      	str	r3, [r7, #64]	; 0x40
 8083062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8083064:	2b00      	cmp	r3, #0
 8083066:	d1b6      	bne.n	8082fd6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8083068:	683b      	ldr	r3, [r7, #0]
 808306a:	891b      	ldrh	r3, [r3, #8]
 808306c:	461a      	mov	r2, r3
 808306e:	4b0a      	ldr	r3, [pc, #40]	; (8083098 <low_level_output+0xfc>)
 8083070:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8083072:	4a09      	ldr	r2, [pc, #36]	; (8083098 <low_level_output+0xfc>)
 8083074:	f107 030c 	add.w	r3, r7, #12
 8083078:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 808307a:	4a07      	ldr	r2, [pc, #28]	; (8083098 <low_level_output+0xfc>)
 808307c:	683b      	ldr	r3, [r7, #0]
 808307e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8083080:	2214      	movs	r2, #20
 8083082:	4905      	ldr	r1, [pc, #20]	; (8083098 <low_level_output+0xfc>)
 8083084:	4805      	ldr	r0, [pc, #20]	; (808309c <low_level_output+0x100>)
 8083086:	f7fe f887 	bl	8081198 <HAL_ETH_Transmit>

  return errval;
 808308a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 808308e:	4618      	mov	r0, r3
 8083090:	3748      	adds	r7, #72	; 0x48
 8083092:	46bd      	mov	sp, r7
 8083094:	bd80      	pop	{r7, pc}
 8083096:	bf00      	nop
 8083098:	20004c6c 	.word	0x20004c6c
 808309c:	20004bbc 	.word	0x20004bbc

080830a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80830a0:	b580      	push	{r7, lr}
 80830a2:	b082      	sub	sp, #8
 80830a4:	af00      	add	r7, sp, #0
 80830a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80830a8:	687b      	ldr	r3, [r7, #4]
 80830aa:	2b00      	cmp	r3, #0
 80830ac:	d106      	bne.n	80830bc <ethernetif_init+0x1c>
 80830ae:	4b0e      	ldr	r3, [pc, #56]	; (80830e8 <ethernetif_init+0x48>)
 80830b0:	f240 126f 	movw	r2, #367	; 0x16f
 80830b4:	490d      	ldr	r1, [pc, #52]	; (80830ec <ethernetif_init+0x4c>)
 80830b6:	480e      	ldr	r0, [pc, #56]	; (80830f0 <ethernetif_init+0x50>)
 80830b8:	f009 ff0c 	bl	808ced4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80830bc:	687b      	ldr	r3, [r7, #4]
 80830be:	2273      	movs	r2, #115	; 0x73
 80830c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80830c4:	687b      	ldr	r3, [r7, #4]
 80830c6:	2274      	movs	r2, #116	; 0x74
 80830c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80830cc:	687b      	ldr	r3, [r7, #4]
 80830ce:	4a09      	ldr	r2, [pc, #36]	; (80830f4 <ethernetif_init+0x54>)
 80830d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80830d2:	687b      	ldr	r3, [r7, #4]
 80830d4:	4a08      	ldr	r2, [pc, #32]	; (80830f8 <ethernetif_init+0x58>)
 80830d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80830d8:	6878      	ldr	r0, [r7, #4]
 80830da:	f7ff febf 	bl	8082e5c <low_level_init>

  return ERR_OK;
 80830de:	2300      	movs	r3, #0
}
 80830e0:	4618      	mov	r0, r3
 80830e2:	3708      	adds	r7, #8
 80830e4:	46bd      	mov	sp, r7
 80830e6:	bd80      	pop	{r7, pc}
 80830e8:	0808df8c 	.word	0x0808df8c
 80830ec:	0808dfa8 	.word	0x0808dfa8
 80830f0:	0808dfb8 	.word	0x0808dfb8
 80830f4:	0808b14d 	.word	0x0808b14d
 80830f8:	08082f9d 	.word	0x08082f9d

080830fc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80830fc:	b580      	push	{r7, lr}
 80830fe:	b084      	sub	sp, #16
 8083100:	af00      	add	r7, sp, #0
 8083102:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8083104:	687b      	ldr	r3, [r7, #4]
 8083106:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8083108:	68f9      	ldr	r1, [r7, #12]
 808310a:	4807      	ldr	r0, [pc, #28]	; (8083128 <pbuf_free_custom+0x2c>)
 808310c:	f000 feac 	bl	8083e68 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8083110:	4b06      	ldr	r3, [pc, #24]	; (808312c <pbuf_free_custom+0x30>)
 8083112:	781b      	ldrb	r3, [r3, #0]
 8083114:	2b01      	cmp	r3, #1
 8083116:	d102      	bne.n	808311e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8083118:	4b04      	ldr	r3, [pc, #16]	; (808312c <pbuf_free_custom+0x30>)
 808311a:	2200      	movs	r2, #0
 808311c:	701a      	strb	r2, [r3, #0]
  }
}
 808311e:	bf00      	nop
 8083120:	3710      	adds	r7, #16
 8083122:	46bd      	mov	sp, r7
 8083124:	bd80      	pop	{r7, pc}
 8083126:	bf00      	nop
 8083128:	0809097c 	.word	0x0809097c
 808312c:	20004a78 	.word	0x20004a78

08083130 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8083130:	b580      	push	{r7, lr}
 8083132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8083134:	f7fd fdc6 	bl	8080cc4 <HAL_GetTick>
 8083138:	4603      	mov	r3, r0
}
 808313a:	4618      	mov	r0, r3
 808313c:	bd80      	pop	{r7, pc}
	...

08083140 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8083140:	b580      	push	{r7, lr}
 8083142:	b08e      	sub	sp, #56	; 0x38
 8083144:	af00      	add	r7, sp, #0
 8083146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8083148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 808314c:	2200      	movs	r2, #0
 808314e:	601a      	str	r2, [r3, #0]
 8083150:	605a      	str	r2, [r3, #4]
 8083152:	609a      	str	r2, [r3, #8]
 8083154:	60da      	str	r2, [r3, #12]
 8083156:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8083158:	687b      	ldr	r3, [r7, #4]
 808315a:	681b      	ldr	r3, [r3, #0]
 808315c:	4a55      	ldr	r2, [pc, #340]	; (80832b4 <HAL_ETH_MspInit+0x174>)
 808315e:	4293      	cmp	r3, r2
 8083160:	f040 80a3 	bne.w	80832aa <HAL_ETH_MspInit+0x16a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8083164:	2300      	movs	r3, #0
 8083166:	623b      	str	r3, [r7, #32]
 8083168:	4b53      	ldr	r3, [pc, #332]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 808316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808316c:	4a52      	ldr	r2, [pc, #328]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 808316e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8083172:	6313      	str	r3, [r2, #48]	; 0x30
 8083174:	4b50      	ldr	r3, [pc, #320]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808317c:	623b      	str	r3, [r7, #32]
 808317e:	6a3b      	ldr	r3, [r7, #32]
 8083180:	2300      	movs	r3, #0
 8083182:	61fb      	str	r3, [r7, #28]
 8083184:	4b4c      	ldr	r3, [pc, #304]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083188:	4a4b      	ldr	r2, [pc, #300]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 808318a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 808318e:	6313      	str	r3, [r2, #48]	; 0x30
 8083190:	4b49      	ldr	r3, [pc, #292]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8083198:	61fb      	str	r3, [r7, #28]
 808319a:	69fb      	ldr	r3, [r7, #28]
 808319c:	2300      	movs	r3, #0
 808319e:	61bb      	str	r3, [r7, #24]
 80831a0:	4b45      	ldr	r3, [pc, #276]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831a4:	4a44      	ldr	r2, [pc, #272]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80831aa:	6313      	str	r3, [r2, #48]	; 0x30
 80831ac:	4b42      	ldr	r3, [pc, #264]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80831b4:	61bb      	str	r3, [r7, #24]
 80831b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80831b8:	2300      	movs	r3, #0
 80831ba:	617b      	str	r3, [r7, #20]
 80831bc:	4b3e      	ldr	r3, [pc, #248]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831c0:	4a3d      	ldr	r2, [pc, #244]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831c2:	f043 0310 	orr.w	r3, r3, #16
 80831c6:	6313      	str	r3, [r2, #48]	; 0x30
 80831c8:	4b3b      	ldr	r3, [pc, #236]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831cc:	f003 0310 	and.w	r3, r3, #16
 80831d0:	617b      	str	r3, [r7, #20]
 80831d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80831d4:	2300      	movs	r3, #0
 80831d6:	613b      	str	r3, [r7, #16]
 80831d8:	4b37      	ldr	r3, [pc, #220]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831dc:	4a36      	ldr	r2, [pc, #216]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831de:	f043 0304 	orr.w	r3, r3, #4
 80831e2:	6313      	str	r3, [r2, #48]	; 0x30
 80831e4:	4b34      	ldr	r3, [pc, #208]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831e8:	f003 0304 	and.w	r3, r3, #4
 80831ec:	613b      	str	r3, [r7, #16]
 80831ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80831f0:	2300      	movs	r3, #0
 80831f2:	60fb      	str	r3, [r7, #12]
 80831f4:	4b30      	ldr	r3, [pc, #192]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831f8:	4a2f      	ldr	r2, [pc, #188]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 80831fa:	f043 0301 	orr.w	r3, r3, #1
 80831fe:	6313      	str	r3, [r2, #48]	; 0x30
 8083200:	4b2d      	ldr	r3, [pc, #180]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083204:	f003 0301 	and.w	r3, r3, #1
 8083208:	60fb      	str	r3, [r7, #12]
 808320a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 808320c:	2300      	movs	r3, #0
 808320e:	60bb      	str	r3, [r7, #8]
 8083210:	4b29      	ldr	r3, [pc, #164]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083214:	4a28      	ldr	r2, [pc, #160]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 8083216:	f043 0302 	orr.w	r3, r3, #2
 808321a:	6313      	str	r3, [r2, #48]	; 0x30
 808321c:	4b26      	ldr	r3, [pc, #152]	; (80832b8 <HAL_ETH_MspInit+0x178>)
 808321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083220:	f003 0302 	and.w	r3, r3, #2
 8083224:	60bb      	str	r3, [r7, #8]
 8083226:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8083228:	2304      	movs	r3, #4
 808322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808322c:	2302      	movs	r3, #2
 808322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8083230:	2300      	movs	r3, #0
 8083232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8083234:	2303      	movs	r3, #3
 8083236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8083238:	230b      	movs	r3, #11
 808323a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 808323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8083240:	4619      	mov	r1, r3
 8083242:	481e      	ldr	r0, [pc, #120]	; (80832bc <HAL_ETH_MspInit+0x17c>)
 8083244:	f7fe feca 	bl	8081fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8083248:	233e      	movs	r3, #62	; 0x3e
 808324a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808324c:	2302      	movs	r3, #2
 808324e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8083250:	2300      	movs	r3, #0
 8083252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8083254:	2303      	movs	r3, #3
 8083256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8083258:	230b      	movs	r3, #11
 808325a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 808325c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8083260:	4619      	mov	r1, r3
 8083262:	4817      	ldr	r0, [pc, #92]	; (80832c0 <HAL_ETH_MspInit+0x180>)
 8083264:	f7fe feba 	bl	8081fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8083268:	238f      	movs	r3, #143	; 0x8f
 808326a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808326c:	2302      	movs	r3, #2
 808326e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8083270:	2300      	movs	r3, #0
 8083272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8083274:	2303      	movs	r3, #3
 8083276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8083278:	230b      	movs	r3, #11
 808327a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 808327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8083280:	4619      	mov	r1, r3
 8083282:	4810      	ldr	r0, [pc, #64]	; (80832c4 <HAL_ETH_MspInit+0x184>)
 8083284:	f7fe feaa 	bl	8081fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8083288:	f643 0303 	movw	r3, #14339	; 0x3803
 808328c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808328e:	2302      	movs	r3, #2
 8083290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8083292:	2300      	movs	r3, #0
 8083294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8083296:	2303      	movs	r3, #3
 8083298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 808329a:	230b      	movs	r3, #11
 808329c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 808329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80832a2:	4619      	mov	r1, r3
 80832a4:	4808      	ldr	r0, [pc, #32]	; (80832c8 <HAL_ETH_MspInit+0x188>)
 80832a6:	f7fe fe99 	bl	8081fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80832aa:	bf00      	nop
 80832ac:	3738      	adds	r7, #56	; 0x38
 80832ae:	46bd      	mov	sp, r7
 80832b0:	bd80      	pop	{r7, pc}
 80832b2:	bf00      	nop
 80832b4:	40028000 	.word	0x40028000
 80832b8:	40023800 	.word	0x40023800
 80832bc:	40021000 	.word	0x40021000
 80832c0:	40020800 	.word	0x40020800
 80832c4:	40020000 	.word	0x40020000
 80832c8:	40020400 	.word	0x40020400

080832cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80832cc:	b580      	push	{r7, lr}
 80832ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80832d0:	4802      	ldr	r0, [pc, #8]	; (80832dc <ETH_PHY_IO_Init+0x10>)
 80832d2:	f7fe fa1f 	bl	8081714 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80832d6:	2300      	movs	r3, #0
}
 80832d8:	4618      	mov	r0, r3
 80832da:	bd80      	pop	{r7, pc}
 80832dc:	20004bbc 	.word	0x20004bbc

080832e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80832e0:	b480      	push	{r7}
 80832e2:	af00      	add	r7, sp, #0
  return 0;
 80832e4:	2300      	movs	r3, #0
}
 80832e6:	4618      	mov	r0, r3
 80832e8:	46bd      	mov	sp, r7
 80832ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80832ee:	4770      	bx	lr

080832f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80832f0:	b580      	push	{r7, lr}
 80832f2:	b084      	sub	sp, #16
 80832f4:	af00      	add	r7, sp, #0
 80832f6:	60f8      	str	r0, [r7, #12]
 80832f8:	60b9      	str	r1, [r7, #8]
 80832fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80832fc:	687b      	ldr	r3, [r7, #4]
 80832fe:	68ba      	ldr	r2, [r7, #8]
 8083300:	68f9      	ldr	r1, [r7, #12]
 8083302:	4807      	ldr	r0, [pc, #28]	; (8083320 <ETH_PHY_IO_ReadReg+0x30>)
 8083304:	f7fe f860 	bl	80813c8 <HAL_ETH_ReadPHYRegister>
 8083308:	4603      	mov	r3, r0
 808330a:	2b00      	cmp	r3, #0
 808330c:	d002      	beq.n	8083314 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 808330e:	f04f 33ff 	mov.w	r3, #4294967295
 8083312:	e000      	b.n	8083316 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8083314:	2300      	movs	r3, #0
}
 8083316:	4618      	mov	r0, r3
 8083318:	3710      	adds	r7, #16
 808331a:	46bd      	mov	sp, r7
 808331c:	bd80      	pop	{r7, pc}
 808331e:	bf00      	nop
 8083320:	20004bbc 	.word	0x20004bbc

08083324 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8083324:	b580      	push	{r7, lr}
 8083326:	b084      	sub	sp, #16
 8083328:	af00      	add	r7, sp, #0
 808332a:	60f8      	str	r0, [r7, #12]
 808332c:	60b9      	str	r1, [r7, #8]
 808332e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8083330:	687b      	ldr	r3, [r7, #4]
 8083332:	68ba      	ldr	r2, [r7, #8]
 8083334:	68f9      	ldr	r1, [r7, #12]
 8083336:	4807      	ldr	r0, [pc, #28]	; (8083354 <ETH_PHY_IO_WriteReg+0x30>)
 8083338:	f7fe f891 	bl	808145e <HAL_ETH_WritePHYRegister>
 808333c:	4603      	mov	r3, r0
 808333e:	2b00      	cmp	r3, #0
 8083340:	d002      	beq.n	8083348 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8083342:	f04f 33ff 	mov.w	r3, #4294967295
 8083346:	e000      	b.n	808334a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8083348:	2300      	movs	r3, #0
}
 808334a:	4618      	mov	r0, r3
 808334c:	3710      	adds	r7, #16
 808334e:	46bd      	mov	sp, r7
 8083350:	bd80      	pop	{r7, pc}
 8083352:	bf00      	nop
 8083354:	20004bbc 	.word	0x20004bbc

08083358 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8083358:	b580      	push	{r7, lr}
 808335a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 808335c:	f7fd fcb2 	bl	8080cc4 <HAL_GetTick>
 8083360:	4603      	mov	r3, r0
}
 8083362:	4618      	mov	r0, r3
 8083364:	bd80      	pop	{r7, pc}
	...

08083368 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8083368:	b580      	push	{r7, lr}
 808336a:	b0a0      	sub	sp, #128	; 0x80
 808336c:	af00      	add	r7, sp, #0
 808336e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8083370:	f107 030c 	add.w	r3, r7, #12
 8083374:	2264      	movs	r2, #100	; 0x64
 8083376:	2100      	movs	r1, #0
 8083378:	4618      	mov	r0, r3
 808337a:	f009 fda3 	bl	808cec4 <memset>
  int32_t PHYLinkState = 0;
 808337e:	2300      	movs	r3, #0
 8083380:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8083382:	2300      	movs	r3, #0
 8083384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8083386:	2300      	movs	r3, #0
 8083388:	67bb      	str	r3, [r7, #120]	; 0x78
 808338a:	2300      	movs	r3, #0
 808338c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 808338e:	483a      	ldr	r0, [pc, #232]	; (8083478 <ethernet_link_check_state+0x110>)
 8083390:	f7fd fbaa 	bl	8080ae8 <DP83848_GetLinkState>
 8083394:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8083396:	687b      	ldr	r3, [r7, #4]
 8083398:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808339c:	089b      	lsrs	r3, r3, #2
 808339e:	f003 0301 	and.w	r3, r3, #1
 80833a2:	b2db      	uxtb	r3, r3
 80833a4:	2b00      	cmp	r3, #0
 80833a6:	d00c      	beq.n	80833c2 <ethernet_link_check_state+0x5a>
 80833a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80833aa:	2b01      	cmp	r3, #1
 80833ac:	dc09      	bgt.n	80833c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80833ae:	4833      	ldr	r0, [pc, #204]	; (808347c <ethernet_link_check_state+0x114>)
 80833b0:	f7fd fe99 	bl	80810e6 <HAL_ETH_Stop>
    netif_set_down(netif);
 80833b4:	6878      	ldr	r0, [r7, #4]
 80833b6:	f000 ffdb 	bl	8084370 <netif_set_down>
    netif_set_link_down(netif);
 80833ba:	6878      	ldr	r0, [r7, #4]
 80833bc:	f001 f83e 	bl	808443c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80833c0:	e055      	b.n	808346e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80833c2:	687b      	ldr	r3, [r7, #4]
 80833c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80833c8:	f003 0304 	and.w	r3, r3, #4
 80833cc:	2b00      	cmp	r3, #0
 80833ce:	d14e      	bne.n	808346e <ethernet_link_check_state+0x106>
 80833d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80833d2:	2b01      	cmp	r3, #1
 80833d4:	dd4b      	ble.n	808346e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80833d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80833d8:	3b02      	subs	r3, #2
 80833da:	2b03      	cmp	r3, #3
 80833dc:	d82a      	bhi.n	8083434 <ethernet_link_check_state+0xcc>
 80833de:	a201      	add	r2, pc, #4	; (adr r2, 80833e4 <ethernet_link_check_state+0x7c>)
 80833e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80833e4:	080833f5 	.word	0x080833f5
 80833e8:	08083407 	.word	0x08083407
 80833ec:	08083417 	.word	0x08083417
 80833f0:	08083427 	.word	0x08083427
      duplex = ETH_FULLDUPLEX_MODE;
 80833f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80833f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80833fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80833fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8083400:	2301      	movs	r3, #1
 8083402:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8083404:	e017      	b.n	8083436 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8083406:	2300      	movs	r3, #0
 8083408:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 808340a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 808340e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8083410:	2301      	movs	r3, #1
 8083412:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8083414:	e00f      	b.n	8083436 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8083416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808341a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 808341c:	2300      	movs	r3, #0
 808341e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8083420:	2301      	movs	r3, #1
 8083422:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8083424:	e007      	b.n	8083436 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8083426:	2300      	movs	r3, #0
 8083428:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 808342a:	2300      	movs	r3, #0
 808342c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 808342e:	2301      	movs	r3, #1
 8083430:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8083432:	e000      	b.n	8083436 <ethernet_link_check_state+0xce>
      break;
 8083434:	bf00      	nop
    if(linkchanged)
 8083436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8083438:	2b00      	cmp	r3, #0
 808343a:	d018      	beq.n	808346e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 808343c:	f107 030c 	add.w	r3, r7, #12
 8083440:	4619      	mov	r1, r3
 8083442:	480e      	ldr	r0, [pc, #56]	; (808347c <ethernet_link_check_state+0x114>)
 8083444:	f7fe f854 	bl	80814f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8083448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 808344a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 808344c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 808344e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8083450:	f107 030c 	add.w	r3, r7, #12
 8083454:	4619      	mov	r1, r3
 8083456:	4809      	ldr	r0, [pc, #36]	; (808347c <ethernet_link_check_state+0x114>)
 8083458:	f7fe f941 	bl	80816de <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 808345c:	4807      	ldr	r0, [pc, #28]	; (808347c <ethernet_link_check_state+0x114>)
 808345e:	f7fd fde3 	bl	8081028 <HAL_ETH_Start>
      netif_set_up(netif);
 8083462:	6878      	ldr	r0, [r7, #4]
 8083464:	f000 ff18 	bl	8084298 <netif_set_up>
      netif_set_link_up(netif);
 8083468:	6878      	ldr	r0, [r7, #4]
 808346a:	f000 ffb3 	bl	80843d4 <netif_set_link_up>
}
 808346e:	bf00      	nop
 8083470:	3780      	adds	r7, #128	; 0x80
 8083472:	46bd      	mov	sp, r7
 8083474:	bd80      	pop	{r7, pc}
 8083476:	bf00      	nop
 8083478:	20004ca4 	.word	0x20004ca4
 808347c:	20004bbc 	.word	0x20004bbc

08083480 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8083480:	b580      	push	{r7, lr}
 8083482:	b086      	sub	sp, #24
 8083484:	af02      	add	r7, sp, #8
 8083486:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8083488:	4812      	ldr	r0, [pc, #72]	; (80834d4 <HAL_ETH_RxAllocateCallback+0x54>)
 808348a:	f000 fc7f 	bl	8083d8c <memp_malloc_pool>
 808348e:	60f8      	str	r0, [r7, #12]
  if (p)
 8083490:	68fb      	ldr	r3, [r7, #12]
 8083492:	2b00      	cmp	r3, #0
 8083494:	d014      	beq.n	80834c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8083496:	68fb      	ldr	r3, [r7, #12]
 8083498:	f103 0220 	add.w	r2, r3, #32
 808349c:	687b      	ldr	r3, [r7, #4]
 808349e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80834a0:	68fb      	ldr	r3, [r7, #12]
 80834a2:	4a0d      	ldr	r2, [pc, #52]	; (80834d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80834a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80834a6:	687b      	ldr	r3, [r7, #4]
 80834a8:	681b      	ldr	r3, [r3, #0]
 80834aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80834ae:	9201      	str	r2, [sp, #4]
 80834b0:	9300      	str	r3, [sp, #0]
 80834b2:	68fb      	ldr	r3, [r7, #12]
 80834b4:	2241      	movs	r2, #65	; 0x41
 80834b6:	2100      	movs	r1, #0
 80834b8:	2000      	movs	r0, #0
 80834ba:	f001 f995 	bl	80847e8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80834be:	e005      	b.n	80834cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80834c0:	4b06      	ldr	r3, [pc, #24]	; (80834dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80834c2:	2201      	movs	r2, #1
 80834c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80834c6:	687b      	ldr	r3, [r7, #4]
 80834c8:	2200      	movs	r2, #0
 80834ca:	601a      	str	r2, [r3, #0]
}
 80834cc:	bf00      	nop
 80834ce:	3710      	adds	r7, #16
 80834d0:	46bd      	mov	sp, r7
 80834d2:	bd80      	pop	{r7, pc}
 80834d4:	0809097c 	.word	0x0809097c
 80834d8:	080830fd 	.word	0x080830fd
 80834dc:	20004a78 	.word	0x20004a78

080834e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80834e0:	b480      	push	{r7}
 80834e2:	b083      	sub	sp, #12
 80834e4:	af00      	add	r7, sp, #0
 80834e6:	4603      	mov	r3, r0
 80834e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80834ea:	88fb      	ldrh	r3, [r7, #6]
 80834ec:	021b      	lsls	r3, r3, #8
 80834ee:	b21a      	sxth	r2, r3
 80834f0:	88fb      	ldrh	r3, [r7, #6]
 80834f2:	0a1b      	lsrs	r3, r3, #8
 80834f4:	b29b      	uxth	r3, r3
 80834f6:	b21b      	sxth	r3, r3
 80834f8:	4313      	orrs	r3, r2
 80834fa:	b21b      	sxth	r3, r3
 80834fc:	b29b      	uxth	r3, r3
}
 80834fe:	4618      	mov	r0, r3
 8083500:	370c      	adds	r7, #12
 8083502:	46bd      	mov	sp, r7
 8083504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083508:	4770      	bx	lr

0808350a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 808350a:	b480      	push	{r7}
 808350c:	b083      	sub	sp, #12
 808350e:	af00      	add	r7, sp, #0
 8083510:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8083512:	687b      	ldr	r3, [r7, #4]
 8083514:	061a      	lsls	r2, r3, #24
 8083516:	687b      	ldr	r3, [r7, #4]
 8083518:	021b      	lsls	r3, r3, #8
 808351a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 808351e:	431a      	orrs	r2, r3
 8083520:	687b      	ldr	r3, [r7, #4]
 8083522:	0a1b      	lsrs	r3, r3, #8
 8083524:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8083528:	431a      	orrs	r2, r3
 808352a:	687b      	ldr	r3, [r7, #4]
 808352c:	0e1b      	lsrs	r3, r3, #24
 808352e:	4313      	orrs	r3, r2
}
 8083530:	4618      	mov	r0, r3
 8083532:	370c      	adds	r7, #12
 8083534:	46bd      	mov	sp, r7
 8083536:	f85d 7b04 	ldr.w	r7, [sp], #4
 808353a:	4770      	bx	lr

0808353c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 808353c:	b580      	push	{r7, lr}
 808353e:	b082      	sub	sp, #8
 8083540:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8083542:	2300      	movs	r3, #0
 8083544:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8083546:	f000 f8d5 	bl	80836f4 <mem_init>
  memp_init();
 808354a:	f000 fbdb 	bl	8083d04 <memp_init>
  pbuf_init();
  netif_init();
 808354e:	f000 fcd9 	bl	8083f04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8083552:	f006 fff5 	bl	808a540 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8083556:	f001 fd8f 	bl	8085078 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 808355a:	f006 ffa9 	bl	808a4b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 808355e:	bf00      	nop
 8083560:	3708      	adds	r7, #8
 8083562:	46bd      	mov	sp, r7
 8083564:	bd80      	pop	{r7, pc}
	...

08083568 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8083568:	b480      	push	{r7}
 808356a:	b083      	sub	sp, #12
 808356c:	af00      	add	r7, sp, #0
 808356e:	4603      	mov	r3, r0
 8083570:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8083572:	4b05      	ldr	r3, [pc, #20]	; (8083588 <ptr_to_mem+0x20>)
 8083574:	681a      	ldr	r2, [r3, #0]
 8083576:	88fb      	ldrh	r3, [r7, #6]
 8083578:	4413      	add	r3, r2
}
 808357a:	4618      	mov	r0, r3
 808357c:	370c      	adds	r7, #12
 808357e:	46bd      	mov	sp, r7
 8083580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083584:	4770      	bx	lr
 8083586:	bf00      	nop
 8083588:	20005330 	.word	0x20005330

0808358c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 808358c:	b480      	push	{r7}
 808358e:	b083      	sub	sp, #12
 8083590:	af00      	add	r7, sp, #0
 8083592:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8083594:	4b05      	ldr	r3, [pc, #20]	; (80835ac <mem_to_ptr+0x20>)
 8083596:	681b      	ldr	r3, [r3, #0]
 8083598:	687a      	ldr	r2, [r7, #4]
 808359a:	1ad3      	subs	r3, r2, r3
 808359c:	b29b      	uxth	r3, r3
}
 808359e:	4618      	mov	r0, r3
 80835a0:	370c      	adds	r7, #12
 80835a2:	46bd      	mov	sp, r7
 80835a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80835a8:	4770      	bx	lr
 80835aa:	bf00      	nop
 80835ac:	20005330 	.word	0x20005330

080835b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80835b0:	b590      	push	{r4, r7, lr}
 80835b2:	b085      	sub	sp, #20
 80835b4:	af00      	add	r7, sp, #0
 80835b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80835b8:	4b45      	ldr	r3, [pc, #276]	; (80836d0 <plug_holes+0x120>)
 80835ba:	681b      	ldr	r3, [r3, #0]
 80835bc:	687a      	ldr	r2, [r7, #4]
 80835be:	429a      	cmp	r2, r3
 80835c0:	d206      	bcs.n	80835d0 <plug_holes+0x20>
 80835c2:	4b44      	ldr	r3, [pc, #272]	; (80836d4 <plug_holes+0x124>)
 80835c4:	f240 12df 	movw	r2, #479	; 0x1df
 80835c8:	4943      	ldr	r1, [pc, #268]	; (80836d8 <plug_holes+0x128>)
 80835ca:	4844      	ldr	r0, [pc, #272]	; (80836dc <plug_holes+0x12c>)
 80835cc:	f009 fc82 	bl	808ced4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80835d0:	4b43      	ldr	r3, [pc, #268]	; (80836e0 <plug_holes+0x130>)
 80835d2:	681b      	ldr	r3, [r3, #0]
 80835d4:	687a      	ldr	r2, [r7, #4]
 80835d6:	429a      	cmp	r2, r3
 80835d8:	d306      	bcc.n	80835e8 <plug_holes+0x38>
 80835da:	4b3e      	ldr	r3, [pc, #248]	; (80836d4 <plug_holes+0x124>)
 80835dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80835e0:	4940      	ldr	r1, [pc, #256]	; (80836e4 <plug_holes+0x134>)
 80835e2:	483e      	ldr	r0, [pc, #248]	; (80836dc <plug_holes+0x12c>)
 80835e4:	f009 fc76 	bl	808ced4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80835e8:	687b      	ldr	r3, [r7, #4]
 80835ea:	791b      	ldrb	r3, [r3, #4]
 80835ec:	2b00      	cmp	r3, #0
 80835ee:	d006      	beq.n	80835fe <plug_holes+0x4e>
 80835f0:	4b38      	ldr	r3, [pc, #224]	; (80836d4 <plug_holes+0x124>)
 80835f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80835f6:	493c      	ldr	r1, [pc, #240]	; (80836e8 <plug_holes+0x138>)
 80835f8:	4838      	ldr	r0, [pc, #224]	; (80836dc <plug_holes+0x12c>)
 80835fa:	f009 fc6b 	bl	808ced4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80835fe:	687b      	ldr	r3, [r7, #4]
 8083600:	881b      	ldrh	r3, [r3, #0]
 8083602:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083606:	d906      	bls.n	8083616 <plug_holes+0x66>
 8083608:	4b32      	ldr	r3, [pc, #200]	; (80836d4 <plug_holes+0x124>)
 808360a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 808360e:	4937      	ldr	r1, [pc, #220]	; (80836ec <plug_holes+0x13c>)
 8083610:	4832      	ldr	r0, [pc, #200]	; (80836dc <plug_holes+0x12c>)
 8083612:	f009 fc5f 	bl	808ced4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8083616:	687b      	ldr	r3, [r7, #4]
 8083618:	881b      	ldrh	r3, [r3, #0]
 808361a:	4618      	mov	r0, r3
 808361c:	f7ff ffa4 	bl	8083568 <ptr_to_mem>
 8083620:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8083622:	687a      	ldr	r2, [r7, #4]
 8083624:	68fb      	ldr	r3, [r7, #12]
 8083626:	429a      	cmp	r2, r3
 8083628:	d024      	beq.n	8083674 <plug_holes+0xc4>
 808362a:	68fb      	ldr	r3, [r7, #12]
 808362c:	791b      	ldrb	r3, [r3, #4]
 808362e:	2b00      	cmp	r3, #0
 8083630:	d120      	bne.n	8083674 <plug_holes+0xc4>
 8083632:	4b2b      	ldr	r3, [pc, #172]	; (80836e0 <plug_holes+0x130>)
 8083634:	681b      	ldr	r3, [r3, #0]
 8083636:	68fa      	ldr	r2, [r7, #12]
 8083638:	429a      	cmp	r2, r3
 808363a:	d01b      	beq.n	8083674 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 808363c:	4b2c      	ldr	r3, [pc, #176]	; (80836f0 <plug_holes+0x140>)
 808363e:	681b      	ldr	r3, [r3, #0]
 8083640:	68fa      	ldr	r2, [r7, #12]
 8083642:	429a      	cmp	r2, r3
 8083644:	d102      	bne.n	808364c <plug_holes+0x9c>
      lfree = mem;
 8083646:	4a2a      	ldr	r2, [pc, #168]	; (80836f0 <plug_holes+0x140>)
 8083648:	687b      	ldr	r3, [r7, #4]
 808364a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 808364c:	68fb      	ldr	r3, [r7, #12]
 808364e:	881a      	ldrh	r2, [r3, #0]
 8083650:	687b      	ldr	r3, [r7, #4]
 8083652:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8083654:	68fb      	ldr	r3, [r7, #12]
 8083656:	881b      	ldrh	r3, [r3, #0]
 8083658:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 808365c:	d00a      	beq.n	8083674 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 808365e:	68fb      	ldr	r3, [r7, #12]
 8083660:	881b      	ldrh	r3, [r3, #0]
 8083662:	4618      	mov	r0, r3
 8083664:	f7ff ff80 	bl	8083568 <ptr_to_mem>
 8083668:	4604      	mov	r4, r0
 808366a:	6878      	ldr	r0, [r7, #4]
 808366c:	f7ff ff8e 	bl	808358c <mem_to_ptr>
 8083670:	4603      	mov	r3, r0
 8083672:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8083674:	687b      	ldr	r3, [r7, #4]
 8083676:	885b      	ldrh	r3, [r3, #2]
 8083678:	4618      	mov	r0, r3
 808367a:	f7ff ff75 	bl	8083568 <ptr_to_mem>
 808367e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8083680:	68ba      	ldr	r2, [r7, #8]
 8083682:	687b      	ldr	r3, [r7, #4]
 8083684:	429a      	cmp	r2, r3
 8083686:	d01f      	beq.n	80836c8 <plug_holes+0x118>
 8083688:	68bb      	ldr	r3, [r7, #8]
 808368a:	791b      	ldrb	r3, [r3, #4]
 808368c:	2b00      	cmp	r3, #0
 808368e:	d11b      	bne.n	80836c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8083690:	4b17      	ldr	r3, [pc, #92]	; (80836f0 <plug_holes+0x140>)
 8083692:	681b      	ldr	r3, [r3, #0]
 8083694:	687a      	ldr	r2, [r7, #4]
 8083696:	429a      	cmp	r2, r3
 8083698:	d102      	bne.n	80836a0 <plug_holes+0xf0>
      lfree = pmem;
 808369a:	4a15      	ldr	r2, [pc, #84]	; (80836f0 <plug_holes+0x140>)
 808369c:	68bb      	ldr	r3, [r7, #8]
 808369e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80836a0:	687b      	ldr	r3, [r7, #4]
 80836a2:	881a      	ldrh	r2, [r3, #0]
 80836a4:	68bb      	ldr	r3, [r7, #8]
 80836a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80836a8:	687b      	ldr	r3, [r7, #4]
 80836aa:	881b      	ldrh	r3, [r3, #0]
 80836ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80836b0:	d00a      	beq.n	80836c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80836b2:	687b      	ldr	r3, [r7, #4]
 80836b4:	881b      	ldrh	r3, [r3, #0]
 80836b6:	4618      	mov	r0, r3
 80836b8:	f7ff ff56 	bl	8083568 <ptr_to_mem>
 80836bc:	4604      	mov	r4, r0
 80836be:	68b8      	ldr	r0, [r7, #8]
 80836c0:	f7ff ff64 	bl	808358c <mem_to_ptr>
 80836c4:	4603      	mov	r3, r0
 80836c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80836c8:	bf00      	nop
 80836ca:	3714      	adds	r7, #20
 80836cc:	46bd      	mov	sp, r7
 80836ce:	bd90      	pop	{r4, r7, pc}
 80836d0:	20005330 	.word	0x20005330
 80836d4:	0808dfe0 	.word	0x0808dfe0
 80836d8:	0808e010 	.word	0x0808e010
 80836dc:	0808e028 	.word	0x0808e028
 80836e0:	20005334 	.word	0x20005334
 80836e4:	0808e050 	.word	0x0808e050
 80836e8:	0808e06c 	.word	0x0808e06c
 80836ec:	0808e088 	.word	0x0808e088
 80836f0:	20005338 	.word	0x20005338

080836f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80836f4:	b580      	push	{r7, lr}
 80836f6:	b082      	sub	sp, #8
 80836f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80836fa:	4b18      	ldr	r3, [pc, #96]	; (808375c <mem_init+0x68>)
 80836fc:	3303      	adds	r3, #3
 80836fe:	f023 0303 	bic.w	r3, r3, #3
 8083702:	461a      	mov	r2, r3
 8083704:	4b16      	ldr	r3, [pc, #88]	; (8083760 <mem_init+0x6c>)
 8083706:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8083708:	4b15      	ldr	r3, [pc, #84]	; (8083760 <mem_init+0x6c>)
 808370a:	681b      	ldr	r3, [r3, #0]
 808370c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 808370e:	687b      	ldr	r3, [r7, #4]
 8083710:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8083714:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8083716:	687b      	ldr	r3, [r7, #4]
 8083718:	2200      	movs	r2, #0
 808371a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 808371c:	687b      	ldr	r3, [r7, #4]
 808371e:	2200      	movs	r2, #0
 8083720:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8083722:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8083726:	f7ff ff1f 	bl	8083568 <ptr_to_mem>
 808372a:	4603      	mov	r3, r0
 808372c:	4a0d      	ldr	r2, [pc, #52]	; (8083764 <mem_init+0x70>)
 808372e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8083730:	4b0c      	ldr	r3, [pc, #48]	; (8083764 <mem_init+0x70>)
 8083732:	681b      	ldr	r3, [r3, #0]
 8083734:	2201      	movs	r2, #1
 8083736:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8083738:	4b0a      	ldr	r3, [pc, #40]	; (8083764 <mem_init+0x70>)
 808373a:	681b      	ldr	r3, [r3, #0]
 808373c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8083740:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8083742:	4b08      	ldr	r3, [pc, #32]	; (8083764 <mem_init+0x70>)
 8083744:	681b      	ldr	r3, [r3, #0]
 8083746:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 808374a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 808374c:	4b04      	ldr	r3, [pc, #16]	; (8083760 <mem_init+0x6c>)
 808374e:	681b      	ldr	r3, [r3, #0]
 8083750:	4a05      	ldr	r2, [pc, #20]	; (8083768 <mem_init+0x74>)
 8083752:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8083754:	bf00      	nop
 8083756:	3708      	adds	r7, #8
 8083758:	46bd      	mov	sp, r7
 808375a:	bd80      	pop	{r7, pc}
 808375c:	20004cdc 	.word	0x20004cdc
 8083760:	20005330 	.word	0x20005330
 8083764:	20005334 	.word	0x20005334
 8083768:	20005338 	.word	0x20005338

0808376c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 808376c:	b580      	push	{r7, lr}
 808376e:	b086      	sub	sp, #24
 8083770:	af00      	add	r7, sp, #0
 8083772:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8083774:	6878      	ldr	r0, [r7, #4]
 8083776:	f7ff ff09 	bl	808358c <mem_to_ptr>
 808377a:	4603      	mov	r3, r0
 808377c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 808377e:	687b      	ldr	r3, [r7, #4]
 8083780:	881b      	ldrh	r3, [r3, #0]
 8083782:	4618      	mov	r0, r3
 8083784:	f7ff fef0 	bl	8083568 <ptr_to_mem>
 8083788:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 808378a:	687b      	ldr	r3, [r7, #4]
 808378c:	885b      	ldrh	r3, [r3, #2]
 808378e:	4618      	mov	r0, r3
 8083790:	f7ff feea 	bl	8083568 <ptr_to_mem>
 8083794:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8083796:	687b      	ldr	r3, [r7, #4]
 8083798:	881b      	ldrh	r3, [r3, #0]
 808379a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 808379e:	d818      	bhi.n	80837d2 <mem_link_valid+0x66>
 80837a0:	687b      	ldr	r3, [r7, #4]
 80837a2:	885b      	ldrh	r3, [r3, #2]
 80837a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80837a8:	d813      	bhi.n	80837d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80837aa:	687b      	ldr	r3, [r7, #4]
 80837ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80837ae:	8afa      	ldrh	r2, [r7, #22]
 80837b0:	429a      	cmp	r2, r3
 80837b2:	d004      	beq.n	80837be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80837b4:	68fb      	ldr	r3, [r7, #12]
 80837b6:	881b      	ldrh	r3, [r3, #0]
 80837b8:	8afa      	ldrh	r2, [r7, #22]
 80837ba:	429a      	cmp	r2, r3
 80837bc:	d109      	bne.n	80837d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80837be:	4b08      	ldr	r3, [pc, #32]	; (80837e0 <mem_link_valid+0x74>)
 80837c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80837c2:	693a      	ldr	r2, [r7, #16]
 80837c4:	429a      	cmp	r2, r3
 80837c6:	d006      	beq.n	80837d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80837c8:	693b      	ldr	r3, [r7, #16]
 80837ca:	885b      	ldrh	r3, [r3, #2]
 80837cc:	8afa      	ldrh	r2, [r7, #22]
 80837ce:	429a      	cmp	r2, r3
 80837d0:	d001      	beq.n	80837d6 <mem_link_valid+0x6a>
    return 0;
 80837d2:	2300      	movs	r3, #0
 80837d4:	e000      	b.n	80837d8 <mem_link_valid+0x6c>
  }
  return 1;
 80837d6:	2301      	movs	r3, #1
}
 80837d8:	4618      	mov	r0, r3
 80837da:	3718      	adds	r7, #24
 80837dc:	46bd      	mov	sp, r7
 80837de:	bd80      	pop	{r7, pc}
 80837e0:	20005334 	.word	0x20005334

080837e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80837e4:	b580      	push	{r7, lr}
 80837e6:	b084      	sub	sp, #16
 80837e8:	af00      	add	r7, sp, #0
 80837ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80837ec:	687b      	ldr	r3, [r7, #4]
 80837ee:	2b00      	cmp	r3, #0
 80837f0:	d04c      	beq.n	808388c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80837f2:	687b      	ldr	r3, [r7, #4]
 80837f4:	f003 0303 	and.w	r3, r3, #3
 80837f8:	2b00      	cmp	r3, #0
 80837fa:	d007      	beq.n	808380c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80837fc:	4b25      	ldr	r3, [pc, #148]	; (8083894 <mem_free+0xb0>)
 80837fe:	f240 2273 	movw	r2, #627	; 0x273
 8083802:	4925      	ldr	r1, [pc, #148]	; (8083898 <mem_free+0xb4>)
 8083804:	4825      	ldr	r0, [pc, #148]	; (808389c <mem_free+0xb8>)
 8083806:	f009 fb65 	bl	808ced4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 808380a:	e040      	b.n	808388e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 808380c:	687b      	ldr	r3, [r7, #4]
 808380e:	3b08      	subs	r3, #8
 8083810:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8083812:	4b23      	ldr	r3, [pc, #140]	; (80838a0 <mem_free+0xbc>)
 8083814:	681b      	ldr	r3, [r3, #0]
 8083816:	68fa      	ldr	r2, [r7, #12]
 8083818:	429a      	cmp	r2, r3
 808381a:	d306      	bcc.n	808382a <mem_free+0x46>
 808381c:	687b      	ldr	r3, [r7, #4]
 808381e:	f103 020c 	add.w	r2, r3, #12
 8083822:	4b20      	ldr	r3, [pc, #128]	; (80838a4 <mem_free+0xc0>)
 8083824:	681b      	ldr	r3, [r3, #0]
 8083826:	429a      	cmp	r2, r3
 8083828:	d907      	bls.n	808383a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 808382a:	4b1a      	ldr	r3, [pc, #104]	; (8083894 <mem_free+0xb0>)
 808382c:	f240 227f 	movw	r2, #639	; 0x27f
 8083830:	491d      	ldr	r1, [pc, #116]	; (80838a8 <mem_free+0xc4>)
 8083832:	481a      	ldr	r0, [pc, #104]	; (808389c <mem_free+0xb8>)
 8083834:	f009 fb4e 	bl	808ced4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8083838:	e029      	b.n	808388e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 808383a:	68fb      	ldr	r3, [r7, #12]
 808383c:	791b      	ldrb	r3, [r3, #4]
 808383e:	2b00      	cmp	r3, #0
 8083840:	d107      	bne.n	8083852 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8083842:	4b14      	ldr	r3, [pc, #80]	; (8083894 <mem_free+0xb0>)
 8083844:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8083848:	4918      	ldr	r1, [pc, #96]	; (80838ac <mem_free+0xc8>)
 808384a:	4814      	ldr	r0, [pc, #80]	; (808389c <mem_free+0xb8>)
 808384c:	f009 fb42 	bl	808ced4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8083850:	e01d      	b.n	808388e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8083852:	68f8      	ldr	r0, [r7, #12]
 8083854:	f7ff ff8a 	bl	808376c <mem_link_valid>
 8083858:	4603      	mov	r3, r0
 808385a:	2b00      	cmp	r3, #0
 808385c:	d107      	bne.n	808386e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 808385e:	4b0d      	ldr	r3, [pc, #52]	; (8083894 <mem_free+0xb0>)
 8083860:	f240 2295 	movw	r2, #661	; 0x295
 8083864:	4912      	ldr	r1, [pc, #72]	; (80838b0 <mem_free+0xcc>)
 8083866:	480d      	ldr	r0, [pc, #52]	; (808389c <mem_free+0xb8>)
 8083868:	f009 fb34 	bl	808ced4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 808386c:	e00f      	b.n	808388e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 808386e:	68fb      	ldr	r3, [r7, #12]
 8083870:	2200      	movs	r2, #0
 8083872:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8083874:	4b0f      	ldr	r3, [pc, #60]	; (80838b4 <mem_free+0xd0>)
 8083876:	681b      	ldr	r3, [r3, #0]
 8083878:	68fa      	ldr	r2, [r7, #12]
 808387a:	429a      	cmp	r2, r3
 808387c:	d202      	bcs.n	8083884 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 808387e:	4a0d      	ldr	r2, [pc, #52]	; (80838b4 <mem_free+0xd0>)
 8083880:	68fb      	ldr	r3, [r7, #12]
 8083882:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8083884:	68f8      	ldr	r0, [r7, #12]
 8083886:	f7ff fe93 	bl	80835b0 <plug_holes>
 808388a:	e000      	b.n	808388e <mem_free+0xaa>
    return;
 808388c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 808388e:	3710      	adds	r7, #16
 8083890:	46bd      	mov	sp, r7
 8083892:	bd80      	pop	{r7, pc}
 8083894:	0808dfe0 	.word	0x0808dfe0
 8083898:	0808e0b4 	.word	0x0808e0b4
 808389c:	0808e028 	.word	0x0808e028
 80838a0:	20005330 	.word	0x20005330
 80838a4:	20005334 	.word	0x20005334
 80838a8:	0808e0d8 	.word	0x0808e0d8
 80838ac:	0808e0f4 	.word	0x0808e0f4
 80838b0:	0808e11c 	.word	0x0808e11c
 80838b4:	20005338 	.word	0x20005338

080838b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80838b8:	b580      	push	{r7, lr}
 80838ba:	b088      	sub	sp, #32
 80838bc:	af00      	add	r7, sp, #0
 80838be:	6078      	str	r0, [r7, #4]
 80838c0:	460b      	mov	r3, r1
 80838c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80838c4:	887b      	ldrh	r3, [r7, #2]
 80838c6:	3303      	adds	r3, #3
 80838c8:	b29b      	uxth	r3, r3
 80838ca:	f023 0303 	bic.w	r3, r3, #3
 80838ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80838d0:	8bfb      	ldrh	r3, [r7, #30]
 80838d2:	2b0b      	cmp	r3, #11
 80838d4:	d801      	bhi.n	80838da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80838d6:	230c      	movs	r3, #12
 80838d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80838da:	8bfb      	ldrh	r3, [r7, #30]
 80838dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80838e0:	d803      	bhi.n	80838ea <mem_trim+0x32>
 80838e2:	8bfa      	ldrh	r2, [r7, #30]
 80838e4:	887b      	ldrh	r3, [r7, #2]
 80838e6:	429a      	cmp	r2, r3
 80838e8:	d201      	bcs.n	80838ee <mem_trim+0x36>
    return NULL;
 80838ea:	2300      	movs	r3, #0
 80838ec:	e0cc      	b.n	8083a88 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80838ee:	4b68      	ldr	r3, [pc, #416]	; (8083a90 <mem_trim+0x1d8>)
 80838f0:	681b      	ldr	r3, [r3, #0]
 80838f2:	687a      	ldr	r2, [r7, #4]
 80838f4:	429a      	cmp	r2, r3
 80838f6:	d304      	bcc.n	8083902 <mem_trim+0x4a>
 80838f8:	4b66      	ldr	r3, [pc, #408]	; (8083a94 <mem_trim+0x1dc>)
 80838fa:	681b      	ldr	r3, [r3, #0]
 80838fc:	687a      	ldr	r2, [r7, #4]
 80838fe:	429a      	cmp	r2, r3
 8083900:	d306      	bcc.n	8083910 <mem_trim+0x58>
 8083902:	4b65      	ldr	r3, [pc, #404]	; (8083a98 <mem_trim+0x1e0>)
 8083904:	f240 22d1 	movw	r2, #721	; 0x2d1
 8083908:	4964      	ldr	r1, [pc, #400]	; (8083a9c <mem_trim+0x1e4>)
 808390a:	4865      	ldr	r0, [pc, #404]	; (8083aa0 <mem_trim+0x1e8>)
 808390c:	f009 fae2 	bl	808ced4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8083910:	4b5f      	ldr	r3, [pc, #380]	; (8083a90 <mem_trim+0x1d8>)
 8083912:	681b      	ldr	r3, [r3, #0]
 8083914:	687a      	ldr	r2, [r7, #4]
 8083916:	429a      	cmp	r2, r3
 8083918:	d304      	bcc.n	8083924 <mem_trim+0x6c>
 808391a:	4b5e      	ldr	r3, [pc, #376]	; (8083a94 <mem_trim+0x1dc>)
 808391c:	681b      	ldr	r3, [r3, #0]
 808391e:	687a      	ldr	r2, [r7, #4]
 8083920:	429a      	cmp	r2, r3
 8083922:	d301      	bcc.n	8083928 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8083924:	687b      	ldr	r3, [r7, #4]
 8083926:	e0af      	b.n	8083a88 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8083928:	687b      	ldr	r3, [r7, #4]
 808392a:	3b08      	subs	r3, #8
 808392c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 808392e:	69b8      	ldr	r0, [r7, #24]
 8083930:	f7ff fe2c 	bl	808358c <mem_to_ptr>
 8083934:	4603      	mov	r3, r0
 8083936:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8083938:	69bb      	ldr	r3, [r7, #24]
 808393a:	881a      	ldrh	r2, [r3, #0]
 808393c:	8afb      	ldrh	r3, [r7, #22]
 808393e:	1ad3      	subs	r3, r2, r3
 8083940:	b29b      	uxth	r3, r3
 8083942:	3b08      	subs	r3, #8
 8083944:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8083946:	8bfa      	ldrh	r2, [r7, #30]
 8083948:	8abb      	ldrh	r3, [r7, #20]
 808394a:	429a      	cmp	r2, r3
 808394c:	d906      	bls.n	808395c <mem_trim+0xa4>
 808394e:	4b52      	ldr	r3, [pc, #328]	; (8083a98 <mem_trim+0x1e0>)
 8083950:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8083954:	4953      	ldr	r1, [pc, #332]	; (8083aa4 <mem_trim+0x1ec>)
 8083956:	4852      	ldr	r0, [pc, #328]	; (8083aa0 <mem_trim+0x1e8>)
 8083958:	f009 fabc 	bl	808ced4 <iprintf>
  if (newsize > size) {
 808395c:	8bfa      	ldrh	r2, [r7, #30]
 808395e:	8abb      	ldrh	r3, [r7, #20]
 8083960:	429a      	cmp	r2, r3
 8083962:	d901      	bls.n	8083968 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8083964:	2300      	movs	r3, #0
 8083966:	e08f      	b.n	8083a88 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8083968:	8bfa      	ldrh	r2, [r7, #30]
 808396a:	8abb      	ldrh	r3, [r7, #20]
 808396c:	429a      	cmp	r2, r3
 808396e:	d101      	bne.n	8083974 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8083970:	687b      	ldr	r3, [r7, #4]
 8083972:	e089      	b.n	8083a88 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8083974:	69bb      	ldr	r3, [r7, #24]
 8083976:	881b      	ldrh	r3, [r3, #0]
 8083978:	4618      	mov	r0, r3
 808397a:	f7ff fdf5 	bl	8083568 <ptr_to_mem>
 808397e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8083980:	693b      	ldr	r3, [r7, #16]
 8083982:	791b      	ldrb	r3, [r3, #4]
 8083984:	2b00      	cmp	r3, #0
 8083986:	d13f      	bne.n	8083a08 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8083988:	69bb      	ldr	r3, [r7, #24]
 808398a:	881b      	ldrh	r3, [r3, #0]
 808398c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083990:	d106      	bne.n	80839a0 <mem_trim+0xe8>
 8083992:	4b41      	ldr	r3, [pc, #260]	; (8083a98 <mem_trim+0x1e0>)
 8083994:	f240 22f5 	movw	r2, #757	; 0x2f5
 8083998:	4943      	ldr	r1, [pc, #268]	; (8083aa8 <mem_trim+0x1f0>)
 808399a:	4841      	ldr	r0, [pc, #260]	; (8083aa0 <mem_trim+0x1e8>)
 808399c:	f009 fa9a 	bl	808ced4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80839a0:	693b      	ldr	r3, [r7, #16]
 80839a2:	881b      	ldrh	r3, [r3, #0]
 80839a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80839a6:	8afa      	ldrh	r2, [r7, #22]
 80839a8:	8bfb      	ldrh	r3, [r7, #30]
 80839aa:	4413      	add	r3, r2
 80839ac:	b29b      	uxth	r3, r3
 80839ae:	3308      	adds	r3, #8
 80839b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80839b2:	4b3e      	ldr	r3, [pc, #248]	; (8083aac <mem_trim+0x1f4>)
 80839b4:	681b      	ldr	r3, [r3, #0]
 80839b6:	693a      	ldr	r2, [r7, #16]
 80839b8:	429a      	cmp	r2, r3
 80839ba:	d106      	bne.n	80839ca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80839bc:	89fb      	ldrh	r3, [r7, #14]
 80839be:	4618      	mov	r0, r3
 80839c0:	f7ff fdd2 	bl	8083568 <ptr_to_mem>
 80839c4:	4603      	mov	r3, r0
 80839c6:	4a39      	ldr	r2, [pc, #228]	; (8083aac <mem_trim+0x1f4>)
 80839c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80839ca:	89fb      	ldrh	r3, [r7, #14]
 80839cc:	4618      	mov	r0, r3
 80839ce:	f7ff fdcb 	bl	8083568 <ptr_to_mem>
 80839d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80839d4:	693b      	ldr	r3, [r7, #16]
 80839d6:	2200      	movs	r2, #0
 80839d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80839da:	693b      	ldr	r3, [r7, #16]
 80839dc:	89ba      	ldrh	r2, [r7, #12]
 80839de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80839e0:	693b      	ldr	r3, [r7, #16]
 80839e2:	8afa      	ldrh	r2, [r7, #22]
 80839e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80839e6:	69bb      	ldr	r3, [r7, #24]
 80839e8:	89fa      	ldrh	r2, [r7, #14]
 80839ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80839ec:	693b      	ldr	r3, [r7, #16]
 80839ee:	881b      	ldrh	r3, [r3, #0]
 80839f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80839f4:	d047      	beq.n	8083a86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80839f6:	693b      	ldr	r3, [r7, #16]
 80839f8:	881b      	ldrh	r3, [r3, #0]
 80839fa:	4618      	mov	r0, r3
 80839fc:	f7ff fdb4 	bl	8083568 <ptr_to_mem>
 8083a00:	4602      	mov	r2, r0
 8083a02:	89fb      	ldrh	r3, [r7, #14]
 8083a04:	8053      	strh	r3, [r2, #2]
 8083a06:	e03e      	b.n	8083a86 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8083a08:	8bfb      	ldrh	r3, [r7, #30]
 8083a0a:	f103 0214 	add.w	r2, r3, #20
 8083a0e:	8abb      	ldrh	r3, [r7, #20]
 8083a10:	429a      	cmp	r2, r3
 8083a12:	d838      	bhi.n	8083a86 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8083a14:	8afa      	ldrh	r2, [r7, #22]
 8083a16:	8bfb      	ldrh	r3, [r7, #30]
 8083a18:	4413      	add	r3, r2
 8083a1a:	b29b      	uxth	r3, r3
 8083a1c:	3308      	adds	r3, #8
 8083a1e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8083a20:	69bb      	ldr	r3, [r7, #24]
 8083a22:	881b      	ldrh	r3, [r3, #0]
 8083a24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083a28:	d106      	bne.n	8083a38 <mem_trim+0x180>
 8083a2a:	4b1b      	ldr	r3, [pc, #108]	; (8083a98 <mem_trim+0x1e0>)
 8083a2c:	f240 3216 	movw	r2, #790	; 0x316
 8083a30:	491d      	ldr	r1, [pc, #116]	; (8083aa8 <mem_trim+0x1f0>)
 8083a32:	481b      	ldr	r0, [pc, #108]	; (8083aa0 <mem_trim+0x1e8>)
 8083a34:	f009 fa4e 	bl	808ced4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8083a38:	89fb      	ldrh	r3, [r7, #14]
 8083a3a:	4618      	mov	r0, r3
 8083a3c:	f7ff fd94 	bl	8083568 <ptr_to_mem>
 8083a40:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8083a42:	4b1a      	ldr	r3, [pc, #104]	; (8083aac <mem_trim+0x1f4>)
 8083a44:	681b      	ldr	r3, [r3, #0]
 8083a46:	693a      	ldr	r2, [r7, #16]
 8083a48:	429a      	cmp	r2, r3
 8083a4a:	d202      	bcs.n	8083a52 <mem_trim+0x19a>
      lfree = mem2;
 8083a4c:	4a17      	ldr	r2, [pc, #92]	; (8083aac <mem_trim+0x1f4>)
 8083a4e:	693b      	ldr	r3, [r7, #16]
 8083a50:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8083a52:	693b      	ldr	r3, [r7, #16]
 8083a54:	2200      	movs	r2, #0
 8083a56:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8083a58:	69bb      	ldr	r3, [r7, #24]
 8083a5a:	881a      	ldrh	r2, [r3, #0]
 8083a5c:	693b      	ldr	r3, [r7, #16]
 8083a5e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8083a60:	693b      	ldr	r3, [r7, #16]
 8083a62:	8afa      	ldrh	r2, [r7, #22]
 8083a64:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8083a66:	69bb      	ldr	r3, [r7, #24]
 8083a68:	89fa      	ldrh	r2, [r7, #14]
 8083a6a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8083a6c:	693b      	ldr	r3, [r7, #16]
 8083a6e:	881b      	ldrh	r3, [r3, #0]
 8083a70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083a74:	d007      	beq.n	8083a86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8083a76:	693b      	ldr	r3, [r7, #16]
 8083a78:	881b      	ldrh	r3, [r3, #0]
 8083a7a:	4618      	mov	r0, r3
 8083a7c:	f7ff fd74 	bl	8083568 <ptr_to_mem>
 8083a80:	4602      	mov	r2, r0
 8083a82:	89fb      	ldrh	r3, [r7, #14]
 8083a84:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8083a86:	687b      	ldr	r3, [r7, #4]
}
 8083a88:	4618      	mov	r0, r3
 8083a8a:	3720      	adds	r7, #32
 8083a8c:	46bd      	mov	sp, r7
 8083a8e:	bd80      	pop	{r7, pc}
 8083a90:	20005330 	.word	0x20005330
 8083a94:	20005334 	.word	0x20005334
 8083a98:	0808dfe0 	.word	0x0808dfe0
 8083a9c:	0808e150 	.word	0x0808e150
 8083aa0:	0808e028 	.word	0x0808e028
 8083aa4:	0808e168 	.word	0x0808e168
 8083aa8:	0808e188 	.word	0x0808e188
 8083aac:	20005338 	.word	0x20005338

08083ab0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8083ab0:	b580      	push	{r7, lr}
 8083ab2:	b088      	sub	sp, #32
 8083ab4:	af00      	add	r7, sp, #0
 8083ab6:	4603      	mov	r3, r0
 8083ab8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8083aba:	88fb      	ldrh	r3, [r7, #6]
 8083abc:	2b00      	cmp	r3, #0
 8083abe:	d101      	bne.n	8083ac4 <mem_malloc+0x14>
    return NULL;
 8083ac0:	2300      	movs	r3, #0
 8083ac2:	e0d9      	b.n	8083c78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8083ac4:	88fb      	ldrh	r3, [r7, #6]
 8083ac6:	3303      	adds	r3, #3
 8083ac8:	b29b      	uxth	r3, r3
 8083aca:	f023 0303 	bic.w	r3, r3, #3
 8083ace:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8083ad0:	8bbb      	ldrh	r3, [r7, #28]
 8083ad2:	2b0b      	cmp	r3, #11
 8083ad4:	d801      	bhi.n	8083ada <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8083ad6:	230c      	movs	r3, #12
 8083ad8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8083ada:	8bbb      	ldrh	r3, [r7, #28]
 8083adc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083ae0:	d803      	bhi.n	8083aea <mem_malloc+0x3a>
 8083ae2:	8bba      	ldrh	r2, [r7, #28]
 8083ae4:	88fb      	ldrh	r3, [r7, #6]
 8083ae6:	429a      	cmp	r2, r3
 8083ae8:	d201      	bcs.n	8083aee <mem_malloc+0x3e>
    return NULL;
 8083aea:	2300      	movs	r3, #0
 8083aec:	e0c4      	b.n	8083c78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8083aee:	4b64      	ldr	r3, [pc, #400]	; (8083c80 <mem_malloc+0x1d0>)
 8083af0:	681b      	ldr	r3, [r3, #0]
 8083af2:	4618      	mov	r0, r3
 8083af4:	f7ff fd4a 	bl	808358c <mem_to_ptr>
 8083af8:	4603      	mov	r3, r0
 8083afa:	83fb      	strh	r3, [r7, #30]
 8083afc:	e0b4      	b.n	8083c68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8083afe:	8bfb      	ldrh	r3, [r7, #30]
 8083b00:	4618      	mov	r0, r3
 8083b02:	f7ff fd31 	bl	8083568 <ptr_to_mem>
 8083b06:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8083b08:	697b      	ldr	r3, [r7, #20]
 8083b0a:	791b      	ldrb	r3, [r3, #4]
 8083b0c:	2b00      	cmp	r3, #0
 8083b0e:	f040 80a4 	bne.w	8083c5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8083b12:	697b      	ldr	r3, [r7, #20]
 8083b14:	881b      	ldrh	r3, [r3, #0]
 8083b16:	461a      	mov	r2, r3
 8083b18:	8bfb      	ldrh	r3, [r7, #30]
 8083b1a:	1ad3      	subs	r3, r2, r3
 8083b1c:	f1a3 0208 	sub.w	r2, r3, #8
 8083b20:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8083b22:	429a      	cmp	r2, r3
 8083b24:	f0c0 8099 	bcc.w	8083c5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8083b28:	697b      	ldr	r3, [r7, #20]
 8083b2a:	881b      	ldrh	r3, [r3, #0]
 8083b2c:	461a      	mov	r2, r3
 8083b2e:	8bfb      	ldrh	r3, [r7, #30]
 8083b30:	1ad3      	subs	r3, r2, r3
 8083b32:	f1a3 0208 	sub.w	r2, r3, #8
 8083b36:	8bbb      	ldrh	r3, [r7, #28]
 8083b38:	3314      	adds	r3, #20
 8083b3a:	429a      	cmp	r2, r3
 8083b3c:	d333      	bcc.n	8083ba6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8083b3e:	8bfa      	ldrh	r2, [r7, #30]
 8083b40:	8bbb      	ldrh	r3, [r7, #28]
 8083b42:	4413      	add	r3, r2
 8083b44:	b29b      	uxth	r3, r3
 8083b46:	3308      	adds	r3, #8
 8083b48:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8083b4a:	8a7b      	ldrh	r3, [r7, #18]
 8083b4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083b50:	d106      	bne.n	8083b60 <mem_malloc+0xb0>
 8083b52:	4b4c      	ldr	r3, [pc, #304]	; (8083c84 <mem_malloc+0x1d4>)
 8083b54:	f240 3287 	movw	r2, #903	; 0x387
 8083b58:	494b      	ldr	r1, [pc, #300]	; (8083c88 <mem_malloc+0x1d8>)
 8083b5a:	484c      	ldr	r0, [pc, #304]	; (8083c8c <mem_malloc+0x1dc>)
 8083b5c:	f009 f9ba 	bl	808ced4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8083b60:	8a7b      	ldrh	r3, [r7, #18]
 8083b62:	4618      	mov	r0, r3
 8083b64:	f7ff fd00 	bl	8083568 <ptr_to_mem>
 8083b68:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8083b6a:	68fb      	ldr	r3, [r7, #12]
 8083b6c:	2200      	movs	r2, #0
 8083b6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8083b70:	697b      	ldr	r3, [r7, #20]
 8083b72:	881a      	ldrh	r2, [r3, #0]
 8083b74:	68fb      	ldr	r3, [r7, #12]
 8083b76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8083b78:	68fb      	ldr	r3, [r7, #12]
 8083b7a:	8bfa      	ldrh	r2, [r7, #30]
 8083b7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8083b7e:	697b      	ldr	r3, [r7, #20]
 8083b80:	8a7a      	ldrh	r2, [r7, #18]
 8083b82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8083b84:	697b      	ldr	r3, [r7, #20]
 8083b86:	2201      	movs	r2, #1
 8083b88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8083b8a:	68fb      	ldr	r3, [r7, #12]
 8083b8c:	881b      	ldrh	r3, [r3, #0]
 8083b8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8083b92:	d00b      	beq.n	8083bac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8083b94:	68fb      	ldr	r3, [r7, #12]
 8083b96:	881b      	ldrh	r3, [r3, #0]
 8083b98:	4618      	mov	r0, r3
 8083b9a:	f7ff fce5 	bl	8083568 <ptr_to_mem>
 8083b9e:	4602      	mov	r2, r0
 8083ba0:	8a7b      	ldrh	r3, [r7, #18]
 8083ba2:	8053      	strh	r3, [r2, #2]
 8083ba4:	e002      	b.n	8083bac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8083ba6:	697b      	ldr	r3, [r7, #20]
 8083ba8:	2201      	movs	r2, #1
 8083baa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8083bac:	4b34      	ldr	r3, [pc, #208]	; (8083c80 <mem_malloc+0x1d0>)
 8083bae:	681b      	ldr	r3, [r3, #0]
 8083bb0:	697a      	ldr	r2, [r7, #20]
 8083bb2:	429a      	cmp	r2, r3
 8083bb4:	d127      	bne.n	8083c06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8083bb6:	4b32      	ldr	r3, [pc, #200]	; (8083c80 <mem_malloc+0x1d0>)
 8083bb8:	681b      	ldr	r3, [r3, #0]
 8083bba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8083bbc:	e005      	b.n	8083bca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8083bbe:	69bb      	ldr	r3, [r7, #24]
 8083bc0:	881b      	ldrh	r3, [r3, #0]
 8083bc2:	4618      	mov	r0, r3
 8083bc4:	f7ff fcd0 	bl	8083568 <ptr_to_mem>
 8083bc8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8083bca:	69bb      	ldr	r3, [r7, #24]
 8083bcc:	791b      	ldrb	r3, [r3, #4]
 8083bce:	2b00      	cmp	r3, #0
 8083bd0:	d004      	beq.n	8083bdc <mem_malloc+0x12c>
 8083bd2:	4b2f      	ldr	r3, [pc, #188]	; (8083c90 <mem_malloc+0x1e0>)
 8083bd4:	681b      	ldr	r3, [r3, #0]
 8083bd6:	69ba      	ldr	r2, [r7, #24]
 8083bd8:	429a      	cmp	r2, r3
 8083bda:	d1f0      	bne.n	8083bbe <mem_malloc+0x10e>
          }
          lfree = cur;
 8083bdc:	4a28      	ldr	r2, [pc, #160]	; (8083c80 <mem_malloc+0x1d0>)
 8083bde:	69bb      	ldr	r3, [r7, #24]
 8083be0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8083be2:	4b27      	ldr	r3, [pc, #156]	; (8083c80 <mem_malloc+0x1d0>)
 8083be4:	681a      	ldr	r2, [r3, #0]
 8083be6:	4b2a      	ldr	r3, [pc, #168]	; (8083c90 <mem_malloc+0x1e0>)
 8083be8:	681b      	ldr	r3, [r3, #0]
 8083bea:	429a      	cmp	r2, r3
 8083bec:	d00b      	beq.n	8083c06 <mem_malloc+0x156>
 8083bee:	4b24      	ldr	r3, [pc, #144]	; (8083c80 <mem_malloc+0x1d0>)
 8083bf0:	681b      	ldr	r3, [r3, #0]
 8083bf2:	791b      	ldrb	r3, [r3, #4]
 8083bf4:	2b00      	cmp	r3, #0
 8083bf6:	d006      	beq.n	8083c06 <mem_malloc+0x156>
 8083bf8:	4b22      	ldr	r3, [pc, #136]	; (8083c84 <mem_malloc+0x1d4>)
 8083bfa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8083bfe:	4925      	ldr	r1, [pc, #148]	; (8083c94 <mem_malloc+0x1e4>)
 8083c00:	4822      	ldr	r0, [pc, #136]	; (8083c8c <mem_malloc+0x1dc>)
 8083c02:	f009 f967 	bl	808ced4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8083c06:	8bba      	ldrh	r2, [r7, #28]
 8083c08:	697b      	ldr	r3, [r7, #20]
 8083c0a:	4413      	add	r3, r2
 8083c0c:	3308      	adds	r3, #8
 8083c0e:	4a20      	ldr	r2, [pc, #128]	; (8083c90 <mem_malloc+0x1e0>)
 8083c10:	6812      	ldr	r2, [r2, #0]
 8083c12:	4293      	cmp	r3, r2
 8083c14:	d906      	bls.n	8083c24 <mem_malloc+0x174>
 8083c16:	4b1b      	ldr	r3, [pc, #108]	; (8083c84 <mem_malloc+0x1d4>)
 8083c18:	f240 32b9 	movw	r2, #953	; 0x3b9
 8083c1c:	491e      	ldr	r1, [pc, #120]	; (8083c98 <mem_malloc+0x1e8>)
 8083c1e:	481b      	ldr	r0, [pc, #108]	; (8083c8c <mem_malloc+0x1dc>)
 8083c20:	f009 f958 	bl	808ced4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8083c24:	697b      	ldr	r3, [r7, #20]
 8083c26:	f003 0303 	and.w	r3, r3, #3
 8083c2a:	2b00      	cmp	r3, #0
 8083c2c:	d006      	beq.n	8083c3c <mem_malloc+0x18c>
 8083c2e:	4b15      	ldr	r3, [pc, #84]	; (8083c84 <mem_malloc+0x1d4>)
 8083c30:	f240 32bb 	movw	r2, #955	; 0x3bb
 8083c34:	4919      	ldr	r1, [pc, #100]	; (8083c9c <mem_malloc+0x1ec>)
 8083c36:	4815      	ldr	r0, [pc, #84]	; (8083c8c <mem_malloc+0x1dc>)
 8083c38:	f009 f94c 	bl	808ced4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8083c3c:	697b      	ldr	r3, [r7, #20]
 8083c3e:	f003 0303 	and.w	r3, r3, #3
 8083c42:	2b00      	cmp	r3, #0
 8083c44:	d006      	beq.n	8083c54 <mem_malloc+0x1a4>
 8083c46:	4b0f      	ldr	r3, [pc, #60]	; (8083c84 <mem_malloc+0x1d4>)
 8083c48:	f240 32bd 	movw	r2, #957	; 0x3bd
 8083c4c:	4914      	ldr	r1, [pc, #80]	; (8083ca0 <mem_malloc+0x1f0>)
 8083c4e:	480f      	ldr	r0, [pc, #60]	; (8083c8c <mem_malloc+0x1dc>)
 8083c50:	f009 f940 	bl	808ced4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8083c54:	697b      	ldr	r3, [r7, #20]
 8083c56:	3308      	adds	r3, #8
 8083c58:	e00e      	b.n	8083c78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8083c5a:	8bfb      	ldrh	r3, [r7, #30]
 8083c5c:	4618      	mov	r0, r3
 8083c5e:	f7ff fc83 	bl	8083568 <ptr_to_mem>
 8083c62:	4603      	mov	r3, r0
 8083c64:	881b      	ldrh	r3, [r3, #0]
 8083c66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8083c68:	8bfa      	ldrh	r2, [r7, #30]
 8083c6a:	8bbb      	ldrh	r3, [r7, #28]
 8083c6c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8083c70:	429a      	cmp	r2, r3
 8083c72:	f4ff af44 	bcc.w	8083afe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8083c76:	2300      	movs	r3, #0
}
 8083c78:	4618      	mov	r0, r3
 8083c7a:	3720      	adds	r7, #32
 8083c7c:	46bd      	mov	sp, r7
 8083c7e:	bd80      	pop	{r7, pc}
 8083c80:	20005338 	.word	0x20005338
 8083c84:	0808dfe0 	.word	0x0808dfe0
 8083c88:	0808e188 	.word	0x0808e188
 8083c8c:	0808e028 	.word	0x0808e028
 8083c90:	20005334 	.word	0x20005334
 8083c94:	0808e19c 	.word	0x0808e19c
 8083c98:	0808e1b8 	.word	0x0808e1b8
 8083c9c:	0808e1e8 	.word	0x0808e1e8
 8083ca0:	0808e218 	.word	0x0808e218

08083ca4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8083ca4:	b480      	push	{r7}
 8083ca6:	b085      	sub	sp, #20
 8083ca8:	af00      	add	r7, sp, #0
 8083caa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8083cac:	687b      	ldr	r3, [r7, #4]
 8083cae:	689b      	ldr	r3, [r3, #8]
 8083cb0:	2200      	movs	r2, #0
 8083cb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8083cb4:	687b      	ldr	r3, [r7, #4]
 8083cb6:	685b      	ldr	r3, [r3, #4]
 8083cb8:	3303      	adds	r3, #3
 8083cba:	f023 0303 	bic.w	r3, r3, #3
 8083cbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8083cc0:	2300      	movs	r3, #0
 8083cc2:	60fb      	str	r3, [r7, #12]
 8083cc4:	e011      	b.n	8083cea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8083cc6:	687b      	ldr	r3, [r7, #4]
 8083cc8:	689b      	ldr	r3, [r3, #8]
 8083cca:	681a      	ldr	r2, [r3, #0]
 8083ccc:	68bb      	ldr	r3, [r7, #8]
 8083cce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8083cd0:	687b      	ldr	r3, [r7, #4]
 8083cd2:	689b      	ldr	r3, [r3, #8]
 8083cd4:	68ba      	ldr	r2, [r7, #8]
 8083cd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8083cd8:	687b      	ldr	r3, [r7, #4]
 8083cda:	881b      	ldrh	r3, [r3, #0]
 8083cdc:	461a      	mov	r2, r3
 8083cde:	68bb      	ldr	r3, [r7, #8]
 8083ce0:	4413      	add	r3, r2
 8083ce2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8083ce4:	68fb      	ldr	r3, [r7, #12]
 8083ce6:	3301      	adds	r3, #1
 8083ce8:	60fb      	str	r3, [r7, #12]
 8083cea:	687b      	ldr	r3, [r7, #4]
 8083cec:	885b      	ldrh	r3, [r3, #2]
 8083cee:	461a      	mov	r2, r3
 8083cf0:	68fb      	ldr	r3, [r7, #12]
 8083cf2:	4293      	cmp	r3, r2
 8083cf4:	dbe7      	blt.n	8083cc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8083cf6:	bf00      	nop
 8083cf8:	bf00      	nop
 8083cfa:	3714      	adds	r7, #20
 8083cfc:	46bd      	mov	sp, r7
 8083cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083d02:	4770      	bx	lr

08083d04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8083d04:	b580      	push	{r7, lr}
 8083d06:	b082      	sub	sp, #8
 8083d08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8083d0a:	2300      	movs	r3, #0
 8083d0c:	80fb      	strh	r3, [r7, #6]
 8083d0e:	e009      	b.n	8083d24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8083d10:	88fb      	ldrh	r3, [r7, #6]
 8083d12:	4a08      	ldr	r2, [pc, #32]	; (8083d34 <memp_init+0x30>)
 8083d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083d18:	4618      	mov	r0, r3
 8083d1a:	f7ff ffc3 	bl	8083ca4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8083d1e:	88fb      	ldrh	r3, [r7, #6]
 8083d20:	3301      	adds	r3, #1
 8083d22:	80fb      	strh	r3, [r7, #6]
 8083d24:	88fb      	ldrh	r3, [r7, #6]
 8083d26:	2b08      	cmp	r3, #8
 8083d28:	d9f2      	bls.n	8083d10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8083d2a:	bf00      	nop
 8083d2c:	bf00      	nop
 8083d2e:	3708      	adds	r7, #8
 8083d30:	46bd      	mov	sp, r7
 8083d32:	bd80      	pop	{r7, pc}
 8083d34:	080909f4 	.word	0x080909f4

08083d38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8083d38:	b580      	push	{r7, lr}
 8083d3a:	b084      	sub	sp, #16
 8083d3c:	af00      	add	r7, sp, #0
 8083d3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8083d40:	687b      	ldr	r3, [r7, #4]
 8083d42:	689b      	ldr	r3, [r3, #8]
 8083d44:	681b      	ldr	r3, [r3, #0]
 8083d46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8083d48:	68fb      	ldr	r3, [r7, #12]
 8083d4a:	2b00      	cmp	r3, #0
 8083d4c:	d012      	beq.n	8083d74 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8083d4e:	687b      	ldr	r3, [r7, #4]
 8083d50:	689b      	ldr	r3, [r3, #8]
 8083d52:	68fa      	ldr	r2, [r7, #12]
 8083d54:	6812      	ldr	r2, [r2, #0]
 8083d56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8083d58:	68fb      	ldr	r3, [r7, #12]
 8083d5a:	f003 0303 	and.w	r3, r3, #3
 8083d5e:	2b00      	cmp	r3, #0
 8083d60:	d006      	beq.n	8083d70 <do_memp_malloc_pool+0x38>
 8083d62:	4b07      	ldr	r3, [pc, #28]	; (8083d80 <do_memp_malloc_pool+0x48>)
 8083d64:	f44f 728c 	mov.w	r2, #280	; 0x118
 8083d68:	4906      	ldr	r1, [pc, #24]	; (8083d84 <do_memp_malloc_pool+0x4c>)
 8083d6a:	4807      	ldr	r0, [pc, #28]	; (8083d88 <do_memp_malloc_pool+0x50>)
 8083d6c:	f009 f8b2 	bl	808ced4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8083d70:	68fb      	ldr	r3, [r7, #12]
 8083d72:	e000      	b.n	8083d76 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8083d74:	2300      	movs	r3, #0
}
 8083d76:	4618      	mov	r0, r3
 8083d78:	3710      	adds	r7, #16
 8083d7a:	46bd      	mov	sp, r7
 8083d7c:	bd80      	pop	{r7, pc}
 8083d7e:	bf00      	nop
 8083d80:	0808e23c 	.word	0x0808e23c
 8083d84:	0808e26c 	.word	0x0808e26c
 8083d88:	0808e290 	.word	0x0808e290

08083d8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8083d8c:	b580      	push	{r7, lr}
 8083d8e:	b082      	sub	sp, #8
 8083d90:	af00      	add	r7, sp, #0
 8083d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8083d94:	687b      	ldr	r3, [r7, #4]
 8083d96:	2b00      	cmp	r3, #0
 8083d98:	d106      	bne.n	8083da8 <memp_malloc_pool+0x1c>
 8083d9a:	4b0a      	ldr	r3, [pc, #40]	; (8083dc4 <memp_malloc_pool+0x38>)
 8083d9c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8083da0:	4909      	ldr	r1, [pc, #36]	; (8083dc8 <memp_malloc_pool+0x3c>)
 8083da2:	480a      	ldr	r0, [pc, #40]	; (8083dcc <memp_malloc_pool+0x40>)
 8083da4:	f009 f896 	bl	808ced4 <iprintf>
  if (desc == NULL) {
 8083da8:	687b      	ldr	r3, [r7, #4]
 8083daa:	2b00      	cmp	r3, #0
 8083dac:	d101      	bne.n	8083db2 <memp_malloc_pool+0x26>
    return NULL;
 8083dae:	2300      	movs	r3, #0
 8083db0:	e003      	b.n	8083dba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8083db2:	6878      	ldr	r0, [r7, #4]
 8083db4:	f7ff ffc0 	bl	8083d38 <do_memp_malloc_pool>
 8083db8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8083dba:	4618      	mov	r0, r3
 8083dbc:	3708      	adds	r7, #8
 8083dbe:	46bd      	mov	sp, r7
 8083dc0:	bd80      	pop	{r7, pc}
 8083dc2:	bf00      	nop
 8083dc4:	0808e23c 	.word	0x0808e23c
 8083dc8:	0808e2b8 	.word	0x0808e2b8
 8083dcc:	0808e290 	.word	0x0808e290

08083dd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8083dd0:	b580      	push	{r7, lr}
 8083dd2:	b084      	sub	sp, #16
 8083dd4:	af00      	add	r7, sp, #0
 8083dd6:	4603      	mov	r3, r0
 8083dd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8083dda:	79fb      	ldrb	r3, [r7, #7]
 8083ddc:	2b08      	cmp	r3, #8
 8083dde:	d908      	bls.n	8083df2 <memp_malloc+0x22>
 8083de0:	4b0a      	ldr	r3, [pc, #40]	; (8083e0c <memp_malloc+0x3c>)
 8083de2:	f240 1257 	movw	r2, #343	; 0x157
 8083de6:	490a      	ldr	r1, [pc, #40]	; (8083e10 <memp_malloc+0x40>)
 8083de8:	480a      	ldr	r0, [pc, #40]	; (8083e14 <memp_malloc+0x44>)
 8083dea:	f009 f873 	bl	808ced4 <iprintf>
 8083dee:	2300      	movs	r3, #0
 8083df0:	e008      	b.n	8083e04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8083df2:	79fb      	ldrb	r3, [r7, #7]
 8083df4:	4a08      	ldr	r2, [pc, #32]	; (8083e18 <memp_malloc+0x48>)
 8083df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083dfa:	4618      	mov	r0, r3
 8083dfc:	f7ff ff9c 	bl	8083d38 <do_memp_malloc_pool>
 8083e00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8083e02:	68fb      	ldr	r3, [r7, #12]
}
 8083e04:	4618      	mov	r0, r3
 8083e06:	3710      	adds	r7, #16
 8083e08:	46bd      	mov	sp, r7
 8083e0a:	bd80      	pop	{r7, pc}
 8083e0c:	0808e23c 	.word	0x0808e23c
 8083e10:	0808e2cc 	.word	0x0808e2cc
 8083e14:	0808e290 	.word	0x0808e290
 8083e18:	080909f4 	.word	0x080909f4

08083e1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8083e1c:	b580      	push	{r7, lr}
 8083e1e:	b084      	sub	sp, #16
 8083e20:	af00      	add	r7, sp, #0
 8083e22:	6078      	str	r0, [r7, #4]
 8083e24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8083e26:	683b      	ldr	r3, [r7, #0]
 8083e28:	f003 0303 	and.w	r3, r3, #3
 8083e2c:	2b00      	cmp	r3, #0
 8083e2e:	d006      	beq.n	8083e3e <do_memp_free_pool+0x22>
 8083e30:	4b0a      	ldr	r3, [pc, #40]	; (8083e5c <do_memp_free_pool+0x40>)
 8083e32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8083e36:	490a      	ldr	r1, [pc, #40]	; (8083e60 <do_memp_free_pool+0x44>)
 8083e38:	480a      	ldr	r0, [pc, #40]	; (8083e64 <do_memp_free_pool+0x48>)
 8083e3a:	f009 f84b 	bl	808ced4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8083e3e:	683b      	ldr	r3, [r7, #0]
 8083e40:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8083e42:	687b      	ldr	r3, [r7, #4]
 8083e44:	689b      	ldr	r3, [r3, #8]
 8083e46:	681a      	ldr	r2, [r3, #0]
 8083e48:	68fb      	ldr	r3, [r7, #12]
 8083e4a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8083e4c:	687b      	ldr	r3, [r7, #4]
 8083e4e:	689b      	ldr	r3, [r3, #8]
 8083e50:	68fa      	ldr	r2, [r7, #12]
 8083e52:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8083e54:	bf00      	nop
 8083e56:	3710      	adds	r7, #16
 8083e58:	46bd      	mov	sp, r7
 8083e5a:	bd80      	pop	{r7, pc}
 8083e5c:	0808e23c 	.word	0x0808e23c
 8083e60:	0808e2ec 	.word	0x0808e2ec
 8083e64:	0808e290 	.word	0x0808e290

08083e68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8083e68:	b580      	push	{r7, lr}
 8083e6a:	b082      	sub	sp, #8
 8083e6c:	af00      	add	r7, sp, #0
 8083e6e:	6078      	str	r0, [r7, #4]
 8083e70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8083e72:	687b      	ldr	r3, [r7, #4]
 8083e74:	2b00      	cmp	r3, #0
 8083e76:	d106      	bne.n	8083e86 <memp_free_pool+0x1e>
 8083e78:	4b0a      	ldr	r3, [pc, #40]	; (8083ea4 <memp_free_pool+0x3c>)
 8083e7a:	f240 1295 	movw	r2, #405	; 0x195
 8083e7e:	490a      	ldr	r1, [pc, #40]	; (8083ea8 <memp_free_pool+0x40>)
 8083e80:	480a      	ldr	r0, [pc, #40]	; (8083eac <memp_free_pool+0x44>)
 8083e82:	f009 f827 	bl	808ced4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8083e86:	687b      	ldr	r3, [r7, #4]
 8083e88:	2b00      	cmp	r3, #0
 8083e8a:	d007      	beq.n	8083e9c <memp_free_pool+0x34>
 8083e8c:	683b      	ldr	r3, [r7, #0]
 8083e8e:	2b00      	cmp	r3, #0
 8083e90:	d004      	beq.n	8083e9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8083e92:	6839      	ldr	r1, [r7, #0]
 8083e94:	6878      	ldr	r0, [r7, #4]
 8083e96:	f7ff ffc1 	bl	8083e1c <do_memp_free_pool>
 8083e9a:	e000      	b.n	8083e9e <memp_free_pool+0x36>
    return;
 8083e9c:	bf00      	nop
}
 8083e9e:	3708      	adds	r7, #8
 8083ea0:	46bd      	mov	sp, r7
 8083ea2:	bd80      	pop	{r7, pc}
 8083ea4:	0808e23c 	.word	0x0808e23c
 8083ea8:	0808e2b8 	.word	0x0808e2b8
 8083eac:	0808e290 	.word	0x0808e290

08083eb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8083eb0:	b580      	push	{r7, lr}
 8083eb2:	b082      	sub	sp, #8
 8083eb4:	af00      	add	r7, sp, #0
 8083eb6:	4603      	mov	r3, r0
 8083eb8:	6039      	str	r1, [r7, #0]
 8083eba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8083ebc:	79fb      	ldrb	r3, [r7, #7]
 8083ebe:	2b08      	cmp	r3, #8
 8083ec0:	d907      	bls.n	8083ed2 <memp_free+0x22>
 8083ec2:	4b0c      	ldr	r3, [pc, #48]	; (8083ef4 <memp_free+0x44>)
 8083ec4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8083ec8:	490b      	ldr	r1, [pc, #44]	; (8083ef8 <memp_free+0x48>)
 8083eca:	480c      	ldr	r0, [pc, #48]	; (8083efc <memp_free+0x4c>)
 8083ecc:	f009 f802 	bl	808ced4 <iprintf>
 8083ed0:	e00c      	b.n	8083eec <memp_free+0x3c>

  if (mem == NULL) {
 8083ed2:	683b      	ldr	r3, [r7, #0]
 8083ed4:	2b00      	cmp	r3, #0
 8083ed6:	d008      	beq.n	8083eea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8083ed8:	79fb      	ldrb	r3, [r7, #7]
 8083eda:	4a09      	ldr	r2, [pc, #36]	; (8083f00 <memp_free+0x50>)
 8083edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083ee0:	6839      	ldr	r1, [r7, #0]
 8083ee2:	4618      	mov	r0, r3
 8083ee4:	f7ff ff9a 	bl	8083e1c <do_memp_free_pool>
 8083ee8:	e000      	b.n	8083eec <memp_free+0x3c>
    return;
 8083eea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8083eec:	3708      	adds	r7, #8
 8083eee:	46bd      	mov	sp, r7
 8083ef0:	bd80      	pop	{r7, pc}
 8083ef2:	bf00      	nop
 8083ef4:	0808e23c 	.word	0x0808e23c
 8083ef8:	0808e30c 	.word	0x0808e30c
 8083efc:	0808e290 	.word	0x0808e290
 8083f00:	080909f4 	.word	0x080909f4

08083f04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8083f04:	b480      	push	{r7}
 8083f06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8083f08:	bf00      	nop
 8083f0a:	46bd      	mov	sp, r7
 8083f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083f10:	4770      	bx	lr
	...

08083f14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8083f14:	b580      	push	{r7, lr}
 8083f16:	b086      	sub	sp, #24
 8083f18:	af00      	add	r7, sp, #0
 8083f1a:	60f8      	str	r0, [r7, #12]
 8083f1c:	60b9      	str	r1, [r7, #8]
 8083f1e:	607a      	str	r2, [r7, #4]
 8083f20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8083f22:	68fb      	ldr	r3, [r7, #12]
 8083f24:	2b00      	cmp	r3, #0
 8083f26:	d108      	bne.n	8083f3a <netif_add+0x26>
 8083f28:	4b57      	ldr	r3, [pc, #348]	; (8084088 <netif_add+0x174>)
 8083f2a:	f240 1227 	movw	r2, #295	; 0x127
 8083f2e:	4957      	ldr	r1, [pc, #348]	; (808408c <netif_add+0x178>)
 8083f30:	4857      	ldr	r0, [pc, #348]	; (8084090 <netif_add+0x17c>)
 8083f32:	f008 ffcf 	bl	808ced4 <iprintf>
 8083f36:	2300      	movs	r3, #0
 8083f38:	e0a2      	b.n	8084080 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8083f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8083f3c:	2b00      	cmp	r3, #0
 8083f3e:	d108      	bne.n	8083f52 <netif_add+0x3e>
 8083f40:	4b51      	ldr	r3, [pc, #324]	; (8084088 <netif_add+0x174>)
 8083f42:	f44f 7294 	mov.w	r2, #296	; 0x128
 8083f46:	4953      	ldr	r1, [pc, #332]	; (8084094 <netif_add+0x180>)
 8083f48:	4851      	ldr	r0, [pc, #324]	; (8084090 <netif_add+0x17c>)
 8083f4a:	f008 ffc3 	bl	808ced4 <iprintf>
 8083f4e:	2300      	movs	r3, #0
 8083f50:	e096      	b.n	8084080 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8083f52:	68bb      	ldr	r3, [r7, #8]
 8083f54:	2b00      	cmp	r3, #0
 8083f56:	d101      	bne.n	8083f5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8083f58:	4b4f      	ldr	r3, [pc, #316]	; (8084098 <netif_add+0x184>)
 8083f5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8083f5c:	687b      	ldr	r3, [r7, #4]
 8083f5e:	2b00      	cmp	r3, #0
 8083f60:	d101      	bne.n	8083f66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8083f62:	4b4d      	ldr	r3, [pc, #308]	; (8084098 <netif_add+0x184>)
 8083f64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8083f66:	683b      	ldr	r3, [r7, #0]
 8083f68:	2b00      	cmp	r3, #0
 8083f6a:	d101      	bne.n	8083f70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8083f6c:	4b4a      	ldr	r3, [pc, #296]	; (8084098 <netif_add+0x184>)
 8083f6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8083f70:	68fb      	ldr	r3, [r7, #12]
 8083f72:	2200      	movs	r2, #0
 8083f74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8083f76:	68fb      	ldr	r3, [r7, #12]
 8083f78:	2200      	movs	r2, #0
 8083f7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8083f7c:	68fb      	ldr	r3, [r7, #12]
 8083f7e:	2200      	movs	r2, #0
 8083f80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8083f82:	68fb      	ldr	r3, [r7, #12]
 8083f84:	4a45      	ldr	r2, [pc, #276]	; (808409c <netif_add+0x188>)
 8083f86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8083f88:	68fb      	ldr	r3, [r7, #12]
 8083f8a:	2200      	movs	r2, #0
 8083f8c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8083f8e:	68fb      	ldr	r3, [r7, #12]
 8083f90:	2200      	movs	r2, #0
 8083f92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8083f96:	68fb      	ldr	r3, [r7, #12]
 8083f98:	2200      	movs	r2, #0
 8083f9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8083f9c:	68fb      	ldr	r3, [r7, #12]
 8083f9e:	6a3a      	ldr	r2, [r7, #32]
 8083fa0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8083fa2:	4b3f      	ldr	r3, [pc, #252]	; (80840a0 <netif_add+0x18c>)
 8083fa4:	781a      	ldrb	r2, [r3, #0]
 8083fa6:	68fb      	ldr	r3, [r7, #12]
 8083fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8083fac:	68fb      	ldr	r3, [r7, #12]
 8083fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8083fb0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8083fb2:	683b      	ldr	r3, [r7, #0]
 8083fb4:	687a      	ldr	r2, [r7, #4]
 8083fb6:	68b9      	ldr	r1, [r7, #8]
 8083fb8:	68f8      	ldr	r0, [r7, #12]
 8083fba:	f000 f913 	bl	80841e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8083fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8083fc0:	68f8      	ldr	r0, [r7, #12]
 8083fc2:	4798      	blx	r3
 8083fc4:	4603      	mov	r3, r0
 8083fc6:	2b00      	cmp	r3, #0
 8083fc8:	d001      	beq.n	8083fce <netif_add+0xba>
    return NULL;
 8083fca:	2300      	movs	r3, #0
 8083fcc:	e058      	b.n	8084080 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8083fce:	68fb      	ldr	r3, [r7, #12]
 8083fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8083fd4:	2bff      	cmp	r3, #255	; 0xff
 8083fd6:	d103      	bne.n	8083fe0 <netif_add+0xcc>
        netif->num = 0;
 8083fd8:	68fb      	ldr	r3, [r7, #12]
 8083fda:	2200      	movs	r2, #0
 8083fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8083fe0:	2300      	movs	r3, #0
 8083fe2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8083fe4:	4b2f      	ldr	r3, [pc, #188]	; (80840a4 <netif_add+0x190>)
 8083fe6:	681b      	ldr	r3, [r3, #0]
 8083fe8:	617b      	str	r3, [r7, #20]
 8083fea:	e02b      	b.n	8084044 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8083fec:	697a      	ldr	r2, [r7, #20]
 8083fee:	68fb      	ldr	r3, [r7, #12]
 8083ff0:	429a      	cmp	r2, r3
 8083ff2:	d106      	bne.n	8084002 <netif_add+0xee>
 8083ff4:	4b24      	ldr	r3, [pc, #144]	; (8084088 <netif_add+0x174>)
 8083ff6:	f240 128b 	movw	r2, #395	; 0x18b
 8083ffa:	492b      	ldr	r1, [pc, #172]	; (80840a8 <netif_add+0x194>)
 8083ffc:	4824      	ldr	r0, [pc, #144]	; (8084090 <netif_add+0x17c>)
 8083ffe:	f008 ff69 	bl	808ced4 <iprintf>
        num_netifs++;
 8084002:	693b      	ldr	r3, [r7, #16]
 8084004:	3301      	adds	r3, #1
 8084006:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8084008:	693b      	ldr	r3, [r7, #16]
 808400a:	2bff      	cmp	r3, #255	; 0xff
 808400c:	dd06      	ble.n	808401c <netif_add+0x108>
 808400e:	4b1e      	ldr	r3, [pc, #120]	; (8084088 <netif_add+0x174>)
 8084010:	f240 128d 	movw	r2, #397	; 0x18d
 8084014:	4925      	ldr	r1, [pc, #148]	; (80840ac <netif_add+0x198>)
 8084016:	481e      	ldr	r0, [pc, #120]	; (8084090 <netif_add+0x17c>)
 8084018:	f008 ff5c 	bl	808ced4 <iprintf>
        if (netif2->num == netif->num) {
 808401c:	697b      	ldr	r3, [r7, #20]
 808401e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8084022:	68fb      	ldr	r3, [r7, #12]
 8084024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8084028:	429a      	cmp	r2, r3
 808402a:	d108      	bne.n	808403e <netif_add+0x12a>
          netif->num++;
 808402c:	68fb      	ldr	r3, [r7, #12]
 808402e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8084032:	3301      	adds	r3, #1
 8084034:	b2da      	uxtb	r2, r3
 8084036:	68fb      	ldr	r3, [r7, #12]
 8084038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 808403c:	e005      	b.n	808404a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 808403e:	697b      	ldr	r3, [r7, #20]
 8084040:	681b      	ldr	r3, [r3, #0]
 8084042:	617b      	str	r3, [r7, #20]
 8084044:	697b      	ldr	r3, [r7, #20]
 8084046:	2b00      	cmp	r3, #0
 8084048:	d1d0      	bne.n	8083fec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 808404a:	697b      	ldr	r3, [r7, #20]
 808404c:	2b00      	cmp	r3, #0
 808404e:	d1be      	bne.n	8083fce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8084050:	68fb      	ldr	r3, [r7, #12]
 8084052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8084056:	2bfe      	cmp	r3, #254	; 0xfe
 8084058:	d103      	bne.n	8084062 <netif_add+0x14e>
    netif_num = 0;
 808405a:	4b11      	ldr	r3, [pc, #68]	; (80840a0 <netif_add+0x18c>)
 808405c:	2200      	movs	r2, #0
 808405e:	701a      	strb	r2, [r3, #0]
 8084060:	e006      	b.n	8084070 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8084062:	68fb      	ldr	r3, [r7, #12]
 8084064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8084068:	3301      	adds	r3, #1
 808406a:	b2da      	uxtb	r2, r3
 808406c:	4b0c      	ldr	r3, [pc, #48]	; (80840a0 <netif_add+0x18c>)
 808406e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8084070:	4b0c      	ldr	r3, [pc, #48]	; (80840a4 <netif_add+0x190>)
 8084072:	681a      	ldr	r2, [r3, #0]
 8084074:	68fb      	ldr	r3, [r7, #12]
 8084076:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8084078:	4a0a      	ldr	r2, [pc, #40]	; (80840a4 <netif_add+0x190>)
 808407a:	68fb      	ldr	r3, [r7, #12]
 808407c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 808407e:	68fb      	ldr	r3, [r7, #12]
}
 8084080:	4618      	mov	r0, r3
 8084082:	3718      	adds	r7, #24
 8084084:	46bd      	mov	sp, r7
 8084086:	bd80      	pop	{r7, pc}
 8084088:	0808e328 	.word	0x0808e328
 808408c:	0808e3bc 	.word	0x0808e3bc
 8084090:	0808e378 	.word	0x0808e378
 8084094:	0808e3d8 	.word	0x0808e3d8
 8084098:	08090a58 	.word	0x08090a58
 808409c:	080844bf 	.word	0x080844bf
 80840a0:	20008230 	.word	0x20008230
 80840a4:	20008228 	.word	0x20008228
 80840a8:	0808e3fc 	.word	0x0808e3fc
 80840ac:	0808e410 	.word	0x0808e410

080840b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80840b0:	b580      	push	{r7, lr}
 80840b2:	b082      	sub	sp, #8
 80840b4:	af00      	add	r7, sp, #0
 80840b6:	6078      	str	r0, [r7, #4]
 80840b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80840ba:	6839      	ldr	r1, [r7, #0]
 80840bc:	6878      	ldr	r0, [r7, #4]
 80840be:	f002 fb23 	bl	8086708 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80840c2:	6839      	ldr	r1, [r7, #0]
 80840c4:	6878      	ldr	r0, [r7, #4]
 80840c6:	f006 fbc5 	bl	808a854 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80840ca:	bf00      	nop
 80840cc:	3708      	adds	r7, #8
 80840ce:	46bd      	mov	sp, r7
 80840d0:	bd80      	pop	{r7, pc}
	...

080840d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80840d4:	b580      	push	{r7, lr}
 80840d6:	b086      	sub	sp, #24
 80840d8:	af00      	add	r7, sp, #0
 80840da:	60f8      	str	r0, [r7, #12]
 80840dc:	60b9      	str	r1, [r7, #8]
 80840de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80840e0:	68bb      	ldr	r3, [r7, #8]
 80840e2:	2b00      	cmp	r3, #0
 80840e4:	d106      	bne.n	80840f4 <netif_do_set_ipaddr+0x20>
 80840e6:	4b1d      	ldr	r3, [pc, #116]	; (808415c <netif_do_set_ipaddr+0x88>)
 80840e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80840ec:	491c      	ldr	r1, [pc, #112]	; (8084160 <netif_do_set_ipaddr+0x8c>)
 80840ee:	481d      	ldr	r0, [pc, #116]	; (8084164 <netif_do_set_ipaddr+0x90>)
 80840f0:	f008 fef0 	bl	808ced4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80840f4:	687b      	ldr	r3, [r7, #4]
 80840f6:	2b00      	cmp	r3, #0
 80840f8:	d106      	bne.n	8084108 <netif_do_set_ipaddr+0x34>
 80840fa:	4b18      	ldr	r3, [pc, #96]	; (808415c <netif_do_set_ipaddr+0x88>)
 80840fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8084100:	4917      	ldr	r1, [pc, #92]	; (8084160 <netif_do_set_ipaddr+0x8c>)
 8084102:	4818      	ldr	r0, [pc, #96]	; (8084164 <netif_do_set_ipaddr+0x90>)
 8084104:	f008 fee6 	bl	808ced4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8084108:	68bb      	ldr	r3, [r7, #8]
 808410a:	681a      	ldr	r2, [r3, #0]
 808410c:	68fb      	ldr	r3, [r7, #12]
 808410e:	3304      	adds	r3, #4
 8084110:	681b      	ldr	r3, [r3, #0]
 8084112:	429a      	cmp	r2, r3
 8084114:	d01c      	beq.n	8084150 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8084116:	68bb      	ldr	r3, [r7, #8]
 8084118:	681b      	ldr	r3, [r3, #0]
 808411a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 808411c:	68fb      	ldr	r3, [r7, #12]
 808411e:	3304      	adds	r3, #4
 8084120:	681a      	ldr	r2, [r3, #0]
 8084122:	687b      	ldr	r3, [r7, #4]
 8084124:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8084126:	f107 0314 	add.w	r3, r7, #20
 808412a:	4619      	mov	r1, r3
 808412c:	6878      	ldr	r0, [r7, #4]
 808412e:	f7ff ffbf 	bl	80840b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8084132:	68bb      	ldr	r3, [r7, #8]
 8084134:	2b00      	cmp	r3, #0
 8084136:	d002      	beq.n	808413e <netif_do_set_ipaddr+0x6a>
 8084138:	68bb      	ldr	r3, [r7, #8]
 808413a:	681b      	ldr	r3, [r3, #0]
 808413c:	e000      	b.n	8084140 <netif_do_set_ipaddr+0x6c>
 808413e:	2300      	movs	r3, #0
 8084140:	68fa      	ldr	r2, [r7, #12]
 8084142:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8084144:	2101      	movs	r1, #1
 8084146:	68f8      	ldr	r0, [r7, #12]
 8084148:	f000 f8d2 	bl	80842f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 808414c:	2301      	movs	r3, #1
 808414e:	e000      	b.n	8084152 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8084150:	2300      	movs	r3, #0
}
 8084152:	4618      	mov	r0, r3
 8084154:	3718      	adds	r7, #24
 8084156:	46bd      	mov	sp, r7
 8084158:	bd80      	pop	{r7, pc}
 808415a:	bf00      	nop
 808415c:	0808e328 	.word	0x0808e328
 8084160:	0808e440 	.word	0x0808e440
 8084164:	0808e378 	.word	0x0808e378

08084168 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8084168:	b480      	push	{r7}
 808416a:	b085      	sub	sp, #20
 808416c:	af00      	add	r7, sp, #0
 808416e:	60f8      	str	r0, [r7, #12]
 8084170:	60b9      	str	r1, [r7, #8]
 8084172:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8084174:	68bb      	ldr	r3, [r7, #8]
 8084176:	681a      	ldr	r2, [r3, #0]
 8084178:	68fb      	ldr	r3, [r7, #12]
 808417a:	3308      	adds	r3, #8
 808417c:	681b      	ldr	r3, [r3, #0]
 808417e:	429a      	cmp	r2, r3
 8084180:	d00a      	beq.n	8084198 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8084182:	68bb      	ldr	r3, [r7, #8]
 8084184:	2b00      	cmp	r3, #0
 8084186:	d002      	beq.n	808418e <netif_do_set_netmask+0x26>
 8084188:	68bb      	ldr	r3, [r7, #8]
 808418a:	681b      	ldr	r3, [r3, #0]
 808418c:	e000      	b.n	8084190 <netif_do_set_netmask+0x28>
 808418e:	2300      	movs	r3, #0
 8084190:	68fa      	ldr	r2, [r7, #12]
 8084192:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8084194:	2301      	movs	r3, #1
 8084196:	e000      	b.n	808419a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8084198:	2300      	movs	r3, #0
}
 808419a:	4618      	mov	r0, r3
 808419c:	3714      	adds	r7, #20
 808419e:	46bd      	mov	sp, r7
 80841a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80841a4:	4770      	bx	lr

080841a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80841a6:	b480      	push	{r7}
 80841a8:	b085      	sub	sp, #20
 80841aa:	af00      	add	r7, sp, #0
 80841ac:	60f8      	str	r0, [r7, #12]
 80841ae:	60b9      	str	r1, [r7, #8]
 80841b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80841b2:	68bb      	ldr	r3, [r7, #8]
 80841b4:	681a      	ldr	r2, [r3, #0]
 80841b6:	68fb      	ldr	r3, [r7, #12]
 80841b8:	330c      	adds	r3, #12
 80841ba:	681b      	ldr	r3, [r3, #0]
 80841bc:	429a      	cmp	r2, r3
 80841be:	d00a      	beq.n	80841d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80841c0:	68bb      	ldr	r3, [r7, #8]
 80841c2:	2b00      	cmp	r3, #0
 80841c4:	d002      	beq.n	80841cc <netif_do_set_gw+0x26>
 80841c6:	68bb      	ldr	r3, [r7, #8]
 80841c8:	681b      	ldr	r3, [r3, #0]
 80841ca:	e000      	b.n	80841ce <netif_do_set_gw+0x28>
 80841cc:	2300      	movs	r3, #0
 80841ce:	68fa      	ldr	r2, [r7, #12]
 80841d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80841d2:	2301      	movs	r3, #1
 80841d4:	e000      	b.n	80841d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80841d6:	2300      	movs	r3, #0
}
 80841d8:	4618      	mov	r0, r3
 80841da:	3714      	adds	r7, #20
 80841dc:	46bd      	mov	sp, r7
 80841de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80841e2:	4770      	bx	lr

080841e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80841e4:	b580      	push	{r7, lr}
 80841e6:	b088      	sub	sp, #32
 80841e8:	af00      	add	r7, sp, #0
 80841ea:	60f8      	str	r0, [r7, #12]
 80841ec:	60b9      	str	r1, [r7, #8]
 80841ee:	607a      	str	r2, [r7, #4]
 80841f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80841f2:	2300      	movs	r3, #0
 80841f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80841f6:	2300      	movs	r3, #0
 80841f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80841fa:	68bb      	ldr	r3, [r7, #8]
 80841fc:	2b00      	cmp	r3, #0
 80841fe:	d101      	bne.n	8084204 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8084200:	4b1c      	ldr	r3, [pc, #112]	; (8084274 <netif_set_addr+0x90>)
 8084202:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8084204:	687b      	ldr	r3, [r7, #4]
 8084206:	2b00      	cmp	r3, #0
 8084208:	d101      	bne.n	808420e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 808420a:	4b1a      	ldr	r3, [pc, #104]	; (8084274 <netif_set_addr+0x90>)
 808420c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 808420e:	683b      	ldr	r3, [r7, #0]
 8084210:	2b00      	cmp	r3, #0
 8084212:	d101      	bne.n	8084218 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8084214:	4b17      	ldr	r3, [pc, #92]	; (8084274 <netif_set_addr+0x90>)
 8084216:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8084218:	68bb      	ldr	r3, [r7, #8]
 808421a:	2b00      	cmp	r3, #0
 808421c:	d003      	beq.n	8084226 <netif_set_addr+0x42>
 808421e:	68bb      	ldr	r3, [r7, #8]
 8084220:	681b      	ldr	r3, [r3, #0]
 8084222:	2b00      	cmp	r3, #0
 8084224:	d101      	bne.n	808422a <netif_set_addr+0x46>
 8084226:	2301      	movs	r3, #1
 8084228:	e000      	b.n	808422c <netif_set_addr+0x48>
 808422a:	2300      	movs	r3, #0
 808422c:	617b      	str	r3, [r7, #20]
  if (remove) {
 808422e:	697b      	ldr	r3, [r7, #20]
 8084230:	2b00      	cmp	r3, #0
 8084232:	d006      	beq.n	8084242 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8084234:	f107 0310 	add.w	r3, r7, #16
 8084238:	461a      	mov	r2, r3
 808423a:	68b9      	ldr	r1, [r7, #8]
 808423c:	68f8      	ldr	r0, [r7, #12]
 808423e:	f7ff ff49 	bl	80840d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8084242:	69fa      	ldr	r2, [r7, #28]
 8084244:	6879      	ldr	r1, [r7, #4]
 8084246:	68f8      	ldr	r0, [r7, #12]
 8084248:	f7ff ff8e 	bl	8084168 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 808424c:	69ba      	ldr	r2, [r7, #24]
 808424e:	6839      	ldr	r1, [r7, #0]
 8084250:	68f8      	ldr	r0, [r7, #12]
 8084252:	f7ff ffa8 	bl	80841a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8084256:	697b      	ldr	r3, [r7, #20]
 8084258:	2b00      	cmp	r3, #0
 808425a:	d106      	bne.n	808426a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 808425c:	f107 0310 	add.w	r3, r7, #16
 8084260:	461a      	mov	r2, r3
 8084262:	68b9      	ldr	r1, [r7, #8]
 8084264:	68f8      	ldr	r0, [r7, #12]
 8084266:	f7ff ff35 	bl	80840d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 808426a:	bf00      	nop
 808426c:	3720      	adds	r7, #32
 808426e:	46bd      	mov	sp, r7
 8084270:	bd80      	pop	{r7, pc}
 8084272:	bf00      	nop
 8084274:	08090a58 	.word	0x08090a58

08084278 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8084278:	b480      	push	{r7}
 808427a:	b083      	sub	sp, #12
 808427c:	af00      	add	r7, sp, #0
 808427e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8084280:	4a04      	ldr	r2, [pc, #16]	; (8084294 <netif_set_default+0x1c>)
 8084282:	687b      	ldr	r3, [r7, #4]
 8084284:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8084286:	bf00      	nop
 8084288:	370c      	adds	r7, #12
 808428a:	46bd      	mov	sp, r7
 808428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084290:	4770      	bx	lr
 8084292:	bf00      	nop
 8084294:	2000822c 	.word	0x2000822c

08084298 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8084298:	b580      	push	{r7, lr}
 808429a:	b082      	sub	sp, #8
 808429c:	af00      	add	r7, sp, #0
 808429e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80842a0:	687b      	ldr	r3, [r7, #4]
 80842a2:	2b00      	cmp	r3, #0
 80842a4:	d107      	bne.n	80842b6 <netif_set_up+0x1e>
 80842a6:	4b0f      	ldr	r3, [pc, #60]	; (80842e4 <netif_set_up+0x4c>)
 80842a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80842ac:	490e      	ldr	r1, [pc, #56]	; (80842e8 <netif_set_up+0x50>)
 80842ae:	480f      	ldr	r0, [pc, #60]	; (80842ec <netif_set_up+0x54>)
 80842b0:	f008 fe10 	bl	808ced4 <iprintf>
 80842b4:	e013      	b.n	80842de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80842b6:	687b      	ldr	r3, [r7, #4]
 80842b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80842bc:	f003 0301 	and.w	r3, r3, #1
 80842c0:	2b00      	cmp	r3, #0
 80842c2:	d10c      	bne.n	80842de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80842c4:	687b      	ldr	r3, [r7, #4]
 80842c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80842ca:	f043 0301 	orr.w	r3, r3, #1
 80842ce:	b2da      	uxtb	r2, r3
 80842d0:	687b      	ldr	r3, [r7, #4]
 80842d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80842d6:	2103      	movs	r1, #3
 80842d8:	6878      	ldr	r0, [r7, #4]
 80842da:	f000 f809 	bl	80842f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80842de:	3708      	adds	r7, #8
 80842e0:	46bd      	mov	sp, r7
 80842e2:	bd80      	pop	{r7, pc}
 80842e4:	0808e328 	.word	0x0808e328
 80842e8:	0808e4b0 	.word	0x0808e4b0
 80842ec:	0808e378 	.word	0x0808e378

080842f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80842f0:	b580      	push	{r7, lr}
 80842f2:	b082      	sub	sp, #8
 80842f4:	af00      	add	r7, sp, #0
 80842f6:	6078      	str	r0, [r7, #4]
 80842f8:	460b      	mov	r3, r1
 80842fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80842fc:	687b      	ldr	r3, [r7, #4]
 80842fe:	2b00      	cmp	r3, #0
 8084300:	d106      	bne.n	8084310 <netif_issue_reports+0x20>
 8084302:	4b18      	ldr	r3, [pc, #96]	; (8084364 <netif_issue_reports+0x74>)
 8084304:	f240 326d 	movw	r2, #877	; 0x36d
 8084308:	4917      	ldr	r1, [pc, #92]	; (8084368 <netif_issue_reports+0x78>)
 808430a:	4818      	ldr	r0, [pc, #96]	; (808436c <netif_issue_reports+0x7c>)
 808430c:	f008 fde2 	bl	808ced4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8084310:	687b      	ldr	r3, [r7, #4]
 8084312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084316:	f003 0304 	and.w	r3, r3, #4
 808431a:	2b00      	cmp	r3, #0
 808431c:	d01e      	beq.n	808435c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 808431e:	687b      	ldr	r3, [r7, #4]
 8084320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084324:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8084328:	2b00      	cmp	r3, #0
 808432a:	d017      	beq.n	808435c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 808432c:	78fb      	ldrb	r3, [r7, #3]
 808432e:	f003 0301 	and.w	r3, r3, #1
 8084332:	2b00      	cmp	r3, #0
 8084334:	d013      	beq.n	808435e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8084336:	687b      	ldr	r3, [r7, #4]
 8084338:	3304      	adds	r3, #4
 808433a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 808433c:	2b00      	cmp	r3, #0
 808433e:	d00e      	beq.n	808435e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8084340:	687b      	ldr	r3, [r7, #4]
 8084342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084346:	f003 0308 	and.w	r3, r3, #8
 808434a:	2b00      	cmp	r3, #0
 808434c:	d007      	beq.n	808435e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 808434e:	687b      	ldr	r3, [r7, #4]
 8084350:	3304      	adds	r3, #4
 8084352:	4619      	mov	r1, r3
 8084354:	6878      	ldr	r0, [r7, #4]
 8084356:	f007 f9e7 	bl	808b728 <etharp_request>
 808435a:	e000      	b.n	808435e <netif_issue_reports+0x6e>
    return;
 808435c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 808435e:	3708      	adds	r7, #8
 8084360:	46bd      	mov	sp, r7
 8084362:	bd80      	pop	{r7, pc}
 8084364:	0808e328 	.word	0x0808e328
 8084368:	0808e4cc 	.word	0x0808e4cc
 808436c:	0808e378 	.word	0x0808e378

08084370 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8084370:	b580      	push	{r7, lr}
 8084372:	b082      	sub	sp, #8
 8084374:	af00      	add	r7, sp, #0
 8084376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8084378:	687b      	ldr	r3, [r7, #4]
 808437a:	2b00      	cmp	r3, #0
 808437c:	d107      	bne.n	808438e <netif_set_down+0x1e>
 808437e:	4b12      	ldr	r3, [pc, #72]	; (80843c8 <netif_set_down+0x58>)
 8084380:	f240 329b 	movw	r2, #923	; 0x39b
 8084384:	4911      	ldr	r1, [pc, #68]	; (80843cc <netif_set_down+0x5c>)
 8084386:	4812      	ldr	r0, [pc, #72]	; (80843d0 <netif_set_down+0x60>)
 8084388:	f008 fda4 	bl	808ced4 <iprintf>
 808438c:	e019      	b.n	80843c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 808438e:	687b      	ldr	r3, [r7, #4]
 8084390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084394:	f003 0301 	and.w	r3, r3, #1
 8084398:	2b00      	cmp	r3, #0
 808439a:	d012      	beq.n	80843c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 808439c:	687b      	ldr	r3, [r7, #4]
 808439e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80843a2:	f023 0301 	bic.w	r3, r3, #1
 80843a6:	b2da      	uxtb	r2, r3
 80843a8:	687b      	ldr	r3, [r7, #4]
 80843aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80843ae:	687b      	ldr	r3, [r7, #4]
 80843b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80843b4:	f003 0308 	and.w	r3, r3, #8
 80843b8:	2b00      	cmp	r3, #0
 80843ba:	d002      	beq.n	80843c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80843bc:	6878      	ldr	r0, [r7, #4]
 80843be:	f006 fd71 	bl	808aea4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80843c2:	3708      	adds	r7, #8
 80843c4:	46bd      	mov	sp, r7
 80843c6:	bd80      	pop	{r7, pc}
 80843c8:	0808e328 	.word	0x0808e328
 80843cc:	0808e4f0 	.word	0x0808e4f0
 80843d0:	0808e378 	.word	0x0808e378

080843d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80843d4:	b580      	push	{r7, lr}
 80843d6:	b082      	sub	sp, #8
 80843d8:	af00      	add	r7, sp, #0
 80843da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80843dc:	687b      	ldr	r3, [r7, #4]
 80843de:	2b00      	cmp	r3, #0
 80843e0:	d107      	bne.n	80843f2 <netif_set_link_up+0x1e>
 80843e2:	4b13      	ldr	r3, [pc, #76]	; (8084430 <netif_set_link_up+0x5c>)
 80843e4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80843e8:	4912      	ldr	r1, [pc, #72]	; (8084434 <netif_set_link_up+0x60>)
 80843ea:	4813      	ldr	r0, [pc, #76]	; (8084438 <netif_set_link_up+0x64>)
 80843ec:	f008 fd72 	bl	808ced4 <iprintf>
 80843f0:	e01b      	b.n	808442a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80843f2:	687b      	ldr	r3, [r7, #4]
 80843f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80843f8:	f003 0304 	and.w	r3, r3, #4
 80843fc:	2b00      	cmp	r3, #0
 80843fe:	d114      	bne.n	808442a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8084400:	687b      	ldr	r3, [r7, #4]
 8084402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084406:	f043 0304 	orr.w	r3, r3, #4
 808440a:	b2da      	uxtb	r2, r3
 808440c:	687b      	ldr	r3, [r7, #4]
 808440e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8084412:	2103      	movs	r1, #3
 8084414:	6878      	ldr	r0, [r7, #4]
 8084416:	f7ff ff6b 	bl	80842f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 808441a:	687b      	ldr	r3, [r7, #4]
 808441c:	69db      	ldr	r3, [r3, #28]
 808441e:	2b00      	cmp	r3, #0
 8084420:	d003      	beq.n	808442a <netif_set_link_up+0x56>
 8084422:	687b      	ldr	r3, [r7, #4]
 8084424:	69db      	ldr	r3, [r3, #28]
 8084426:	6878      	ldr	r0, [r7, #4]
 8084428:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 808442a:	3708      	adds	r7, #8
 808442c:	46bd      	mov	sp, r7
 808442e:	bd80      	pop	{r7, pc}
 8084430:	0808e328 	.word	0x0808e328
 8084434:	0808e510 	.word	0x0808e510
 8084438:	0808e378 	.word	0x0808e378

0808443c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 808443c:	b580      	push	{r7, lr}
 808443e:	b082      	sub	sp, #8
 8084440:	af00      	add	r7, sp, #0
 8084442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8084444:	687b      	ldr	r3, [r7, #4]
 8084446:	2b00      	cmp	r3, #0
 8084448:	d107      	bne.n	808445a <netif_set_link_down+0x1e>
 808444a:	4b11      	ldr	r3, [pc, #68]	; (8084490 <netif_set_link_down+0x54>)
 808444c:	f240 4206 	movw	r2, #1030	; 0x406
 8084450:	4910      	ldr	r1, [pc, #64]	; (8084494 <netif_set_link_down+0x58>)
 8084452:	4811      	ldr	r0, [pc, #68]	; (8084498 <netif_set_link_down+0x5c>)
 8084454:	f008 fd3e 	bl	808ced4 <iprintf>
 8084458:	e017      	b.n	808448a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 808445a:	687b      	ldr	r3, [r7, #4]
 808445c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8084460:	f003 0304 	and.w	r3, r3, #4
 8084464:	2b00      	cmp	r3, #0
 8084466:	d010      	beq.n	808448a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8084468:	687b      	ldr	r3, [r7, #4]
 808446a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808446e:	f023 0304 	bic.w	r3, r3, #4
 8084472:	b2da      	uxtb	r2, r3
 8084474:	687b      	ldr	r3, [r7, #4]
 8084476:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 808447a:	687b      	ldr	r3, [r7, #4]
 808447c:	69db      	ldr	r3, [r3, #28]
 808447e:	2b00      	cmp	r3, #0
 8084480:	d003      	beq.n	808448a <netif_set_link_down+0x4e>
 8084482:	687b      	ldr	r3, [r7, #4]
 8084484:	69db      	ldr	r3, [r3, #28]
 8084486:	6878      	ldr	r0, [r7, #4]
 8084488:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 808448a:	3708      	adds	r7, #8
 808448c:	46bd      	mov	sp, r7
 808448e:	bd80      	pop	{r7, pc}
 8084490:	0808e328 	.word	0x0808e328
 8084494:	0808e534 	.word	0x0808e534
 8084498:	0808e378 	.word	0x0808e378

0808449c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 808449c:	b480      	push	{r7}
 808449e:	b083      	sub	sp, #12
 80844a0:	af00      	add	r7, sp, #0
 80844a2:	6078      	str	r0, [r7, #4]
 80844a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80844a6:	687b      	ldr	r3, [r7, #4]
 80844a8:	2b00      	cmp	r3, #0
 80844aa:	d002      	beq.n	80844b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80844ac:	687b      	ldr	r3, [r7, #4]
 80844ae:	683a      	ldr	r2, [r7, #0]
 80844b0:	61da      	str	r2, [r3, #28]
  }
}
 80844b2:	bf00      	nop
 80844b4:	370c      	adds	r7, #12
 80844b6:	46bd      	mov	sp, r7
 80844b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80844bc:	4770      	bx	lr

080844be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80844be:	b480      	push	{r7}
 80844c0:	b085      	sub	sp, #20
 80844c2:	af00      	add	r7, sp, #0
 80844c4:	60f8      	str	r0, [r7, #12]
 80844c6:	60b9      	str	r1, [r7, #8]
 80844c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80844ca:	f06f 030b 	mvn.w	r3, #11
}
 80844ce:	4618      	mov	r0, r3
 80844d0:	3714      	adds	r7, #20
 80844d2:	46bd      	mov	sp, r7
 80844d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80844d8:	4770      	bx	lr
	...

080844dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80844dc:	b480      	push	{r7}
 80844de:	b085      	sub	sp, #20
 80844e0:	af00      	add	r7, sp, #0
 80844e2:	4603      	mov	r3, r0
 80844e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80844e6:	79fb      	ldrb	r3, [r7, #7]
 80844e8:	2b00      	cmp	r3, #0
 80844ea:	d013      	beq.n	8084514 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80844ec:	4b0d      	ldr	r3, [pc, #52]	; (8084524 <netif_get_by_index+0x48>)
 80844ee:	681b      	ldr	r3, [r3, #0]
 80844f0:	60fb      	str	r3, [r7, #12]
 80844f2:	e00c      	b.n	808450e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80844f4:	68fb      	ldr	r3, [r7, #12]
 80844f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80844fa:	3301      	adds	r3, #1
 80844fc:	b2db      	uxtb	r3, r3
 80844fe:	79fa      	ldrb	r2, [r7, #7]
 8084500:	429a      	cmp	r2, r3
 8084502:	d101      	bne.n	8084508 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8084504:	68fb      	ldr	r3, [r7, #12]
 8084506:	e006      	b.n	8084516 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8084508:	68fb      	ldr	r3, [r7, #12]
 808450a:	681b      	ldr	r3, [r3, #0]
 808450c:	60fb      	str	r3, [r7, #12]
 808450e:	68fb      	ldr	r3, [r7, #12]
 8084510:	2b00      	cmp	r3, #0
 8084512:	d1ef      	bne.n	80844f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8084514:	2300      	movs	r3, #0
}
 8084516:	4618      	mov	r0, r3
 8084518:	3714      	adds	r7, #20
 808451a:	46bd      	mov	sp, r7
 808451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084520:	4770      	bx	lr
 8084522:	bf00      	nop
 8084524:	20008228 	.word	0x20008228

08084528 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8084528:	b480      	push	{r7}
 808452a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 808452c:	4b03      	ldr	r3, [pc, #12]	; (808453c <pbuf_pool_is_empty+0x14>)
 808452e:	2201      	movs	r2, #1
 8084530:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8084532:	bf00      	nop
 8084534:	46bd      	mov	sp, r7
 8084536:	f85d 7b04 	ldr.w	r7, [sp], #4
 808453a:	4770      	bx	lr
 808453c:	20008231 	.word	0x20008231

08084540 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8084540:	b480      	push	{r7}
 8084542:	b085      	sub	sp, #20
 8084544:	af00      	add	r7, sp, #0
 8084546:	60f8      	str	r0, [r7, #12]
 8084548:	60b9      	str	r1, [r7, #8]
 808454a:	4611      	mov	r1, r2
 808454c:	461a      	mov	r2, r3
 808454e:	460b      	mov	r3, r1
 8084550:	80fb      	strh	r3, [r7, #6]
 8084552:	4613      	mov	r3, r2
 8084554:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8084556:	68fb      	ldr	r3, [r7, #12]
 8084558:	2200      	movs	r2, #0
 808455a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 808455c:	68fb      	ldr	r3, [r7, #12]
 808455e:	68ba      	ldr	r2, [r7, #8]
 8084560:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8084562:	68fb      	ldr	r3, [r7, #12]
 8084564:	88fa      	ldrh	r2, [r7, #6]
 8084566:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8084568:	68fb      	ldr	r3, [r7, #12]
 808456a:	88ba      	ldrh	r2, [r7, #4]
 808456c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 808456e:	8b3b      	ldrh	r3, [r7, #24]
 8084570:	b2da      	uxtb	r2, r3
 8084572:	68fb      	ldr	r3, [r7, #12]
 8084574:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8084576:	68fb      	ldr	r3, [r7, #12]
 8084578:	7f3a      	ldrb	r2, [r7, #28]
 808457a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 808457c:	68fb      	ldr	r3, [r7, #12]
 808457e:	2201      	movs	r2, #1
 8084580:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8084582:	68fb      	ldr	r3, [r7, #12]
 8084584:	2200      	movs	r2, #0
 8084586:	73da      	strb	r2, [r3, #15]
}
 8084588:	bf00      	nop
 808458a:	3714      	adds	r7, #20
 808458c:	46bd      	mov	sp, r7
 808458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084592:	4770      	bx	lr

08084594 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8084594:	b580      	push	{r7, lr}
 8084596:	b08c      	sub	sp, #48	; 0x30
 8084598:	af02      	add	r7, sp, #8
 808459a:	4603      	mov	r3, r0
 808459c:	71fb      	strb	r3, [r7, #7]
 808459e:	460b      	mov	r3, r1
 80845a0:	80bb      	strh	r3, [r7, #4]
 80845a2:	4613      	mov	r3, r2
 80845a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80845a6:	79fb      	ldrb	r3, [r7, #7]
 80845a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80845aa:	887b      	ldrh	r3, [r7, #2]
 80845ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80845b0:	d07f      	beq.n	80846b2 <pbuf_alloc+0x11e>
 80845b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80845b6:	f300 80c8 	bgt.w	808474a <pbuf_alloc+0x1b6>
 80845ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80845be:	d010      	beq.n	80845e2 <pbuf_alloc+0x4e>
 80845c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80845c4:	f300 80c1 	bgt.w	808474a <pbuf_alloc+0x1b6>
 80845c8:	2b01      	cmp	r3, #1
 80845ca:	d002      	beq.n	80845d2 <pbuf_alloc+0x3e>
 80845cc:	2b41      	cmp	r3, #65	; 0x41
 80845ce:	f040 80bc 	bne.w	808474a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80845d2:	887a      	ldrh	r2, [r7, #2]
 80845d4:	88bb      	ldrh	r3, [r7, #4]
 80845d6:	4619      	mov	r1, r3
 80845d8:	2000      	movs	r0, #0
 80845da:	f000 f8d1 	bl	8084780 <pbuf_alloc_reference>
 80845de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80845e0:	e0bd      	b.n	808475e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80845e2:	2300      	movs	r3, #0
 80845e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80845e6:	2300      	movs	r3, #0
 80845e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80845ea:	88bb      	ldrh	r3, [r7, #4]
 80845ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80845ee:	2008      	movs	r0, #8
 80845f0:	f7ff fbee 	bl	8083dd0 <memp_malloc>
 80845f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80845f6:	693b      	ldr	r3, [r7, #16]
 80845f8:	2b00      	cmp	r3, #0
 80845fa:	d109      	bne.n	8084610 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80845fc:	f7ff ff94 	bl	8084528 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8084600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8084602:	2b00      	cmp	r3, #0
 8084604:	d002      	beq.n	808460c <pbuf_alloc+0x78>
            pbuf_free(p);
 8084606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8084608:	f000 faa8 	bl	8084b5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 808460c:	2300      	movs	r3, #0
 808460e:	e0a7      	b.n	8084760 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8084610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8084612:	3303      	adds	r3, #3
 8084614:	b29b      	uxth	r3, r3
 8084616:	f023 0303 	bic.w	r3, r3, #3
 808461a:	b29b      	uxth	r3, r3
 808461c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8084620:	b29b      	uxth	r3, r3
 8084622:	8b7a      	ldrh	r2, [r7, #26]
 8084624:	4293      	cmp	r3, r2
 8084626:	bf28      	it	cs
 8084628:	4613      	movcs	r3, r2
 808462a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 808462c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808462e:	3310      	adds	r3, #16
 8084630:	693a      	ldr	r2, [r7, #16]
 8084632:	4413      	add	r3, r2
 8084634:	3303      	adds	r3, #3
 8084636:	f023 0303 	bic.w	r3, r3, #3
 808463a:	4618      	mov	r0, r3
 808463c:	89f9      	ldrh	r1, [r7, #14]
 808463e:	8b7a      	ldrh	r2, [r7, #26]
 8084640:	2300      	movs	r3, #0
 8084642:	9301      	str	r3, [sp, #4]
 8084644:	887b      	ldrh	r3, [r7, #2]
 8084646:	9300      	str	r3, [sp, #0]
 8084648:	460b      	mov	r3, r1
 808464a:	4601      	mov	r1, r0
 808464c:	6938      	ldr	r0, [r7, #16]
 808464e:	f7ff ff77 	bl	8084540 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8084652:	693b      	ldr	r3, [r7, #16]
 8084654:	685b      	ldr	r3, [r3, #4]
 8084656:	f003 0303 	and.w	r3, r3, #3
 808465a:	2b00      	cmp	r3, #0
 808465c:	d006      	beq.n	808466c <pbuf_alloc+0xd8>
 808465e:	4b42      	ldr	r3, [pc, #264]	; (8084768 <pbuf_alloc+0x1d4>)
 8084660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8084664:	4941      	ldr	r1, [pc, #260]	; (808476c <pbuf_alloc+0x1d8>)
 8084666:	4842      	ldr	r0, [pc, #264]	; (8084770 <pbuf_alloc+0x1dc>)
 8084668:	f008 fc34 	bl	808ced4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 808466c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808466e:	3303      	adds	r3, #3
 8084670:	f023 0303 	bic.w	r3, r3, #3
 8084674:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8084678:	d106      	bne.n	8084688 <pbuf_alloc+0xf4>
 808467a:	4b3b      	ldr	r3, [pc, #236]	; (8084768 <pbuf_alloc+0x1d4>)
 808467c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8084680:	493c      	ldr	r1, [pc, #240]	; (8084774 <pbuf_alloc+0x1e0>)
 8084682:	483b      	ldr	r0, [pc, #236]	; (8084770 <pbuf_alloc+0x1dc>)
 8084684:	f008 fc26 	bl	808ced4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8084688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808468a:	2b00      	cmp	r3, #0
 808468c:	d102      	bne.n	8084694 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 808468e:	693b      	ldr	r3, [r7, #16]
 8084690:	627b      	str	r3, [r7, #36]	; 0x24
 8084692:	e002      	b.n	808469a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8084694:	69fb      	ldr	r3, [r7, #28]
 8084696:	693a      	ldr	r2, [r7, #16]
 8084698:	601a      	str	r2, [r3, #0]
        }
        last = q;
 808469a:	693b      	ldr	r3, [r7, #16]
 808469c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 808469e:	8b7a      	ldrh	r2, [r7, #26]
 80846a0:	89fb      	ldrh	r3, [r7, #14]
 80846a2:	1ad3      	subs	r3, r2, r3
 80846a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80846a6:	2300      	movs	r3, #0
 80846a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80846aa:	8b7b      	ldrh	r3, [r7, #26]
 80846ac:	2b00      	cmp	r3, #0
 80846ae:	d19e      	bne.n	80845ee <pbuf_alloc+0x5a>
      break;
 80846b0:	e055      	b.n	808475e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80846b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80846b4:	3303      	adds	r3, #3
 80846b6:	b29b      	uxth	r3, r3
 80846b8:	f023 0303 	bic.w	r3, r3, #3
 80846bc:	b29a      	uxth	r2, r3
 80846be:	88bb      	ldrh	r3, [r7, #4]
 80846c0:	3303      	adds	r3, #3
 80846c2:	b29b      	uxth	r3, r3
 80846c4:	f023 0303 	bic.w	r3, r3, #3
 80846c8:	b29b      	uxth	r3, r3
 80846ca:	4413      	add	r3, r2
 80846cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80846ce:	8b3b      	ldrh	r3, [r7, #24]
 80846d0:	3310      	adds	r3, #16
 80846d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80846d4:	8b3a      	ldrh	r2, [r7, #24]
 80846d6:	88bb      	ldrh	r3, [r7, #4]
 80846d8:	3303      	adds	r3, #3
 80846da:	f023 0303 	bic.w	r3, r3, #3
 80846de:	429a      	cmp	r2, r3
 80846e0:	d306      	bcc.n	80846f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80846e2:	8afa      	ldrh	r2, [r7, #22]
 80846e4:	88bb      	ldrh	r3, [r7, #4]
 80846e6:	3303      	adds	r3, #3
 80846e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80846ec:	429a      	cmp	r2, r3
 80846ee:	d201      	bcs.n	80846f4 <pbuf_alloc+0x160>
        return NULL;
 80846f0:	2300      	movs	r3, #0
 80846f2:	e035      	b.n	8084760 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80846f4:	8afb      	ldrh	r3, [r7, #22]
 80846f6:	4618      	mov	r0, r3
 80846f8:	f7ff f9da 	bl	8083ab0 <mem_malloc>
 80846fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80846fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8084700:	2b00      	cmp	r3, #0
 8084702:	d101      	bne.n	8084708 <pbuf_alloc+0x174>
        return NULL;
 8084704:	2300      	movs	r3, #0
 8084706:	e02b      	b.n	8084760 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8084708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808470a:	3310      	adds	r3, #16
 808470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808470e:	4413      	add	r3, r2
 8084710:	3303      	adds	r3, #3
 8084712:	f023 0303 	bic.w	r3, r3, #3
 8084716:	4618      	mov	r0, r3
 8084718:	88b9      	ldrh	r1, [r7, #4]
 808471a:	88ba      	ldrh	r2, [r7, #4]
 808471c:	2300      	movs	r3, #0
 808471e:	9301      	str	r3, [sp, #4]
 8084720:	887b      	ldrh	r3, [r7, #2]
 8084722:	9300      	str	r3, [sp, #0]
 8084724:	460b      	mov	r3, r1
 8084726:	4601      	mov	r1, r0
 8084728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808472a:	f7ff ff09 	bl	8084540 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 808472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8084730:	685b      	ldr	r3, [r3, #4]
 8084732:	f003 0303 	and.w	r3, r3, #3
 8084736:	2b00      	cmp	r3, #0
 8084738:	d010      	beq.n	808475c <pbuf_alloc+0x1c8>
 808473a:	4b0b      	ldr	r3, [pc, #44]	; (8084768 <pbuf_alloc+0x1d4>)
 808473c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8084740:	490d      	ldr	r1, [pc, #52]	; (8084778 <pbuf_alloc+0x1e4>)
 8084742:	480b      	ldr	r0, [pc, #44]	; (8084770 <pbuf_alloc+0x1dc>)
 8084744:	f008 fbc6 	bl	808ced4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8084748:	e008      	b.n	808475c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 808474a:	4b07      	ldr	r3, [pc, #28]	; (8084768 <pbuf_alloc+0x1d4>)
 808474c:	f240 1227 	movw	r2, #295	; 0x127
 8084750:	490a      	ldr	r1, [pc, #40]	; (808477c <pbuf_alloc+0x1e8>)
 8084752:	4807      	ldr	r0, [pc, #28]	; (8084770 <pbuf_alloc+0x1dc>)
 8084754:	f008 fbbe 	bl	808ced4 <iprintf>
      return NULL;
 8084758:	2300      	movs	r3, #0
 808475a:	e001      	b.n	8084760 <pbuf_alloc+0x1cc>
      break;
 808475c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 808475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8084760:	4618      	mov	r0, r3
 8084762:	3728      	adds	r7, #40	; 0x28
 8084764:	46bd      	mov	sp, r7
 8084766:	bd80      	pop	{r7, pc}
 8084768:	0808e558 	.word	0x0808e558
 808476c:	0808e588 	.word	0x0808e588
 8084770:	0808e5b8 	.word	0x0808e5b8
 8084774:	0808e5e0 	.word	0x0808e5e0
 8084778:	0808e614 	.word	0x0808e614
 808477c:	0808e640 	.word	0x0808e640

08084780 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8084780:	b580      	push	{r7, lr}
 8084782:	b086      	sub	sp, #24
 8084784:	af02      	add	r7, sp, #8
 8084786:	6078      	str	r0, [r7, #4]
 8084788:	460b      	mov	r3, r1
 808478a:	807b      	strh	r3, [r7, #2]
 808478c:	4613      	mov	r3, r2
 808478e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8084790:	883b      	ldrh	r3, [r7, #0]
 8084792:	2b41      	cmp	r3, #65	; 0x41
 8084794:	d009      	beq.n	80847aa <pbuf_alloc_reference+0x2a>
 8084796:	883b      	ldrh	r3, [r7, #0]
 8084798:	2b01      	cmp	r3, #1
 808479a:	d006      	beq.n	80847aa <pbuf_alloc_reference+0x2a>
 808479c:	4b0f      	ldr	r3, [pc, #60]	; (80847dc <pbuf_alloc_reference+0x5c>)
 808479e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80847a2:	490f      	ldr	r1, [pc, #60]	; (80847e0 <pbuf_alloc_reference+0x60>)
 80847a4:	480f      	ldr	r0, [pc, #60]	; (80847e4 <pbuf_alloc_reference+0x64>)
 80847a6:	f008 fb95 	bl	808ced4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80847aa:	2007      	movs	r0, #7
 80847ac:	f7ff fb10 	bl	8083dd0 <memp_malloc>
 80847b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80847b2:	68fb      	ldr	r3, [r7, #12]
 80847b4:	2b00      	cmp	r3, #0
 80847b6:	d101      	bne.n	80847bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80847b8:	2300      	movs	r3, #0
 80847ba:	e00b      	b.n	80847d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80847bc:	8879      	ldrh	r1, [r7, #2]
 80847be:	887a      	ldrh	r2, [r7, #2]
 80847c0:	2300      	movs	r3, #0
 80847c2:	9301      	str	r3, [sp, #4]
 80847c4:	883b      	ldrh	r3, [r7, #0]
 80847c6:	9300      	str	r3, [sp, #0]
 80847c8:	460b      	mov	r3, r1
 80847ca:	6879      	ldr	r1, [r7, #4]
 80847cc:	68f8      	ldr	r0, [r7, #12]
 80847ce:	f7ff feb7 	bl	8084540 <pbuf_init_alloced_pbuf>
  return p;
 80847d2:	68fb      	ldr	r3, [r7, #12]
}
 80847d4:	4618      	mov	r0, r3
 80847d6:	3710      	adds	r7, #16
 80847d8:	46bd      	mov	sp, r7
 80847da:	bd80      	pop	{r7, pc}
 80847dc:	0808e558 	.word	0x0808e558
 80847e0:	0808e65c 	.word	0x0808e65c
 80847e4:	0808e5b8 	.word	0x0808e5b8

080847e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80847e8:	b580      	push	{r7, lr}
 80847ea:	b088      	sub	sp, #32
 80847ec:	af02      	add	r7, sp, #8
 80847ee:	607b      	str	r3, [r7, #4]
 80847f0:	4603      	mov	r3, r0
 80847f2:	73fb      	strb	r3, [r7, #15]
 80847f4:	460b      	mov	r3, r1
 80847f6:	81bb      	strh	r3, [r7, #12]
 80847f8:	4613      	mov	r3, r2
 80847fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80847fc:	7bfb      	ldrb	r3, [r7, #15]
 80847fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8084800:	8a7b      	ldrh	r3, [r7, #18]
 8084802:	3303      	adds	r3, #3
 8084804:	f023 0203 	bic.w	r2, r3, #3
 8084808:	89bb      	ldrh	r3, [r7, #12]
 808480a:	441a      	add	r2, r3
 808480c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808480e:	429a      	cmp	r2, r3
 8084810:	d901      	bls.n	8084816 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8084812:	2300      	movs	r3, #0
 8084814:	e018      	b.n	8084848 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8084816:	6a3b      	ldr	r3, [r7, #32]
 8084818:	2b00      	cmp	r3, #0
 808481a:	d007      	beq.n	808482c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 808481c:	8a7b      	ldrh	r3, [r7, #18]
 808481e:	3303      	adds	r3, #3
 8084820:	f023 0303 	bic.w	r3, r3, #3
 8084824:	6a3a      	ldr	r2, [r7, #32]
 8084826:	4413      	add	r3, r2
 8084828:	617b      	str	r3, [r7, #20]
 808482a:	e001      	b.n	8084830 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 808482c:	2300      	movs	r3, #0
 808482e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8084830:	6878      	ldr	r0, [r7, #4]
 8084832:	89b9      	ldrh	r1, [r7, #12]
 8084834:	89ba      	ldrh	r2, [r7, #12]
 8084836:	2302      	movs	r3, #2
 8084838:	9301      	str	r3, [sp, #4]
 808483a:	897b      	ldrh	r3, [r7, #10]
 808483c:	9300      	str	r3, [sp, #0]
 808483e:	460b      	mov	r3, r1
 8084840:	6979      	ldr	r1, [r7, #20]
 8084842:	f7ff fe7d 	bl	8084540 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8084846:	687b      	ldr	r3, [r7, #4]
}
 8084848:	4618      	mov	r0, r3
 808484a:	3718      	adds	r7, #24
 808484c:	46bd      	mov	sp, r7
 808484e:	bd80      	pop	{r7, pc}

08084850 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8084850:	b580      	push	{r7, lr}
 8084852:	b084      	sub	sp, #16
 8084854:	af00      	add	r7, sp, #0
 8084856:	6078      	str	r0, [r7, #4]
 8084858:	460b      	mov	r3, r1
 808485a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 808485c:	687b      	ldr	r3, [r7, #4]
 808485e:	2b00      	cmp	r3, #0
 8084860:	d106      	bne.n	8084870 <pbuf_realloc+0x20>
 8084862:	4b3a      	ldr	r3, [pc, #232]	; (808494c <pbuf_realloc+0xfc>)
 8084864:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8084868:	4939      	ldr	r1, [pc, #228]	; (8084950 <pbuf_realloc+0x100>)
 808486a:	483a      	ldr	r0, [pc, #232]	; (8084954 <pbuf_realloc+0x104>)
 808486c:	f008 fb32 	bl	808ced4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8084870:	687b      	ldr	r3, [r7, #4]
 8084872:	891b      	ldrh	r3, [r3, #8]
 8084874:	887a      	ldrh	r2, [r7, #2]
 8084876:	429a      	cmp	r2, r3
 8084878:	d263      	bcs.n	8084942 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 808487a:	687b      	ldr	r3, [r7, #4]
 808487c:	891a      	ldrh	r2, [r3, #8]
 808487e:	887b      	ldrh	r3, [r7, #2]
 8084880:	1ad3      	subs	r3, r2, r3
 8084882:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8084884:	887b      	ldrh	r3, [r7, #2]
 8084886:	817b      	strh	r3, [r7, #10]
  q = p;
 8084888:	687b      	ldr	r3, [r7, #4]
 808488a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 808488c:	e018      	b.n	80848c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 808488e:	68fb      	ldr	r3, [r7, #12]
 8084890:	895b      	ldrh	r3, [r3, #10]
 8084892:	897a      	ldrh	r2, [r7, #10]
 8084894:	1ad3      	subs	r3, r2, r3
 8084896:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8084898:	68fb      	ldr	r3, [r7, #12]
 808489a:	891a      	ldrh	r2, [r3, #8]
 808489c:	893b      	ldrh	r3, [r7, #8]
 808489e:	1ad3      	subs	r3, r2, r3
 80848a0:	b29a      	uxth	r2, r3
 80848a2:	68fb      	ldr	r3, [r7, #12]
 80848a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80848a6:	68fb      	ldr	r3, [r7, #12]
 80848a8:	681b      	ldr	r3, [r3, #0]
 80848aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80848ac:	68fb      	ldr	r3, [r7, #12]
 80848ae:	2b00      	cmp	r3, #0
 80848b0:	d106      	bne.n	80848c0 <pbuf_realloc+0x70>
 80848b2:	4b26      	ldr	r3, [pc, #152]	; (808494c <pbuf_realloc+0xfc>)
 80848b4:	f240 12af 	movw	r2, #431	; 0x1af
 80848b8:	4927      	ldr	r1, [pc, #156]	; (8084958 <pbuf_realloc+0x108>)
 80848ba:	4826      	ldr	r0, [pc, #152]	; (8084954 <pbuf_realloc+0x104>)
 80848bc:	f008 fb0a 	bl	808ced4 <iprintf>
  while (rem_len > q->len) {
 80848c0:	68fb      	ldr	r3, [r7, #12]
 80848c2:	895b      	ldrh	r3, [r3, #10]
 80848c4:	897a      	ldrh	r2, [r7, #10]
 80848c6:	429a      	cmp	r2, r3
 80848c8:	d8e1      	bhi.n	808488e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80848ca:	68fb      	ldr	r3, [r7, #12]
 80848cc:	7b1b      	ldrb	r3, [r3, #12]
 80848ce:	f003 030f 	and.w	r3, r3, #15
 80848d2:	2b00      	cmp	r3, #0
 80848d4:	d121      	bne.n	808491a <pbuf_realloc+0xca>
 80848d6:	68fb      	ldr	r3, [r7, #12]
 80848d8:	895b      	ldrh	r3, [r3, #10]
 80848da:	897a      	ldrh	r2, [r7, #10]
 80848dc:	429a      	cmp	r2, r3
 80848de:	d01c      	beq.n	808491a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80848e0:	68fb      	ldr	r3, [r7, #12]
 80848e2:	7b5b      	ldrb	r3, [r3, #13]
 80848e4:	f003 0302 	and.w	r3, r3, #2
 80848e8:	2b00      	cmp	r3, #0
 80848ea:	d116      	bne.n	808491a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80848ec:	68fb      	ldr	r3, [r7, #12]
 80848ee:	685a      	ldr	r2, [r3, #4]
 80848f0:	68fb      	ldr	r3, [r7, #12]
 80848f2:	1ad3      	subs	r3, r2, r3
 80848f4:	b29a      	uxth	r2, r3
 80848f6:	897b      	ldrh	r3, [r7, #10]
 80848f8:	4413      	add	r3, r2
 80848fa:	b29b      	uxth	r3, r3
 80848fc:	4619      	mov	r1, r3
 80848fe:	68f8      	ldr	r0, [r7, #12]
 8084900:	f7fe ffda 	bl	80838b8 <mem_trim>
 8084904:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8084906:	68fb      	ldr	r3, [r7, #12]
 8084908:	2b00      	cmp	r3, #0
 808490a:	d106      	bne.n	808491a <pbuf_realloc+0xca>
 808490c:	4b0f      	ldr	r3, [pc, #60]	; (808494c <pbuf_realloc+0xfc>)
 808490e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8084912:	4912      	ldr	r1, [pc, #72]	; (808495c <pbuf_realloc+0x10c>)
 8084914:	480f      	ldr	r0, [pc, #60]	; (8084954 <pbuf_realloc+0x104>)
 8084916:	f008 fadd 	bl	808ced4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 808491a:	68fb      	ldr	r3, [r7, #12]
 808491c:	897a      	ldrh	r2, [r7, #10]
 808491e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8084920:	68fb      	ldr	r3, [r7, #12]
 8084922:	895a      	ldrh	r2, [r3, #10]
 8084924:	68fb      	ldr	r3, [r7, #12]
 8084926:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8084928:	68fb      	ldr	r3, [r7, #12]
 808492a:	681b      	ldr	r3, [r3, #0]
 808492c:	2b00      	cmp	r3, #0
 808492e:	d004      	beq.n	808493a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8084930:	68fb      	ldr	r3, [r7, #12]
 8084932:	681b      	ldr	r3, [r3, #0]
 8084934:	4618      	mov	r0, r3
 8084936:	f000 f911 	bl	8084b5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 808493a:	68fb      	ldr	r3, [r7, #12]
 808493c:	2200      	movs	r2, #0
 808493e:	601a      	str	r2, [r3, #0]
 8084940:	e000      	b.n	8084944 <pbuf_realloc+0xf4>
    return;
 8084942:	bf00      	nop

}
 8084944:	3710      	adds	r7, #16
 8084946:	46bd      	mov	sp, r7
 8084948:	bd80      	pop	{r7, pc}
 808494a:	bf00      	nop
 808494c:	0808e558 	.word	0x0808e558
 8084950:	0808e670 	.word	0x0808e670
 8084954:	0808e5b8 	.word	0x0808e5b8
 8084958:	0808e688 	.word	0x0808e688
 808495c:	0808e6a0 	.word	0x0808e6a0

08084960 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8084960:	b580      	push	{r7, lr}
 8084962:	b086      	sub	sp, #24
 8084964:	af00      	add	r7, sp, #0
 8084966:	60f8      	str	r0, [r7, #12]
 8084968:	60b9      	str	r1, [r7, #8]
 808496a:	4613      	mov	r3, r2
 808496c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 808496e:	68fb      	ldr	r3, [r7, #12]
 8084970:	2b00      	cmp	r3, #0
 8084972:	d106      	bne.n	8084982 <pbuf_add_header_impl+0x22>
 8084974:	4b2b      	ldr	r3, [pc, #172]	; (8084a24 <pbuf_add_header_impl+0xc4>)
 8084976:	f240 12df 	movw	r2, #479	; 0x1df
 808497a:	492b      	ldr	r1, [pc, #172]	; (8084a28 <pbuf_add_header_impl+0xc8>)
 808497c:	482b      	ldr	r0, [pc, #172]	; (8084a2c <pbuf_add_header_impl+0xcc>)
 808497e:	f008 faa9 	bl	808ced4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8084982:	68fb      	ldr	r3, [r7, #12]
 8084984:	2b00      	cmp	r3, #0
 8084986:	d003      	beq.n	8084990 <pbuf_add_header_impl+0x30>
 8084988:	68bb      	ldr	r3, [r7, #8]
 808498a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808498e:	d301      	bcc.n	8084994 <pbuf_add_header_impl+0x34>
    return 1;
 8084990:	2301      	movs	r3, #1
 8084992:	e043      	b.n	8084a1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8084994:	68bb      	ldr	r3, [r7, #8]
 8084996:	2b00      	cmp	r3, #0
 8084998:	d101      	bne.n	808499e <pbuf_add_header_impl+0x3e>
    return 0;
 808499a:	2300      	movs	r3, #0
 808499c:	e03e      	b.n	8084a1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 808499e:	68bb      	ldr	r3, [r7, #8]
 80849a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80849a2:	68fb      	ldr	r3, [r7, #12]
 80849a4:	891a      	ldrh	r2, [r3, #8]
 80849a6:	8a7b      	ldrh	r3, [r7, #18]
 80849a8:	4413      	add	r3, r2
 80849aa:	b29b      	uxth	r3, r3
 80849ac:	8a7a      	ldrh	r2, [r7, #18]
 80849ae:	429a      	cmp	r2, r3
 80849b0:	d901      	bls.n	80849b6 <pbuf_add_header_impl+0x56>
    return 1;
 80849b2:	2301      	movs	r3, #1
 80849b4:	e032      	b.n	8084a1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80849b6:	68fb      	ldr	r3, [r7, #12]
 80849b8:	7b1b      	ldrb	r3, [r3, #12]
 80849ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80849bc:	8a3b      	ldrh	r3, [r7, #16]
 80849be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80849c2:	2b00      	cmp	r3, #0
 80849c4:	d00c      	beq.n	80849e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80849c6:	68fb      	ldr	r3, [r7, #12]
 80849c8:	685a      	ldr	r2, [r3, #4]
 80849ca:	68bb      	ldr	r3, [r7, #8]
 80849cc:	425b      	negs	r3, r3
 80849ce:	4413      	add	r3, r2
 80849d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80849d2:	68fb      	ldr	r3, [r7, #12]
 80849d4:	3310      	adds	r3, #16
 80849d6:	697a      	ldr	r2, [r7, #20]
 80849d8:	429a      	cmp	r2, r3
 80849da:	d20d      	bcs.n	80849f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80849dc:	2301      	movs	r3, #1
 80849de:	e01d      	b.n	8084a1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80849e0:	79fb      	ldrb	r3, [r7, #7]
 80849e2:	2b00      	cmp	r3, #0
 80849e4:	d006      	beq.n	80849f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80849e6:	68fb      	ldr	r3, [r7, #12]
 80849e8:	685a      	ldr	r2, [r3, #4]
 80849ea:	68bb      	ldr	r3, [r7, #8]
 80849ec:	425b      	negs	r3, r3
 80849ee:	4413      	add	r3, r2
 80849f0:	617b      	str	r3, [r7, #20]
 80849f2:	e001      	b.n	80849f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80849f4:	2301      	movs	r3, #1
 80849f6:	e011      	b.n	8084a1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80849f8:	68fb      	ldr	r3, [r7, #12]
 80849fa:	697a      	ldr	r2, [r7, #20]
 80849fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80849fe:	68fb      	ldr	r3, [r7, #12]
 8084a00:	895a      	ldrh	r2, [r3, #10]
 8084a02:	8a7b      	ldrh	r3, [r7, #18]
 8084a04:	4413      	add	r3, r2
 8084a06:	b29a      	uxth	r2, r3
 8084a08:	68fb      	ldr	r3, [r7, #12]
 8084a0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8084a0c:	68fb      	ldr	r3, [r7, #12]
 8084a0e:	891a      	ldrh	r2, [r3, #8]
 8084a10:	8a7b      	ldrh	r3, [r7, #18]
 8084a12:	4413      	add	r3, r2
 8084a14:	b29a      	uxth	r2, r3
 8084a16:	68fb      	ldr	r3, [r7, #12]
 8084a18:	811a      	strh	r2, [r3, #8]


  return 0;
 8084a1a:	2300      	movs	r3, #0
}
 8084a1c:	4618      	mov	r0, r3
 8084a1e:	3718      	adds	r7, #24
 8084a20:	46bd      	mov	sp, r7
 8084a22:	bd80      	pop	{r7, pc}
 8084a24:	0808e558 	.word	0x0808e558
 8084a28:	0808e6bc 	.word	0x0808e6bc
 8084a2c:	0808e5b8 	.word	0x0808e5b8

08084a30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8084a30:	b580      	push	{r7, lr}
 8084a32:	b082      	sub	sp, #8
 8084a34:	af00      	add	r7, sp, #0
 8084a36:	6078      	str	r0, [r7, #4]
 8084a38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8084a3a:	2200      	movs	r2, #0
 8084a3c:	6839      	ldr	r1, [r7, #0]
 8084a3e:	6878      	ldr	r0, [r7, #4]
 8084a40:	f7ff ff8e 	bl	8084960 <pbuf_add_header_impl>
 8084a44:	4603      	mov	r3, r0
}
 8084a46:	4618      	mov	r0, r3
 8084a48:	3708      	adds	r7, #8
 8084a4a:	46bd      	mov	sp, r7
 8084a4c:	bd80      	pop	{r7, pc}
	...

08084a50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8084a50:	b580      	push	{r7, lr}
 8084a52:	b084      	sub	sp, #16
 8084a54:	af00      	add	r7, sp, #0
 8084a56:	6078      	str	r0, [r7, #4]
 8084a58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8084a5a:	687b      	ldr	r3, [r7, #4]
 8084a5c:	2b00      	cmp	r3, #0
 8084a5e:	d106      	bne.n	8084a6e <pbuf_remove_header+0x1e>
 8084a60:	4b20      	ldr	r3, [pc, #128]	; (8084ae4 <pbuf_remove_header+0x94>)
 8084a62:	f240 224b 	movw	r2, #587	; 0x24b
 8084a66:	4920      	ldr	r1, [pc, #128]	; (8084ae8 <pbuf_remove_header+0x98>)
 8084a68:	4820      	ldr	r0, [pc, #128]	; (8084aec <pbuf_remove_header+0x9c>)
 8084a6a:	f008 fa33 	bl	808ced4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8084a6e:	687b      	ldr	r3, [r7, #4]
 8084a70:	2b00      	cmp	r3, #0
 8084a72:	d003      	beq.n	8084a7c <pbuf_remove_header+0x2c>
 8084a74:	683b      	ldr	r3, [r7, #0]
 8084a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8084a7a:	d301      	bcc.n	8084a80 <pbuf_remove_header+0x30>
    return 1;
 8084a7c:	2301      	movs	r3, #1
 8084a7e:	e02c      	b.n	8084ada <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8084a80:	683b      	ldr	r3, [r7, #0]
 8084a82:	2b00      	cmp	r3, #0
 8084a84:	d101      	bne.n	8084a8a <pbuf_remove_header+0x3a>
    return 0;
 8084a86:	2300      	movs	r3, #0
 8084a88:	e027      	b.n	8084ada <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8084a8a:	683b      	ldr	r3, [r7, #0]
 8084a8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8084a8e:	687b      	ldr	r3, [r7, #4]
 8084a90:	895b      	ldrh	r3, [r3, #10]
 8084a92:	89fa      	ldrh	r2, [r7, #14]
 8084a94:	429a      	cmp	r2, r3
 8084a96:	d908      	bls.n	8084aaa <pbuf_remove_header+0x5a>
 8084a98:	4b12      	ldr	r3, [pc, #72]	; (8084ae4 <pbuf_remove_header+0x94>)
 8084a9a:	f240 2255 	movw	r2, #597	; 0x255
 8084a9e:	4914      	ldr	r1, [pc, #80]	; (8084af0 <pbuf_remove_header+0xa0>)
 8084aa0:	4812      	ldr	r0, [pc, #72]	; (8084aec <pbuf_remove_header+0x9c>)
 8084aa2:	f008 fa17 	bl	808ced4 <iprintf>
 8084aa6:	2301      	movs	r3, #1
 8084aa8:	e017      	b.n	8084ada <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8084aaa:	687b      	ldr	r3, [r7, #4]
 8084aac:	685b      	ldr	r3, [r3, #4]
 8084aae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8084ab0:	687b      	ldr	r3, [r7, #4]
 8084ab2:	685a      	ldr	r2, [r3, #4]
 8084ab4:	683b      	ldr	r3, [r7, #0]
 8084ab6:	441a      	add	r2, r3
 8084ab8:	687b      	ldr	r3, [r7, #4]
 8084aba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8084abc:	687b      	ldr	r3, [r7, #4]
 8084abe:	895a      	ldrh	r2, [r3, #10]
 8084ac0:	89fb      	ldrh	r3, [r7, #14]
 8084ac2:	1ad3      	subs	r3, r2, r3
 8084ac4:	b29a      	uxth	r2, r3
 8084ac6:	687b      	ldr	r3, [r7, #4]
 8084ac8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8084aca:	687b      	ldr	r3, [r7, #4]
 8084acc:	891a      	ldrh	r2, [r3, #8]
 8084ace:	89fb      	ldrh	r3, [r7, #14]
 8084ad0:	1ad3      	subs	r3, r2, r3
 8084ad2:	b29a      	uxth	r2, r3
 8084ad4:	687b      	ldr	r3, [r7, #4]
 8084ad6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8084ad8:	2300      	movs	r3, #0
}
 8084ada:	4618      	mov	r0, r3
 8084adc:	3710      	adds	r7, #16
 8084ade:	46bd      	mov	sp, r7
 8084ae0:	bd80      	pop	{r7, pc}
 8084ae2:	bf00      	nop
 8084ae4:	0808e558 	.word	0x0808e558
 8084ae8:	0808e6bc 	.word	0x0808e6bc
 8084aec:	0808e5b8 	.word	0x0808e5b8
 8084af0:	0808e6c8 	.word	0x0808e6c8

08084af4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8084af4:	b580      	push	{r7, lr}
 8084af6:	b082      	sub	sp, #8
 8084af8:	af00      	add	r7, sp, #0
 8084afa:	6078      	str	r0, [r7, #4]
 8084afc:	460b      	mov	r3, r1
 8084afe:	807b      	strh	r3, [r7, #2]
 8084b00:	4613      	mov	r3, r2
 8084b02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8084b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8084b08:	2b00      	cmp	r3, #0
 8084b0a:	da08      	bge.n	8084b1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8084b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8084b10:	425b      	negs	r3, r3
 8084b12:	4619      	mov	r1, r3
 8084b14:	6878      	ldr	r0, [r7, #4]
 8084b16:	f7ff ff9b 	bl	8084a50 <pbuf_remove_header>
 8084b1a:	4603      	mov	r3, r0
 8084b1c:	e007      	b.n	8084b2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8084b1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8084b22:	787a      	ldrb	r2, [r7, #1]
 8084b24:	4619      	mov	r1, r3
 8084b26:	6878      	ldr	r0, [r7, #4]
 8084b28:	f7ff ff1a 	bl	8084960 <pbuf_add_header_impl>
 8084b2c:	4603      	mov	r3, r0
  }
}
 8084b2e:	4618      	mov	r0, r3
 8084b30:	3708      	adds	r7, #8
 8084b32:	46bd      	mov	sp, r7
 8084b34:	bd80      	pop	{r7, pc}

08084b36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8084b36:	b580      	push	{r7, lr}
 8084b38:	b082      	sub	sp, #8
 8084b3a:	af00      	add	r7, sp, #0
 8084b3c:	6078      	str	r0, [r7, #4]
 8084b3e:	460b      	mov	r3, r1
 8084b40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8084b42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8084b46:	2201      	movs	r2, #1
 8084b48:	4619      	mov	r1, r3
 8084b4a:	6878      	ldr	r0, [r7, #4]
 8084b4c:	f7ff ffd2 	bl	8084af4 <pbuf_header_impl>
 8084b50:	4603      	mov	r3, r0
}
 8084b52:	4618      	mov	r0, r3
 8084b54:	3708      	adds	r7, #8
 8084b56:	46bd      	mov	sp, r7
 8084b58:	bd80      	pop	{r7, pc}
	...

08084b5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8084b5c:	b580      	push	{r7, lr}
 8084b5e:	b086      	sub	sp, #24
 8084b60:	af00      	add	r7, sp, #0
 8084b62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8084b64:	687b      	ldr	r3, [r7, #4]
 8084b66:	2b00      	cmp	r3, #0
 8084b68:	d10b      	bne.n	8084b82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8084b6a:	687b      	ldr	r3, [r7, #4]
 8084b6c:	2b00      	cmp	r3, #0
 8084b6e:	d106      	bne.n	8084b7e <pbuf_free+0x22>
 8084b70:	4b38      	ldr	r3, [pc, #224]	; (8084c54 <pbuf_free+0xf8>)
 8084b72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8084b76:	4938      	ldr	r1, [pc, #224]	; (8084c58 <pbuf_free+0xfc>)
 8084b78:	4838      	ldr	r0, [pc, #224]	; (8084c5c <pbuf_free+0x100>)
 8084b7a:	f008 f9ab 	bl	808ced4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8084b7e:	2300      	movs	r3, #0
 8084b80:	e063      	b.n	8084c4a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8084b82:	2300      	movs	r3, #0
 8084b84:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8084b86:	e05c      	b.n	8084c42 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8084b88:	687b      	ldr	r3, [r7, #4]
 8084b8a:	7b9b      	ldrb	r3, [r3, #14]
 8084b8c:	2b00      	cmp	r3, #0
 8084b8e:	d106      	bne.n	8084b9e <pbuf_free+0x42>
 8084b90:	4b30      	ldr	r3, [pc, #192]	; (8084c54 <pbuf_free+0xf8>)
 8084b92:	f240 22f1 	movw	r2, #753	; 0x2f1
 8084b96:	4932      	ldr	r1, [pc, #200]	; (8084c60 <pbuf_free+0x104>)
 8084b98:	4830      	ldr	r0, [pc, #192]	; (8084c5c <pbuf_free+0x100>)
 8084b9a:	f008 f99b 	bl	808ced4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8084b9e:	687b      	ldr	r3, [r7, #4]
 8084ba0:	7b9b      	ldrb	r3, [r3, #14]
 8084ba2:	3b01      	subs	r3, #1
 8084ba4:	b2da      	uxtb	r2, r3
 8084ba6:	687b      	ldr	r3, [r7, #4]
 8084ba8:	739a      	strb	r2, [r3, #14]
 8084baa:	687b      	ldr	r3, [r7, #4]
 8084bac:	7b9b      	ldrb	r3, [r3, #14]
 8084bae:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8084bb0:	7dbb      	ldrb	r3, [r7, #22]
 8084bb2:	2b00      	cmp	r3, #0
 8084bb4:	d143      	bne.n	8084c3e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8084bb6:	687b      	ldr	r3, [r7, #4]
 8084bb8:	681b      	ldr	r3, [r3, #0]
 8084bba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8084bbc:	687b      	ldr	r3, [r7, #4]
 8084bbe:	7b1b      	ldrb	r3, [r3, #12]
 8084bc0:	f003 030f 	and.w	r3, r3, #15
 8084bc4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8084bc6:	687b      	ldr	r3, [r7, #4]
 8084bc8:	7b5b      	ldrb	r3, [r3, #13]
 8084bca:	f003 0302 	and.w	r3, r3, #2
 8084bce:	2b00      	cmp	r3, #0
 8084bd0:	d011      	beq.n	8084bf6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8084bd2:	687b      	ldr	r3, [r7, #4]
 8084bd4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8084bd6:	68bb      	ldr	r3, [r7, #8]
 8084bd8:	691b      	ldr	r3, [r3, #16]
 8084bda:	2b00      	cmp	r3, #0
 8084bdc:	d106      	bne.n	8084bec <pbuf_free+0x90>
 8084bde:	4b1d      	ldr	r3, [pc, #116]	; (8084c54 <pbuf_free+0xf8>)
 8084be0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8084be4:	491f      	ldr	r1, [pc, #124]	; (8084c64 <pbuf_free+0x108>)
 8084be6:	481d      	ldr	r0, [pc, #116]	; (8084c5c <pbuf_free+0x100>)
 8084be8:	f008 f974 	bl	808ced4 <iprintf>
        pc->custom_free_function(p);
 8084bec:	68bb      	ldr	r3, [r7, #8]
 8084bee:	691b      	ldr	r3, [r3, #16]
 8084bf0:	6878      	ldr	r0, [r7, #4]
 8084bf2:	4798      	blx	r3
 8084bf4:	e01d      	b.n	8084c32 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8084bf6:	7bfb      	ldrb	r3, [r7, #15]
 8084bf8:	2b02      	cmp	r3, #2
 8084bfa:	d104      	bne.n	8084c06 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8084bfc:	6879      	ldr	r1, [r7, #4]
 8084bfe:	2008      	movs	r0, #8
 8084c00:	f7ff f956 	bl	8083eb0 <memp_free>
 8084c04:	e015      	b.n	8084c32 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8084c06:	7bfb      	ldrb	r3, [r7, #15]
 8084c08:	2b01      	cmp	r3, #1
 8084c0a:	d104      	bne.n	8084c16 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8084c0c:	6879      	ldr	r1, [r7, #4]
 8084c0e:	2007      	movs	r0, #7
 8084c10:	f7ff f94e 	bl	8083eb0 <memp_free>
 8084c14:	e00d      	b.n	8084c32 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8084c16:	7bfb      	ldrb	r3, [r7, #15]
 8084c18:	2b00      	cmp	r3, #0
 8084c1a:	d103      	bne.n	8084c24 <pbuf_free+0xc8>
          mem_free(p);
 8084c1c:	6878      	ldr	r0, [r7, #4]
 8084c1e:	f7fe fde1 	bl	80837e4 <mem_free>
 8084c22:	e006      	b.n	8084c32 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8084c24:	4b0b      	ldr	r3, [pc, #44]	; (8084c54 <pbuf_free+0xf8>)
 8084c26:	f240 320f 	movw	r2, #783	; 0x30f
 8084c2a:	490f      	ldr	r1, [pc, #60]	; (8084c68 <pbuf_free+0x10c>)
 8084c2c:	480b      	ldr	r0, [pc, #44]	; (8084c5c <pbuf_free+0x100>)
 8084c2e:	f008 f951 	bl	808ced4 <iprintf>
        }
      }
      count++;
 8084c32:	7dfb      	ldrb	r3, [r7, #23]
 8084c34:	3301      	adds	r3, #1
 8084c36:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8084c38:	693b      	ldr	r3, [r7, #16]
 8084c3a:	607b      	str	r3, [r7, #4]
 8084c3c:	e001      	b.n	8084c42 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8084c3e:	2300      	movs	r3, #0
 8084c40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8084c42:	687b      	ldr	r3, [r7, #4]
 8084c44:	2b00      	cmp	r3, #0
 8084c46:	d19f      	bne.n	8084b88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8084c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8084c4a:	4618      	mov	r0, r3
 8084c4c:	3718      	adds	r7, #24
 8084c4e:	46bd      	mov	sp, r7
 8084c50:	bd80      	pop	{r7, pc}
 8084c52:	bf00      	nop
 8084c54:	0808e558 	.word	0x0808e558
 8084c58:	0808e6bc 	.word	0x0808e6bc
 8084c5c:	0808e5b8 	.word	0x0808e5b8
 8084c60:	0808e6e8 	.word	0x0808e6e8
 8084c64:	0808e700 	.word	0x0808e700
 8084c68:	0808e724 	.word	0x0808e724

08084c6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8084c6c:	b480      	push	{r7}
 8084c6e:	b085      	sub	sp, #20
 8084c70:	af00      	add	r7, sp, #0
 8084c72:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8084c74:	2300      	movs	r3, #0
 8084c76:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8084c78:	e005      	b.n	8084c86 <pbuf_clen+0x1a>
    ++len;
 8084c7a:	89fb      	ldrh	r3, [r7, #14]
 8084c7c:	3301      	adds	r3, #1
 8084c7e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8084c80:	687b      	ldr	r3, [r7, #4]
 8084c82:	681b      	ldr	r3, [r3, #0]
 8084c84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8084c86:	687b      	ldr	r3, [r7, #4]
 8084c88:	2b00      	cmp	r3, #0
 8084c8a:	d1f6      	bne.n	8084c7a <pbuf_clen+0xe>
  }
  return len;
 8084c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8084c8e:	4618      	mov	r0, r3
 8084c90:	3714      	adds	r7, #20
 8084c92:	46bd      	mov	sp, r7
 8084c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084c98:	4770      	bx	lr
	...

08084c9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8084c9c:	b580      	push	{r7, lr}
 8084c9e:	b082      	sub	sp, #8
 8084ca0:	af00      	add	r7, sp, #0
 8084ca2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8084ca4:	687b      	ldr	r3, [r7, #4]
 8084ca6:	2b00      	cmp	r3, #0
 8084ca8:	d010      	beq.n	8084ccc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8084caa:	687b      	ldr	r3, [r7, #4]
 8084cac:	7b9b      	ldrb	r3, [r3, #14]
 8084cae:	3301      	adds	r3, #1
 8084cb0:	b2da      	uxtb	r2, r3
 8084cb2:	687b      	ldr	r3, [r7, #4]
 8084cb4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8084cb6:	687b      	ldr	r3, [r7, #4]
 8084cb8:	7b9b      	ldrb	r3, [r3, #14]
 8084cba:	2b00      	cmp	r3, #0
 8084cbc:	d106      	bne.n	8084ccc <pbuf_ref+0x30>
 8084cbe:	4b05      	ldr	r3, [pc, #20]	; (8084cd4 <pbuf_ref+0x38>)
 8084cc0:	f240 3242 	movw	r2, #834	; 0x342
 8084cc4:	4904      	ldr	r1, [pc, #16]	; (8084cd8 <pbuf_ref+0x3c>)
 8084cc6:	4805      	ldr	r0, [pc, #20]	; (8084cdc <pbuf_ref+0x40>)
 8084cc8:	f008 f904 	bl	808ced4 <iprintf>
  }
}
 8084ccc:	bf00      	nop
 8084cce:	3708      	adds	r7, #8
 8084cd0:	46bd      	mov	sp, r7
 8084cd2:	bd80      	pop	{r7, pc}
 8084cd4:	0808e558 	.word	0x0808e558
 8084cd8:	0808e738 	.word	0x0808e738
 8084cdc:	0808e5b8 	.word	0x0808e5b8

08084ce0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8084ce0:	b580      	push	{r7, lr}
 8084ce2:	b084      	sub	sp, #16
 8084ce4:	af00      	add	r7, sp, #0
 8084ce6:	6078      	str	r0, [r7, #4]
 8084ce8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8084cea:	687b      	ldr	r3, [r7, #4]
 8084cec:	2b00      	cmp	r3, #0
 8084cee:	d002      	beq.n	8084cf6 <pbuf_cat+0x16>
 8084cf0:	683b      	ldr	r3, [r7, #0]
 8084cf2:	2b00      	cmp	r3, #0
 8084cf4:	d107      	bne.n	8084d06 <pbuf_cat+0x26>
 8084cf6:	4b20      	ldr	r3, [pc, #128]	; (8084d78 <pbuf_cat+0x98>)
 8084cf8:	f240 3259 	movw	r2, #857	; 0x359
 8084cfc:	491f      	ldr	r1, [pc, #124]	; (8084d7c <pbuf_cat+0x9c>)
 8084cfe:	4820      	ldr	r0, [pc, #128]	; (8084d80 <pbuf_cat+0xa0>)
 8084d00:	f008 f8e8 	bl	808ced4 <iprintf>
 8084d04:	e034      	b.n	8084d70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8084d06:	687b      	ldr	r3, [r7, #4]
 8084d08:	60fb      	str	r3, [r7, #12]
 8084d0a:	e00a      	b.n	8084d22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8084d0c:	68fb      	ldr	r3, [r7, #12]
 8084d0e:	891a      	ldrh	r2, [r3, #8]
 8084d10:	683b      	ldr	r3, [r7, #0]
 8084d12:	891b      	ldrh	r3, [r3, #8]
 8084d14:	4413      	add	r3, r2
 8084d16:	b29a      	uxth	r2, r3
 8084d18:	68fb      	ldr	r3, [r7, #12]
 8084d1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8084d1c:	68fb      	ldr	r3, [r7, #12]
 8084d1e:	681b      	ldr	r3, [r3, #0]
 8084d20:	60fb      	str	r3, [r7, #12]
 8084d22:	68fb      	ldr	r3, [r7, #12]
 8084d24:	681b      	ldr	r3, [r3, #0]
 8084d26:	2b00      	cmp	r3, #0
 8084d28:	d1f0      	bne.n	8084d0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8084d2a:	68fb      	ldr	r3, [r7, #12]
 8084d2c:	891a      	ldrh	r2, [r3, #8]
 8084d2e:	68fb      	ldr	r3, [r7, #12]
 8084d30:	895b      	ldrh	r3, [r3, #10]
 8084d32:	429a      	cmp	r2, r3
 8084d34:	d006      	beq.n	8084d44 <pbuf_cat+0x64>
 8084d36:	4b10      	ldr	r3, [pc, #64]	; (8084d78 <pbuf_cat+0x98>)
 8084d38:	f240 3262 	movw	r2, #866	; 0x362
 8084d3c:	4911      	ldr	r1, [pc, #68]	; (8084d84 <pbuf_cat+0xa4>)
 8084d3e:	4810      	ldr	r0, [pc, #64]	; (8084d80 <pbuf_cat+0xa0>)
 8084d40:	f008 f8c8 	bl	808ced4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8084d44:	68fb      	ldr	r3, [r7, #12]
 8084d46:	681b      	ldr	r3, [r3, #0]
 8084d48:	2b00      	cmp	r3, #0
 8084d4a:	d006      	beq.n	8084d5a <pbuf_cat+0x7a>
 8084d4c:	4b0a      	ldr	r3, [pc, #40]	; (8084d78 <pbuf_cat+0x98>)
 8084d4e:	f240 3263 	movw	r2, #867	; 0x363
 8084d52:	490d      	ldr	r1, [pc, #52]	; (8084d88 <pbuf_cat+0xa8>)
 8084d54:	480a      	ldr	r0, [pc, #40]	; (8084d80 <pbuf_cat+0xa0>)
 8084d56:	f008 f8bd 	bl	808ced4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8084d5a:	68fb      	ldr	r3, [r7, #12]
 8084d5c:	891a      	ldrh	r2, [r3, #8]
 8084d5e:	683b      	ldr	r3, [r7, #0]
 8084d60:	891b      	ldrh	r3, [r3, #8]
 8084d62:	4413      	add	r3, r2
 8084d64:	b29a      	uxth	r2, r3
 8084d66:	68fb      	ldr	r3, [r7, #12]
 8084d68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8084d6a:	68fb      	ldr	r3, [r7, #12]
 8084d6c:	683a      	ldr	r2, [r7, #0]
 8084d6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8084d70:	3710      	adds	r7, #16
 8084d72:	46bd      	mov	sp, r7
 8084d74:	bd80      	pop	{r7, pc}
 8084d76:	bf00      	nop
 8084d78:	0808e558 	.word	0x0808e558
 8084d7c:	0808e74c 	.word	0x0808e74c
 8084d80:	0808e5b8 	.word	0x0808e5b8
 8084d84:	0808e784 	.word	0x0808e784
 8084d88:	0808e7b4 	.word	0x0808e7b4

08084d8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8084d8c:	b580      	push	{r7, lr}
 8084d8e:	b086      	sub	sp, #24
 8084d90:	af00      	add	r7, sp, #0
 8084d92:	6078      	str	r0, [r7, #4]
 8084d94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8084d96:	2300      	movs	r3, #0
 8084d98:	617b      	str	r3, [r7, #20]
 8084d9a:	2300      	movs	r3, #0
 8084d9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8084d9e:	687b      	ldr	r3, [r7, #4]
 8084da0:	2b00      	cmp	r3, #0
 8084da2:	d008      	beq.n	8084db6 <pbuf_copy+0x2a>
 8084da4:	683b      	ldr	r3, [r7, #0]
 8084da6:	2b00      	cmp	r3, #0
 8084da8:	d005      	beq.n	8084db6 <pbuf_copy+0x2a>
 8084daa:	687b      	ldr	r3, [r7, #4]
 8084dac:	891a      	ldrh	r2, [r3, #8]
 8084dae:	683b      	ldr	r3, [r7, #0]
 8084db0:	891b      	ldrh	r3, [r3, #8]
 8084db2:	429a      	cmp	r2, r3
 8084db4:	d209      	bcs.n	8084dca <pbuf_copy+0x3e>
 8084db6:	4b57      	ldr	r3, [pc, #348]	; (8084f14 <pbuf_copy+0x188>)
 8084db8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8084dbc:	4956      	ldr	r1, [pc, #344]	; (8084f18 <pbuf_copy+0x18c>)
 8084dbe:	4857      	ldr	r0, [pc, #348]	; (8084f1c <pbuf_copy+0x190>)
 8084dc0:	f008 f888 	bl	808ced4 <iprintf>
 8084dc4:	f06f 030f 	mvn.w	r3, #15
 8084dc8:	e09f      	b.n	8084f0a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8084dca:	687b      	ldr	r3, [r7, #4]
 8084dcc:	895b      	ldrh	r3, [r3, #10]
 8084dce:	461a      	mov	r2, r3
 8084dd0:	697b      	ldr	r3, [r7, #20]
 8084dd2:	1ad2      	subs	r2, r2, r3
 8084dd4:	683b      	ldr	r3, [r7, #0]
 8084dd6:	895b      	ldrh	r3, [r3, #10]
 8084dd8:	4619      	mov	r1, r3
 8084dda:	693b      	ldr	r3, [r7, #16]
 8084ddc:	1acb      	subs	r3, r1, r3
 8084dde:	429a      	cmp	r2, r3
 8084de0:	d306      	bcc.n	8084df0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8084de2:	683b      	ldr	r3, [r7, #0]
 8084de4:	895b      	ldrh	r3, [r3, #10]
 8084de6:	461a      	mov	r2, r3
 8084de8:	693b      	ldr	r3, [r7, #16]
 8084dea:	1ad3      	subs	r3, r2, r3
 8084dec:	60fb      	str	r3, [r7, #12]
 8084dee:	e005      	b.n	8084dfc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8084df0:	687b      	ldr	r3, [r7, #4]
 8084df2:	895b      	ldrh	r3, [r3, #10]
 8084df4:	461a      	mov	r2, r3
 8084df6:	697b      	ldr	r3, [r7, #20]
 8084df8:	1ad3      	subs	r3, r2, r3
 8084dfa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8084dfc:	687b      	ldr	r3, [r7, #4]
 8084dfe:	685a      	ldr	r2, [r3, #4]
 8084e00:	697b      	ldr	r3, [r7, #20]
 8084e02:	18d0      	adds	r0, r2, r3
 8084e04:	683b      	ldr	r3, [r7, #0]
 8084e06:	685a      	ldr	r2, [r3, #4]
 8084e08:	693b      	ldr	r3, [r7, #16]
 8084e0a:	4413      	add	r3, r2
 8084e0c:	68fa      	ldr	r2, [r7, #12]
 8084e0e:	4619      	mov	r1, r3
 8084e10:	f008 f84a 	bl	808cea8 <memcpy>
    offset_to += len;
 8084e14:	697a      	ldr	r2, [r7, #20]
 8084e16:	68fb      	ldr	r3, [r7, #12]
 8084e18:	4413      	add	r3, r2
 8084e1a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8084e1c:	693a      	ldr	r2, [r7, #16]
 8084e1e:	68fb      	ldr	r3, [r7, #12]
 8084e20:	4413      	add	r3, r2
 8084e22:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8084e24:	687b      	ldr	r3, [r7, #4]
 8084e26:	895b      	ldrh	r3, [r3, #10]
 8084e28:	461a      	mov	r2, r3
 8084e2a:	697b      	ldr	r3, [r7, #20]
 8084e2c:	4293      	cmp	r3, r2
 8084e2e:	d906      	bls.n	8084e3e <pbuf_copy+0xb2>
 8084e30:	4b38      	ldr	r3, [pc, #224]	; (8084f14 <pbuf_copy+0x188>)
 8084e32:	f240 32d9 	movw	r2, #985	; 0x3d9
 8084e36:	493a      	ldr	r1, [pc, #232]	; (8084f20 <pbuf_copy+0x194>)
 8084e38:	4838      	ldr	r0, [pc, #224]	; (8084f1c <pbuf_copy+0x190>)
 8084e3a:	f008 f84b 	bl	808ced4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8084e3e:	683b      	ldr	r3, [r7, #0]
 8084e40:	895b      	ldrh	r3, [r3, #10]
 8084e42:	461a      	mov	r2, r3
 8084e44:	693b      	ldr	r3, [r7, #16]
 8084e46:	4293      	cmp	r3, r2
 8084e48:	d906      	bls.n	8084e58 <pbuf_copy+0xcc>
 8084e4a:	4b32      	ldr	r3, [pc, #200]	; (8084f14 <pbuf_copy+0x188>)
 8084e4c:	f240 32da 	movw	r2, #986	; 0x3da
 8084e50:	4934      	ldr	r1, [pc, #208]	; (8084f24 <pbuf_copy+0x198>)
 8084e52:	4832      	ldr	r0, [pc, #200]	; (8084f1c <pbuf_copy+0x190>)
 8084e54:	f008 f83e 	bl	808ced4 <iprintf>
    if (offset_from >= p_from->len) {
 8084e58:	683b      	ldr	r3, [r7, #0]
 8084e5a:	895b      	ldrh	r3, [r3, #10]
 8084e5c:	461a      	mov	r2, r3
 8084e5e:	693b      	ldr	r3, [r7, #16]
 8084e60:	4293      	cmp	r3, r2
 8084e62:	d304      	bcc.n	8084e6e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8084e64:	2300      	movs	r3, #0
 8084e66:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8084e68:	683b      	ldr	r3, [r7, #0]
 8084e6a:	681b      	ldr	r3, [r3, #0]
 8084e6c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8084e6e:	687b      	ldr	r3, [r7, #4]
 8084e70:	895b      	ldrh	r3, [r3, #10]
 8084e72:	461a      	mov	r2, r3
 8084e74:	697b      	ldr	r3, [r7, #20]
 8084e76:	4293      	cmp	r3, r2
 8084e78:	d114      	bne.n	8084ea4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8084e7a:	2300      	movs	r3, #0
 8084e7c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8084e7e:	687b      	ldr	r3, [r7, #4]
 8084e80:	681b      	ldr	r3, [r3, #0]
 8084e82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8084e84:	687b      	ldr	r3, [r7, #4]
 8084e86:	2b00      	cmp	r3, #0
 8084e88:	d10c      	bne.n	8084ea4 <pbuf_copy+0x118>
 8084e8a:	683b      	ldr	r3, [r7, #0]
 8084e8c:	2b00      	cmp	r3, #0
 8084e8e:	d009      	beq.n	8084ea4 <pbuf_copy+0x118>
 8084e90:	4b20      	ldr	r3, [pc, #128]	; (8084f14 <pbuf_copy+0x188>)
 8084e92:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8084e96:	4924      	ldr	r1, [pc, #144]	; (8084f28 <pbuf_copy+0x19c>)
 8084e98:	4820      	ldr	r0, [pc, #128]	; (8084f1c <pbuf_copy+0x190>)
 8084e9a:	f008 f81b 	bl	808ced4 <iprintf>
 8084e9e:	f06f 030f 	mvn.w	r3, #15
 8084ea2:	e032      	b.n	8084f0a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8084ea4:	683b      	ldr	r3, [r7, #0]
 8084ea6:	2b00      	cmp	r3, #0
 8084ea8:	d013      	beq.n	8084ed2 <pbuf_copy+0x146>
 8084eaa:	683b      	ldr	r3, [r7, #0]
 8084eac:	895a      	ldrh	r2, [r3, #10]
 8084eae:	683b      	ldr	r3, [r7, #0]
 8084eb0:	891b      	ldrh	r3, [r3, #8]
 8084eb2:	429a      	cmp	r2, r3
 8084eb4:	d10d      	bne.n	8084ed2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8084eb6:	683b      	ldr	r3, [r7, #0]
 8084eb8:	681b      	ldr	r3, [r3, #0]
 8084eba:	2b00      	cmp	r3, #0
 8084ebc:	d009      	beq.n	8084ed2 <pbuf_copy+0x146>
 8084ebe:	4b15      	ldr	r3, [pc, #84]	; (8084f14 <pbuf_copy+0x188>)
 8084ec0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8084ec4:	4919      	ldr	r1, [pc, #100]	; (8084f2c <pbuf_copy+0x1a0>)
 8084ec6:	4815      	ldr	r0, [pc, #84]	; (8084f1c <pbuf_copy+0x190>)
 8084ec8:	f008 f804 	bl	808ced4 <iprintf>
 8084ecc:	f06f 0305 	mvn.w	r3, #5
 8084ed0:	e01b      	b.n	8084f0a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8084ed2:	687b      	ldr	r3, [r7, #4]
 8084ed4:	2b00      	cmp	r3, #0
 8084ed6:	d013      	beq.n	8084f00 <pbuf_copy+0x174>
 8084ed8:	687b      	ldr	r3, [r7, #4]
 8084eda:	895a      	ldrh	r2, [r3, #10]
 8084edc:	687b      	ldr	r3, [r7, #4]
 8084ede:	891b      	ldrh	r3, [r3, #8]
 8084ee0:	429a      	cmp	r2, r3
 8084ee2:	d10d      	bne.n	8084f00 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8084ee4:	687b      	ldr	r3, [r7, #4]
 8084ee6:	681b      	ldr	r3, [r3, #0]
 8084ee8:	2b00      	cmp	r3, #0
 8084eea:	d009      	beq.n	8084f00 <pbuf_copy+0x174>
 8084eec:	4b09      	ldr	r3, [pc, #36]	; (8084f14 <pbuf_copy+0x188>)
 8084eee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8084ef2:	490e      	ldr	r1, [pc, #56]	; (8084f2c <pbuf_copy+0x1a0>)
 8084ef4:	4809      	ldr	r0, [pc, #36]	; (8084f1c <pbuf_copy+0x190>)
 8084ef6:	f007 ffed 	bl	808ced4 <iprintf>
 8084efa:	f06f 0305 	mvn.w	r3, #5
 8084efe:	e004      	b.n	8084f0a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8084f00:	683b      	ldr	r3, [r7, #0]
 8084f02:	2b00      	cmp	r3, #0
 8084f04:	f47f af61 	bne.w	8084dca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8084f08:	2300      	movs	r3, #0
}
 8084f0a:	4618      	mov	r0, r3
 8084f0c:	3718      	adds	r7, #24
 8084f0e:	46bd      	mov	sp, r7
 8084f10:	bd80      	pop	{r7, pc}
 8084f12:	bf00      	nop
 8084f14:	0808e558 	.word	0x0808e558
 8084f18:	0808e800 	.word	0x0808e800
 8084f1c:	0808e5b8 	.word	0x0808e5b8
 8084f20:	0808e830 	.word	0x0808e830
 8084f24:	0808e848 	.word	0x0808e848
 8084f28:	0808e864 	.word	0x0808e864
 8084f2c:	0808e874 	.word	0x0808e874

08084f30 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8084f30:	b580      	push	{r7, lr}
 8084f32:	b088      	sub	sp, #32
 8084f34:	af00      	add	r7, sp, #0
 8084f36:	60f8      	str	r0, [r7, #12]
 8084f38:	60b9      	str	r1, [r7, #8]
 8084f3a:	4611      	mov	r1, r2
 8084f3c:	461a      	mov	r2, r3
 8084f3e:	460b      	mov	r3, r1
 8084f40:	80fb      	strh	r3, [r7, #6]
 8084f42:	4613      	mov	r3, r2
 8084f44:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8084f46:	2300      	movs	r3, #0
 8084f48:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8084f4a:	2300      	movs	r3, #0
 8084f4c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8084f4e:	68fb      	ldr	r3, [r7, #12]
 8084f50:	2b00      	cmp	r3, #0
 8084f52:	d108      	bne.n	8084f66 <pbuf_copy_partial+0x36>
 8084f54:	4b2b      	ldr	r3, [pc, #172]	; (8085004 <pbuf_copy_partial+0xd4>)
 8084f56:	f240 420a 	movw	r2, #1034	; 0x40a
 8084f5a:	492b      	ldr	r1, [pc, #172]	; (8085008 <pbuf_copy_partial+0xd8>)
 8084f5c:	482b      	ldr	r0, [pc, #172]	; (808500c <pbuf_copy_partial+0xdc>)
 8084f5e:	f007 ffb9 	bl	808ced4 <iprintf>
 8084f62:	2300      	movs	r3, #0
 8084f64:	e04a      	b.n	8084ffc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8084f66:	68bb      	ldr	r3, [r7, #8]
 8084f68:	2b00      	cmp	r3, #0
 8084f6a:	d108      	bne.n	8084f7e <pbuf_copy_partial+0x4e>
 8084f6c:	4b25      	ldr	r3, [pc, #148]	; (8085004 <pbuf_copy_partial+0xd4>)
 8084f6e:	f240 420b 	movw	r2, #1035	; 0x40b
 8084f72:	4927      	ldr	r1, [pc, #156]	; (8085010 <pbuf_copy_partial+0xe0>)
 8084f74:	4825      	ldr	r0, [pc, #148]	; (808500c <pbuf_copy_partial+0xdc>)
 8084f76:	f007 ffad 	bl	808ced4 <iprintf>
 8084f7a:	2300      	movs	r3, #0
 8084f7c:	e03e      	b.n	8084ffc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8084f7e:	68fb      	ldr	r3, [r7, #12]
 8084f80:	61fb      	str	r3, [r7, #28]
 8084f82:	e034      	b.n	8084fee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8084f84:	88bb      	ldrh	r3, [r7, #4]
 8084f86:	2b00      	cmp	r3, #0
 8084f88:	d00a      	beq.n	8084fa0 <pbuf_copy_partial+0x70>
 8084f8a:	69fb      	ldr	r3, [r7, #28]
 8084f8c:	895b      	ldrh	r3, [r3, #10]
 8084f8e:	88ba      	ldrh	r2, [r7, #4]
 8084f90:	429a      	cmp	r2, r3
 8084f92:	d305      	bcc.n	8084fa0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8084f94:	69fb      	ldr	r3, [r7, #28]
 8084f96:	895b      	ldrh	r3, [r3, #10]
 8084f98:	88ba      	ldrh	r2, [r7, #4]
 8084f9a:	1ad3      	subs	r3, r2, r3
 8084f9c:	80bb      	strh	r3, [r7, #4]
 8084f9e:	e023      	b.n	8084fe8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8084fa0:	69fb      	ldr	r3, [r7, #28]
 8084fa2:	895a      	ldrh	r2, [r3, #10]
 8084fa4:	88bb      	ldrh	r3, [r7, #4]
 8084fa6:	1ad3      	subs	r3, r2, r3
 8084fa8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8084faa:	8b3a      	ldrh	r2, [r7, #24]
 8084fac:	88fb      	ldrh	r3, [r7, #6]
 8084fae:	429a      	cmp	r2, r3
 8084fb0:	d901      	bls.n	8084fb6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8084fb2:	88fb      	ldrh	r3, [r7, #6]
 8084fb4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8084fb6:	8b7b      	ldrh	r3, [r7, #26]
 8084fb8:	68ba      	ldr	r2, [r7, #8]
 8084fba:	18d0      	adds	r0, r2, r3
 8084fbc:	69fb      	ldr	r3, [r7, #28]
 8084fbe:	685a      	ldr	r2, [r3, #4]
 8084fc0:	88bb      	ldrh	r3, [r7, #4]
 8084fc2:	4413      	add	r3, r2
 8084fc4:	8b3a      	ldrh	r2, [r7, #24]
 8084fc6:	4619      	mov	r1, r3
 8084fc8:	f007 ff6e 	bl	808cea8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8084fcc:	8afa      	ldrh	r2, [r7, #22]
 8084fce:	8b3b      	ldrh	r3, [r7, #24]
 8084fd0:	4413      	add	r3, r2
 8084fd2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8084fd4:	8b7a      	ldrh	r2, [r7, #26]
 8084fd6:	8b3b      	ldrh	r3, [r7, #24]
 8084fd8:	4413      	add	r3, r2
 8084fda:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8084fdc:	88fa      	ldrh	r2, [r7, #6]
 8084fde:	8b3b      	ldrh	r3, [r7, #24]
 8084fe0:	1ad3      	subs	r3, r2, r3
 8084fe2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8084fe4:	2300      	movs	r3, #0
 8084fe6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8084fe8:	69fb      	ldr	r3, [r7, #28]
 8084fea:	681b      	ldr	r3, [r3, #0]
 8084fec:	61fb      	str	r3, [r7, #28]
 8084fee:	88fb      	ldrh	r3, [r7, #6]
 8084ff0:	2b00      	cmp	r3, #0
 8084ff2:	d002      	beq.n	8084ffa <pbuf_copy_partial+0xca>
 8084ff4:	69fb      	ldr	r3, [r7, #28]
 8084ff6:	2b00      	cmp	r3, #0
 8084ff8:	d1c4      	bne.n	8084f84 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8084ffa:	8afb      	ldrh	r3, [r7, #22]
}
 8084ffc:	4618      	mov	r0, r3
 8084ffe:	3720      	adds	r7, #32
 8085000:	46bd      	mov	sp, r7
 8085002:	bd80      	pop	{r7, pc}
 8085004:	0808e558 	.word	0x0808e558
 8085008:	0808e8a0 	.word	0x0808e8a0
 808500c:	0808e5b8 	.word	0x0808e5b8
 8085010:	0808e8c0 	.word	0x0808e8c0

08085014 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8085014:	b580      	push	{r7, lr}
 8085016:	b084      	sub	sp, #16
 8085018:	af00      	add	r7, sp, #0
 808501a:	4603      	mov	r3, r0
 808501c:	603a      	str	r2, [r7, #0]
 808501e:	71fb      	strb	r3, [r7, #7]
 8085020:	460b      	mov	r3, r1
 8085022:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8085024:	683b      	ldr	r3, [r7, #0]
 8085026:	8919      	ldrh	r1, [r3, #8]
 8085028:	88ba      	ldrh	r2, [r7, #4]
 808502a:	79fb      	ldrb	r3, [r7, #7]
 808502c:	4618      	mov	r0, r3
 808502e:	f7ff fab1 	bl	8084594 <pbuf_alloc>
 8085032:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8085034:	68fb      	ldr	r3, [r7, #12]
 8085036:	2b00      	cmp	r3, #0
 8085038:	d101      	bne.n	808503e <pbuf_clone+0x2a>
    return NULL;
 808503a:	2300      	movs	r3, #0
 808503c:	e011      	b.n	8085062 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 808503e:	6839      	ldr	r1, [r7, #0]
 8085040:	68f8      	ldr	r0, [r7, #12]
 8085042:	f7ff fea3 	bl	8084d8c <pbuf_copy>
 8085046:	4603      	mov	r3, r0
 8085048:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 808504a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 808504e:	2b00      	cmp	r3, #0
 8085050:	d006      	beq.n	8085060 <pbuf_clone+0x4c>
 8085052:	4b06      	ldr	r3, [pc, #24]	; (808506c <pbuf_clone+0x58>)
 8085054:	f240 5224 	movw	r2, #1316	; 0x524
 8085058:	4905      	ldr	r1, [pc, #20]	; (8085070 <pbuf_clone+0x5c>)
 808505a:	4806      	ldr	r0, [pc, #24]	; (8085074 <pbuf_clone+0x60>)
 808505c:	f007 ff3a 	bl	808ced4 <iprintf>
  return q;
 8085060:	68fb      	ldr	r3, [r7, #12]
}
 8085062:	4618      	mov	r0, r3
 8085064:	3710      	adds	r7, #16
 8085066:	46bd      	mov	sp, r7
 8085068:	bd80      	pop	{r7, pc}
 808506a:	bf00      	nop
 808506c:	0808e558 	.word	0x0808e558
 8085070:	0808e9cc 	.word	0x0808e9cc
 8085074:	0808e5b8 	.word	0x0808e5b8

08085078 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8085078:	b580      	push	{r7, lr}
 808507a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 808507c:	f007 ff42 	bl	808cf04 <rand>
 8085080:	4603      	mov	r3, r0
 8085082:	b29b      	uxth	r3, r3
 8085084:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8085088:	b29b      	uxth	r3, r3
 808508a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 808508e:	b29a      	uxth	r2, r3
 8085090:	4b01      	ldr	r3, [pc, #4]	; (8085098 <tcp_init+0x20>)
 8085092:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8085094:	bf00      	nop
 8085096:	bd80      	pop	{r7, pc}
 8085098:	20000020 	.word	0x20000020

0808509c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 808509c:	b580      	push	{r7, lr}
 808509e:	b082      	sub	sp, #8
 80850a0:	af00      	add	r7, sp, #0
 80850a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80850a4:	687b      	ldr	r3, [r7, #4]
 80850a6:	7d1b      	ldrb	r3, [r3, #20]
 80850a8:	2b01      	cmp	r3, #1
 80850aa:	d105      	bne.n	80850b8 <tcp_free+0x1c>
 80850ac:	4b06      	ldr	r3, [pc, #24]	; (80850c8 <tcp_free+0x2c>)
 80850ae:	22d4      	movs	r2, #212	; 0xd4
 80850b0:	4906      	ldr	r1, [pc, #24]	; (80850cc <tcp_free+0x30>)
 80850b2:	4807      	ldr	r0, [pc, #28]	; (80850d0 <tcp_free+0x34>)
 80850b4:	f007 ff0e 	bl	808ced4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80850b8:	6879      	ldr	r1, [r7, #4]
 80850ba:	2001      	movs	r0, #1
 80850bc:	f7fe fef8 	bl	8083eb0 <memp_free>
}
 80850c0:	bf00      	nop
 80850c2:	3708      	adds	r7, #8
 80850c4:	46bd      	mov	sp, r7
 80850c6:	bd80      	pop	{r7, pc}
 80850c8:	0808ea58 	.word	0x0808ea58
 80850cc:	0808ea88 	.word	0x0808ea88
 80850d0:	0808ea9c 	.word	0x0808ea9c

080850d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80850d4:	b580      	push	{r7, lr}
 80850d6:	b082      	sub	sp, #8
 80850d8:	af00      	add	r7, sp, #0
 80850da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80850dc:	687b      	ldr	r3, [r7, #4]
 80850de:	7d1b      	ldrb	r3, [r3, #20]
 80850e0:	2b01      	cmp	r3, #1
 80850e2:	d105      	bne.n	80850f0 <tcp_free_listen+0x1c>
 80850e4:	4b06      	ldr	r3, [pc, #24]	; (8085100 <tcp_free_listen+0x2c>)
 80850e6:	22df      	movs	r2, #223	; 0xdf
 80850e8:	4906      	ldr	r1, [pc, #24]	; (8085104 <tcp_free_listen+0x30>)
 80850ea:	4807      	ldr	r0, [pc, #28]	; (8085108 <tcp_free_listen+0x34>)
 80850ec:	f007 fef2 	bl	808ced4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80850f0:	6879      	ldr	r1, [r7, #4]
 80850f2:	2002      	movs	r0, #2
 80850f4:	f7fe fedc 	bl	8083eb0 <memp_free>
}
 80850f8:	bf00      	nop
 80850fa:	3708      	adds	r7, #8
 80850fc:	46bd      	mov	sp, r7
 80850fe:	bd80      	pop	{r7, pc}
 8085100:	0808ea58 	.word	0x0808ea58
 8085104:	0808eac4 	.word	0x0808eac4
 8085108:	0808ea9c 	.word	0x0808ea9c

0808510c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 808510c:	b580      	push	{r7, lr}
 808510e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8085110:	f000 fea2 	bl	8085e58 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8085114:	4b07      	ldr	r3, [pc, #28]	; (8085134 <tcp_tmr+0x28>)
 8085116:	781b      	ldrb	r3, [r3, #0]
 8085118:	3301      	adds	r3, #1
 808511a:	b2da      	uxtb	r2, r3
 808511c:	4b05      	ldr	r3, [pc, #20]	; (8085134 <tcp_tmr+0x28>)
 808511e:	701a      	strb	r2, [r3, #0]
 8085120:	4b04      	ldr	r3, [pc, #16]	; (8085134 <tcp_tmr+0x28>)
 8085122:	781b      	ldrb	r3, [r3, #0]
 8085124:	f003 0301 	and.w	r3, r3, #1
 8085128:	2b00      	cmp	r3, #0
 808512a:	d001      	beq.n	8085130 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 808512c:	f000 fb54 	bl	80857d8 <tcp_slowtmr>
  }
}
 8085130:	bf00      	nop
 8085132:	bd80      	pop	{r7, pc}
 8085134:	20008249 	.word	0x20008249

08085138 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8085138:	b580      	push	{r7, lr}
 808513a:	b084      	sub	sp, #16
 808513c:	af00      	add	r7, sp, #0
 808513e:	6078      	str	r0, [r7, #4]
 8085140:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8085142:	683b      	ldr	r3, [r7, #0]
 8085144:	2b00      	cmp	r3, #0
 8085146:	d105      	bne.n	8085154 <tcp_remove_listener+0x1c>
 8085148:	4b0d      	ldr	r3, [pc, #52]	; (8085180 <tcp_remove_listener+0x48>)
 808514a:	22ff      	movs	r2, #255	; 0xff
 808514c:	490d      	ldr	r1, [pc, #52]	; (8085184 <tcp_remove_listener+0x4c>)
 808514e:	480e      	ldr	r0, [pc, #56]	; (8085188 <tcp_remove_listener+0x50>)
 8085150:	f007 fec0 	bl	808ced4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8085154:	687b      	ldr	r3, [r7, #4]
 8085156:	60fb      	str	r3, [r7, #12]
 8085158:	e00a      	b.n	8085170 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 808515a:	68fb      	ldr	r3, [r7, #12]
 808515c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 808515e:	683a      	ldr	r2, [r7, #0]
 8085160:	429a      	cmp	r2, r3
 8085162:	d102      	bne.n	808516a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8085164:	68fb      	ldr	r3, [r7, #12]
 8085166:	2200      	movs	r2, #0
 8085168:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 808516a:	68fb      	ldr	r3, [r7, #12]
 808516c:	68db      	ldr	r3, [r3, #12]
 808516e:	60fb      	str	r3, [r7, #12]
 8085170:	68fb      	ldr	r3, [r7, #12]
 8085172:	2b00      	cmp	r3, #0
 8085174:	d1f1      	bne.n	808515a <tcp_remove_listener+0x22>
    }
  }
}
 8085176:	bf00      	nop
 8085178:	bf00      	nop
 808517a:	3710      	adds	r7, #16
 808517c:	46bd      	mov	sp, r7
 808517e:	bd80      	pop	{r7, pc}
 8085180:	0808ea58 	.word	0x0808ea58
 8085184:	0808eae0 	.word	0x0808eae0
 8085188:	0808ea9c 	.word	0x0808ea9c

0808518c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 808518c:	b580      	push	{r7, lr}
 808518e:	b084      	sub	sp, #16
 8085190:	af00      	add	r7, sp, #0
 8085192:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8085194:	687b      	ldr	r3, [r7, #4]
 8085196:	2b00      	cmp	r3, #0
 8085198:	d106      	bne.n	80851a8 <tcp_listen_closed+0x1c>
 808519a:	4b14      	ldr	r3, [pc, #80]	; (80851ec <tcp_listen_closed+0x60>)
 808519c:	f240 1211 	movw	r2, #273	; 0x111
 80851a0:	4913      	ldr	r1, [pc, #76]	; (80851f0 <tcp_listen_closed+0x64>)
 80851a2:	4814      	ldr	r0, [pc, #80]	; (80851f4 <tcp_listen_closed+0x68>)
 80851a4:	f007 fe96 	bl	808ced4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80851a8:	687b      	ldr	r3, [r7, #4]
 80851aa:	7d1b      	ldrb	r3, [r3, #20]
 80851ac:	2b01      	cmp	r3, #1
 80851ae:	d006      	beq.n	80851be <tcp_listen_closed+0x32>
 80851b0:	4b0e      	ldr	r3, [pc, #56]	; (80851ec <tcp_listen_closed+0x60>)
 80851b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80851b6:	4910      	ldr	r1, [pc, #64]	; (80851f8 <tcp_listen_closed+0x6c>)
 80851b8:	480e      	ldr	r0, [pc, #56]	; (80851f4 <tcp_listen_closed+0x68>)
 80851ba:	f007 fe8b 	bl	808ced4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80851be:	2301      	movs	r3, #1
 80851c0:	60fb      	str	r3, [r7, #12]
 80851c2:	e00b      	b.n	80851dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80851c4:	4a0d      	ldr	r2, [pc, #52]	; (80851fc <tcp_listen_closed+0x70>)
 80851c6:	68fb      	ldr	r3, [r7, #12]
 80851c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80851cc:	681b      	ldr	r3, [r3, #0]
 80851ce:	6879      	ldr	r1, [r7, #4]
 80851d0:	4618      	mov	r0, r3
 80851d2:	f7ff ffb1 	bl	8085138 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80851d6:	68fb      	ldr	r3, [r7, #12]
 80851d8:	3301      	adds	r3, #1
 80851da:	60fb      	str	r3, [r7, #12]
 80851dc:	68fb      	ldr	r3, [r7, #12]
 80851de:	2b03      	cmp	r3, #3
 80851e0:	d9f0      	bls.n	80851c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80851e2:	bf00      	nop
 80851e4:	bf00      	nop
 80851e6:	3710      	adds	r7, #16
 80851e8:	46bd      	mov	sp, r7
 80851ea:	bd80      	pop	{r7, pc}
 80851ec:	0808ea58 	.word	0x0808ea58
 80851f0:	0808eb08 	.word	0x0808eb08
 80851f4:	0808ea9c 	.word	0x0808ea9c
 80851f8:	0808eb14 	.word	0x0808eb14
 80851fc:	08090a30 	.word	0x08090a30

08085200 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8085200:	b5b0      	push	{r4, r5, r7, lr}
 8085202:	b088      	sub	sp, #32
 8085204:	af04      	add	r7, sp, #16
 8085206:	6078      	str	r0, [r7, #4]
 8085208:	460b      	mov	r3, r1
 808520a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 808520c:	687b      	ldr	r3, [r7, #4]
 808520e:	2b00      	cmp	r3, #0
 8085210:	d106      	bne.n	8085220 <tcp_close_shutdown+0x20>
 8085212:	4b63      	ldr	r3, [pc, #396]	; (80853a0 <tcp_close_shutdown+0x1a0>)
 8085214:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8085218:	4962      	ldr	r1, [pc, #392]	; (80853a4 <tcp_close_shutdown+0x1a4>)
 808521a:	4863      	ldr	r0, [pc, #396]	; (80853a8 <tcp_close_shutdown+0x1a8>)
 808521c:	f007 fe5a 	bl	808ced4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8085220:	78fb      	ldrb	r3, [r7, #3]
 8085222:	2b00      	cmp	r3, #0
 8085224:	d066      	beq.n	80852f4 <tcp_close_shutdown+0xf4>
 8085226:	687b      	ldr	r3, [r7, #4]
 8085228:	7d1b      	ldrb	r3, [r3, #20]
 808522a:	2b04      	cmp	r3, #4
 808522c:	d003      	beq.n	8085236 <tcp_close_shutdown+0x36>
 808522e:	687b      	ldr	r3, [r7, #4]
 8085230:	7d1b      	ldrb	r3, [r3, #20]
 8085232:	2b07      	cmp	r3, #7
 8085234:	d15e      	bne.n	80852f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8085236:	687b      	ldr	r3, [r7, #4]
 8085238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 808523a:	2b00      	cmp	r3, #0
 808523c:	d104      	bne.n	8085248 <tcp_close_shutdown+0x48>
 808523e:	687b      	ldr	r3, [r7, #4]
 8085240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8085242:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8085246:	d055      	beq.n	80852f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8085248:	687b      	ldr	r3, [r7, #4]
 808524a:	8b5b      	ldrh	r3, [r3, #26]
 808524c:	f003 0310 	and.w	r3, r3, #16
 8085250:	2b00      	cmp	r3, #0
 8085252:	d106      	bne.n	8085262 <tcp_close_shutdown+0x62>
 8085254:	4b52      	ldr	r3, [pc, #328]	; (80853a0 <tcp_close_shutdown+0x1a0>)
 8085256:	f44f 72b2 	mov.w	r2, #356	; 0x164
 808525a:	4954      	ldr	r1, [pc, #336]	; (80853ac <tcp_close_shutdown+0x1ac>)
 808525c:	4852      	ldr	r0, [pc, #328]	; (80853a8 <tcp_close_shutdown+0x1a8>)
 808525e:	f007 fe39 	bl	808ced4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8085262:	687b      	ldr	r3, [r7, #4]
 8085264:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8085266:	687b      	ldr	r3, [r7, #4]
 8085268:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 808526a:	687d      	ldr	r5, [r7, #4]
 808526c:	687b      	ldr	r3, [r7, #4]
 808526e:	3304      	adds	r3, #4
 8085270:	687a      	ldr	r2, [r7, #4]
 8085272:	8ad2      	ldrh	r2, [r2, #22]
 8085274:	6879      	ldr	r1, [r7, #4]
 8085276:	8b09      	ldrh	r1, [r1, #24]
 8085278:	9102      	str	r1, [sp, #8]
 808527a:	9201      	str	r2, [sp, #4]
 808527c:	9300      	str	r3, [sp, #0]
 808527e:	462b      	mov	r3, r5
 8085280:	4622      	mov	r2, r4
 8085282:	4601      	mov	r1, r0
 8085284:	6878      	ldr	r0, [r7, #4]
 8085286:	f004 fe91 	bl	8089fac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 808528a:	6878      	ldr	r0, [r7, #4]
 808528c:	f001 f8c6 	bl	808641c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8085290:	4b47      	ldr	r3, [pc, #284]	; (80853b0 <tcp_close_shutdown+0x1b0>)
 8085292:	681b      	ldr	r3, [r3, #0]
 8085294:	687a      	ldr	r2, [r7, #4]
 8085296:	429a      	cmp	r2, r3
 8085298:	d105      	bne.n	80852a6 <tcp_close_shutdown+0xa6>
 808529a:	4b45      	ldr	r3, [pc, #276]	; (80853b0 <tcp_close_shutdown+0x1b0>)
 808529c:	681b      	ldr	r3, [r3, #0]
 808529e:	68db      	ldr	r3, [r3, #12]
 80852a0:	4a43      	ldr	r2, [pc, #268]	; (80853b0 <tcp_close_shutdown+0x1b0>)
 80852a2:	6013      	str	r3, [r2, #0]
 80852a4:	e013      	b.n	80852ce <tcp_close_shutdown+0xce>
 80852a6:	4b42      	ldr	r3, [pc, #264]	; (80853b0 <tcp_close_shutdown+0x1b0>)
 80852a8:	681b      	ldr	r3, [r3, #0]
 80852aa:	60fb      	str	r3, [r7, #12]
 80852ac:	e00c      	b.n	80852c8 <tcp_close_shutdown+0xc8>
 80852ae:	68fb      	ldr	r3, [r7, #12]
 80852b0:	68db      	ldr	r3, [r3, #12]
 80852b2:	687a      	ldr	r2, [r7, #4]
 80852b4:	429a      	cmp	r2, r3
 80852b6:	d104      	bne.n	80852c2 <tcp_close_shutdown+0xc2>
 80852b8:	687b      	ldr	r3, [r7, #4]
 80852ba:	68da      	ldr	r2, [r3, #12]
 80852bc:	68fb      	ldr	r3, [r7, #12]
 80852be:	60da      	str	r2, [r3, #12]
 80852c0:	e005      	b.n	80852ce <tcp_close_shutdown+0xce>
 80852c2:	68fb      	ldr	r3, [r7, #12]
 80852c4:	68db      	ldr	r3, [r3, #12]
 80852c6:	60fb      	str	r3, [r7, #12]
 80852c8:	68fb      	ldr	r3, [r7, #12]
 80852ca:	2b00      	cmp	r3, #0
 80852cc:	d1ef      	bne.n	80852ae <tcp_close_shutdown+0xae>
 80852ce:	687b      	ldr	r3, [r7, #4]
 80852d0:	2200      	movs	r2, #0
 80852d2:	60da      	str	r2, [r3, #12]
 80852d4:	4b37      	ldr	r3, [pc, #220]	; (80853b4 <tcp_close_shutdown+0x1b4>)
 80852d6:	2201      	movs	r2, #1
 80852d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80852da:	4b37      	ldr	r3, [pc, #220]	; (80853b8 <tcp_close_shutdown+0x1b8>)
 80852dc:	681b      	ldr	r3, [r3, #0]
 80852de:	687a      	ldr	r2, [r7, #4]
 80852e0:	429a      	cmp	r2, r3
 80852e2:	d102      	bne.n	80852ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80852e4:	f003 fd5e 	bl	8088da4 <tcp_trigger_input_pcb_close>
 80852e8:	e002      	b.n	80852f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80852ea:	6878      	ldr	r0, [r7, #4]
 80852ec:	f7ff fed6 	bl	808509c <tcp_free>
      }
      return ERR_OK;
 80852f0:	2300      	movs	r3, #0
 80852f2:	e050      	b.n	8085396 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80852f4:	687b      	ldr	r3, [r7, #4]
 80852f6:	7d1b      	ldrb	r3, [r3, #20]
 80852f8:	2b02      	cmp	r3, #2
 80852fa:	d03b      	beq.n	8085374 <tcp_close_shutdown+0x174>
 80852fc:	2b02      	cmp	r3, #2
 80852fe:	dc44      	bgt.n	808538a <tcp_close_shutdown+0x18a>
 8085300:	2b00      	cmp	r3, #0
 8085302:	d002      	beq.n	808530a <tcp_close_shutdown+0x10a>
 8085304:	2b01      	cmp	r3, #1
 8085306:	d02a      	beq.n	808535e <tcp_close_shutdown+0x15e>
 8085308:	e03f      	b.n	808538a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 808530a:	687b      	ldr	r3, [r7, #4]
 808530c:	8adb      	ldrh	r3, [r3, #22]
 808530e:	2b00      	cmp	r3, #0
 8085310:	d021      	beq.n	8085356 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8085312:	4b2a      	ldr	r3, [pc, #168]	; (80853bc <tcp_close_shutdown+0x1bc>)
 8085314:	681b      	ldr	r3, [r3, #0]
 8085316:	687a      	ldr	r2, [r7, #4]
 8085318:	429a      	cmp	r2, r3
 808531a:	d105      	bne.n	8085328 <tcp_close_shutdown+0x128>
 808531c:	4b27      	ldr	r3, [pc, #156]	; (80853bc <tcp_close_shutdown+0x1bc>)
 808531e:	681b      	ldr	r3, [r3, #0]
 8085320:	68db      	ldr	r3, [r3, #12]
 8085322:	4a26      	ldr	r2, [pc, #152]	; (80853bc <tcp_close_shutdown+0x1bc>)
 8085324:	6013      	str	r3, [r2, #0]
 8085326:	e013      	b.n	8085350 <tcp_close_shutdown+0x150>
 8085328:	4b24      	ldr	r3, [pc, #144]	; (80853bc <tcp_close_shutdown+0x1bc>)
 808532a:	681b      	ldr	r3, [r3, #0]
 808532c:	60bb      	str	r3, [r7, #8]
 808532e:	e00c      	b.n	808534a <tcp_close_shutdown+0x14a>
 8085330:	68bb      	ldr	r3, [r7, #8]
 8085332:	68db      	ldr	r3, [r3, #12]
 8085334:	687a      	ldr	r2, [r7, #4]
 8085336:	429a      	cmp	r2, r3
 8085338:	d104      	bne.n	8085344 <tcp_close_shutdown+0x144>
 808533a:	687b      	ldr	r3, [r7, #4]
 808533c:	68da      	ldr	r2, [r3, #12]
 808533e:	68bb      	ldr	r3, [r7, #8]
 8085340:	60da      	str	r2, [r3, #12]
 8085342:	e005      	b.n	8085350 <tcp_close_shutdown+0x150>
 8085344:	68bb      	ldr	r3, [r7, #8]
 8085346:	68db      	ldr	r3, [r3, #12]
 8085348:	60bb      	str	r3, [r7, #8]
 808534a:	68bb      	ldr	r3, [r7, #8]
 808534c:	2b00      	cmp	r3, #0
 808534e:	d1ef      	bne.n	8085330 <tcp_close_shutdown+0x130>
 8085350:	687b      	ldr	r3, [r7, #4]
 8085352:	2200      	movs	r2, #0
 8085354:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8085356:	6878      	ldr	r0, [r7, #4]
 8085358:	f7ff fea0 	bl	808509c <tcp_free>
      break;
 808535c:	e01a      	b.n	8085394 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 808535e:	6878      	ldr	r0, [r7, #4]
 8085360:	f7ff ff14 	bl	808518c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8085364:	6879      	ldr	r1, [r7, #4]
 8085366:	4816      	ldr	r0, [pc, #88]	; (80853c0 <tcp_close_shutdown+0x1c0>)
 8085368:	f001 f8a8 	bl	80864bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 808536c:	6878      	ldr	r0, [r7, #4]
 808536e:	f7ff feb1 	bl	80850d4 <tcp_free_listen>
      break;
 8085372:	e00f      	b.n	8085394 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8085374:	6879      	ldr	r1, [r7, #4]
 8085376:	480e      	ldr	r0, [pc, #56]	; (80853b0 <tcp_close_shutdown+0x1b0>)
 8085378:	f001 f8a0 	bl	80864bc <tcp_pcb_remove>
 808537c:	4b0d      	ldr	r3, [pc, #52]	; (80853b4 <tcp_close_shutdown+0x1b4>)
 808537e:	2201      	movs	r2, #1
 8085380:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8085382:	6878      	ldr	r0, [r7, #4]
 8085384:	f7ff fe8a 	bl	808509c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8085388:	e004      	b.n	8085394 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 808538a:	6878      	ldr	r0, [r7, #4]
 808538c:	f000 f81a 	bl	80853c4 <tcp_close_shutdown_fin>
 8085390:	4603      	mov	r3, r0
 8085392:	e000      	b.n	8085396 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8085394:	2300      	movs	r3, #0
}
 8085396:	4618      	mov	r0, r3
 8085398:	3710      	adds	r7, #16
 808539a:	46bd      	mov	sp, r7
 808539c:	bdb0      	pop	{r4, r5, r7, pc}
 808539e:	bf00      	nop
 80853a0:	0808ea58 	.word	0x0808ea58
 80853a4:	0808eb2c 	.word	0x0808eb2c
 80853a8:	0808ea9c 	.word	0x0808ea9c
 80853ac:	0808eb4c 	.word	0x0808eb4c
 80853b0:	20008240 	.word	0x20008240
 80853b4:	20008248 	.word	0x20008248
 80853b8:	20008280 	.word	0x20008280
 80853bc:	20008238 	.word	0x20008238
 80853c0:	2000823c 	.word	0x2000823c

080853c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80853c4:	b580      	push	{r7, lr}
 80853c6:	b084      	sub	sp, #16
 80853c8:	af00      	add	r7, sp, #0
 80853ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80853cc:	687b      	ldr	r3, [r7, #4]
 80853ce:	2b00      	cmp	r3, #0
 80853d0:	d106      	bne.n	80853e0 <tcp_close_shutdown_fin+0x1c>
 80853d2:	4b2e      	ldr	r3, [pc, #184]	; (808548c <tcp_close_shutdown_fin+0xc8>)
 80853d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80853d8:	492d      	ldr	r1, [pc, #180]	; (8085490 <tcp_close_shutdown_fin+0xcc>)
 80853da:	482e      	ldr	r0, [pc, #184]	; (8085494 <tcp_close_shutdown_fin+0xd0>)
 80853dc:	f007 fd7a 	bl	808ced4 <iprintf>

  switch (pcb->state) {
 80853e0:	687b      	ldr	r3, [r7, #4]
 80853e2:	7d1b      	ldrb	r3, [r3, #20]
 80853e4:	2b07      	cmp	r3, #7
 80853e6:	d020      	beq.n	808542a <tcp_close_shutdown_fin+0x66>
 80853e8:	2b07      	cmp	r3, #7
 80853ea:	dc2b      	bgt.n	8085444 <tcp_close_shutdown_fin+0x80>
 80853ec:	2b03      	cmp	r3, #3
 80853ee:	d002      	beq.n	80853f6 <tcp_close_shutdown_fin+0x32>
 80853f0:	2b04      	cmp	r3, #4
 80853f2:	d00d      	beq.n	8085410 <tcp_close_shutdown_fin+0x4c>
 80853f4:	e026      	b.n	8085444 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80853f6:	6878      	ldr	r0, [r7, #4]
 80853f8:	f003 fee6 	bl	80891c8 <tcp_send_fin>
 80853fc:	4603      	mov	r3, r0
 80853fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8085400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085404:	2b00      	cmp	r3, #0
 8085406:	d11f      	bne.n	8085448 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8085408:	687b      	ldr	r3, [r7, #4]
 808540a:	2205      	movs	r2, #5
 808540c:	751a      	strb	r2, [r3, #20]
      }
      break;
 808540e:	e01b      	b.n	8085448 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8085410:	6878      	ldr	r0, [r7, #4]
 8085412:	f003 fed9 	bl	80891c8 <tcp_send_fin>
 8085416:	4603      	mov	r3, r0
 8085418:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 808541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 808541e:	2b00      	cmp	r3, #0
 8085420:	d114      	bne.n	808544c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8085422:	687b      	ldr	r3, [r7, #4]
 8085424:	2205      	movs	r2, #5
 8085426:	751a      	strb	r2, [r3, #20]
      }
      break;
 8085428:	e010      	b.n	808544c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 808542a:	6878      	ldr	r0, [r7, #4]
 808542c:	f003 fecc 	bl	80891c8 <tcp_send_fin>
 8085430:	4603      	mov	r3, r0
 8085432:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8085434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085438:	2b00      	cmp	r3, #0
 808543a:	d109      	bne.n	8085450 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 808543c:	687b      	ldr	r3, [r7, #4]
 808543e:	2209      	movs	r2, #9
 8085440:	751a      	strb	r2, [r3, #20]
      }
      break;
 8085442:	e005      	b.n	8085450 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8085444:	2300      	movs	r3, #0
 8085446:	e01c      	b.n	8085482 <tcp_close_shutdown_fin+0xbe>
      break;
 8085448:	bf00      	nop
 808544a:	e002      	b.n	8085452 <tcp_close_shutdown_fin+0x8e>
      break;
 808544c:	bf00      	nop
 808544e:	e000      	b.n	8085452 <tcp_close_shutdown_fin+0x8e>
      break;
 8085450:	bf00      	nop
  }

  if (err == ERR_OK) {
 8085452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085456:	2b00      	cmp	r3, #0
 8085458:	d103      	bne.n	8085462 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 808545a:	6878      	ldr	r0, [r7, #4]
 808545c:	f003 fff2 	bl	8089444 <tcp_output>
 8085460:	e00d      	b.n	808547e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8085462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085466:	f1b3 3fff 	cmp.w	r3, #4294967295
 808546a:	d108      	bne.n	808547e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 808546c:	687b      	ldr	r3, [r7, #4]
 808546e:	8b5b      	ldrh	r3, [r3, #26]
 8085470:	f043 0308 	orr.w	r3, r3, #8
 8085474:	b29a      	uxth	r2, r3
 8085476:	687b      	ldr	r3, [r7, #4]
 8085478:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 808547a:	2300      	movs	r3, #0
 808547c:	e001      	b.n	8085482 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 808547e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8085482:	4618      	mov	r0, r3
 8085484:	3710      	adds	r7, #16
 8085486:	46bd      	mov	sp, r7
 8085488:	bd80      	pop	{r7, pc}
 808548a:	bf00      	nop
 808548c:	0808ea58 	.word	0x0808ea58
 8085490:	0808eb08 	.word	0x0808eb08
 8085494:	0808ea9c 	.word	0x0808ea9c

08085498 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8085498:	b580      	push	{r7, lr}
 808549a:	b082      	sub	sp, #8
 808549c:	af00      	add	r7, sp, #0
 808549e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80854a0:	687b      	ldr	r3, [r7, #4]
 80854a2:	2b00      	cmp	r3, #0
 80854a4:	d109      	bne.n	80854ba <tcp_close+0x22>
 80854a6:	4b0f      	ldr	r3, [pc, #60]	; (80854e4 <tcp_close+0x4c>)
 80854a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80854ac:	490e      	ldr	r1, [pc, #56]	; (80854e8 <tcp_close+0x50>)
 80854ae:	480f      	ldr	r0, [pc, #60]	; (80854ec <tcp_close+0x54>)
 80854b0:	f007 fd10 	bl	808ced4 <iprintf>
 80854b4:	f06f 030f 	mvn.w	r3, #15
 80854b8:	e00f      	b.n	80854da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80854ba:	687b      	ldr	r3, [r7, #4]
 80854bc:	7d1b      	ldrb	r3, [r3, #20]
 80854be:	2b01      	cmp	r3, #1
 80854c0:	d006      	beq.n	80854d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80854c2:	687b      	ldr	r3, [r7, #4]
 80854c4:	8b5b      	ldrh	r3, [r3, #26]
 80854c6:	f043 0310 	orr.w	r3, r3, #16
 80854ca:	b29a      	uxth	r2, r3
 80854cc:	687b      	ldr	r3, [r7, #4]
 80854ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80854d0:	2101      	movs	r1, #1
 80854d2:	6878      	ldr	r0, [r7, #4]
 80854d4:	f7ff fe94 	bl	8085200 <tcp_close_shutdown>
 80854d8:	4603      	mov	r3, r0
}
 80854da:	4618      	mov	r0, r3
 80854dc:	3708      	adds	r7, #8
 80854de:	46bd      	mov	sp, r7
 80854e0:	bd80      	pop	{r7, pc}
 80854e2:	bf00      	nop
 80854e4:	0808ea58 	.word	0x0808ea58
 80854e8:	0808eb68 	.word	0x0808eb68
 80854ec:	0808ea9c 	.word	0x0808ea9c

080854f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80854f0:	b580      	push	{r7, lr}
 80854f2:	b08e      	sub	sp, #56	; 0x38
 80854f4:	af04      	add	r7, sp, #16
 80854f6:	6078      	str	r0, [r7, #4]
 80854f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80854fa:	687b      	ldr	r3, [r7, #4]
 80854fc:	2b00      	cmp	r3, #0
 80854fe:	d107      	bne.n	8085510 <tcp_abandon+0x20>
 8085500:	4b52      	ldr	r3, [pc, #328]	; (808564c <tcp_abandon+0x15c>)
 8085502:	f240 223d 	movw	r2, #573	; 0x23d
 8085506:	4952      	ldr	r1, [pc, #328]	; (8085650 <tcp_abandon+0x160>)
 8085508:	4852      	ldr	r0, [pc, #328]	; (8085654 <tcp_abandon+0x164>)
 808550a:	f007 fce3 	bl	808ced4 <iprintf>
 808550e:	e099      	b.n	8085644 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8085510:	687b      	ldr	r3, [r7, #4]
 8085512:	7d1b      	ldrb	r3, [r3, #20]
 8085514:	2b01      	cmp	r3, #1
 8085516:	d106      	bne.n	8085526 <tcp_abandon+0x36>
 8085518:	4b4c      	ldr	r3, [pc, #304]	; (808564c <tcp_abandon+0x15c>)
 808551a:	f44f 7210 	mov.w	r2, #576	; 0x240
 808551e:	494e      	ldr	r1, [pc, #312]	; (8085658 <tcp_abandon+0x168>)
 8085520:	484c      	ldr	r0, [pc, #304]	; (8085654 <tcp_abandon+0x164>)
 8085522:	f007 fcd7 	bl	808ced4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8085526:	687b      	ldr	r3, [r7, #4]
 8085528:	7d1b      	ldrb	r3, [r3, #20]
 808552a:	2b0a      	cmp	r3, #10
 808552c:	d107      	bne.n	808553e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 808552e:	6879      	ldr	r1, [r7, #4]
 8085530:	484a      	ldr	r0, [pc, #296]	; (808565c <tcp_abandon+0x16c>)
 8085532:	f000 ffc3 	bl	80864bc <tcp_pcb_remove>
    tcp_free(pcb);
 8085536:	6878      	ldr	r0, [r7, #4]
 8085538:	f7ff fdb0 	bl	808509c <tcp_free>
 808553c:	e082      	b.n	8085644 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 808553e:	2300      	movs	r3, #0
 8085540:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8085542:	2300      	movs	r3, #0
 8085544:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8085546:	687b      	ldr	r3, [r7, #4]
 8085548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808554a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 808554c:	687b      	ldr	r3, [r7, #4]
 808554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085550:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8085552:	687b      	ldr	r3, [r7, #4]
 8085554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8085558:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 808555a:	687b      	ldr	r3, [r7, #4]
 808555c:	691b      	ldr	r3, [r3, #16]
 808555e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8085560:	687b      	ldr	r3, [r7, #4]
 8085562:	7d1b      	ldrb	r3, [r3, #20]
 8085564:	2b00      	cmp	r3, #0
 8085566:	d126      	bne.n	80855b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8085568:	687b      	ldr	r3, [r7, #4]
 808556a:	8adb      	ldrh	r3, [r3, #22]
 808556c:	2b00      	cmp	r3, #0
 808556e:	d02e      	beq.n	80855ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8085570:	4b3b      	ldr	r3, [pc, #236]	; (8085660 <tcp_abandon+0x170>)
 8085572:	681b      	ldr	r3, [r3, #0]
 8085574:	687a      	ldr	r2, [r7, #4]
 8085576:	429a      	cmp	r2, r3
 8085578:	d105      	bne.n	8085586 <tcp_abandon+0x96>
 808557a:	4b39      	ldr	r3, [pc, #228]	; (8085660 <tcp_abandon+0x170>)
 808557c:	681b      	ldr	r3, [r3, #0]
 808557e:	68db      	ldr	r3, [r3, #12]
 8085580:	4a37      	ldr	r2, [pc, #220]	; (8085660 <tcp_abandon+0x170>)
 8085582:	6013      	str	r3, [r2, #0]
 8085584:	e013      	b.n	80855ae <tcp_abandon+0xbe>
 8085586:	4b36      	ldr	r3, [pc, #216]	; (8085660 <tcp_abandon+0x170>)
 8085588:	681b      	ldr	r3, [r3, #0]
 808558a:	61fb      	str	r3, [r7, #28]
 808558c:	e00c      	b.n	80855a8 <tcp_abandon+0xb8>
 808558e:	69fb      	ldr	r3, [r7, #28]
 8085590:	68db      	ldr	r3, [r3, #12]
 8085592:	687a      	ldr	r2, [r7, #4]
 8085594:	429a      	cmp	r2, r3
 8085596:	d104      	bne.n	80855a2 <tcp_abandon+0xb2>
 8085598:	687b      	ldr	r3, [r7, #4]
 808559a:	68da      	ldr	r2, [r3, #12]
 808559c:	69fb      	ldr	r3, [r7, #28]
 808559e:	60da      	str	r2, [r3, #12]
 80855a0:	e005      	b.n	80855ae <tcp_abandon+0xbe>
 80855a2:	69fb      	ldr	r3, [r7, #28]
 80855a4:	68db      	ldr	r3, [r3, #12]
 80855a6:	61fb      	str	r3, [r7, #28]
 80855a8:	69fb      	ldr	r3, [r7, #28]
 80855aa:	2b00      	cmp	r3, #0
 80855ac:	d1ef      	bne.n	808558e <tcp_abandon+0x9e>
 80855ae:	687b      	ldr	r3, [r7, #4]
 80855b0:	2200      	movs	r2, #0
 80855b2:	60da      	str	r2, [r3, #12]
 80855b4:	e00b      	b.n	80855ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80855b6:	683b      	ldr	r3, [r7, #0]
 80855b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80855ba:	687b      	ldr	r3, [r7, #4]
 80855bc:	8adb      	ldrh	r3, [r3, #22]
 80855be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80855c0:	6879      	ldr	r1, [r7, #4]
 80855c2:	4828      	ldr	r0, [pc, #160]	; (8085664 <tcp_abandon+0x174>)
 80855c4:	f000 ff7a 	bl	80864bc <tcp_pcb_remove>
 80855c8:	4b27      	ldr	r3, [pc, #156]	; (8085668 <tcp_abandon+0x178>)
 80855ca:	2201      	movs	r2, #1
 80855cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80855ce:	687b      	ldr	r3, [r7, #4]
 80855d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80855d2:	2b00      	cmp	r3, #0
 80855d4:	d004      	beq.n	80855e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80855d6:	687b      	ldr	r3, [r7, #4]
 80855d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80855da:	4618      	mov	r0, r3
 80855dc:	f000 fd1c 	bl	8086018 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80855e0:	687b      	ldr	r3, [r7, #4]
 80855e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80855e4:	2b00      	cmp	r3, #0
 80855e6:	d004      	beq.n	80855f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80855e8:	687b      	ldr	r3, [r7, #4]
 80855ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80855ec:	4618      	mov	r0, r3
 80855ee:	f000 fd13 	bl	8086018 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80855f2:	687b      	ldr	r3, [r7, #4]
 80855f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80855f6:	2b00      	cmp	r3, #0
 80855f8:	d004      	beq.n	8085604 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80855fa:	687b      	ldr	r3, [r7, #4]
 80855fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80855fe:	4618      	mov	r0, r3
 8085600:	f000 fd0a 	bl	8086018 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8085604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8085606:	2b00      	cmp	r3, #0
 8085608:	d00e      	beq.n	8085628 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 808560a:	6879      	ldr	r1, [r7, #4]
 808560c:	687b      	ldr	r3, [r7, #4]
 808560e:	3304      	adds	r3, #4
 8085610:	687a      	ldr	r2, [r7, #4]
 8085612:	8b12      	ldrh	r2, [r2, #24]
 8085614:	9202      	str	r2, [sp, #8]
 8085616:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8085618:	9201      	str	r2, [sp, #4]
 808561a:	9300      	str	r3, [sp, #0]
 808561c:	460b      	mov	r3, r1
 808561e:	697a      	ldr	r2, [r7, #20]
 8085620:	69b9      	ldr	r1, [r7, #24]
 8085622:	6878      	ldr	r0, [r7, #4]
 8085624:	f004 fcc2 	bl	8089fac <tcp_rst>
    }
    last_state = pcb->state;
 8085628:	687b      	ldr	r3, [r7, #4]
 808562a:	7d1b      	ldrb	r3, [r3, #20]
 808562c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 808562e:	6878      	ldr	r0, [r7, #4]
 8085630:	f7ff fd34 	bl	808509c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8085634:	693b      	ldr	r3, [r7, #16]
 8085636:	2b00      	cmp	r3, #0
 8085638:	d004      	beq.n	8085644 <tcp_abandon+0x154>
 808563a:	693b      	ldr	r3, [r7, #16]
 808563c:	f06f 010c 	mvn.w	r1, #12
 8085640:	68f8      	ldr	r0, [r7, #12]
 8085642:	4798      	blx	r3
  }
}
 8085644:	3728      	adds	r7, #40	; 0x28
 8085646:	46bd      	mov	sp, r7
 8085648:	bd80      	pop	{r7, pc}
 808564a:	bf00      	nop
 808564c:	0808ea58 	.word	0x0808ea58
 8085650:	0808eb9c 	.word	0x0808eb9c
 8085654:	0808ea9c 	.word	0x0808ea9c
 8085658:	0808ebb8 	.word	0x0808ebb8
 808565c:	20008244 	.word	0x20008244
 8085660:	20008238 	.word	0x20008238
 8085664:	20008240 	.word	0x20008240
 8085668:	20008248 	.word	0x20008248

0808566c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 808566c:	b580      	push	{r7, lr}
 808566e:	b082      	sub	sp, #8
 8085670:	af00      	add	r7, sp, #0
 8085672:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8085674:	2101      	movs	r1, #1
 8085676:	6878      	ldr	r0, [r7, #4]
 8085678:	f7ff ff3a 	bl	80854f0 <tcp_abandon>
}
 808567c:	bf00      	nop
 808567e:	3708      	adds	r7, #8
 8085680:	46bd      	mov	sp, r7
 8085682:	bd80      	pop	{r7, pc}

08085684 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8085684:	b580      	push	{r7, lr}
 8085686:	b084      	sub	sp, #16
 8085688:	af00      	add	r7, sp, #0
 808568a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 808568c:	687b      	ldr	r3, [r7, #4]
 808568e:	2b00      	cmp	r3, #0
 8085690:	d106      	bne.n	80856a0 <tcp_update_rcv_ann_wnd+0x1c>
 8085692:	4b25      	ldr	r3, [pc, #148]	; (8085728 <tcp_update_rcv_ann_wnd+0xa4>)
 8085694:	f240 32a6 	movw	r2, #934	; 0x3a6
 8085698:	4924      	ldr	r1, [pc, #144]	; (808572c <tcp_update_rcv_ann_wnd+0xa8>)
 808569a:	4825      	ldr	r0, [pc, #148]	; (8085730 <tcp_update_rcv_ann_wnd+0xac>)
 808569c:	f007 fc1a 	bl	808ced4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80856a0:	687b      	ldr	r3, [r7, #4]
 80856a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80856a4:	687a      	ldr	r2, [r7, #4]
 80856a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80856a8:	4413      	add	r3, r2
 80856aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80856ac:	687b      	ldr	r3, [r7, #4]
 80856ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80856b0:	687a      	ldr	r2, [r7, #4]
 80856b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80856b4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80856b8:	bf28      	it	cs
 80856ba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80856be:	b292      	uxth	r2, r2
 80856c0:	4413      	add	r3, r2
 80856c2:	68fa      	ldr	r2, [r7, #12]
 80856c4:	1ad3      	subs	r3, r2, r3
 80856c6:	2b00      	cmp	r3, #0
 80856c8:	db08      	blt.n	80856dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80856ca:	687b      	ldr	r3, [r7, #4]
 80856cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80856ce:	687b      	ldr	r3, [r7, #4]
 80856d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80856d2:	687b      	ldr	r3, [r7, #4]
 80856d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80856d6:	68fa      	ldr	r2, [r7, #12]
 80856d8:	1ad3      	subs	r3, r2, r3
 80856da:	e020      	b.n	808571e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80856dc:	687b      	ldr	r3, [r7, #4]
 80856de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80856e0:	687b      	ldr	r3, [r7, #4]
 80856e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80856e4:	1ad3      	subs	r3, r2, r3
 80856e6:	2b00      	cmp	r3, #0
 80856e8:	dd03      	ble.n	80856f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80856ea:	687b      	ldr	r3, [r7, #4]
 80856ec:	2200      	movs	r2, #0
 80856ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80856f0:	e014      	b.n	808571c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80856f2:	687b      	ldr	r3, [r7, #4]
 80856f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80856f6:	687b      	ldr	r3, [r7, #4]
 80856f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80856fa:	1ad3      	subs	r3, r2, r3
 80856fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80856fe:	68bb      	ldr	r3, [r7, #8]
 8085700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8085704:	d306      	bcc.n	8085714 <tcp_update_rcv_ann_wnd+0x90>
 8085706:	4b08      	ldr	r3, [pc, #32]	; (8085728 <tcp_update_rcv_ann_wnd+0xa4>)
 8085708:	f240 32b6 	movw	r2, #950	; 0x3b6
 808570c:	4909      	ldr	r1, [pc, #36]	; (8085734 <tcp_update_rcv_ann_wnd+0xb0>)
 808570e:	4808      	ldr	r0, [pc, #32]	; (8085730 <tcp_update_rcv_ann_wnd+0xac>)
 8085710:	f007 fbe0 	bl	808ced4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8085714:	68bb      	ldr	r3, [r7, #8]
 8085716:	b29a      	uxth	r2, r3
 8085718:	687b      	ldr	r3, [r7, #4]
 808571a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 808571c:	2300      	movs	r3, #0
  }
}
 808571e:	4618      	mov	r0, r3
 8085720:	3710      	adds	r7, #16
 8085722:	46bd      	mov	sp, r7
 8085724:	bd80      	pop	{r7, pc}
 8085726:	bf00      	nop
 8085728:	0808ea58 	.word	0x0808ea58
 808572c:	0808ecb4 	.word	0x0808ecb4
 8085730:	0808ea9c 	.word	0x0808ea9c
 8085734:	0808ecd8 	.word	0x0808ecd8

08085738 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8085738:	b580      	push	{r7, lr}
 808573a:	b084      	sub	sp, #16
 808573c:	af00      	add	r7, sp, #0
 808573e:	6078      	str	r0, [r7, #4]
 8085740:	460b      	mov	r3, r1
 8085742:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8085744:	687b      	ldr	r3, [r7, #4]
 8085746:	2b00      	cmp	r3, #0
 8085748:	d107      	bne.n	808575a <tcp_recved+0x22>
 808574a:	4b1f      	ldr	r3, [pc, #124]	; (80857c8 <tcp_recved+0x90>)
 808574c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8085750:	491e      	ldr	r1, [pc, #120]	; (80857cc <tcp_recved+0x94>)
 8085752:	481f      	ldr	r0, [pc, #124]	; (80857d0 <tcp_recved+0x98>)
 8085754:	f007 fbbe 	bl	808ced4 <iprintf>
 8085758:	e032      	b.n	80857c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 808575a:	687b      	ldr	r3, [r7, #4]
 808575c:	7d1b      	ldrb	r3, [r3, #20]
 808575e:	2b01      	cmp	r3, #1
 8085760:	d106      	bne.n	8085770 <tcp_recved+0x38>
 8085762:	4b19      	ldr	r3, [pc, #100]	; (80857c8 <tcp_recved+0x90>)
 8085764:	f240 32d2 	movw	r2, #978	; 0x3d2
 8085768:	491a      	ldr	r1, [pc, #104]	; (80857d4 <tcp_recved+0x9c>)
 808576a:	4819      	ldr	r0, [pc, #100]	; (80857d0 <tcp_recved+0x98>)
 808576c:	f007 fbb2 	bl	808ced4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8085770:	687b      	ldr	r3, [r7, #4]
 8085772:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8085774:	887b      	ldrh	r3, [r7, #2]
 8085776:	4413      	add	r3, r2
 8085778:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 808577a:	89fb      	ldrh	r3, [r7, #14]
 808577c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8085780:	d804      	bhi.n	808578c <tcp_recved+0x54>
 8085782:	687b      	ldr	r3, [r7, #4]
 8085784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8085786:	89fa      	ldrh	r2, [r7, #14]
 8085788:	429a      	cmp	r2, r3
 808578a:	d204      	bcs.n	8085796 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 808578c:	687b      	ldr	r3, [r7, #4]
 808578e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8085792:	851a      	strh	r2, [r3, #40]	; 0x28
 8085794:	e002      	b.n	808579c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8085796:	687b      	ldr	r3, [r7, #4]
 8085798:	89fa      	ldrh	r2, [r7, #14]
 808579a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 808579c:	6878      	ldr	r0, [r7, #4]
 808579e:	f7ff ff71 	bl	8085684 <tcp_update_rcv_ann_wnd>
 80857a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80857a4:	68bb      	ldr	r3, [r7, #8]
 80857a6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80857aa:	d309      	bcc.n	80857c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80857ac:	687b      	ldr	r3, [r7, #4]
 80857ae:	8b5b      	ldrh	r3, [r3, #26]
 80857b0:	f043 0302 	orr.w	r3, r3, #2
 80857b4:	b29a      	uxth	r2, r3
 80857b6:	687b      	ldr	r3, [r7, #4]
 80857b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80857ba:	6878      	ldr	r0, [r7, #4]
 80857bc:	f003 fe42 	bl	8089444 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80857c0:	3710      	adds	r7, #16
 80857c2:	46bd      	mov	sp, r7
 80857c4:	bd80      	pop	{r7, pc}
 80857c6:	bf00      	nop
 80857c8:	0808ea58 	.word	0x0808ea58
 80857cc:	0808ecf4 	.word	0x0808ecf4
 80857d0:	0808ea9c 	.word	0x0808ea9c
 80857d4:	0808ed0c 	.word	0x0808ed0c

080857d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80857d8:	b5b0      	push	{r4, r5, r7, lr}
 80857da:	b090      	sub	sp, #64	; 0x40
 80857dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80857de:	2300      	movs	r3, #0
 80857e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80857e4:	4b94      	ldr	r3, [pc, #592]	; (8085a38 <tcp_slowtmr+0x260>)
 80857e6:	681b      	ldr	r3, [r3, #0]
 80857e8:	3301      	adds	r3, #1
 80857ea:	4a93      	ldr	r2, [pc, #588]	; (8085a38 <tcp_slowtmr+0x260>)
 80857ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80857ee:	4b93      	ldr	r3, [pc, #588]	; (8085a3c <tcp_slowtmr+0x264>)
 80857f0:	781b      	ldrb	r3, [r3, #0]
 80857f2:	3301      	adds	r3, #1
 80857f4:	b2da      	uxtb	r2, r3
 80857f6:	4b91      	ldr	r3, [pc, #580]	; (8085a3c <tcp_slowtmr+0x264>)
 80857f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80857fa:	2300      	movs	r3, #0
 80857fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80857fe:	4b90      	ldr	r3, [pc, #576]	; (8085a40 <tcp_slowtmr+0x268>)
 8085800:	681b      	ldr	r3, [r3, #0]
 8085802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8085804:	e29f      	b.n	8085d46 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8085806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085808:	7d1b      	ldrb	r3, [r3, #20]
 808580a:	2b00      	cmp	r3, #0
 808580c:	d106      	bne.n	808581c <tcp_slowtmr+0x44>
 808580e:	4b8d      	ldr	r3, [pc, #564]	; (8085a44 <tcp_slowtmr+0x26c>)
 8085810:	f240 42be 	movw	r2, #1214	; 0x4be
 8085814:	498c      	ldr	r1, [pc, #560]	; (8085a48 <tcp_slowtmr+0x270>)
 8085816:	488d      	ldr	r0, [pc, #564]	; (8085a4c <tcp_slowtmr+0x274>)
 8085818:	f007 fb5c 	bl	808ced4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 808581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808581e:	7d1b      	ldrb	r3, [r3, #20]
 8085820:	2b01      	cmp	r3, #1
 8085822:	d106      	bne.n	8085832 <tcp_slowtmr+0x5a>
 8085824:	4b87      	ldr	r3, [pc, #540]	; (8085a44 <tcp_slowtmr+0x26c>)
 8085826:	f240 42bf 	movw	r2, #1215	; 0x4bf
 808582a:	4989      	ldr	r1, [pc, #548]	; (8085a50 <tcp_slowtmr+0x278>)
 808582c:	4887      	ldr	r0, [pc, #540]	; (8085a4c <tcp_slowtmr+0x274>)
 808582e:	f007 fb51 	bl	808ced4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8085832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085834:	7d1b      	ldrb	r3, [r3, #20]
 8085836:	2b0a      	cmp	r3, #10
 8085838:	d106      	bne.n	8085848 <tcp_slowtmr+0x70>
 808583a:	4b82      	ldr	r3, [pc, #520]	; (8085a44 <tcp_slowtmr+0x26c>)
 808583c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8085840:	4984      	ldr	r1, [pc, #528]	; (8085a54 <tcp_slowtmr+0x27c>)
 8085842:	4882      	ldr	r0, [pc, #520]	; (8085a4c <tcp_slowtmr+0x274>)
 8085844:	f007 fb46 	bl	808ced4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8085848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808584a:	7f9a      	ldrb	r2, [r3, #30]
 808584c:	4b7b      	ldr	r3, [pc, #492]	; (8085a3c <tcp_slowtmr+0x264>)
 808584e:	781b      	ldrb	r3, [r3, #0]
 8085850:	429a      	cmp	r2, r3
 8085852:	d105      	bne.n	8085860 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8085854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085856:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8085858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808585a:	68db      	ldr	r3, [r3, #12]
 808585c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 808585e:	e272      	b.n	8085d46 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8085860:	4b76      	ldr	r3, [pc, #472]	; (8085a3c <tcp_slowtmr+0x264>)
 8085862:	781a      	ldrb	r2, [r3, #0]
 8085864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085866:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8085868:	2300      	movs	r3, #0
 808586a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 808586e:	2300      	movs	r3, #0
 8085870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8085874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085876:	7d1b      	ldrb	r3, [r3, #20]
 8085878:	2b02      	cmp	r3, #2
 808587a:	d10a      	bne.n	8085892 <tcp_slowtmr+0xba>
 808587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808587e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8085882:	2b05      	cmp	r3, #5
 8085884:	d905      	bls.n	8085892 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8085886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 808588a:	3301      	adds	r3, #1
 808588c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8085890:	e11e      	b.n	8085ad0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8085892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8085898:	2b0b      	cmp	r3, #11
 808589a:	d905      	bls.n	80858a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 808589c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80858a0:	3301      	adds	r3, #1
 80858a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80858a6:	e113      	b.n	8085ad0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80858a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80858aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80858ae:	2b00      	cmp	r3, #0
 80858b0:	d075      	beq.n	808599e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80858b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80858b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80858b6:	2b00      	cmp	r3, #0
 80858b8:	d006      	beq.n	80858c8 <tcp_slowtmr+0xf0>
 80858ba:	4b62      	ldr	r3, [pc, #392]	; (8085a44 <tcp_slowtmr+0x26c>)
 80858bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80858c0:	4965      	ldr	r1, [pc, #404]	; (8085a58 <tcp_slowtmr+0x280>)
 80858c2:	4862      	ldr	r0, [pc, #392]	; (8085a4c <tcp_slowtmr+0x274>)
 80858c4:	f007 fb06 	bl	808ced4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80858c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80858ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80858cc:	2b00      	cmp	r3, #0
 80858ce:	d106      	bne.n	80858de <tcp_slowtmr+0x106>
 80858d0:	4b5c      	ldr	r3, [pc, #368]	; (8085a44 <tcp_slowtmr+0x26c>)
 80858d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80858d6:	4961      	ldr	r1, [pc, #388]	; (8085a5c <tcp_slowtmr+0x284>)
 80858d8:	485c      	ldr	r0, [pc, #368]	; (8085a4c <tcp_slowtmr+0x274>)
 80858da:	f007 fafb 	bl	808ced4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80858de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80858e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80858e4:	2b0b      	cmp	r3, #11
 80858e6:	d905      	bls.n	80858f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80858e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80858ec:	3301      	adds	r3, #1
 80858ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80858f2:	e0ed      	b.n	8085ad0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80858f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80858f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80858fa:	3b01      	subs	r3, #1
 80858fc:	4a58      	ldr	r2, [pc, #352]	; (8085a60 <tcp_slowtmr+0x288>)
 80858fe:	5cd3      	ldrb	r3, [r2, r3]
 8085900:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8085902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8085908:	7c7a      	ldrb	r2, [r7, #17]
 808590a:	429a      	cmp	r2, r3
 808590c:	d907      	bls.n	808591e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 808590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085910:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8085914:	3301      	adds	r3, #1
 8085916:	b2da      	uxtb	r2, r3
 8085918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808591a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 808591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8085924:	7c7a      	ldrb	r2, [r7, #17]
 8085926:	429a      	cmp	r2, r3
 8085928:	f200 80d2 	bhi.w	8085ad0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 808592c:	2301      	movs	r3, #1
 808592e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8085930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8085936:	2b00      	cmp	r3, #0
 8085938:	d108      	bne.n	808594c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 808593a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 808593c:	f004 fc2a 	bl	808a194 <tcp_zero_window_probe>
 8085940:	4603      	mov	r3, r0
 8085942:	2b00      	cmp	r3, #0
 8085944:	d014      	beq.n	8085970 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8085946:	2300      	movs	r3, #0
 8085948:	623b      	str	r3, [r7, #32]
 808594a:	e011      	b.n	8085970 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 808594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808594e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8085952:	4619      	mov	r1, r3
 8085954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085956:	f003 faef 	bl	8088f38 <tcp_split_unsent_seg>
 808595a:	4603      	mov	r3, r0
 808595c:	2b00      	cmp	r3, #0
 808595e:	d107      	bne.n	8085970 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8085960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085962:	f003 fd6f 	bl	8089444 <tcp_output>
 8085966:	4603      	mov	r3, r0
 8085968:	2b00      	cmp	r3, #0
 808596a:	d101      	bne.n	8085970 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 808596c:	2300      	movs	r3, #0
 808596e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8085970:	6a3b      	ldr	r3, [r7, #32]
 8085972:	2b00      	cmp	r3, #0
 8085974:	f000 80ac 	beq.w	8085ad0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8085978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808597a:	2200      	movs	r2, #0
 808597c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8085980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085982:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8085986:	2b06      	cmp	r3, #6
 8085988:	f200 80a2 	bhi.w	8085ad0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 808598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808598e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8085992:	3301      	adds	r3, #1
 8085994:	b2da      	uxtb	r2, r3
 8085996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085998:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 808599c:	e098      	b.n	8085ad0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 808599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80859a4:	2b00      	cmp	r3, #0
 80859a6:	db0f      	blt.n	80859c8 <tcp_slowtmr+0x1f0>
 80859a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80859ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80859b2:	4293      	cmp	r3, r2
 80859b4:	d008      	beq.n	80859c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80859b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80859bc:	b29b      	uxth	r3, r3
 80859be:	3301      	adds	r3, #1
 80859c0:	b29b      	uxth	r3, r3
 80859c2:	b21a      	sxth	r2, r3
 80859c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80859c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80859ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80859d4:	429a      	cmp	r2, r3
 80859d6:	db7b      	blt.n	8085ad0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80859d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80859da:	f004 f825 	bl	8089a28 <tcp_rexmit_rto_prepare>
 80859de:	4603      	mov	r3, r0
 80859e0:	2b00      	cmp	r3, #0
 80859e2:	d007      	beq.n	80859f4 <tcp_slowtmr+0x21c>
 80859e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80859e8:	2b00      	cmp	r3, #0
 80859ea:	d171      	bne.n	8085ad0 <tcp_slowtmr+0x2f8>
 80859ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80859f0:	2b00      	cmp	r3, #0
 80859f2:	d06d      	beq.n	8085ad0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80859f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859f6:	7d1b      	ldrb	r3, [r3, #20]
 80859f8:	2b02      	cmp	r3, #2
 80859fa:	d03a      	beq.n	8085a72 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80859fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80859fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8085a02:	2b0c      	cmp	r3, #12
 8085a04:	bf28      	it	cs
 8085a06:	230c      	movcs	r3, #12
 8085a08:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8085a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8085a10:	10db      	asrs	r3, r3, #3
 8085a12:	b21b      	sxth	r3, r3
 8085a14:	461a      	mov	r2, r3
 8085a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8085a1c:	4413      	add	r3, r2
 8085a1e:	7efa      	ldrb	r2, [r7, #27]
 8085a20:	4910      	ldr	r1, [pc, #64]	; (8085a64 <tcp_slowtmr+0x28c>)
 8085a22:	5c8a      	ldrb	r2, [r1, r2]
 8085a24:	4093      	lsls	r3, r2
 8085a26:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8085a28:	697b      	ldr	r3, [r7, #20]
 8085a2a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8085a2e:	4293      	cmp	r3, r2
 8085a30:	dc1a      	bgt.n	8085a68 <tcp_slowtmr+0x290>
 8085a32:	697b      	ldr	r3, [r7, #20]
 8085a34:	b21a      	sxth	r2, r3
 8085a36:	e019      	b.n	8085a6c <tcp_slowtmr+0x294>
 8085a38:	20008234 	.word	0x20008234
 8085a3c:	2000824a 	.word	0x2000824a
 8085a40:	20008240 	.word	0x20008240
 8085a44:	0808ea58 	.word	0x0808ea58
 8085a48:	0808ed9c 	.word	0x0808ed9c
 8085a4c:	0808ea9c 	.word	0x0808ea9c
 8085a50:	0808edc8 	.word	0x0808edc8
 8085a54:	0808edf4 	.word	0x0808edf4
 8085a58:	0808ee24 	.word	0x0808ee24
 8085a5c:	0808ee58 	.word	0x0808ee58
 8085a60:	08090a28 	.word	0x08090a28
 8085a64:	08090a18 	.word	0x08090a18
 8085a68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8085a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8085a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a74:	2200      	movs	r2, #0
 8085a76:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8085a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8085a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8085a84:	4293      	cmp	r3, r2
 8085a86:	bf28      	it	cs
 8085a88:	4613      	movcs	r3, r2
 8085a8a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8085a8c:	8a7b      	ldrh	r3, [r7, #18]
 8085a8e:	085b      	lsrs	r3, r3, #1
 8085a90:	b29a      	uxth	r2, r3
 8085a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8085a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085a9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8085a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8085aa2:	005b      	lsls	r3, r3, #1
 8085aa4:	b29b      	uxth	r3, r3
 8085aa6:	429a      	cmp	r2, r3
 8085aa8:	d206      	bcs.n	8085ab8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8085aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8085aae:	005b      	lsls	r3, r3, #1
 8085ab0:	b29a      	uxth	r2, r3
 8085ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ab4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8085ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085aba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8085abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8085ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ac4:	2200      	movs	r2, #0
 8085ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8085aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085acc:	f004 f81c 	bl	8089b08 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8085ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ad2:	7d1b      	ldrb	r3, [r3, #20]
 8085ad4:	2b06      	cmp	r3, #6
 8085ad6:	d111      	bne.n	8085afc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8085ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ada:	8b5b      	ldrh	r3, [r3, #26]
 8085adc:	f003 0310 	and.w	r3, r3, #16
 8085ae0:	2b00      	cmp	r3, #0
 8085ae2:	d00b      	beq.n	8085afc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085ae4:	4b9d      	ldr	r3, [pc, #628]	; (8085d5c <tcp_slowtmr+0x584>)
 8085ae6:	681a      	ldr	r2, [r3, #0]
 8085ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085aea:	6a1b      	ldr	r3, [r3, #32]
 8085aec:	1ad3      	subs	r3, r2, r3
 8085aee:	2b28      	cmp	r3, #40	; 0x28
 8085af0:	d904      	bls.n	8085afc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8085af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085af6:	3301      	adds	r3, #1
 8085af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8085afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085afe:	7a5b      	ldrb	r3, [r3, #9]
 8085b00:	f003 0308 	and.w	r3, r3, #8
 8085b04:	2b00      	cmp	r3, #0
 8085b06:	d04c      	beq.n	8085ba2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8085b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b0a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8085b0c:	2b04      	cmp	r3, #4
 8085b0e:	d003      	beq.n	8085b18 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8085b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b12:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8085b14:	2b07      	cmp	r3, #7
 8085b16:	d144      	bne.n	8085ba2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085b18:	4b90      	ldr	r3, [pc, #576]	; (8085d5c <tcp_slowtmr+0x584>)
 8085b1a:	681a      	ldr	r2, [r3, #0]
 8085b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b1e:	6a1b      	ldr	r3, [r3, #32]
 8085b20:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8085b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8085b28:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8085b2c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8085b30:	498b      	ldr	r1, [pc, #556]	; (8085d60 <tcp_slowtmr+0x588>)
 8085b32:	fba1 1303 	umull	r1, r3, r1, r3
 8085b36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085b38:	429a      	cmp	r2, r3
 8085b3a:	d90a      	bls.n	8085b52 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8085b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085b40:	3301      	adds	r3, #1
 8085b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8085b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8085b4a:	3301      	adds	r3, #1
 8085b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8085b50:	e027      	b.n	8085ba2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085b52:	4b82      	ldr	r3, [pc, #520]	; (8085d5c <tcp_slowtmr+0x584>)
 8085b54:	681a      	ldr	r2, [r3, #0]
 8085b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b58:	6a1b      	ldr	r3, [r3, #32]
 8085b5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8085b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8085b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8085b68:	4618      	mov	r0, r3
 8085b6a:	4b7e      	ldr	r3, [pc, #504]	; (8085d64 <tcp_slowtmr+0x58c>)
 8085b6c:	fb00 f303 	mul.w	r3, r0, r3
 8085b70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8085b72:	497b      	ldr	r1, [pc, #492]	; (8085d60 <tcp_slowtmr+0x588>)
 8085b74:	fba1 1303 	umull	r1, r3, r1, r3
 8085b78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085b7a:	429a      	cmp	r2, r3
 8085b7c:	d911      	bls.n	8085ba2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8085b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085b80:	f004 fac8 	bl	808a114 <tcp_keepalive>
 8085b84:	4603      	mov	r3, r0
 8085b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8085b8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8085b8e:	2b00      	cmp	r3, #0
 8085b90:	d107      	bne.n	8085ba2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8085b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8085b98:	3301      	adds	r3, #1
 8085b9a:	b2da      	uxtb	r2, r3
 8085b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085b9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8085ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8085ba6:	2b00      	cmp	r3, #0
 8085ba8:	d011      	beq.n	8085bce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8085baa:	4b6c      	ldr	r3, [pc, #432]	; (8085d5c <tcp_slowtmr+0x584>)
 8085bac:	681a      	ldr	r2, [r3, #0]
 8085bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bb0:	6a1b      	ldr	r3, [r3, #32]
 8085bb2:	1ad2      	subs	r2, r2, r3
 8085bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8085bba:	4619      	mov	r1, r3
 8085bbc:	460b      	mov	r3, r1
 8085bbe:	005b      	lsls	r3, r3, #1
 8085bc0:	440b      	add	r3, r1
 8085bc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8085bc4:	429a      	cmp	r2, r3
 8085bc6:	d302      	bcc.n	8085bce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8085bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085bca:	f000 fddb 	bl	8086784 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8085bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bd0:	7d1b      	ldrb	r3, [r3, #20]
 8085bd2:	2b03      	cmp	r3, #3
 8085bd4:	d10b      	bne.n	8085bee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8085bd6:	4b61      	ldr	r3, [pc, #388]	; (8085d5c <tcp_slowtmr+0x584>)
 8085bd8:	681a      	ldr	r2, [r3, #0]
 8085bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bdc:	6a1b      	ldr	r3, [r3, #32]
 8085bde:	1ad3      	subs	r3, r2, r3
 8085be0:	2b28      	cmp	r3, #40	; 0x28
 8085be2:	d904      	bls.n	8085bee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8085be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085be8:	3301      	adds	r3, #1
 8085bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8085bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bf0:	7d1b      	ldrb	r3, [r3, #20]
 8085bf2:	2b09      	cmp	r3, #9
 8085bf4:	d10b      	bne.n	8085c0e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8085bf6:	4b59      	ldr	r3, [pc, #356]	; (8085d5c <tcp_slowtmr+0x584>)
 8085bf8:	681a      	ldr	r2, [r3, #0]
 8085bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085bfc:	6a1b      	ldr	r3, [r3, #32]
 8085bfe:	1ad3      	subs	r3, r2, r3
 8085c00:	2bf0      	cmp	r3, #240	; 0xf0
 8085c02:	d904      	bls.n	8085c0e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8085c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085c08:	3301      	adds	r3, #1
 8085c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8085c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085c12:	2b00      	cmp	r3, #0
 8085c14:	d060      	beq.n	8085cd8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8085c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8085c1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8085c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085c20:	f000 fbfc 	bl	808641c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8085c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085c26:	2b00      	cmp	r3, #0
 8085c28:	d010      	beq.n	8085c4c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8085c2a:	4b4f      	ldr	r3, [pc, #316]	; (8085d68 <tcp_slowtmr+0x590>)
 8085c2c:	681b      	ldr	r3, [r3, #0]
 8085c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8085c30:	429a      	cmp	r2, r3
 8085c32:	d106      	bne.n	8085c42 <tcp_slowtmr+0x46a>
 8085c34:	4b4d      	ldr	r3, [pc, #308]	; (8085d6c <tcp_slowtmr+0x594>)
 8085c36:	f240 526d 	movw	r2, #1389	; 0x56d
 8085c3a:	494d      	ldr	r1, [pc, #308]	; (8085d70 <tcp_slowtmr+0x598>)
 8085c3c:	484d      	ldr	r0, [pc, #308]	; (8085d74 <tcp_slowtmr+0x59c>)
 8085c3e:	f007 f949 	bl	808ced4 <iprintf>
        prev->next = pcb->next;
 8085c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c44:	68da      	ldr	r2, [r3, #12]
 8085c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085c48:	60da      	str	r2, [r3, #12]
 8085c4a:	e00f      	b.n	8085c6c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8085c4c:	4b46      	ldr	r3, [pc, #280]	; (8085d68 <tcp_slowtmr+0x590>)
 8085c4e:	681b      	ldr	r3, [r3, #0]
 8085c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8085c52:	429a      	cmp	r2, r3
 8085c54:	d006      	beq.n	8085c64 <tcp_slowtmr+0x48c>
 8085c56:	4b45      	ldr	r3, [pc, #276]	; (8085d6c <tcp_slowtmr+0x594>)
 8085c58:	f240 5271 	movw	r2, #1393	; 0x571
 8085c5c:	4946      	ldr	r1, [pc, #280]	; (8085d78 <tcp_slowtmr+0x5a0>)
 8085c5e:	4845      	ldr	r0, [pc, #276]	; (8085d74 <tcp_slowtmr+0x59c>)
 8085c60:	f007 f938 	bl	808ced4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8085c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c66:	68db      	ldr	r3, [r3, #12]
 8085c68:	4a3f      	ldr	r2, [pc, #252]	; (8085d68 <tcp_slowtmr+0x590>)
 8085c6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8085c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8085c70:	2b00      	cmp	r3, #0
 8085c72:	d013      	beq.n	8085c9c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8085c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8085c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8085c7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8085c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c80:	3304      	adds	r3, #4
 8085c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8085c84:	8ad2      	ldrh	r2, [r2, #22]
 8085c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8085c88:	8b09      	ldrh	r1, [r1, #24]
 8085c8a:	9102      	str	r1, [sp, #8]
 8085c8c:	9201      	str	r2, [sp, #4]
 8085c8e:	9300      	str	r3, [sp, #0]
 8085c90:	462b      	mov	r3, r5
 8085c92:	4622      	mov	r2, r4
 8085c94:	4601      	mov	r1, r0
 8085c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085c98:	f004 f988 	bl	8089fac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8085c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085c9e:	691b      	ldr	r3, [r3, #16]
 8085ca0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8085ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085ca4:	7d1b      	ldrb	r3, [r3, #20]
 8085ca6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8085ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085caa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8085cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085cae:	68db      	ldr	r3, [r3, #12]
 8085cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8085cb2:	6838      	ldr	r0, [r7, #0]
 8085cb4:	f7ff f9f2 	bl	808509c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8085cb8:	4b30      	ldr	r3, [pc, #192]	; (8085d7c <tcp_slowtmr+0x5a4>)
 8085cba:	2200      	movs	r2, #0
 8085cbc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8085cbe:	68fb      	ldr	r3, [r7, #12]
 8085cc0:	2b00      	cmp	r3, #0
 8085cc2:	d004      	beq.n	8085cce <tcp_slowtmr+0x4f6>
 8085cc4:	68fb      	ldr	r3, [r7, #12]
 8085cc6:	f06f 010c 	mvn.w	r1, #12
 8085cca:	68b8      	ldr	r0, [r7, #8]
 8085ccc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8085cce:	4b2b      	ldr	r3, [pc, #172]	; (8085d7c <tcp_slowtmr+0x5a4>)
 8085cd0:	781b      	ldrb	r3, [r3, #0]
 8085cd2:	2b00      	cmp	r3, #0
 8085cd4:	d037      	beq.n	8085d46 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8085cd6:	e590      	b.n	80857fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8085cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085cda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8085cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085cde:	68db      	ldr	r3, [r3, #12]
 8085ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8085ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085ce4:	7f1b      	ldrb	r3, [r3, #28]
 8085ce6:	3301      	adds	r3, #1
 8085ce8:	b2da      	uxtb	r2, r3
 8085cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085cec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8085cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085cf0:	7f1a      	ldrb	r2, [r3, #28]
 8085cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085cf4:	7f5b      	ldrb	r3, [r3, #29]
 8085cf6:	429a      	cmp	r2, r3
 8085cf8:	d325      	bcc.n	8085d46 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8085cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085cfc:	2200      	movs	r2, #0
 8085cfe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8085d00:	4b1e      	ldr	r3, [pc, #120]	; (8085d7c <tcp_slowtmr+0x5a4>)
 8085d02:	2200      	movs	r2, #0
 8085d04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8085d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8085d0c:	2b00      	cmp	r3, #0
 8085d0e:	d00b      	beq.n	8085d28 <tcp_slowtmr+0x550>
 8085d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8085d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8085d18:	6912      	ldr	r2, [r2, #16]
 8085d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8085d1c:	4610      	mov	r0, r2
 8085d1e:	4798      	blx	r3
 8085d20:	4603      	mov	r3, r0
 8085d22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8085d26:	e002      	b.n	8085d2e <tcp_slowtmr+0x556>
 8085d28:	2300      	movs	r3, #0
 8085d2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8085d2e:	4b13      	ldr	r3, [pc, #76]	; (8085d7c <tcp_slowtmr+0x5a4>)
 8085d30:	781b      	ldrb	r3, [r3, #0]
 8085d32:	2b00      	cmp	r3, #0
 8085d34:	d000      	beq.n	8085d38 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8085d36:	e560      	b.n	80857fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8085d38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8085d3c:	2b00      	cmp	r3, #0
 8085d3e:	d102      	bne.n	8085d46 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8085d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8085d42:	f003 fb7f 	bl	8089444 <tcp_output>
  while (pcb != NULL) {
 8085d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085d48:	2b00      	cmp	r3, #0
 8085d4a:	f47f ad5c 	bne.w	8085806 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8085d4e:	2300      	movs	r3, #0
 8085d50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8085d52:	4b0b      	ldr	r3, [pc, #44]	; (8085d80 <tcp_slowtmr+0x5a8>)
 8085d54:	681b      	ldr	r3, [r3, #0]
 8085d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8085d58:	e067      	b.n	8085e2a <tcp_slowtmr+0x652>
 8085d5a:	bf00      	nop
 8085d5c:	20008234 	.word	0x20008234
 8085d60:	10624dd3 	.word	0x10624dd3
 8085d64:	000124f8 	.word	0x000124f8
 8085d68:	20008240 	.word	0x20008240
 8085d6c:	0808ea58 	.word	0x0808ea58
 8085d70:	0808ee90 	.word	0x0808ee90
 8085d74:	0808ea9c 	.word	0x0808ea9c
 8085d78:	0808eebc 	.word	0x0808eebc
 8085d7c:	20008248 	.word	0x20008248
 8085d80:	20008244 	.word	0x20008244
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8085d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085d86:	7d1b      	ldrb	r3, [r3, #20]
 8085d88:	2b0a      	cmp	r3, #10
 8085d8a:	d006      	beq.n	8085d9a <tcp_slowtmr+0x5c2>
 8085d8c:	4b2b      	ldr	r3, [pc, #172]	; (8085e3c <tcp_slowtmr+0x664>)
 8085d8e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8085d92:	492b      	ldr	r1, [pc, #172]	; (8085e40 <tcp_slowtmr+0x668>)
 8085d94:	482b      	ldr	r0, [pc, #172]	; (8085e44 <tcp_slowtmr+0x66c>)
 8085d96:	f007 f89d 	bl	808ced4 <iprintf>
    pcb_remove = 0;
 8085d9a:	2300      	movs	r3, #0
 8085d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8085da0:	4b29      	ldr	r3, [pc, #164]	; (8085e48 <tcp_slowtmr+0x670>)
 8085da2:	681a      	ldr	r2, [r3, #0]
 8085da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085da6:	6a1b      	ldr	r3, [r3, #32]
 8085da8:	1ad3      	subs	r3, r2, r3
 8085daa:	2bf0      	cmp	r3, #240	; 0xf0
 8085dac:	d904      	bls.n	8085db8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8085dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085db2:	3301      	adds	r3, #1
 8085db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8085db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8085dbc:	2b00      	cmp	r3, #0
 8085dbe:	d02f      	beq.n	8085e20 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8085dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8085dc2:	f000 fb2b 	bl	808641c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8085dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085dc8:	2b00      	cmp	r3, #0
 8085dca:	d010      	beq.n	8085dee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8085dcc:	4b1f      	ldr	r3, [pc, #124]	; (8085e4c <tcp_slowtmr+0x674>)
 8085dce:	681b      	ldr	r3, [r3, #0]
 8085dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8085dd2:	429a      	cmp	r2, r3
 8085dd4:	d106      	bne.n	8085de4 <tcp_slowtmr+0x60c>
 8085dd6:	4b19      	ldr	r3, [pc, #100]	; (8085e3c <tcp_slowtmr+0x664>)
 8085dd8:	f240 52af 	movw	r2, #1455	; 0x5af
 8085ddc:	491c      	ldr	r1, [pc, #112]	; (8085e50 <tcp_slowtmr+0x678>)
 8085dde:	4819      	ldr	r0, [pc, #100]	; (8085e44 <tcp_slowtmr+0x66c>)
 8085de0:	f007 f878 	bl	808ced4 <iprintf>
        prev->next = pcb->next;
 8085de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085de6:	68da      	ldr	r2, [r3, #12]
 8085de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8085dea:	60da      	str	r2, [r3, #12]
 8085dec:	e00f      	b.n	8085e0e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8085dee:	4b17      	ldr	r3, [pc, #92]	; (8085e4c <tcp_slowtmr+0x674>)
 8085df0:	681b      	ldr	r3, [r3, #0]
 8085df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8085df4:	429a      	cmp	r2, r3
 8085df6:	d006      	beq.n	8085e06 <tcp_slowtmr+0x62e>
 8085df8:	4b10      	ldr	r3, [pc, #64]	; (8085e3c <tcp_slowtmr+0x664>)
 8085dfa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8085dfe:	4915      	ldr	r1, [pc, #84]	; (8085e54 <tcp_slowtmr+0x67c>)
 8085e00:	4810      	ldr	r0, [pc, #64]	; (8085e44 <tcp_slowtmr+0x66c>)
 8085e02:	f007 f867 	bl	808ced4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8085e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e08:	68db      	ldr	r3, [r3, #12]
 8085e0a:	4a10      	ldr	r2, [pc, #64]	; (8085e4c <tcp_slowtmr+0x674>)
 8085e0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8085e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8085e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e14:	68db      	ldr	r3, [r3, #12]
 8085e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8085e18:	69f8      	ldr	r0, [r7, #28]
 8085e1a:	f7ff f93f 	bl	808509c <tcp_free>
 8085e1e:	e004      	b.n	8085e2a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8085e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8085e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e26:	68db      	ldr	r3, [r3, #12]
 8085e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8085e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085e2c:	2b00      	cmp	r3, #0
 8085e2e:	d1a9      	bne.n	8085d84 <tcp_slowtmr+0x5ac>
    }
  }
}
 8085e30:	bf00      	nop
 8085e32:	bf00      	nop
 8085e34:	3730      	adds	r7, #48	; 0x30
 8085e36:	46bd      	mov	sp, r7
 8085e38:	bdb0      	pop	{r4, r5, r7, pc}
 8085e3a:	bf00      	nop
 8085e3c:	0808ea58 	.word	0x0808ea58
 8085e40:	0808eee8 	.word	0x0808eee8
 8085e44:	0808ea9c 	.word	0x0808ea9c
 8085e48:	20008234 	.word	0x20008234
 8085e4c:	20008244 	.word	0x20008244
 8085e50:	0808ef18 	.word	0x0808ef18
 8085e54:	0808ef40 	.word	0x0808ef40

08085e58 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8085e58:	b580      	push	{r7, lr}
 8085e5a:	b082      	sub	sp, #8
 8085e5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8085e5e:	4b2d      	ldr	r3, [pc, #180]	; (8085f14 <tcp_fasttmr+0xbc>)
 8085e60:	781b      	ldrb	r3, [r3, #0]
 8085e62:	3301      	adds	r3, #1
 8085e64:	b2da      	uxtb	r2, r3
 8085e66:	4b2b      	ldr	r3, [pc, #172]	; (8085f14 <tcp_fasttmr+0xbc>)
 8085e68:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8085e6a:	4b2b      	ldr	r3, [pc, #172]	; (8085f18 <tcp_fasttmr+0xc0>)
 8085e6c:	681b      	ldr	r3, [r3, #0]
 8085e6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8085e70:	e048      	b.n	8085f04 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8085e72:	687b      	ldr	r3, [r7, #4]
 8085e74:	7f9a      	ldrb	r2, [r3, #30]
 8085e76:	4b27      	ldr	r3, [pc, #156]	; (8085f14 <tcp_fasttmr+0xbc>)
 8085e78:	781b      	ldrb	r3, [r3, #0]
 8085e7a:	429a      	cmp	r2, r3
 8085e7c:	d03f      	beq.n	8085efe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8085e7e:	4b25      	ldr	r3, [pc, #148]	; (8085f14 <tcp_fasttmr+0xbc>)
 8085e80:	781a      	ldrb	r2, [r3, #0]
 8085e82:	687b      	ldr	r3, [r7, #4]
 8085e84:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8085e86:	687b      	ldr	r3, [r7, #4]
 8085e88:	8b5b      	ldrh	r3, [r3, #26]
 8085e8a:	f003 0301 	and.w	r3, r3, #1
 8085e8e:	2b00      	cmp	r3, #0
 8085e90:	d010      	beq.n	8085eb4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8085e92:	687b      	ldr	r3, [r7, #4]
 8085e94:	8b5b      	ldrh	r3, [r3, #26]
 8085e96:	f043 0302 	orr.w	r3, r3, #2
 8085e9a:	b29a      	uxth	r2, r3
 8085e9c:	687b      	ldr	r3, [r7, #4]
 8085e9e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8085ea0:	6878      	ldr	r0, [r7, #4]
 8085ea2:	f003 facf 	bl	8089444 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8085ea6:	687b      	ldr	r3, [r7, #4]
 8085ea8:	8b5b      	ldrh	r3, [r3, #26]
 8085eaa:	f023 0303 	bic.w	r3, r3, #3
 8085eae:	b29a      	uxth	r2, r3
 8085eb0:	687b      	ldr	r3, [r7, #4]
 8085eb2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8085eb4:	687b      	ldr	r3, [r7, #4]
 8085eb6:	8b5b      	ldrh	r3, [r3, #26]
 8085eb8:	f003 0308 	and.w	r3, r3, #8
 8085ebc:	2b00      	cmp	r3, #0
 8085ebe:	d009      	beq.n	8085ed4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8085ec0:	687b      	ldr	r3, [r7, #4]
 8085ec2:	8b5b      	ldrh	r3, [r3, #26]
 8085ec4:	f023 0308 	bic.w	r3, r3, #8
 8085ec8:	b29a      	uxth	r2, r3
 8085eca:	687b      	ldr	r3, [r7, #4]
 8085ecc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8085ece:	6878      	ldr	r0, [r7, #4]
 8085ed0:	f7ff fa78 	bl	80853c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8085ed4:	687b      	ldr	r3, [r7, #4]
 8085ed6:	68db      	ldr	r3, [r3, #12]
 8085ed8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8085eda:	687b      	ldr	r3, [r7, #4]
 8085edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8085ede:	2b00      	cmp	r3, #0
 8085ee0:	d00a      	beq.n	8085ef8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8085ee2:	4b0e      	ldr	r3, [pc, #56]	; (8085f1c <tcp_fasttmr+0xc4>)
 8085ee4:	2200      	movs	r2, #0
 8085ee6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8085ee8:	6878      	ldr	r0, [r7, #4]
 8085eea:	f000 f819 	bl	8085f20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8085eee:	4b0b      	ldr	r3, [pc, #44]	; (8085f1c <tcp_fasttmr+0xc4>)
 8085ef0:	781b      	ldrb	r3, [r3, #0]
 8085ef2:	2b00      	cmp	r3, #0
 8085ef4:	d000      	beq.n	8085ef8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8085ef6:	e7b8      	b.n	8085e6a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8085ef8:	683b      	ldr	r3, [r7, #0]
 8085efa:	607b      	str	r3, [r7, #4]
 8085efc:	e002      	b.n	8085f04 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8085efe:	687b      	ldr	r3, [r7, #4]
 8085f00:	68db      	ldr	r3, [r3, #12]
 8085f02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8085f04:	687b      	ldr	r3, [r7, #4]
 8085f06:	2b00      	cmp	r3, #0
 8085f08:	d1b3      	bne.n	8085e72 <tcp_fasttmr+0x1a>
    }
  }
}
 8085f0a:	bf00      	nop
 8085f0c:	bf00      	nop
 8085f0e:	3708      	adds	r7, #8
 8085f10:	46bd      	mov	sp, r7
 8085f12:	bd80      	pop	{r7, pc}
 8085f14:	2000824a 	.word	0x2000824a
 8085f18:	20008240 	.word	0x20008240
 8085f1c:	20008248 	.word	0x20008248

08085f20 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8085f20:	b590      	push	{r4, r7, lr}
 8085f22:	b085      	sub	sp, #20
 8085f24:	af00      	add	r7, sp, #0
 8085f26:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8085f28:	687b      	ldr	r3, [r7, #4]
 8085f2a:	2b00      	cmp	r3, #0
 8085f2c:	d109      	bne.n	8085f42 <tcp_process_refused_data+0x22>
 8085f2e:	4b37      	ldr	r3, [pc, #220]	; (808600c <tcp_process_refused_data+0xec>)
 8085f30:	f240 6209 	movw	r2, #1545	; 0x609
 8085f34:	4936      	ldr	r1, [pc, #216]	; (8086010 <tcp_process_refused_data+0xf0>)
 8085f36:	4837      	ldr	r0, [pc, #220]	; (8086014 <tcp_process_refused_data+0xf4>)
 8085f38:	f006 ffcc 	bl	808ced4 <iprintf>
 8085f3c:	f06f 030f 	mvn.w	r3, #15
 8085f40:	e060      	b.n	8086004 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8085f42:	687b      	ldr	r3, [r7, #4]
 8085f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8085f46:	7b5b      	ldrb	r3, [r3, #13]
 8085f48:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8085f4a:	687b      	ldr	r3, [r7, #4]
 8085f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8085f4e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8085f50:	687b      	ldr	r3, [r7, #4]
 8085f52:	2200      	movs	r2, #0
 8085f54:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8085f56:	687b      	ldr	r3, [r7, #4]
 8085f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8085f5c:	2b00      	cmp	r3, #0
 8085f5e:	d00b      	beq.n	8085f78 <tcp_process_refused_data+0x58>
 8085f60:	687b      	ldr	r3, [r7, #4]
 8085f62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8085f66:	687b      	ldr	r3, [r7, #4]
 8085f68:	6918      	ldr	r0, [r3, #16]
 8085f6a:	2300      	movs	r3, #0
 8085f6c:	68ba      	ldr	r2, [r7, #8]
 8085f6e:	6879      	ldr	r1, [r7, #4]
 8085f70:	47a0      	blx	r4
 8085f72:	4603      	mov	r3, r0
 8085f74:	73fb      	strb	r3, [r7, #15]
 8085f76:	e007      	b.n	8085f88 <tcp_process_refused_data+0x68>
 8085f78:	2300      	movs	r3, #0
 8085f7a:	68ba      	ldr	r2, [r7, #8]
 8085f7c:	6879      	ldr	r1, [r7, #4]
 8085f7e:	2000      	movs	r0, #0
 8085f80:	f000 f8a4 	bl	80860cc <tcp_recv_null>
 8085f84:	4603      	mov	r3, r0
 8085f86:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8085f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085f8c:	2b00      	cmp	r3, #0
 8085f8e:	d12a      	bne.n	8085fe6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8085f90:	7bbb      	ldrb	r3, [r7, #14]
 8085f92:	f003 0320 	and.w	r3, r3, #32
 8085f96:	2b00      	cmp	r3, #0
 8085f98:	d033      	beq.n	8086002 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8085f9a:	687b      	ldr	r3, [r7, #4]
 8085f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8085f9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8085fa2:	d005      	beq.n	8085fb0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8085fa4:	687b      	ldr	r3, [r7, #4]
 8085fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8085fa8:	3301      	adds	r3, #1
 8085faa:	b29a      	uxth	r2, r3
 8085fac:	687b      	ldr	r3, [r7, #4]
 8085fae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8085fb0:	687b      	ldr	r3, [r7, #4]
 8085fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8085fb6:	2b00      	cmp	r3, #0
 8085fb8:	d00b      	beq.n	8085fd2 <tcp_process_refused_data+0xb2>
 8085fba:	687b      	ldr	r3, [r7, #4]
 8085fbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8085fc0:	687b      	ldr	r3, [r7, #4]
 8085fc2:	6918      	ldr	r0, [r3, #16]
 8085fc4:	2300      	movs	r3, #0
 8085fc6:	2200      	movs	r2, #0
 8085fc8:	6879      	ldr	r1, [r7, #4]
 8085fca:	47a0      	blx	r4
 8085fcc:	4603      	mov	r3, r0
 8085fce:	73fb      	strb	r3, [r7, #15]
 8085fd0:	e001      	b.n	8085fd6 <tcp_process_refused_data+0xb6>
 8085fd2:	2300      	movs	r3, #0
 8085fd4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8085fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085fda:	f113 0f0d 	cmn.w	r3, #13
 8085fde:	d110      	bne.n	8086002 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8085fe0:	f06f 030c 	mvn.w	r3, #12
 8085fe4:	e00e      	b.n	8086004 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8085fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8085fea:	f113 0f0d 	cmn.w	r3, #13
 8085fee:	d102      	bne.n	8085ff6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8085ff0:	f06f 030c 	mvn.w	r3, #12
 8085ff4:	e006      	b.n	8086004 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8085ff6:	687b      	ldr	r3, [r7, #4]
 8085ff8:	68ba      	ldr	r2, [r7, #8]
 8085ffa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8085ffc:	f06f 0304 	mvn.w	r3, #4
 8086000:	e000      	b.n	8086004 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8086002:	2300      	movs	r3, #0
}
 8086004:	4618      	mov	r0, r3
 8086006:	3714      	adds	r7, #20
 8086008:	46bd      	mov	sp, r7
 808600a:	bd90      	pop	{r4, r7, pc}
 808600c:	0808ea58 	.word	0x0808ea58
 8086010:	0808ef68 	.word	0x0808ef68
 8086014:	0808ea9c 	.word	0x0808ea9c

08086018 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8086018:	b580      	push	{r7, lr}
 808601a:	b084      	sub	sp, #16
 808601c:	af00      	add	r7, sp, #0
 808601e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8086020:	e007      	b.n	8086032 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8086022:	687b      	ldr	r3, [r7, #4]
 8086024:	681b      	ldr	r3, [r3, #0]
 8086026:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8086028:	6878      	ldr	r0, [r7, #4]
 808602a:	f000 f80a 	bl	8086042 <tcp_seg_free>
    seg = next;
 808602e:	68fb      	ldr	r3, [r7, #12]
 8086030:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8086032:	687b      	ldr	r3, [r7, #4]
 8086034:	2b00      	cmp	r3, #0
 8086036:	d1f4      	bne.n	8086022 <tcp_segs_free+0xa>
  }
}
 8086038:	bf00      	nop
 808603a:	bf00      	nop
 808603c:	3710      	adds	r7, #16
 808603e:	46bd      	mov	sp, r7
 8086040:	bd80      	pop	{r7, pc}

08086042 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8086042:	b580      	push	{r7, lr}
 8086044:	b082      	sub	sp, #8
 8086046:	af00      	add	r7, sp, #0
 8086048:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 808604a:	687b      	ldr	r3, [r7, #4]
 808604c:	2b00      	cmp	r3, #0
 808604e:	d00c      	beq.n	808606a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8086050:	687b      	ldr	r3, [r7, #4]
 8086052:	685b      	ldr	r3, [r3, #4]
 8086054:	2b00      	cmp	r3, #0
 8086056:	d004      	beq.n	8086062 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8086058:	687b      	ldr	r3, [r7, #4]
 808605a:	685b      	ldr	r3, [r3, #4]
 808605c:	4618      	mov	r0, r3
 808605e:	f7fe fd7d 	bl	8084b5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8086062:	6879      	ldr	r1, [r7, #4]
 8086064:	2003      	movs	r0, #3
 8086066:	f7fd ff23 	bl	8083eb0 <memp_free>
  }
}
 808606a:	bf00      	nop
 808606c:	3708      	adds	r7, #8
 808606e:	46bd      	mov	sp, r7
 8086070:	bd80      	pop	{r7, pc}
	...

08086074 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8086074:	b580      	push	{r7, lr}
 8086076:	b084      	sub	sp, #16
 8086078:	af00      	add	r7, sp, #0
 808607a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 808607c:	687b      	ldr	r3, [r7, #4]
 808607e:	2b00      	cmp	r3, #0
 8086080:	d106      	bne.n	8086090 <tcp_seg_copy+0x1c>
 8086082:	4b0f      	ldr	r3, [pc, #60]	; (80860c0 <tcp_seg_copy+0x4c>)
 8086084:	f240 6282 	movw	r2, #1666	; 0x682
 8086088:	490e      	ldr	r1, [pc, #56]	; (80860c4 <tcp_seg_copy+0x50>)
 808608a:	480f      	ldr	r0, [pc, #60]	; (80860c8 <tcp_seg_copy+0x54>)
 808608c:	f006 ff22 	bl	808ced4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8086090:	2003      	movs	r0, #3
 8086092:	f7fd fe9d 	bl	8083dd0 <memp_malloc>
 8086096:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8086098:	68fb      	ldr	r3, [r7, #12]
 808609a:	2b00      	cmp	r3, #0
 808609c:	d101      	bne.n	80860a2 <tcp_seg_copy+0x2e>
    return NULL;
 808609e:	2300      	movs	r3, #0
 80860a0:	e00a      	b.n	80860b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80860a2:	2210      	movs	r2, #16
 80860a4:	6879      	ldr	r1, [r7, #4]
 80860a6:	68f8      	ldr	r0, [r7, #12]
 80860a8:	f006 fefe 	bl	808cea8 <memcpy>
  pbuf_ref(cseg->p);
 80860ac:	68fb      	ldr	r3, [r7, #12]
 80860ae:	685b      	ldr	r3, [r3, #4]
 80860b0:	4618      	mov	r0, r3
 80860b2:	f7fe fdf3 	bl	8084c9c <pbuf_ref>
  return cseg;
 80860b6:	68fb      	ldr	r3, [r7, #12]
}
 80860b8:	4618      	mov	r0, r3
 80860ba:	3710      	adds	r7, #16
 80860bc:	46bd      	mov	sp, r7
 80860be:	bd80      	pop	{r7, pc}
 80860c0:	0808ea58 	.word	0x0808ea58
 80860c4:	0808efac 	.word	0x0808efac
 80860c8:	0808ea9c 	.word	0x0808ea9c

080860cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80860cc:	b580      	push	{r7, lr}
 80860ce:	b084      	sub	sp, #16
 80860d0:	af00      	add	r7, sp, #0
 80860d2:	60f8      	str	r0, [r7, #12]
 80860d4:	60b9      	str	r1, [r7, #8]
 80860d6:	607a      	str	r2, [r7, #4]
 80860d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80860da:	68bb      	ldr	r3, [r7, #8]
 80860dc:	2b00      	cmp	r3, #0
 80860de:	d109      	bne.n	80860f4 <tcp_recv_null+0x28>
 80860e0:	4b12      	ldr	r3, [pc, #72]	; (808612c <tcp_recv_null+0x60>)
 80860e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80860e6:	4912      	ldr	r1, [pc, #72]	; (8086130 <tcp_recv_null+0x64>)
 80860e8:	4812      	ldr	r0, [pc, #72]	; (8086134 <tcp_recv_null+0x68>)
 80860ea:	f006 fef3 	bl	808ced4 <iprintf>
 80860ee:	f06f 030f 	mvn.w	r3, #15
 80860f2:	e016      	b.n	8086122 <tcp_recv_null+0x56>

  if (p != NULL) {
 80860f4:	687b      	ldr	r3, [r7, #4]
 80860f6:	2b00      	cmp	r3, #0
 80860f8:	d009      	beq.n	808610e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80860fa:	687b      	ldr	r3, [r7, #4]
 80860fc:	891b      	ldrh	r3, [r3, #8]
 80860fe:	4619      	mov	r1, r3
 8086100:	68b8      	ldr	r0, [r7, #8]
 8086102:	f7ff fb19 	bl	8085738 <tcp_recved>
    pbuf_free(p);
 8086106:	6878      	ldr	r0, [r7, #4]
 8086108:	f7fe fd28 	bl	8084b5c <pbuf_free>
 808610c:	e008      	b.n	8086120 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 808610e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8086112:	2b00      	cmp	r3, #0
 8086114:	d104      	bne.n	8086120 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8086116:	68b8      	ldr	r0, [r7, #8]
 8086118:	f7ff f9be 	bl	8085498 <tcp_close>
 808611c:	4603      	mov	r3, r0
 808611e:	e000      	b.n	8086122 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8086120:	2300      	movs	r3, #0
}
 8086122:	4618      	mov	r0, r3
 8086124:	3710      	adds	r7, #16
 8086126:	46bd      	mov	sp, r7
 8086128:	bd80      	pop	{r7, pc}
 808612a:	bf00      	nop
 808612c:	0808ea58 	.word	0x0808ea58
 8086130:	0808efc8 	.word	0x0808efc8
 8086134:	0808ea9c 	.word	0x0808ea9c

08086138 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8086138:	b580      	push	{r7, lr}
 808613a:	b086      	sub	sp, #24
 808613c:	af00      	add	r7, sp, #0
 808613e:	4603      	mov	r3, r0
 8086140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8086142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8086146:	2b00      	cmp	r3, #0
 8086148:	db01      	blt.n	808614e <tcp_kill_prio+0x16>
 808614a:	79fb      	ldrb	r3, [r7, #7]
 808614c:	e000      	b.n	8086150 <tcp_kill_prio+0x18>
 808614e:	237f      	movs	r3, #127	; 0x7f
 8086150:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8086152:	7afb      	ldrb	r3, [r7, #11]
 8086154:	2b00      	cmp	r3, #0
 8086156:	d034      	beq.n	80861c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8086158:	7afb      	ldrb	r3, [r7, #11]
 808615a:	3b01      	subs	r3, #1
 808615c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 808615e:	2300      	movs	r3, #0
 8086160:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8086162:	2300      	movs	r3, #0
 8086164:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8086166:	4b19      	ldr	r3, [pc, #100]	; (80861cc <tcp_kill_prio+0x94>)
 8086168:	681b      	ldr	r3, [r3, #0]
 808616a:	617b      	str	r3, [r7, #20]
 808616c:	e01f      	b.n	80861ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 808616e:	697b      	ldr	r3, [r7, #20]
 8086170:	7d5b      	ldrb	r3, [r3, #21]
 8086172:	7afa      	ldrb	r2, [r7, #11]
 8086174:	429a      	cmp	r2, r3
 8086176:	d80c      	bhi.n	8086192 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8086178:	697b      	ldr	r3, [r7, #20]
 808617a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 808617c:	7afa      	ldrb	r2, [r7, #11]
 808617e:	429a      	cmp	r2, r3
 8086180:	d112      	bne.n	80861a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8086182:	4b13      	ldr	r3, [pc, #76]	; (80861d0 <tcp_kill_prio+0x98>)
 8086184:	681a      	ldr	r2, [r3, #0]
 8086186:	697b      	ldr	r3, [r7, #20]
 8086188:	6a1b      	ldr	r3, [r3, #32]
 808618a:	1ad3      	subs	r3, r2, r3
 808618c:	68fa      	ldr	r2, [r7, #12]
 808618e:	429a      	cmp	r2, r3
 8086190:	d80a      	bhi.n	80861a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8086192:	4b0f      	ldr	r3, [pc, #60]	; (80861d0 <tcp_kill_prio+0x98>)
 8086194:	681a      	ldr	r2, [r3, #0]
 8086196:	697b      	ldr	r3, [r7, #20]
 8086198:	6a1b      	ldr	r3, [r3, #32]
 808619a:	1ad3      	subs	r3, r2, r3
 808619c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 808619e:	697b      	ldr	r3, [r7, #20]
 80861a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80861a2:	697b      	ldr	r3, [r7, #20]
 80861a4:	7d5b      	ldrb	r3, [r3, #21]
 80861a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80861a8:	697b      	ldr	r3, [r7, #20]
 80861aa:	68db      	ldr	r3, [r3, #12]
 80861ac:	617b      	str	r3, [r7, #20]
 80861ae:	697b      	ldr	r3, [r7, #20]
 80861b0:	2b00      	cmp	r3, #0
 80861b2:	d1dc      	bne.n	808616e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80861b4:	693b      	ldr	r3, [r7, #16]
 80861b6:	2b00      	cmp	r3, #0
 80861b8:	d004      	beq.n	80861c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80861ba:	6938      	ldr	r0, [r7, #16]
 80861bc:	f7ff fa56 	bl	808566c <tcp_abort>
 80861c0:	e000      	b.n	80861c4 <tcp_kill_prio+0x8c>
    return;
 80861c2:	bf00      	nop
  }
}
 80861c4:	3718      	adds	r7, #24
 80861c6:	46bd      	mov	sp, r7
 80861c8:	bd80      	pop	{r7, pc}
 80861ca:	bf00      	nop
 80861cc:	20008240 	.word	0x20008240
 80861d0:	20008234 	.word	0x20008234

080861d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80861d4:	b580      	push	{r7, lr}
 80861d6:	b086      	sub	sp, #24
 80861d8:	af00      	add	r7, sp, #0
 80861da:	4603      	mov	r3, r0
 80861dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80861de:	79fb      	ldrb	r3, [r7, #7]
 80861e0:	2b08      	cmp	r3, #8
 80861e2:	d009      	beq.n	80861f8 <tcp_kill_state+0x24>
 80861e4:	79fb      	ldrb	r3, [r7, #7]
 80861e6:	2b09      	cmp	r3, #9
 80861e8:	d006      	beq.n	80861f8 <tcp_kill_state+0x24>
 80861ea:	4b1a      	ldr	r3, [pc, #104]	; (8086254 <tcp_kill_state+0x80>)
 80861ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80861f0:	4919      	ldr	r1, [pc, #100]	; (8086258 <tcp_kill_state+0x84>)
 80861f2:	481a      	ldr	r0, [pc, #104]	; (808625c <tcp_kill_state+0x88>)
 80861f4:	f006 fe6e 	bl	808ced4 <iprintf>

  inactivity = 0;
 80861f8:	2300      	movs	r3, #0
 80861fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80861fc:	2300      	movs	r3, #0
 80861fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8086200:	4b17      	ldr	r3, [pc, #92]	; (8086260 <tcp_kill_state+0x8c>)
 8086202:	681b      	ldr	r3, [r3, #0]
 8086204:	617b      	str	r3, [r7, #20]
 8086206:	e017      	b.n	8086238 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8086208:	697b      	ldr	r3, [r7, #20]
 808620a:	7d1b      	ldrb	r3, [r3, #20]
 808620c:	79fa      	ldrb	r2, [r7, #7]
 808620e:	429a      	cmp	r2, r3
 8086210:	d10f      	bne.n	8086232 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8086212:	4b14      	ldr	r3, [pc, #80]	; (8086264 <tcp_kill_state+0x90>)
 8086214:	681a      	ldr	r2, [r3, #0]
 8086216:	697b      	ldr	r3, [r7, #20]
 8086218:	6a1b      	ldr	r3, [r3, #32]
 808621a:	1ad3      	subs	r3, r2, r3
 808621c:	68fa      	ldr	r2, [r7, #12]
 808621e:	429a      	cmp	r2, r3
 8086220:	d807      	bhi.n	8086232 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8086222:	4b10      	ldr	r3, [pc, #64]	; (8086264 <tcp_kill_state+0x90>)
 8086224:	681a      	ldr	r2, [r3, #0]
 8086226:	697b      	ldr	r3, [r7, #20]
 8086228:	6a1b      	ldr	r3, [r3, #32]
 808622a:	1ad3      	subs	r3, r2, r3
 808622c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 808622e:	697b      	ldr	r3, [r7, #20]
 8086230:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8086232:	697b      	ldr	r3, [r7, #20]
 8086234:	68db      	ldr	r3, [r3, #12]
 8086236:	617b      	str	r3, [r7, #20]
 8086238:	697b      	ldr	r3, [r7, #20]
 808623a:	2b00      	cmp	r3, #0
 808623c:	d1e4      	bne.n	8086208 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 808623e:	693b      	ldr	r3, [r7, #16]
 8086240:	2b00      	cmp	r3, #0
 8086242:	d003      	beq.n	808624c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8086244:	2100      	movs	r1, #0
 8086246:	6938      	ldr	r0, [r7, #16]
 8086248:	f7ff f952 	bl	80854f0 <tcp_abandon>
  }
}
 808624c:	bf00      	nop
 808624e:	3718      	adds	r7, #24
 8086250:	46bd      	mov	sp, r7
 8086252:	bd80      	pop	{r7, pc}
 8086254:	0808ea58 	.word	0x0808ea58
 8086258:	0808efe4 	.word	0x0808efe4
 808625c:	0808ea9c 	.word	0x0808ea9c
 8086260:	20008240 	.word	0x20008240
 8086264:	20008234 	.word	0x20008234

08086268 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8086268:	b580      	push	{r7, lr}
 808626a:	b084      	sub	sp, #16
 808626c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 808626e:	2300      	movs	r3, #0
 8086270:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8086272:	2300      	movs	r3, #0
 8086274:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8086276:	4b12      	ldr	r3, [pc, #72]	; (80862c0 <tcp_kill_timewait+0x58>)
 8086278:	681b      	ldr	r3, [r3, #0]
 808627a:	60fb      	str	r3, [r7, #12]
 808627c:	e012      	b.n	80862a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 808627e:	4b11      	ldr	r3, [pc, #68]	; (80862c4 <tcp_kill_timewait+0x5c>)
 8086280:	681a      	ldr	r2, [r3, #0]
 8086282:	68fb      	ldr	r3, [r7, #12]
 8086284:	6a1b      	ldr	r3, [r3, #32]
 8086286:	1ad3      	subs	r3, r2, r3
 8086288:	687a      	ldr	r2, [r7, #4]
 808628a:	429a      	cmp	r2, r3
 808628c:	d807      	bhi.n	808629e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 808628e:	4b0d      	ldr	r3, [pc, #52]	; (80862c4 <tcp_kill_timewait+0x5c>)
 8086290:	681a      	ldr	r2, [r3, #0]
 8086292:	68fb      	ldr	r3, [r7, #12]
 8086294:	6a1b      	ldr	r3, [r3, #32]
 8086296:	1ad3      	subs	r3, r2, r3
 8086298:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 808629a:	68fb      	ldr	r3, [r7, #12]
 808629c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 808629e:	68fb      	ldr	r3, [r7, #12]
 80862a0:	68db      	ldr	r3, [r3, #12]
 80862a2:	60fb      	str	r3, [r7, #12]
 80862a4:	68fb      	ldr	r3, [r7, #12]
 80862a6:	2b00      	cmp	r3, #0
 80862a8:	d1e9      	bne.n	808627e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80862aa:	68bb      	ldr	r3, [r7, #8]
 80862ac:	2b00      	cmp	r3, #0
 80862ae:	d002      	beq.n	80862b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80862b0:	68b8      	ldr	r0, [r7, #8]
 80862b2:	f7ff f9db 	bl	808566c <tcp_abort>
  }
}
 80862b6:	bf00      	nop
 80862b8:	3710      	adds	r7, #16
 80862ba:	46bd      	mov	sp, r7
 80862bc:	bd80      	pop	{r7, pc}
 80862be:	bf00      	nop
 80862c0:	20008244 	.word	0x20008244
 80862c4:	20008234 	.word	0x20008234

080862c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80862c8:	b580      	push	{r7, lr}
 80862ca:	b082      	sub	sp, #8
 80862cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80862ce:	4b10      	ldr	r3, [pc, #64]	; (8086310 <tcp_handle_closepend+0x48>)
 80862d0:	681b      	ldr	r3, [r3, #0]
 80862d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80862d4:	e014      	b.n	8086300 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80862d6:	687b      	ldr	r3, [r7, #4]
 80862d8:	68db      	ldr	r3, [r3, #12]
 80862da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80862dc:	687b      	ldr	r3, [r7, #4]
 80862de:	8b5b      	ldrh	r3, [r3, #26]
 80862e0:	f003 0308 	and.w	r3, r3, #8
 80862e4:	2b00      	cmp	r3, #0
 80862e6:	d009      	beq.n	80862fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80862e8:	687b      	ldr	r3, [r7, #4]
 80862ea:	8b5b      	ldrh	r3, [r3, #26]
 80862ec:	f023 0308 	bic.w	r3, r3, #8
 80862f0:	b29a      	uxth	r2, r3
 80862f2:	687b      	ldr	r3, [r7, #4]
 80862f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80862f6:	6878      	ldr	r0, [r7, #4]
 80862f8:	f7ff f864 	bl	80853c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80862fc:	683b      	ldr	r3, [r7, #0]
 80862fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8086300:	687b      	ldr	r3, [r7, #4]
 8086302:	2b00      	cmp	r3, #0
 8086304:	d1e7      	bne.n	80862d6 <tcp_handle_closepend+0xe>
  }
}
 8086306:	bf00      	nop
 8086308:	bf00      	nop
 808630a:	3708      	adds	r7, #8
 808630c:	46bd      	mov	sp, r7
 808630e:	bd80      	pop	{r7, pc}
 8086310:	20008240 	.word	0x20008240

08086314 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8086314:	b580      	push	{r7, lr}
 8086316:	b084      	sub	sp, #16
 8086318:	af00      	add	r7, sp, #0
 808631a:	4603      	mov	r3, r0
 808631c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 808631e:	2001      	movs	r0, #1
 8086320:	f7fd fd56 	bl	8083dd0 <memp_malloc>
 8086324:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8086326:	68fb      	ldr	r3, [r7, #12]
 8086328:	2b00      	cmp	r3, #0
 808632a:	d126      	bne.n	808637a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 808632c:	f7ff ffcc 	bl	80862c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8086330:	f7ff ff9a 	bl	8086268 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8086334:	2001      	movs	r0, #1
 8086336:	f7fd fd4b 	bl	8083dd0 <memp_malloc>
 808633a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 808633c:	68fb      	ldr	r3, [r7, #12]
 808633e:	2b00      	cmp	r3, #0
 8086340:	d11b      	bne.n	808637a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8086342:	2009      	movs	r0, #9
 8086344:	f7ff ff46 	bl	80861d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8086348:	2001      	movs	r0, #1
 808634a:	f7fd fd41 	bl	8083dd0 <memp_malloc>
 808634e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8086350:	68fb      	ldr	r3, [r7, #12]
 8086352:	2b00      	cmp	r3, #0
 8086354:	d111      	bne.n	808637a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8086356:	2008      	movs	r0, #8
 8086358:	f7ff ff3c 	bl	80861d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 808635c:	2001      	movs	r0, #1
 808635e:	f7fd fd37 	bl	8083dd0 <memp_malloc>
 8086362:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8086364:	68fb      	ldr	r3, [r7, #12]
 8086366:	2b00      	cmp	r3, #0
 8086368:	d107      	bne.n	808637a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 808636a:	79fb      	ldrb	r3, [r7, #7]
 808636c:	4618      	mov	r0, r3
 808636e:	f7ff fee3 	bl	8086138 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8086372:	2001      	movs	r0, #1
 8086374:	f7fd fd2c 	bl	8083dd0 <memp_malloc>
 8086378:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 808637a:	68fb      	ldr	r3, [r7, #12]
 808637c:	2b00      	cmp	r3, #0
 808637e:	d03f      	beq.n	8086400 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8086380:	229c      	movs	r2, #156	; 0x9c
 8086382:	2100      	movs	r1, #0
 8086384:	68f8      	ldr	r0, [r7, #12]
 8086386:	f006 fd9d 	bl	808cec4 <memset>
    pcb->prio = prio;
 808638a:	68fb      	ldr	r3, [r7, #12]
 808638c:	79fa      	ldrb	r2, [r7, #7]
 808638e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8086390:	68fb      	ldr	r3, [r7, #12]
 8086392:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8086396:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 808639a:	68fb      	ldr	r3, [r7, #12]
 808639c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80863a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80863a2:	68fb      	ldr	r3, [r7, #12]
 80863a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80863a6:	68fb      	ldr	r3, [r7, #12]
 80863a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80863aa:	68fb      	ldr	r3, [r7, #12]
 80863ac:	22ff      	movs	r2, #255	; 0xff
 80863ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80863b0:	68fb      	ldr	r3, [r7, #12]
 80863b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80863b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80863b8:	68fb      	ldr	r3, [r7, #12]
 80863ba:	2206      	movs	r2, #6
 80863bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80863c0:	68fb      	ldr	r3, [r7, #12]
 80863c2:	2206      	movs	r2, #6
 80863c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80863c6:	68fb      	ldr	r3, [r7, #12]
 80863c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80863cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80863ce:	68fb      	ldr	r3, [r7, #12]
 80863d0:	2201      	movs	r2, #1
 80863d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80863d6:	4b0d      	ldr	r3, [pc, #52]	; (808640c <tcp_alloc+0xf8>)
 80863d8:	681a      	ldr	r2, [r3, #0]
 80863da:	68fb      	ldr	r3, [r7, #12]
 80863dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80863de:	4b0c      	ldr	r3, [pc, #48]	; (8086410 <tcp_alloc+0xfc>)
 80863e0:	781a      	ldrb	r2, [r3, #0]
 80863e2:	68fb      	ldr	r3, [r7, #12]
 80863e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80863e6:	68fb      	ldr	r3, [r7, #12]
 80863e8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80863ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80863f0:	68fb      	ldr	r3, [r7, #12]
 80863f2:	4a08      	ldr	r2, [pc, #32]	; (8086414 <tcp_alloc+0x100>)
 80863f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80863f8:	68fb      	ldr	r3, [r7, #12]
 80863fa:	4a07      	ldr	r2, [pc, #28]	; (8086418 <tcp_alloc+0x104>)
 80863fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8086400:	68fb      	ldr	r3, [r7, #12]
}
 8086402:	4618      	mov	r0, r3
 8086404:	3710      	adds	r7, #16
 8086406:	46bd      	mov	sp, r7
 8086408:	bd80      	pop	{r7, pc}
 808640a:	bf00      	nop
 808640c:	20008234 	.word	0x20008234
 8086410:	2000824a 	.word	0x2000824a
 8086414:	080860cd 	.word	0x080860cd
 8086418:	006ddd00 	.word	0x006ddd00

0808641c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 808641c:	b580      	push	{r7, lr}
 808641e:	b082      	sub	sp, #8
 8086420:	af00      	add	r7, sp, #0
 8086422:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8086424:	687b      	ldr	r3, [r7, #4]
 8086426:	2b00      	cmp	r3, #0
 8086428:	d107      	bne.n	808643a <tcp_pcb_purge+0x1e>
 808642a:	4b21      	ldr	r3, [pc, #132]	; (80864b0 <tcp_pcb_purge+0x94>)
 808642c:	f640 0251 	movw	r2, #2129	; 0x851
 8086430:	4920      	ldr	r1, [pc, #128]	; (80864b4 <tcp_pcb_purge+0x98>)
 8086432:	4821      	ldr	r0, [pc, #132]	; (80864b8 <tcp_pcb_purge+0x9c>)
 8086434:	f006 fd4e 	bl	808ced4 <iprintf>
 8086438:	e037      	b.n	80864aa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 808643a:	687b      	ldr	r3, [r7, #4]
 808643c:	7d1b      	ldrb	r3, [r3, #20]
 808643e:	2b00      	cmp	r3, #0
 8086440:	d033      	beq.n	80864aa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8086442:	687b      	ldr	r3, [r7, #4]
 8086444:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8086446:	2b0a      	cmp	r3, #10
 8086448:	d02f      	beq.n	80864aa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 808644a:	687b      	ldr	r3, [r7, #4]
 808644c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 808644e:	2b01      	cmp	r3, #1
 8086450:	d02b      	beq.n	80864aa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8086452:	687b      	ldr	r3, [r7, #4]
 8086454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086456:	2b00      	cmp	r3, #0
 8086458:	d007      	beq.n	808646a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 808645a:	687b      	ldr	r3, [r7, #4]
 808645c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 808645e:	4618      	mov	r0, r3
 8086460:	f7fe fb7c 	bl	8084b5c <pbuf_free>
      pcb->refused_data = NULL;
 8086464:	687b      	ldr	r3, [r7, #4]
 8086466:	2200      	movs	r2, #0
 8086468:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 808646a:	687b      	ldr	r3, [r7, #4]
 808646c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808646e:	2b00      	cmp	r3, #0
 8086470:	d002      	beq.n	8086478 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8086472:	6878      	ldr	r0, [r7, #4]
 8086474:	f000 f986 	bl	8086784 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8086478:	687b      	ldr	r3, [r7, #4]
 808647a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808647e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8086480:	687b      	ldr	r3, [r7, #4]
 8086482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8086484:	4618      	mov	r0, r3
 8086486:	f7ff fdc7 	bl	8086018 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 808648a:	687b      	ldr	r3, [r7, #4]
 808648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808648e:	4618      	mov	r0, r3
 8086490:	f7ff fdc2 	bl	8086018 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8086494:	687b      	ldr	r3, [r7, #4]
 8086496:	2200      	movs	r2, #0
 8086498:	66da      	str	r2, [r3, #108]	; 0x6c
 808649a:	687b      	ldr	r3, [r7, #4]
 808649c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 808649e:	687b      	ldr	r3, [r7, #4]
 80864a0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80864a2:	687b      	ldr	r3, [r7, #4]
 80864a4:	2200      	movs	r2, #0
 80864a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80864aa:	3708      	adds	r7, #8
 80864ac:	46bd      	mov	sp, r7
 80864ae:	bd80      	pop	{r7, pc}
 80864b0:	0808ea58 	.word	0x0808ea58
 80864b4:	0808f0a4 	.word	0x0808f0a4
 80864b8:	0808ea9c 	.word	0x0808ea9c

080864bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80864bc:	b580      	push	{r7, lr}
 80864be:	b084      	sub	sp, #16
 80864c0:	af00      	add	r7, sp, #0
 80864c2:	6078      	str	r0, [r7, #4]
 80864c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80864c6:	683b      	ldr	r3, [r7, #0]
 80864c8:	2b00      	cmp	r3, #0
 80864ca:	d106      	bne.n	80864da <tcp_pcb_remove+0x1e>
 80864cc:	4b3e      	ldr	r3, [pc, #248]	; (80865c8 <tcp_pcb_remove+0x10c>)
 80864ce:	f640 0283 	movw	r2, #2179	; 0x883
 80864d2:	493e      	ldr	r1, [pc, #248]	; (80865cc <tcp_pcb_remove+0x110>)
 80864d4:	483e      	ldr	r0, [pc, #248]	; (80865d0 <tcp_pcb_remove+0x114>)
 80864d6:	f006 fcfd 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80864da:	687b      	ldr	r3, [r7, #4]
 80864dc:	2b00      	cmp	r3, #0
 80864de:	d106      	bne.n	80864ee <tcp_pcb_remove+0x32>
 80864e0:	4b39      	ldr	r3, [pc, #228]	; (80865c8 <tcp_pcb_remove+0x10c>)
 80864e2:	f640 0284 	movw	r2, #2180	; 0x884
 80864e6:	493b      	ldr	r1, [pc, #236]	; (80865d4 <tcp_pcb_remove+0x118>)
 80864e8:	4839      	ldr	r0, [pc, #228]	; (80865d0 <tcp_pcb_remove+0x114>)
 80864ea:	f006 fcf3 	bl	808ced4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80864ee:	687b      	ldr	r3, [r7, #4]
 80864f0:	681b      	ldr	r3, [r3, #0]
 80864f2:	683a      	ldr	r2, [r7, #0]
 80864f4:	429a      	cmp	r2, r3
 80864f6:	d105      	bne.n	8086504 <tcp_pcb_remove+0x48>
 80864f8:	687b      	ldr	r3, [r7, #4]
 80864fa:	681b      	ldr	r3, [r3, #0]
 80864fc:	68da      	ldr	r2, [r3, #12]
 80864fe:	687b      	ldr	r3, [r7, #4]
 8086500:	601a      	str	r2, [r3, #0]
 8086502:	e013      	b.n	808652c <tcp_pcb_remove+0x70>
 8086504:	687b      	ldr	r3, [r7, #4]
 8086506:	681b      	ldr	r3, [r3, #0]
 8086508:	60fb      	str	r3, [r7, #12]
 808650a:	e00c      	b.n	8086526 <tcp_pcb_remove+0x6a>
 808650c:	68fb      	ldr	r3, [r7, #12]
 808650e:	68db      	ldr	r3, [r3, #12]
 8086510:	683a      	ldr	r2, [r7, #0]
 8086512:	429a      	cmp	r2, r3
 8086514:	d104      	bne.n	8086520 <tcp_pcb_remove+0x64>
 8086516:	683b      	ldr	r3, [r7, #0]
 8086518:	68da      	ldr	r2, [r3, #12]
 808651a:	68fb      	ldr	r3, [r7, #12]
 808651c:	60da      	str	r2, [r3, #12]
 808651e:	e005      	b.n	808652c <tcp_pcb_remove+0x70>
 8086520:	68fb      	ldr	r3, [r7, #12]
 8086522:	68db      	ldr	r3, [r3, #12]
 8086524:	60fb      	str	r3, [r7, #12]
 8086526:	68fb      	ldr	r3, [r7, #12]
 8086528:	2b00      	cmp	r3, #0
 808652a:	d1ef      	bne.n	808650c <tcp_pcb_remove+0x50>
 808652c:	683b      	ldr	r3, [r7, #0]
 808652e:	2200      	movs	r2, #0
 8086530:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8086532:	6838      	ldr	r0, [r7, #0]
 8086534:	f7ff ff72 	bl	808641c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8086538:	683b      	ldr	r3, [r7, #0]
 808653a:	7d1b      	ldrb	r3, [r3, #20]
 808653c:	2b0a      	cmp	r3, #10
 808653e:	d013      	beq.n	8086568 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8086540:	683b      	ldr	r3, [r7, #0]
 8086542:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8086544:	2b01      	cmp	r3, #1
 8086546:	d00f      	beq.n	8086568 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8086548:	683b      	ldr	r3, [r7, #0]
 808654a:	8b5b      	ldrh	r3, [r3, #26]
 808654c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8086550:	2b00      	cmp	r3, #0
 8086552:	d009      	beq.n	8086568 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8086554:	683b      	ldr	r3, [r7, #0]
 8086556:	8b5b      	ldrh	r3, [r3, #26]
 8086558:	f043 0302 	orr.w	r3, r3, #2
 808655c:	b29a      	uxth	r2, r3
 808655e:	683b      	ldr	r3, [r7, #0]
 8086560:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8086562:	6838      	ldr	r0, [r7, #0]
 8086564:	f002 ff6e 	bl	8089444 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8086568:	683b      	ldr	r3, [r7, #0]
 808656a:	7d1b      	ldrb	r3, [r3, #20]
 808656c:	2b01      	cmp	r3, #1
 808656e:	d020      	beq.n	80865b2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8086570:	683b      	ldr	r3, [r7, #0]
 8086572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8086574:	2b00      	cmp	r3, #0
 8086576:	d006      	beq.n	8086586 <tcp_pcb_remove+0xca>
 8086578:	4b13      	ldr	r3, [pc, #76]	; (80865c8 <tcp_pcb_remove+0x10c>)
 808657a:	f640 0293 	movw	r2, #2195	; 0x893
 808657e:	4916      	ldr	r1, [pc, #88]	; (80865d8 <tcp_pcb_remove+0x11c>)
 8086580:	4813      	ldr	r0, [pc, #76]	; (80865d0 <tcp_pcb_remove+0x114>)
 8086582:	f006 fca7 	bl	808ced4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8086586:	683b      	ldr	r3, [r7, #0]
 8086588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808658a:	2b00      	cmp	r3, #0
 808658c:	d006      	beq.n	808659c <tcp_pcb_remove+0xe0>
 808658e:	4b0e      	ldr	r3, [pc, #56]	; (80865c8 <tcp_pcb_remove+0x10c>)
 8086590:	f640 0294 	movw	r2, #2196	; 0x894
 8086594:	4911      	ldr	r1, [pc, #68]	; (80865dc <tcp_pcb_remove+0x120>)
 8086596:	480e      	ldr	r0, [pc, #56]	; (80865d0 <tcp_pcb_remove+0x114>)
 8086598:	f006 fc9c 	bl	808ced4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 808659c:	683b      	ldr	r3, [r7, #0]
 808659e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80865a0:	2b00      	cmp	r3, #0
 80865a2:	d006      	beq.n	80865b2 <tcp_pcb_remove+0xf6>
 80865a4:	4b08      	ldr	r3, [pc, #32]	; (80865c8 <tcp_pcb_remove+0x10c>)
 80865a6:	f640 0296 	movw	r2, #2198	; 0x896
 80865aa:	490d      	ldr	r1, [pc, #52]	; (80865e0 <tcp_pcb_remove+0x124>)
 80865ac:	4808      	ldr	r0, [pc, #32]	; (80865d0 <tcp_pcb_remove+0x114>)
 80865ae:	f006 fc91 	bl	808ced4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80865b2:	683b      	ldr	r3, [r7, #0]
 80865b4:	2200      	movs	r2, #0
 80865b6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80865b8:	683b      	ldr	r3, [r7, #0]
 80865ba:	2200      	movs	r2, #0
 80865bc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80865be:	bf00      	nop
 80865c0:	3710      	adds	r7, #16
 80865c2:	46bd      	mov	sp, r7
 80865c4:	bd80      	pop	{r7, pc}
 80865c6:	bf00      	nop
 80865c8:	0808ea58 	.word	0x0808ea58
 80865cc:	0808f0c0 	.word	0x0808f0c0
 80865d0:	0808ea9c 	.word	0x0808ea9c
 80865d4:	0808f0dc 	.word	0x0808f0dc
 80865d8:	0808f0fc 	.word	0x0808f0fc
 80865dc:	0808f114 	.word	0x0808f114
 80865e0:	0808f130 	.word	0x0808f130

080865e4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80865e4:	b580      	push	{r7, lr}
 80865e6:	b082      	sub	sp, #8
 80865e8:	af00      	add	r7, sp, #0
 80865ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80865ec:	687b      	ldr	r3, [r7, #4]
 80865ee:	2b00      	cmp	r3, #0
 80865f0:	d106      	bne.n	8086600 <tcp_next_iss+0x1c>
 80865f2:	4b0a      	ldr	r3, [pc, #40]	; (808661c <tcp_next_iss+0x38>)
 80865f4:	f640 02af 	movw	r2, #2223	; 0x8af
 80865f8:	4909      	ldr	r1, [pc, #36]	; (8086620 <tcp_next_iss+0x3c>)
 80865fa:	480a      	ldr	r0, [pc, #40]	; (8086624 <tcp_next_iss+0x40>)
 80865fc:	f006 fc6a 	bl	808ced4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8086600:	4b09      	ldr	r3, [pc, #36]	; (8086628 <tcp_next_iss+0x44>)
 8086602:	681a      	ldr	r2, [r3, #0]
 8086604:	4b09      	ldr	r3, [pc, #36]	; (808662c <tcp_next_iss+0x48>)
 8086606:	681b      	ldr	r3, [r3, #0]
 8086608:	4413      	add	r3, r2
 808660a:	4a07      	ldr	r2, [pc, #28]	; (8086628 <tcp_next_iss+0x44>)
 808660c:	6013      	str	r3, [r2, #0]
  return iss;
 808660e:	4b06      	ldr	r3, [pc, #24]	; (8086628 <tcp_next_iss+0x44>)
 8086610:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8086612:	4618      	mov	r0, r3
 8086614:	3708      	adds	r7, #8
 8086616:	46bd      	mov	sp, r7
 8086618:	bd80      	pop	{r7, pc}
 808661a:	bf00      	nop
 808661c:	0808ea58 	.word	0x0808ea58
 8086620:	0808f148 	.word	0x0808f148
 8086624:	0808ea9c 	.word	0x0808ea9c
 8086628:	20000024 	.word	0x20000024
 808662c:	20008234 	.word	0x20008234

08086630 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8086630:	b580      	push	{r7, lr}
 8086632:	b086      	sub	sp, #24
 8086634:	af00      	add	r7, sp, #0
 8086636:	4603      	mov	r3, r0
 8086638:	60b9      	str	r1, [r7, #8]
 808663a:	607a      	str	r2, [r7, #4]
 808663c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 808663e:	687b      	ldr	r3, [r7, #4]
 8086640:	2b00      	cmp	r3, #0
 8086642:	d106      	bne.n	8086652 <tcp_eff_send_mss_netif+0x22>
 8086644:	4b14      	ldr	r3, [pc, #80]	; (8086698 <tcp_eff_send_mss_netif+0x68>)
 8086646:	f640 02c5 	movw	r2, #2245	; 0x8c5
 808664a:	4914      	ldr	r1, [pc, #80]	; (808669c <tcp_eff_send_mss_netif+0x6c>)
 808664c:	4814      	ldr	r0, [pc, #80]	; (80866a0 <tcp_eff_send_mss_netif+0x70>)
 808664e:	f006 fc41 	bl	808ced4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8086652:	68bb      	ldr	r3, [r7, #8]
 8086654:	2b00      	cmp	r3, #0
 8086656:	d101      	bne.n	808665c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8086658:	89fb      	ldrh	r3, [r7, #14]
 808665a:	e019      	b.n	8086690 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 808665c:	68bb      	ldr	r3, [r7, #8]
 808665e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8086660:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8086662:	8afb      	ldrh	r3, [r7, #22]
 8086664:	2b00      	cmp	r3, #0
 8086666:	d012      	beq.n	808668e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8086668:	2328      	movs	r3, #40	; 0x28
 808666a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 808666c:	8afa      	ldrh	r2, [r7, #22]
 808666e:	8abb      	ldrh	r3, [r7, #20]
 8086670:	429a      	cmp	r2, r3
 8086672:	d904      	bls.n	808667e <tcp_eff_send_mss_netif+0x4e>
 8086674:	8afa      	ldrh	r2, [r7, #22]
 8086676:	8abb      	ldrh	r3, [r7, #20]
 8086678:	1ad3      	subs	r3, r2, r3
 808667a:	b29b      	uxth	r3, r3
 808667c:	e000      	b.n	8086680 <tcp_eff_send_mss_netif+0x50>
 808667e:	2300      	movs	r3, #0
 8086680:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8086682:	8a7a      	ldrh	r2, [r7, #18]
 8086684:	89fb      	ldrh	r3, [r7, #14]
 8086686:	4293      	cmp	r3, r2
 8086688:	bf28      	it	cs
 808668a:	4613      	movcs	r3, r2
 808668c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 808668e:	89fb      	ldrh	r3, [r7, #14]
}
 8086690:	4618      	mov	r0, r3
 8086692:	3718      	adds	r7, #24
 8086694:	46bd      	mov	sp, r7
 8086696:	bd80      	pop	{r7, pc}
 8086698:	0808ea58 	.word	0x0808ea58
 808669c:	0808f164 	.word	0x0808f164
 80866a0:	0808ea9c 	.word	0x0808ea9c

080866a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80866a4:	b580      	push	{r7, lr}
 80866a6:	b084      	sub	sp, #16
 80866a8:	af00      	add	r7, sp, #0
 80866aa:	6078      	str	r0, [r7, #4]
 80866ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80866ae:	683b      	ldr	r3, [r7, #0]
 80866b0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80866b2:	687b      	ldr	r3, [r7, #4]
 80866b4:	2b00      	cmp	r3, #0
 80866b6:	d119      	bne.n	80866ec <tcp_netif_ip_addr_changed_pcblist+0x48>
 80866b8:	4b10      	ldr	r3, [pc, #64]	; (80866fc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80866ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80866be:	4910      	ldr	r1, [pc, #64]	; (8086700 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80866c0:	4810      	ldr	r0, [pc, #64]	; (8086704 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80866c2:	f006 fc07 	bl	808ced4 <iprintf>

  while (pcb != NULL) {
 80866c6:	e011      	b.n	80866ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80866c8:	68fb      	ldr	r3, [r7, #12]
 80866ca:	681a      	ldr	r2, [r3, #0]
 80866cc:	687b      	ldr	r3, [r7, #4]
 80866ce:	681b      	ldr	r3, [r3, #0]
 80866d0:	429a      	cmp	r2, r3
 80866d2:	d108      	bne.n	80866e6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80866d4:	68fb      	ldr	r3, [r7, #12]
 80866d6:	68db      	ldr	r3, [r3, #12]
 80866d8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80866da:	68f8      	ldr	r0, [r7, #12]
 80866dc:	f7fe ffc6 	bl	808566c <tcp_abort>
      pcb = next;
 80866e0:	68bb      	ldr	r3, [r7, #8]
 80866e2:	60fb      	str	r3, [r7, #12]
 80866e4:	e002      	b.n	80866ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80866e6:	68fb      	ldr	r3, [r7, #12]
 80866e8:	68db      	ldr	r3, [r3, #12]
 80866ea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80866ec:	68fb      	ldr	r3, [r7, #12]
 80866ee:	2b00      	cmp	r3, #0
 80866f0:	d1ea      	bne.n	80866c8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80866f2:	bf00      	nop
 80866f4:	bf00      	nop
 80866f6:	3710      	adds	r7, #16
 80866f8:	46bd      	mov	sp, r7
 80866fa:	bd80      	pop	{r7, pc}
 80866fc:	0808ea58 	.word	0x0808ea58
 8086700:	0808f18c 	.word	0x0808f18c
 8086704:	0808ea9c 	.word	0x0808ea9c

08086708 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8086708:	b580      	push	{r7, lr}
 808670a:	b084      	sub	sp, #16
 808670c:	af00      	add	r7, sp, #0
 808670e:	6078      	str	r0, [r7, #4]
 8086710:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8086712:	687b      	ldr	r3, [r7, #4]
 8086714:	2b00      	cmp	r3, #0
 8086716:	d02a      	beq.n	808676e <tcp_netif_ip_addr_changed+0x66>
 8086718:	687b      	ldr	r3, [r7, #4]
 808671a:	681b      	ldr	r3, [r3, #0]
 808671c:	2b00      	cmp	r3, #0
 808671e:	d026      	beq.n	808676e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8086720:	4b15      	ldr	r3, [pc, #84]	; (8086778 <tcp_netif_ip_addr_changed+0x70>)
 8086722:	681b      	ldr	r3, [r3, #0]
 8086724:	4619      	mov	r1, r3
 8086726:	6878      	ldr	r0, [r7, #4]
 8086728:	f7ff ffbc 	bl	80866a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 808672c:	4b13      	ldr	r3, [pc, #76]	; (808677c <tcp_netif_ip_addr_changed+0x74>)
 808672e:	681b      	ldr	r3, [r3, #0]
 8086730:	4619      	mov	r1, r3
 8086732:	6878      	ldr	r0, [r7, #4]
 8086734:	f7ff ffb6 	bl	80866a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8086738:	683b      	ldr	r3, [r7, #0]
 808673a:	2b00      	cmp	r3, #0
 808673c:	d017      	beq.n	808676e <tcp_netif_ip_addr_changed+0x66>
 808673e:	683b      	ldr	r3, [r7, #0]
 8086740:	681b      	ldr	r3, [r3, #0]
 8086742:	2b00      	cmp	r3, #0
 8086744:	d013      	beq.n	808676e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8086746:	4b0e      	ldr	r3, [pc, #56]	; (8086780 <tcp_netif_ip_addr_changed+0x78>)
 8086748:	681b      	ldr	r3, [r3, #0]
 808674a:	60fb      	str	r3, [r7, #12]
 808674c:	e00c      	b.n	8086768 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 808674e:	68fb      	ldr	r3, [r7, #12]
 8086750:	681a      	ldr	r2, [r3, #0]
 8086752:	687b      	ldr	r3, [r7, #4]
 8086754:	681b      	ldr	r3, [r3, #0]
 8086756:	429a      	cmp	r2, r3
 8086758:	d103      	bne.n	8086762 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 808675a:	683b      	ldr	r3, [r7, #0]
 808675c:	681a      	ldr	r2, [r3, #0]
 808675e:	68fb      	ldr	r3, [r7, #12]
 8086760:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8086762:	68fb      	ldr	r3, [r7, #12]
 8086764:	68db      	ldr	r3, [r3, #12]
 8086766:	60fb      	str	r3, [r7, #12]
 8086768:	68fb      	ldr	r3, [r7, #12]
 808676a:	2b00      	cmp	r3, #0
 808676c:	d1ef      	bne.n	808674e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 808676e:	bf00      	nop
 8086770:	3710      	adds	r7, #16
 8086772:	46bd      	mov	sp, r7
 8086774:	bd80      	pop	{r7, pc}
 8086776:	bf00      	nop
 8086778:	20008240 	.word	0x20008240
 808677c:	20008238 	.word	0x20008238
 8086780:	2000823c 	.word	0x2000823c

08086784 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8086784:	b580      	push	{r7, lr}
 8086786:	b082      	sub	sp, #8
 8086788:	af00      	add	r7, sp, #0
 808678a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 808678c:	687b      	ldr	r3, [r7, #4]
 808678e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8086790:	2b00      	cmp	r3, #0
 8086792:	d007      	beq.n	80867a4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8086794:	687b      	ldr	r3, [r7, #4]
 8086796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8086798:	4618      	mov	r0, r3
 808679a:	f7ff fc3d 	bl	8086018 <tcp_segs_free>
    pcb->ooseq = NULL;
 808679e:	687b      	ldr	r3, [r7, #4]
 80867a0:	2200      	movs	r2, #0
 80867a2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80867a4:	bf00      	nop
 80867a6:	3708      	adds	r7, #8
 80867a8:	46bd      	mov	sp, r7
 80867aa:	bd80      	pop	{r7, pc}

080867ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80867ac:	b590      	push	{r4, r7, lr}
 80867ae:	b08d      	sub	sp, #52	; 0x34
 80867b0:	af04      	add	r7, sp, #16
 80867b2:	6078      	str	r0, [r7, #4]
 80867b4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80867b6:	687b      	ldr	r3, [r7, #4]
 80867b8:	2b00      	cmp	r3, #0
 80867ba:	d105      	bne.n	80867c8 <tcp_input+0x1c>
 80867bc:	4b9b      	ldr	r3, [pc, #620]	; (8086a2c <tcp_input+0x280>)
 80867be:	2283      	movs	r2, #131	; 0x83
 80867c0:	499b      	ldr	r1, [pc, #620]	; (8086a30 <tcp_input+0x284>)
 80867c2:	489c      	ldr	r0, [pc, #624]	; (8086a34 <tcp_input+0x288>)
 80867c4:	f006 fb86 	bl	808ced4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80867c8:	687b      	ldr	r3, [r7, #4]
 80867ca:	685b      	ldr	r3, [r3, #4]
 80867cc:	4a9a      	ldr	r2, [pc, #616]	; (8086a38 <tcp_input+0x28c>)
 80867ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80867d0:	687b      	ldr	r3, [r7, #4]
 80867d2:	895b      	ldrh	r3, [r3, #10]
 80867d4:	2b13      	cmp	r3, #19
 80867d6:	f240 83d1 	bls.w	8086f7c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80867da:	4b98      	ldr	r3, [pc, #608]	; (8086a3c <tcp_input+0x290>)
 80867dc:	695b      	ldr	r3, [r3, #20]
 80867de:	4a97      	ldr	r2, [pc, #604]	; (8086a3c <tcp_input+0x290>)
 80867e0:	6812      	ldr	r2, [r2, #0]
 80867e2:	4611      	mov	r1, r2
 80867e4:	4618      	mov	r0, r3
 80867e6:	f005 fbd5 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 80867ea:	4603      	mov	r3, r0
 80867ec:	2b00      	cmp	r3, #0
 80867ee:	f040 83c7 	bne.w	8086f80 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80867f2:	4b92      	ldr	r3, [pc, #584]	; (8086a3c <tcp_input+0x290>)
 80867f4:	695b      	ldr	r3, [r3, #20]
 80867f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80867fa:	2be0      	cmp	r3, #224	; 0xe0
 80867fc:	f000 83c0 	beq.w	8086f80 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8086800:	4b8d      	ldr	r3, [pc, #564]	; (8086a38 <tcp_input+0x28c>)
 8086802:	681b      	ldr	r3, [r3, #0]
 8086804:	899b      	ldrh	r3, [r3, #12]
 8086806:	b29b      	uxth	r3, r3
 8086808:	4618      	mov	r0, r3
 808680a:	f7fc fe69 	bl	80834e0 <lwip_htons>
 808680e:	4603      	mov	r3, r0
 8086810:	0b1b      	lsrs	r3, r3, #12
 8086812:	b29b      	uxth	r3, r3
 8086814:	b2db      	uxtb	r3, r3
 8086816:	009b      	lsls	r3, r3, #2
 8086818:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 808681a:	7cbb      	ldrb	r3, [r7, #18]
 808681c:	2b13      	cmp	r3, #19
 808681e:	f240 83b1 	bls.w	8086f84 <tcp_input+0x7d8>
 8086822:	7cbb      	ldrb	r3, [r7, #18]
 8086824:	b29a      	uxth	r2, r3
 8086826:	687b      	ldr	r3, [r7, #4]
 8086828:	891b      	ldrh	r3, [r3, #8]
 808682a:	429a      	cmp	r2, r3
 808682c:	f200 83aa 	bhi.w	8086f84 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8086830:	7cbb      	ldrb	r3, [r7, #18]
 8086832:	b29b      	uxth	r3, r3
 8086834:	3b14      	subs	r3, #20
 8086836:	b29a      	uxth	r2, r3
 8086838:	4b81      	ldr	r3, [pc, #516]	; (8086a40 <tcp_input+0x294>)
 808683a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 808683c:	4b81      	ldr	r3, [pc, #516]	; (8086a44 <tcp_input+0x298>)
 808683e:	2200      	movs	r2, #0
 8086840:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8086842:	687b      	ldr	r3, [r7, #4]
 8086844:	895a      	ldrh	r2, [r3, #10]
 8086846:	7cbb      	ldrb	r3, [r7, #18]
 8086848:	b29b      	uxth	r3, r3
 808684a:	429a      	cmp	r2, r3
 808684c:	d309      	bcc.n	8086862 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 808684e:	4b7c      	ldr	r3, [pc, #496]	; (8086a40 <tcp_input+0x294>)
 8086850:	881a      	ldrh	r2, [r3, #0]
 8086852:	4b7d      	ldr	r3, [pc, #500]	; (8086a48 <tcp_input+0x29c>)
 8086854:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8086856:	7cbb      	ldrb	r3, [r7, #18]
 8086858:	4619      	mov	r1, r3
 808685a:	6878      	ldr	r0, [r7, #4]
 808685c:	f7fe f8f8 	bl	8084a50 <pbuf_remove_header>
 8086860:	e04e      	b.n	8086900 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8086862:	687b      	ldr	r3, [r7, #4]
 8086864:	681b      	ldr	r3, [r3, #0]
 8086866:	2b00      	cmp	r3, #0
 8086868:	d105      	bne.n	8086876 <tcp_input+0xca>
 808686a:	4b70      	ldr	r3, [pc, #448]	; (8086a2c <tcp_input+0x280>)
 808686c:	22c2      	movs	r2, #194	; 0xc2
 808686e:	4977      	ldr	r1, [pc, #476]	; (8086a4c <tcp_input+0x2a0>)
 8086870:	4870      	ldr	r0, [pc, #448]	; (8086a34 <tcp_input+0x288>)
 8086872:	f006 fb2f 	bl	808ced4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8086876:	2114      	movs	r1, #20
 8086878:	6878      	ldr	r0, [r7, #4]
 808687a:	f7fe f8e9 	bl	8084a50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 808687e:	687b      	ldr	r3, [r7, #4]
 8086880:	895a      	ldrh	r2, [r3, #10]
 8086882:	4b71      	ldr	r3, [pc, #452]	; (8086a48 <tcp_input+0x29c>)
 8086884:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8086886:	4b6e      	ldr	r3, [pc, #440]	; (8086a40 <tcp_input+0x294>)
 8086888:	881a      	ldrh	r2, [r3, #0]
 808688a:	4b6f      	ldr	r3, [pc, #444]	; (8086a48 <tcp_input+0x29c>)
 808688c:	881b      	ldrh	r3, [r3, #0]
 808688e:	1ad3      	subs	r3, r2, r3
 8086890:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8086892:	4b6d      	ldr	r3, [pc, #436]	; (8086a48 <tcp_input+0x29c>)
 8086894:	881b      	ldrh	r3, [r3, #0]
 8086896:	4619      	mov	r1, r3
 8086898:	6878      	ldr	r0, [r7, #4]
 808689a:	f7fe f8d9 	bl	8084a50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 808689e:	687b      	ldr	r3, [r7, #4]
 80868a0:	681b      	ldr	r3, [r3, #0]
 80868a2:	895b      	ldrh	r3, [r3, #10]
 80868a4:	8a3a      	ldrh	r2, [r7, #16]
 80868a6:	429a      	cmp	r2, r3
 80868a8:	f200 836e 	bhi.w	8086f88 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80868ac:	687b      	ldr	r3, [r7, #4]
 80868ae:	681b      	ldr	r3, [r3, #0]
 80868b0:	685b      	ldr	r3, [r3, #4]
 80868b2:	4a64      	ldr	r2, [pc, #400]	; (8086a44 <tcp_input+0x298>)
 80868b4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80868b6:	687b      	ldr	r3, [r7, #4]
 80868b8:	681b      	ldr	r3, [r3, #0]
 80868ba:	8a3a      	ldrh	r2, [r7, #16]
 80868bc:	4611      	mov	r1, r2
 80868be:	4618      	mov	r0, r3
 80868c0:	f7fe f8c6 	bl	8084a50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80868c4:	687b      	ldr	r3, [r7, #4]
 80868c6:	891a      	ldrh	r2, [r3, #8]
 80868c8:	8a3b      	ldrh	r3, [r7, #16]
 80868ca:	1ad3      	subs	r3, r2, r3
 80868cc:	b29a      	uxth	r2, r3
 80868ce:	687b      	ldr	r3, [r7, #4]
 80868d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80868d2:	687b      	ldr	r3, [r7, #4]
 80868d4:	895b      	ldrh	r3, [r3, #10]
 80868d6:	2b00      	cmp	r3, #0
 80868d8:	d005      	beq.n	80868e6 <tcp_input+0x13a>
 80868da:	4b54      	ldr	r3, [pc, #336]	; (8086a2c <tcp_input+0x280>)
 80868dc:	22df      	movs	r2, #223	; 0xdf
 80868de:	495c      	ldr	r1, [pc, #368]	; (8086a50 <tcp_input+0x2a4>)
 80868e0:	4854      	ldr	r0, [pc, #336]	; (8086a34 <tcp_input+0x288>)
 80868e2:	f006 faf7 	bl	808ced4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80868e6:	687b      	ldr	r3, [r7, #4]
 80868e8:	891a      	ldrh	r2, [r3, #8]
 80868ea:	687b      	ldr	r3, [r7, #4]
 80868ec:	681b      	ldr	r3, [r3, #0]
 80868ee:	891b      	ldrh	r3, [r3, #8]
 80868f0:	429a      	cmp	r2, r3
 80868f2:	d005      	beq.n	8086900 <tcp_input+0x154>
 80868f4:	4b4d      	ldr	r3, [pc, #308]	; (8086a2c <tcp_input+0x280>)
 80868f6:	22e0      	movs	r2, #224	; 0xe0
 80868f8:	4956      	ldr	r1, [pc, #344]	; (8086a54 <tcp_input+0x2a8>)
 80868fa:	484e      	ldr	r0, [pc, #312]	; (8086a34 <tcp_input+0x288>)
 80868fc:	f006 faea 	bl	808ced4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8086900:	4b4d      	ldr	r3, [pc, #308]	; (8086a38 <tcp_input+0x28c>)
 8086902:	681b      	ldr	r3, [r3, #0]
 8086904:	881b      	ldrh	r3, [r3, #0]
 8086906:	b29b      	uxth	r3, r3
 8086908:	4a4b      	ldr	r2, [pc, #300]	; (8086a38 <tcp_input+0x28c>)
 808690a:	6814      	ldr	r4, [r2, #0]
 808690c:	4618      	mov	r0, r3
 808690e:	f7fc fde7 	bl	80834e0 <lwip_htons>
 8086912:	4603      	mov	r3, r0
 8086914:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8086916:	4b48      	ldr	r3, [pc, #288]	; (8086a38 <tcp_input+0x28c>)
 8086918:	681b      	ldr	r3, [r3, #0]
 808691a:	885b      	ldrh	r3, [r3, #2]
 808691c:	b29b      	uxth	r3, r3
 808691e:	4a46      	ldr	r2, [pc, #280]	; (8086a38 <tcp_input+0x28c>)
 8086920:	6814      	ldr	r4, [r2, #0]
 8086922:	4618      	mov	r0, r3
 8086924:	f7fc fddc 	bl	80834e0 <lwip_htons>
 8086928:	4603      	mov	r3, r0
 808692a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 808692c:	4b42      	ldr	r3, [pc, #264]	; (8086a38 <tcp_input+0x28c>)
 808692e:	681b      	ldr	r3, [r3, #0]
 8086930:	685b      	ldr	r3, [r3, #4]
 8086932:	4a41      	ldr	r2, [pc, #260]	; (8086a38 <tcp_input+0x28c>)
 8086934:	6814      	ldr	r4, [r2, #0]
 8086936:	4618      	mov	r0, r3
 8086938:	f7fc fde7 	bl	808350a <lwip_htonl>
 808693c:	4603      	mov	r3, r0
 808693e:	6063      	str	r3, [r4, #4]
 8086940:	6863      	ldr	r3, [r4, #4]
 8086942:	4a45      	ldr	r2, [pc, #276]	; (8086a58 <tcp_input+0x2ac>)
 8086944:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8086946:	4b3c      	ldr	r3, [pc, #240]	; (8086a38 <tcp_input+0x28c>)
 8086948:	681b      	ldr	r3, [r3, #0]
 808694a:	689b      	ldr	r3, [r3, #8]
 808694c:	4a3a      	ldr	r2, [pc, #232]	; (8086a38 <tcp_input+0x28c>)
 808694e:	6814      	ldr	r4, [r2, #0]
 8086950:	4618      	mov	r0, r3
 8086952:	f7fc fdda 	bl	808350a <lwip_htonl>
 8086956:	4603      	mov	r3, r0
 8086958:	60a3      	str	r3, [r4, #8]
 808695a:	68a3      	ldr	r3, [r4, #8]
 808695c:	4a3f      	ldr	r2, [pc, #252]	; (8086a5c <tcp_input+0x2b0>)
 808695e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8086960:	4b35      	ldr	r3, [pc, #212]	; (8086a38 <tcp_input+0x28c>)
 8086962:	681b      	ldr	r3, [r3, #0]
 8086964:	89db      	ldrh	r3, [r3, #14]
 8086966:	b29b      	uxth	r3, r3
 8086968:	4a33      	ldr	r2, [pc, #204]	; (8086a38 <tcp_input+0x28c>)
 808696a:	6814      	ldr	r4, [r2, #0]
 808696c:	4618      	mov	r0, r3
 808696e:	f7fc fdb7 	bl	80834e0 <lwip_htons>
 8086972:	4603      	mov	r3, r0
 8086974:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8086976:	4b30      	ldr	r3, [pc, #192]	; (8086a38 <tcp_input+0x28c>)
 8086978:	681b      	ldr	r3, [r3, #0]
 808697a:	899b      	ldrh	r3, [r3, #12]
 808697c:	b29b      	uxth	r3, r3
 808697e:	4618      	mov	r0, r3
 8086980:	f7fc fdae 	bl	80834e0 <lwip_htons>
 8086984:	4603      	mov	r3, r0
 8086986:	b2db      	uxtb	r3, r3
 8086988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808698c:	b2da      	uxtb	r2, r3
 808698e:	4b34      	ldr	r3, [pc, #208]	; (8086a60 <tcp_input+0x2b4>)
 8086990:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8086992:	687b      	ldr	r3, [r7, #4]
 8086994:	891a      	ldrh	r2, [r3, #8]
 8086996:	4b33      	ldr	r3, [pc, #204]	; (8086a64 <tcp_input+0x2b8>)
 8086998:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 808699a:	4b31      	ldr	r3, [pc, #196]	; (8086a60 <tcp_input+0x2b4>)
 808699c:	781b      	ldrb	r3, [r3, #0]
 808699e:	f003 0303 	and.w	r3, r3, #3
 80869a2:	2b00      	cmp	r3, #0
 80869a4:	d00c      	beq.n	80869c0 <tcp_input+0x214>
    tcplen++;
 80869a6:	4b2f      	ldr	r3, [pc, #188]	; (8086a64 <tcp_input+0x2b8>)
 80869a8:	881b      	ldrh	r3, [r3, #0]
 80869aa:	3301      	adds	r3, #1
 80869ac:	b29a      	uxth	r2, r3
 80869ae:	4b2d      	ldr	r3, [pc, #180]	; (8086a64 <tcp_input+0x2b8>)
 80869b0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80869b2:	687b      	ldr	r3, [r7, #4]
 80869b4:	891a      	ldrh	r2, [r3, #8]
 80869b6:	4b2b      	ldr	r3, [pc, #172]	; (8086a64 <tcp_input+0x2b8>)
 80869b8:	881b      	ldrh	r3, [r3, #0]
 80869ba:	429a      	cmp	r2, r3
 80869bc:	f200 82e6 	bhi.w	8086f8c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80869c0:	2300      	movs	r3, #0
 80869c2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80869c4:	4b28      	ldr	r3, [pc, #160]	; (8086a68 <tcp_input+0x2bc>)
 80869c6:	681b      	ldr	r3, [r3, #0]
 80869c8:	61fb      	str	r3, [r7, #28]
 80869ca:	e09d      	b.n	8086b08 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80869cc:	69fb      	ldr	r3, [r7, #28]
 80869ce:	7d1b      	ldrb	r3, [r3, #20]
 80869d0:	2b00      	cmp	r3, #0
 80869d2:	d105      	bne.n	80869e0 <tcp_input+0x234>
 80869d4:	4b15      	ldr	r3, [pc, #84]	; (8086a2c <tcp_input+0x280>)
 80869d6:	22fb      	movs	r2, #251	; 0xfb
 80869d8:	4924      	ldr	r1, [pc, #144]	; (8086a6c <tcp_input+0x2c0>)
 80869da:	4816      	ldr	r0, [pc, #88]	; (8086a34 <tcp_input+0x288>)
 80869dc:	f006 fa7a 	bl	808ced4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80869e0:	69fb      	ldr	r3, [r7, #28]
 80869e2:	7d1b      	ldrb	r3, [r3, #20]
 80869e4:	2b0a      	cmp	r3, #10
 80869e6:	d105      	bne.n	80869f4 <tcp_input+0x248>
 80869e8:	4b10      	ldr	r3, [pc, #64]	; (8086a2c <tcp_input+0x280>)
 80869ea:	22fc      	movs	r2, #252	; 0xfc
 80869ec:	4920      	ldr	r1, [pc, #128]	; (8086a70 <tcp_input+0x2c4>)
 80869ee:	4811      	ldr	r0, [pc, #68]	; (8086a34 <tcp_input+0x288>)
 80869f0:	f006 fa70 	bl	808ced4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80869f4:	69fb      	ldr	r3, [r7, #28]
 80869f6:	7d1b      	ldrb	r3, [r3, #20]
 80869f8:	2b01      	cmp	r3, #1
 80869fa:	d105      	bne.n	8086a08 <tcp_input+0x25c>
 80869fc:	4b0b      	ldr	r3, [pc, #44]	; (8086a2c <tcp_input+0x280>)
 80869fe:	22fd      	movs	r2, #253	; 0xfd
 8086a00:	491c      	ldr	r1, [pc, #112]	; (8086a74 <tcp_input+0x2c8>)
 8086a02:	480c      	ldr	r0, [pc, #48]	; (8086a34 <tcp_input+0x288>)
 8086a04:	f006 fa66 	bl	808ced4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8086a08:	69fb      	ldr	r3, [r7, #28]
 8086a0a:	7a1b      	ldrb	r3, [r3, #8]
 8086a0c:	2b00      	cmp	r3, #0
 8086a0e:	d033      	beq.n	8086a78 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8086a10:	69fb      	ldr	r3, [r7, #28]
 8086a12:	7a1a      	ldrb	r2, [r3, #8]
 8086a14:	4b09      	ldr	r3, [pc, #36]	; (8086a3c <tcp_input+0x290>)
 8086a16:	685b      	ldr	r3, [r3, #4]
 8086a18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8086a1c:	3301      	adds	r3, #1
 8086a1e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8086a20:	429a      	cmp	r2, r3
 8086a22:	d029      	beq.n	8086a78 <tcp_input+0x2cc>
      prev = pcb;
 8086a24:	69fb      	ldr	r3, [r7, #28]
 8086a26:	61bb      	str	r3, [r7, #24]
      continue;
 8086a28:	e06b      	b.n	8086b02 <tcp_input+0x356>
 8086a2a:	bf00      	nop
 8086a2c:	0808f1c0 	.word	0x0808f1c0
 8086a30:	0808f1f4 	.word	0x0808f1f4
 8086a34:	0808f20c 	.word	0x0808f20c
 8086a38:	2000825c 	.word	0x2000825c
 8086a3c:	20004cc4 	.word	0x20004cc4
 8086a40:	20008260 	.word	0x20008260
 8086a44:	20008264 	.word	0x20008264
 8086a48:	20008262 	.word	0x20008262
 8086a4c:	0808f234 	.word	0x0808f234
 8086a50:	0808f244 	.word	0x0808f244
 8086a54:	0808f250 	.word	0x0808f250
 8086a58:	2000826c 	.word	0x2000826c
 8086a5c:	20008270 	.word	0x20008270
 8086a60:	20008278 	.word	0x20008278
 8086a64:	20008276 	.word	0x20008276
 8086a68:	20008240 	.word	0x20008240
 8086a6c:	0808f270 	.word	0x0808f270
 8086a70:	0808f298 	.word	0x0808f298
 8086a74:	0808f2c4 	.word	0x0808f2c4
    }

    if (pcb->remote_port == tcphdr->src &&
 8086a78:	69fb      	ldr	r3, [r7, #28]
 8086a7a:	8b1a      	ldrh	r2, [r3, #24]
 8086a7c:	4b72      	ldr	r3, [pc, #456]	; (8086c48 <tcp_input+0x49c>)
 8086a7e:	681b      	ldr	r3, [r3, #0]
 8086a80:	881b      	ldrh	r3, [r3, #0]
 8086a82:	b29b      	uxth	r3, r3
 8086a84:	429a      	cmp	r2, r3
 8086a86:	d13a      	bne.n	8086afe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8086a88:	69fb      	ldr	r3, [r7, #28]
 8086a8a:	8ada      	ldrh	r2, [r3, #22]
 8086a8c:	4b6e      	ldr	r3, [pc, #440]	; (8086c48 <tcp_input+0x49c>)
 8086a8e:	681b      	ldr	r3, [r3, #0]
 8086a90:	885b      	ldrh	r3, [r3, #2]
 8086a92:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8086a94:	429a      	cmp	r2, r3
 8086a96:	d132      	bne.n	8086afe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8086a98:	69fb      	ldr	r3, [r7, #28]
 8086a9a:	685a      	ldr	r2, [r3, #4]
 8086a9c:	4b6b      	ldr	r3, [pc, #428]	; (8086c4c <tcp_input+0x4a0>)
 8086a9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8086aa0:	429a      	cmp	r2, r3
 8086aa2:	d12c      	bne.n	8086afe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8086aa4:	69fb      	ldr	r3, [r7, #28]
 8086aa6:	681a      	ldr	r2, [r3, #0]
 8086aa8:	4b68      	ldr	r3, [pc, #416]	; (8086c4c <tcp_input+0x4a0>)
 8086aaa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8086aac:	429a      	cmp	r2, r3
 8086aae:	d126      	bne.n	8086afe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8086ab0:	69fb      	ldr	r3, [r7, #28]
 8086ab2:	68db      	ldr	r3, [r3, #12]
 8086ab4:	69fa      	ldr	r2, [r7, #28]
 8086ab6:	429a      	cmp	r2, r3
 8086ab8:	d106      	bne.n	8086ac8 <tcp_input+0x31c>
 8086aba:	4b65      	ldr	r3, [pc, #404]	; (8086c50 <tcp_input+0x4a4>)
 8086abc:	f240 120d 	movw	r2, #269	; 0x10d
 8086ac0:	4964      	ldr	r1, [pc, #400]	; (8086c54 <tcp_input+0x4a8>)
 8086ac2:	4865      	ldr	r0, [pc, #404]	; (8086c58 <tcp_input+0x4ac>)
 8086ac4:	f006 fa06 	bl	808ced4 <iprintf>
      if (prev != NULL) {
 8086ac8:	69bb      	ldr	r3, [r7, #24]
 8086aca:	2b00      	cmp	r3, #0
 8086acc:	d00a      	beq.n	8086ae4 <tcp_input+0x338>
        prev->next = pcb->next;
 8086ace:	69fb      	ldr	r3, [r7, #28]
 8086ad0:	68da      	ldr	r2, [r3, #12]
 8086ad2:	69bb      	ldr	r3, [r7, #24]
 8086ad4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8086ad6:	4b61      	ldr	r3, [pc, #388]	; (8086c5c <tcp_input+0x4b0>)
 8086ad8:	681a      	ldr	r2, [r3, #0]
 8086ada:	69fb      	ldr	r3, [r7, #28]
 8086adc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8086ade:	4a5f      	ldr	r2, [pc, #380]	; (8086c5c <tcp_input+0x4b0>)
 8086ae0:	69fb      	ldr	r3, [r7, #28]
 8086ae2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8086ae4:	69fb      	ldr	r3, [r7, #28]
 8086ae6:	68db      	ldr	r3, [r3, #12]
 8086ae8:	69fa      	ldr	r2, [r7, #28]
 8086aea:	429a      	cmp	r2, r3
 8086aec:	d111      	bne.n	8086b12 <tcp_input+0x366>
 8086aee:	4b58      	ldr	r3, [pc, #352]	; (8086c50 <tcp_input+0x4a4>)
 8086af0:	f240 1215 	movw	r2, #277	; 0x115
 8086af4:	495a      	ldr	r1, [pc, #360]	; (8086c60 <tcp_input+0x4b4>)
 8086af6:	4858      	ldr	r0, [pc, #352]	; (8086c58 <tcp_input+0x4ac>)
 8086af8:	f006 f9ec 	bl	808ced4 <iprintf>
      break;
 8086afc:	e009      	b.n	8086b12 <tcp_input+0x366>
    }
    prev = pcb;
 8086afe:	69fb      	ldr	r3, [r7, #28]
 8086b00:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8086b02:	69fb      	ldr	r3, [r7, #28]
 8086b04:	68db      	ldr	r3, [r3, #12]
 8086b06:	61fb      	str	r3, [r7, #28]
 8086b08:	69fb      	ldr	r3, [r7, #28]
 8086b0a:	2b00      	cmp	r3, #0
 8086b0c:	f47f af5e 	bne.w	80869cc <tcp_input+0x220>
 8086b10:	e000      	b.n	8086b14 <tcp_input+0x368>
      break;
 8086b12:	bf00      	nop
  }

  if (pcb == NULL) {
 8086b14:	69fb      	ldr	r3, [r7, #28]
 8086b16:	2b00      	cmp	r3, #0
 8086b18:	f040 80aa 	bne.w	8086c70 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8086b1c:	4b51      	ldr	r3, [pc, #324]	; (8086c64 <tcp_input+0x4b8>)
 8086b1e:	681b      	ldr	r3, [r3, #0]
 8086b20:	61fb      	str	r3, [r7, #28]
 8086b22:	e03f      	b.n	8086ba4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8086b24:	69fb      	ldr	r3, [r7, #28]
 8086b26:	7d1b      	ldrb	r3, [r3, #20]
 8086b28:	2b0a      	cmp	r3, #10
 8086b2a:	d006      	beq.n	8086b3a <tcp_input+0x38e>
 8086b2c:	4b48      	ldr	r3, [pc, #288]	; (8086c50 <tcp_input+0x4a4>)
 8086b2e:	f240 121f 	movw	r2, #287	; 0x11f
 8086b32:	494d      	ldr	r1, [pc, #308]	; (8086c68 <tcp_input+0x4bc>)
 8086b34:	4848      	ldr	r0, [pc, #288]	; (8086c58 <tcp_input+0x4ac>)
 8086b36:	f006 f9cd 	bl	808ced4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8086b3a:	69fb      	ldr	r3, [r7, #28]
 8086b3c:	7a1b      	ldrb	r3, [r3, #8]
 8086b3e:	2b00      	cmp	r3, #0
 8086b40:	d009      	beq.n	8086b56 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8086b42:	69fb      	ldr	r3, [r7, #28]
 8086b44:	7a1a      	ldrb	r2, [r3, #8]
 8086b46:	4b41      	ldr	r3, [pc, #260]	; (8086c4c <tcp_input+0x4a0>)
 8086b48:	685b      	ldr	r3, [r3, #4]
 8086b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8086b4e:	3301      	adds	r3, #1
 8086b50:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8086b52:	429a      	cmp	r2, r3
 8086b54:	d122      	bne.n	8086b9c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8086b56:	69fb      	ldr	r3, [r7, #28]
 8086b58:	8b1a      	ldrh	r2, [r3, #24]
 8086b5a:	4b3b      	ldr	r3, [pc, #236]	; (8086c48 <tcp_input+0x49c>)
 8086b5c:	681b      	ldr	r3, [r3, #0]
 8086b5e:	881b      	ldrh	r3, [r3, #0]
 8086b60:	b29b      	uxth	r3, r3
 8086b62:	429a      	cmp	r2, r3
 8086b64:	d11b      	bne.n	8086b9e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8086b66:	69fb      	ldr	r3, [r7, #28]
 8086b68:	8ada      	ldrh	r2, [r3, #22]
 8086b6a:	4b37      	ldr	r3, [pc, #220]	; (8086c48 <tcp_input+0x49c>)
 8086b6c:	681b      	ldr	r3, [r3, #0]
 8086b6e:	885b      	ldrh	r3, [r3, #2]
 8086b70:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8086b72:	429a      	cmp	r2, r3
 8086b74:	d113      	bne.n	8086b9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8086b76:	69fb      	ldr	r3, [r7, #28]
 8086b78:	685a      	ldr	r2, [r3, #4]
 8086b7a:	4b34      	ldr	r3, [pc, #208]	; (8086c4c <tcp_input+0x4a0>)
 8086b7c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8086b7e:	429a      	cmp	r2, r3
 8086b80:	d10d      	bne.n	8086b9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8086b82:	69fb      	ldr	r3, [r7, #28]
 8086b84:	681a      	ldr	r2, [r3, #0]
 8086b86:	4b31      	ldr	r3, [pc, #196]	; (8086c4c <tcp_input+0x4a0>)
 8086b88:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8086b8a:	429a      	cmp	r2, r3
 8086b8c:	d107      	bne.n	8086b9e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8086b8e:	69f8      	ldr	r0, [r7, #28]
 8086b90:	f000 fb56 	bl	8087240 <tcp_timewait_input>
        }
        pbuf_free(p);
 8086b94:	6878      	ldr	r0, [r7, #4]
 8086b96:	f7fd ffe1 	bl	8084b5c <pbuf_free>
        return;
 8086b9a:	e1fd      	b.n	8086f98 <tcp_input+0x7ec>
        continue;
 8086b9c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8086b9e:	69fb      	ldr	r3, [r7, #28]
 8086ba0:	68db      	ldr	r3, [r3, #12]
 8086ba2:	61fb      	str	r3, [r7, #28]
 8086ba4:	69fb      	ldr	r3, [r7, #28]
 8086ba6:	2b00      	cmp	r3, #0
 8086ba8:	d1bc      	bne.n	8086b24 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8086baa:	2300      	movs	r3, #0
 8086bac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8086bae:	4b2f      	ldr	r3, [pc, #188]	; (8086c6c <tcp_input+0x4c0>)
 8086bb0:	681b      	ldr	r3, [r3, #0]
 8086bb2:	617b      	str	r3, [r7, #20]
 8086bb4:	e02a      	b.n	8086c0c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8086bb6:	697b      	ldr	r3, [r7, #20]
 8086bb8:	7a1b      	ldrb	r3, [r3, #8]
 8086bba:	2b00      	cmp	r3, #0
 8086bbc:	d00c      	beq.n	8086bd8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8086bbe:	697b      	ldr	r3, [r7, #20]
 8086bc0:	7a1a      	ldrb	r2, [r3, #8]
 8086bc2:	4b22      	ldr	r3, [pc, #136]	; (8086c4c <tcp_input+0x4a0>)
 8086bc4:	685b      	ldr	r3, [r3, #4]
 8086bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8086bca:	3301      	adds	r3, #1
 8086bcc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8086bce:	429a      	cmp	r2, r3
 8086bd0:	d002      	beq.n	8086bd8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8086bd2:	697b      	ldr	r3, [r7, #20]
 8086bd4:	61bb      	str	r3, [r7, #24]
        continue;
 8086bd6:	e016      	b.n	8086c06 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8086bd8:	697b      	ldr	r3, [r7, #20]
 8086bda:	8ada      	ldrh	r2, [r3, #22]
 8086bdc:	4b1a      	ldr	r3, [pc, #104]	; (8086c48 <tcp_input+0x49c>)
 8086bde:	681b      	ldr	r3, [r3, #0]
 8086be0:	885b      	ldrh	r3, [r3, #2]
 8086be2:	b29b      	uxth	r3, r3
 8086be4:	429a      	cmp	r2, r3
 8086be6:	d10c      	bne.n	8086c02 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8086be8:	697b      	ldr	r3, [r7, #20]
 8086bea:	681a      	ldr	r2, [r3, #0]
 8086bec:	4b17      	ldr	r3, [pc, #92]	; (8086c4c <tcp_input+0x4a0>)
 8086bee:	695b      	ldr	r3, [r3, #20]
 8086bf0:	429a      	cmp	r2, r3
 8086bf2:	d00f      	beq.n	8086c14 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8086bf4:	697b      	ldr	r3, [r7, #20]
 8086bf6:	2b00      	cmp	r3, #0
 8086bf8:	d00d      	beq.n	8086c16 <tcp_input+0x46a>
 8086bfa:	697b      	ldr	r3, [r7, #20]
 8086bfc:	681b      	ldr	r3, [r3, #0]
 8086bfe:	2b00      	cmp	r3, #0
 8086c00:	d009      	beq.n	8086c16 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8086c02:	697b      	ldr	r3, [r7, #20]
 8086c04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8086c06:	697b      	ldr	r3, [r7, #20]
 8086c08:	68db      	ldr	r3, [r3, #12]
 8086c0a:	617b      	str	r3, [r7, #20]
 8086c0c:	697b      	ldr	r3, [r7, #20]
 8086c0e:	2b00      	cmp	r3, #0
 8086c10:	d1d1      	bne.n	8086bb6 <tcp_input+0x40a>
 8086c12:	e000      	b.n	8086c16 <tcp_input+0x46a>
            break;
 8086c14:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8086c16:	697b      	ldr	r3, [r7, #20]
 8086c18:	2b00      	cmp	r3, #0
 8086c1a:	d029      	beq.n	8086c70 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8086c1c:	69bb      	ldr	r3, [r7, #24]
 8086c1e:	2b00      	cmp	r3, #0
 8086c20:	d00a      	beq.n	8086c38 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8086c22:	697b      	ldr	r3, [r7, #20]
 8086c24:	68da      	ldr	r2, [r3, #12]
 8086c26:	69bb      	ldr	r3, [r7, #24]
 8086c28:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8086c2a:	4b10      	ldr	r3, [pc, #64]	; (8086c6c <tcp_input+0x4c0>)
 8086c2c:	681a      	ldr	r2, [r3, #0]
 8086c2e:	697b      	ldr	r3, [r7, #20]
 8086c30:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8086c32:	4a0e      	ldr	r2, [pc, #56]	; (8086c6c <tcp_input+0x4c0>)
 8086c34:	697b      	ldr	r3, [r7, #20]
 8086c36:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8086c38:	6978      	ldr	r0, [r7, #20]
 8086c3a:	f000 fa03 	bl	8087044 <tcp_listen_input>
      }
      pbuf_free(p);
 8086c3e:	6878      	ldr	r0, [r7, #4]
 8086c40:	f7fd ff8c 	bl	8084b5c <pbuf_free>
      return;
 8086c44:	e1a8      	b.n	8086f98 <tcp_input+0x7ec>
 8086c46:	bf00      	nop
 8086c48:	2000825c 	.word	0x2000825c
 8086c4c:	20004cc4 	.word	0x20004cc4
 8086c50:	0808f1c0 	.word	0x0808f1c0
 8086c54:	0808f2ec 	.word	0x0808f2ec
 8086c58:	0808f20c 	.word	0x0808f20c
 8086c5c:	20008240 	.word	0x20008240
 8086c60:	0808f318 	.word	0x0808f318
 8086c64:	20008244 	.word	0x20008244
 8086c68:	0808f344 	.word	0x0808f344
 8086c6c:	2000823c 	.word	0x2000823c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8086c70:	69fb      	ldr	r3, [r7, #28]
 8086c72:	2b00      	cmp	r3, #0
 8086c74:	f000 8158 	beq.w	8086f28 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8086c78:	4b95      	ldr	r3, [pc, #596]	; (8086ed0 <tcp_input+0x724>)
 8086c7a:	2200      	movs	r2, #0
 8086c7c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8086c7e:	687b      	ldr	r3, [r7, #4]
 8086c80:	891a      	ldrh	r2, [r3, #8]
 8086c82:	4b93      	ldr	r3, [pc, #588]	; (8086ed0 <tcp_input+0x724>)
 8086c84:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8086c86:	4a92      	ldr	r2, [pc, #584]	; (8086ed0 <tcp_input+0x724>)
 8086c88:	687b      	ldr	r3, [r7, #4]
 8086c8a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8086c8c:	4b91      	ldr	r3, [pc, #580]	; (8086ed4 <tcp_input+0x728>)
 8086c8e:	681b      	ldr	r3, [r3, #0]
 8086c90:	4a8f      	ldr	r2, [pc, #572]	; (8086ed0 <tcp_input+0x724>)
 8086c92:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8086c94:	4b90      	ldr	r3, [pc, #576]	; (8086ed8 <tcp_input+0x72c>)
 8086c96:	2200      	movs	r2, #0
 8086c98:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8086c9a:	4b90      	ldr	r3, [pc, #576]	; (8086edc <tcp_input+0x730>)
 8086c9c:	2200      	movs	r2, #0
 8086c9e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8086ca0:	4b8f      	ldr	r3, [pc, #572]	; (8086ee0 <tcp_input+0x734>)
 8086ca2:	2200      	movs	r2, #0
 8086ca4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8086ca6:	4b8f      	ldr	r3, [pc, #572]	; (8086ee4 <tcp_input+0x738>)
 8086ca8:	781b      	ldrb	r3, [r3, #0]
 8086caa:	f003 0308 	and.w	r3, r3, #8
 8086cae:	2b00      	cmp	r3, #0
 8086cb0:	d006      	beq.n	8086cc0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8086cb2:	687b      	ldr	r3, [r7, #4]
 8086cb4:	7b5b      	ldrb	r3, [r3, #13]
 8086cb6:	f043 0301 	orr.w	r3, r3, #1
 8086cba:	b2da      	uxtb	r2, r3
 8086cbc:	687b      	ldr	r3, [r7, #4]
 8086cbe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8086cc0:	69fb      	ldr	r3, [r7, #28]
 8086cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086cc4:	2b00      	cmp	r3, #0
 8086cc6:	d017      	beq.n	8086cf8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8086cc8:	69f8      	ldr	r0, [r7, #28]
 8086cca:	f7ff f929 	bl	8085f20 <tcp_process_refused_data>
 8086cce:	4603      	mov	r3, r0
 8086cd0:	f113 0f0d 	cmn.w	r3, #13
 8086cd4:	d007      	beq.n	8086ce6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8086cd6:	69fb      	ldr	r3, [r7, #28]
 8086cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8086cda:	2b00      	cmp	r3, #0
 8086cdc:	d00c      	beq.n	8086cf8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8086cde:	4b82      	ldr	r3, [pc, #520]	; (8086ee8 <tcp_input+0x73c>)
 8086ce0:	881b      	ldrh	r3, [r3, #0]
 8086ce2:	2b00      	cmp	r3, #0
 8086ce4:	d008      	beq.n	8086cf8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8086ce6:	69fb      	ldr	r3, [r7, #28]
 8086ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8086cea:	2b00      	cmp	r3, #0
 8086cec:	f040 80e3 	bne.w	8086eb6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8086cf0:	69f8      	ldr	r0, [r7, #28]
 8086cf2:	f003 f9ad 	bl	808a050 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8086cf6:	e0de      	b.n	8086eb6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8086cf8:	4a7c      	ldr	r2, [pc, #496]	; (8086eec <tcp_input+0x740>)
 8086cfa:	69fb      	ldr	r3, [r7, #28]
 8086cfc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8086cfe:	69f8      	ldr	r0, [r7, #28]
 8086d00:	f000 fb18 	bl	8087334 <tcp_process>
 8086d04:	4603      	mov	r3, r0
 8086d06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8086d08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8086d0c:	f113 0f0d 	cmn.w	r3, #13
 8086d10:	f000 80d3 	beq.w	8086eba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8086d14:	4b71      	ldr	r3, [pc, #452]	; (8086edc <tcp_input+0x730>)
 8086d16:	781b      	ldrb	r3, [r3, #0]
 8086d18:	f003 0308 	and.w	r3, r3, #8
 8086d1c:	2b00      	cmp	r3, #0
 8086d1e:	d015      	beq.n	8086d4c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8086d20:	69fb      	ldr	r3, [r7, #28]
 8086d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8086d26:	2b00      	cmp	r3, #0
 8086d28:	d008      	beq.n	8086d3c <tcp_input+0x590>
 8086d2a:	69fb      	ldr	r3, [r7, #28]
 8086d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8086d30:	69fa      	ldr	r2, [r7, #28]
 8086d32:	6912      	ldr	r2, [r2, #16]
 8086d34:	f06f 010d 	mvn.w	r1, #13
 8086d38:	4610      	mov	r0, r2
 8086d3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8086d3c:	69f9      	ldr	r1, [r7, #28]
 8086d3e:	486c      	ldr	r0, [pc, #432]	; (8086ef0 <tcp_input+0x744>)
 8086d40:	f7ff fbbc 	bl	80864bc <tcp_pcb_remove>
        tcp_free(pcb);
 8086d44:	69f8      	ldr	r0, [r7, #28]
 8086d46:	f7fe f9a9 	bl	808509c <tcp_free>
 8086d4a:	e0da      	b.n	8086f02 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8086d4c:	2300      	movs	r3, #0
 8086d4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8086d50:	4b63      	ldr	r3, [pc, #396]	; (8086ee0 <tcp_input+0x734>)
 8086d52:	881b      	ldrh	r3, [r3, #0]
 8086d54:	2b00      	cmp	r3, #0
 8086d56:	d01d      	beq.n	8086d94 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8086d58:	4b61      	ldr	r3, [pc, #388]	; (8086ee0 <tcp_input+0x734>)
 8086d5a:	881b      	ldrh	r3, [r3, #0]
 8086d5c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8086d5e:	69fb      	ldr	r3, [r7, #28]
 8086d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8086d64:	2b00      	cmp	r3, #0
 8086d66:	d00a      	beq.n	8086d7e <tcp_input+0x5d2>
 8086d68:	69fb      	ldr	r3, [r7, #28]
 8086d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8086d6e:	69fa      	ldr	r2, [r7, #28]
 8086d70:	6910      	ldr	r0, [r2, #16]
 8086d72:	89fa      	ldrh	r2, [r7, #14]
 8086d74:	69f9      	ldr	r1, [r7, #28]
 8086d76:	4798      	blx	r3
 8086d78:	4603      	mov	r3, r0
 8086d7a:	74fb      	strb	r3, [r7, #19]
 8086d7c:	e001      	b.n	8086d82 <tcp_input+0x5d6>
 8086d7e:	2300      	movs	r3, #0
 8086d80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8086d82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8086d86:	f113 0f0d 	cmn.w	r3, #13
 8086d8a:	f000 8098 	beq.w	8086ebe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8086d8e:	4b54      	ldr	r3, [pc, #336]	; (8086ee0 <tcp_input+0x734>)
 8086d90:	2200      	movs	r2, #0
 8086d92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8086d94:	69f8      	ldr	r0, [r7, #28]
 8086d96:	f000 f915 	bl	8086fc4 <tcp_input_delayed_close>
 8086d9a:	4603      	mov	r3, r0
 8086d9c:	2b00      	cmp	r3, #0
 8086d9e:	f040 8090 	bne.w	8086ec2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8086da2:	4b4d      	ldr	r3, [pc, #308]	; (8086ed8 <tcp_input+0x72c>)
 8086da4:	681b      	ldr	r3, [r3, #0]
 8086da6:	2b00      	cmp	r3, #0
 8086da8:	d041      	beq.n	8086e2e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8086daa:	69fb      	ldr	r3, [r7, #28]
 8086dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086dae:	2b00      	cmp	r3, #0
 8086db0:	d006      	beq.n	8086dc0 <tcp_input+0x614>
 8086db2:	4b50      	ldr	r3, [pc, #320]	; (8086ef4 <tcp_input+0x748>)
 8086db4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8086db8:	494f      	ldr	r1, [pc, #316]	; (8086ef8 <tcp_input+0x74c>)
 8086dba:	4850      	ldr	r0, [pc, #320]	; (8086efc <tcp_input+0x750>)
 8086dbc:	f006 f88a 	bl	808ced4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8086dc0:	69fb      	ldr	r3, [r7, #28]
 8086dc2:	8b5b      	ldrh	r3, [r3, #26]
 8086dc4:	f003 0310 	and.w	r3, r3, #16
 8086dc8:	2b00      	cmp	r3, #0
 8086dca:	d008      	beq.n	8086dde <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8086dcc:	4b42      	ldr	r3, [pc, #264]	; (8086ed8 <tcp_input+0x72c>)
 8086dce:	681b      	ldr	r3, [r3, #0]
 8086dd0:	4618      	mov	r0, r3
 8086dd2:	f7fd fec3 	bl	8084b5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8086dd6:	69f8      	ldr	r0, [r7, #28]
 8086dd8:	f7fe fc48 	bl	808566c <tcp_abort>
            goto aborted;
 8086ddc:	e091      	b.n	8086f02 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8086dde:	69fb      	ldr	r3, [r7, #28]
 8086de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8086de4:	2b00      	cmp	r3, #0
 8086de6:	d00c      	beq.n	8086e02 <tcp_input+0x656>
 8086de8:	69fb      	ldr	r3, [r7, #28]
 8086dea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8086dee:	69fb      	ldr	r3, [r7, #28]
 8086df0:	6918      	ldr	r0, [r3, #16]
 8086df2:	4b39      	ldr	r3, [pc, #228]	; (8086ed8 <tcp_input+0x72c>)
 8086df4:	681a      	ldr	r2, [r3, #0]
 8086df6:	2300      	movs	r3, #0
 8086df8:	69f9      	ldr	r1, [r7, #28]
 8086dfa:	47a0      	blx	r4
 8086dfc:	4603      	mov	r3, r0
 8086dfe:	74fb      	strb	r3, [r7, #19]
 8086e00:	e008      	b.n	8086e14 <tcp_input+0x668>
 8086e02:	4b35      	ldr	r3, [pc, #212]	; (8086ed8 <tcp_input+0x72c>)
 8086e04:	681a      	ldr	r2, [r3, #0]
 8086e06:	2300      	movs	r3, #0
 8086e08:	69f9      	ldr	r1, [r7, #28]
 8086e0a:	2000      	movs	r0, #0
 8086e0c:	f7ff f95e 	bl	80860cc <tcp_recv_null>
 8086e10:	4603      	mov	r3, r0
 8086e12:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8086e14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8086e18:	f113 0f0d 	cmn.w	r3, #13
 8086e1c:	d053      	beq.n	8086ec6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8086e1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8086e22:	2b00      	cmp	r3, #0
 8086e24:	d003      	beq.n	8086e2e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8086e26:	4b2c      	ldr	r3, [pc, #176]	; (8086ed8 <tcp_input+0x72c>)
 8086e28:	681a      	ldr	r2, [r3, #0]
 8086e2a:	69fb      	ldr	r3, [r7, #28]
 8086e2c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8086e2e:	4b2b      	ldr	r3, [pc, #172]	; (8086edc <tcp_input+0x730>)
 8086e30:	781b      	ldrb	r3, [r3, #0]
 8086e32:	f003 0320 	and.w	r3, r3, #32
 8086e36:	2b00      	cmp	r3, #0
 8086e38:	d030      	beq.n	8086e9c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8086e3a:	69fb      	ldr	r3, [r7, #28]
 8086e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086e3e:	2b00      	cmp	r3, #0
 8086e40:	d009      	beq.n	8086e56 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8086e42:	69fb      	ldr	r3, [r7, #28]
 8086e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086e46:	7b5a      	ldrb	r2, [r3, #13]
 8086e48:	69fb      	ldr	r3, [r7, #28]
 8086e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8086e4c:	f042 0220 	orr.w	r2, r2, #32
 8086e50:	b2d2      	uxtb	r2, r2
 8086e52:	735a      	strb	r2, [r3, #13]
 8086e54:	e022      	b.n	8086e9c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8086e56:	69fb      	ldr	r3, [r7, #28]
 8086e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8086e5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8086e5e:	d005      	beq.n	8086e6c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8086e60:	69fb      	ldr	r3, [r7, #28]
 8086e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8086e64:	3301      	adds	r3, #1
 8086e66:	b29a      	uxth	r2, r3
 8086e68:	69fb      	ldr	r3, [r7, #28]
 8086e6a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8086e6c:	69fb      	ldr	r3, [r7, #28]
 8086e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8086e72:	2b00      	cmp	r3, #0
 8086e74:	d00b      	beq.n	8086e8e <tcp_input+0x6e2>
 8086e76:	69fb      	ldr	r3, [r7, #28]
 8086e78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8086e7c:	69fb      	ldr	r3, [r7, #28]
 8086e7e:	6918      	ldr	r0, [r3, #16]
 8086e80:	2300      	movs	r3, #0
 8086e82:	2200      	movs	r2, #0
 8086e84:	69f9      	ldr	r1, [r7, #28]
 8086e86:	47a0      	blx	r4
 8086e88:	4603      	mov	r3, r0
 8086e8a:	74fb      	strb	r3, [r7, #19]
 8086e8c:	e001      	b.n	8086e92 <tcp_input+0x6e6>
 8086e8e:	2300      	movs	r3, #0
 8086e90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8086e92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8086e96:	f113 0f0d 	cmn.w	r3, #13
 8086e9a:	d016      	beq.n	8086eca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8086e9c:	4b13      	ldr	r3, [pc, #76]	; (8086eec <tcp_input+0x740>)
 8086e9e:	2200      	movs	r2, #0
 8086ea0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8086ea2:	69f8      	ldr	r0, [r7, #28]
 8086ea4:	f000 f88e 	bl	8086fc4 <tcp_input_delayed_close>
 8086ea8:	4603      	mov	r3, r0
 8086eaa:	2b00      	cmp	r3, #0
 8086eac:	d128      	bne.n	8086f00 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8086eae:	69f8      	ldr	r0, [r7, #28]
 8086eb0:	f002 fac8 	bl	8089444 <tcp_output>
 8086eb4:	e025      	b.n	8086f02 <tcp_input+0x756>
        goto aborted;
 8086eb6:	bf00      	nop
 8086eb8:	e023      	b.n	8086f02 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8086eba:	bf00      	nop
 8086ebc:	e021      	b.n	8086f02 <tcp_input+0x756>
              goto aborted;
 8086ebe:	bf00      	nop
 8086ec0:	e01f      	b.n	8086f02 <tcp_input+0x756>
          goto aborted;
 8086ec2:	bf00      	nop
 8086ec4:	e01d      	b.n	8086f02 <tcp_input+0x756>
            goto aborted;
 8086ec6:	bf00      	nop
 8086ec8:	e01b      	b.n	8086f02 <tcp_input+0x756>
              goto aborted;
 8086eca:	bf00      	nop
 8086ecc:	e019      	b.n	8086f02 <tcp_input+0x756>
 8086ece:	bf00      	nop
 8086ed0:	2000824c 	.word	0x2000824c
 8086ed4:	2000825c 	.word	0x2000825c
 8086ed8:	2000827c 	.word	0x2000827c
 8086edc:	20008279 	.word	0x20008279
 8086ee0:	20008274 	.word	0x20008274
 8086ee4:	20008278 	.word	0x20008278
 8086ee8:	20008276 	.word	0x20008276
 8086eec:	20008280 	.word	0x20008280
 8086ef0:	20008240 	.word	0x20008240
 8086ef4:	0808f1c0 	.word	0x0808f1c0
 8086ef8:	0808f374 	.word	0x0808f374
 8086efc:	0808f20c 	.word	0x0808f20c
          goto aborted;
 8086f00:	bf00      	nop
    tcp_input_pcb = NULL;
 8086f02:	4b27      	ldr	r3, [pc, #156]	; (8086fa0 <tcp_input+0x7f4>)
 8086f04:	2200      	movs	r2, #0
 8086f06:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8086f08:	4b26      	ldr	r3, [pc, #152]	; (8086fa4 <tcp_input+0x7f8>)
 8086f0a:	2200      	movs	r2, #0
 8086f0c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8086f0e:	4b26      	ldr	r3, [pc, #152]	; (8086fa8 <tcp_input+0x7fc>)
 8086f10:	685b      	ldr	r3, [r3, #4]
 8086f12:	2b00      	cmp	r3, #0
 8086f14:	d03f      	beq.n	8086f96 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8086f16:	4b24      	ldr	r3, [pc, #144]	; (8086fa8 <tcp_input+0x7fc>)
 8086f18:	685b      	ldr	r3, [r3, #4]
 8086f1a:	4618      	mov	r0, r3
 8086f1c:	f7fd fe1e 	bl	8084b5c <pbuf_free>
      inseg.p = NULL;
 8086f20:	4b21      	ldr	r3, [pc, #132]	; (8086fa8 <tcp_input+0x7fc>)
 8086f22:	2200      	movs	r2, #0
 8086f24:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8086f26:	e036      	b.n	8086f96 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8086f28:	4b20      	ldr	r3, [pc, #128]	; (8086fac <tcp_input+0x800>)
 8086f2a:	681b      	ldr	r3, [r3, #0]
 8086f2c:	899b      	ldrh	r3, [r3, #12]
 8086f2e:	b29b      	uxth	r3, r3
 8086f30:	4618      	mov	r0, r3
 8086f32:	f7fc fad5 	bl	80834e0 <lwip_htons>
 8086f36:	4603      	mov	r3, r0
 8086f38:	b2db      	uxtb	r3, r3
 8086f3a:	f003 0304 	and.w	r3, r3, #4
 8086f3e:	2b00      	cmp	r3, #0
 8086f40:	d118      	bne.n	8086f74 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8086f42:	4b1b      	ldr	r3, [pc, #108]	; (8086fb0 <tcp_input+0x804>)
 8086f44:	6819      	ldr	r1, [r3, #0]
 8086f46:	4b1b      	ldr	r3, [pc, #108]	; (8086fb4 <tcp_input+0x808>)
 8086f48:	881b      	ldrh	r3, [r3, #0]
 8086f4a:	461a      	mov	r2, r3
 8086f4c:	4b1a      	ldr	r3, [pc, #104]	; (8086fb8 <tcp_input+0x80c>)
 8086f4e:	681b      	ldr	r3, [r3, #0]
 8086f50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8086f52:	4b16      	ldr	r3, [pc, #88]	; (8086fac <tcp_input+0x800>)
 8086f54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8086f56:	885b      	ldrh	r3, [r3, #2]
 8086f58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8086f5a:	4a14      	ldr	r2, [pc, #80]	; (8086fac <tcp_input+0x800>)
 8086f5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8086f5e:	8812      	ldrh	r2, [r2, #0]
 8086f60:	b292      	uxth	r2, r2
 8086f62:	9202      	str	r2, [sp, #8]
 8086f64:	9301      	str	r3, [sp, #4]
 8086f66:	4b15      	ldr	r3, [pc, #84]	; (8086fbc <tcp_input+0x810>)
 8086f68:	9300      	str	r3, [sp, #0]
 8086f6a:	4b15      	ldr	r3, [pc, #84]	; (8086fc0 <tcp_input+0x814>)
 8086f6c:	4602      	mov	r2, r0
 8086f6e:	2000      	movs	r0, #0
 8086f70:	f003 f81c 	bl	8089fac <tcp_rst>
    pbuf_free(p);
 8086f74:	6878      	ldr	r0, [r7, #4]
 8086f76:	f7fd fdf1 	bl	8084b5c <pbuf_free>
  return;
 8086f7a:	e00c      	b.n	8086f96 <tcp_input+0x7ea>
    goto dropped;
 8086f7c:	bf00      	nop
 8086f7e:	e006      	b.n	8086f8e <tcp_input+0x7e2>
    goto dropped;
 8086f80:	bf00      	nop
 8086f82:	e004      	b.n	8086f8e <tcp_input+0x7e2>
    goto dropped;
 8086f84:	bf00      	nop
 8086f86:	e002      	b.n	8086f8e <tcp_input+0x7e2>
      goto dropped;
 8086f88:	bf00      	nop
 8086f8a:	e000      	b.n	8086f8e <tcp_input+0x7e2>
      goto dropped;
 8086f8c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8086f8e:	6878      	ldr	r0, [r7, #4]
 8086f90:	f7fd fde4 	bl	8084b5c <pbuf_free>
 8086f94:	e000      	b.n	8086f98 <tcp_input+0x7ec>
  return;
 8086f96:	bf00      	nop
}
 8086f98:	3724      	adds	r7, #36	; 0x24
 8086f9a:	46bd      	mov	sp, r7
 8086f9c:	bd90      	pop	{r4, r7, pc}
 8086f9e:	bf00      	nop
 8086fa0:	20008280 	.word	0x20008280
 8086fa4:	2000827c 	.word	0x2000827c
 8086fa8:	2000824c 	.word	0x2000824c
 8086fac:	2000825c 	.word	0x2000825c
 8086fb0:	20008270 	.word	0x20008270
 8086fb4:	20008276 	.word	0x20008276
 8086fb8:	2000826c 	.word	0x2000826c
 8086fbc:	20004cd4 	.word	0x20004cd4
 8086fc0:	20004cd8 	.word	0x20004cd8

08086fc4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8086fc4:	b580      	push	{r7, lr}
 8086fc6:	b082      	sub	sp, #8
 8086fc8:	af00      	add	r7, sp, #0
 8086fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8086fcc:	687b      	ldr	r3, [r7, #4]
 8086fce:	2b00      	cmp	r3, #0
 8086fd0:	d106      	bne.n	8086fe0 <tcp_input_delayed_close+0x1c>
 8086fd2:	4b17      	ldr	r3, [pc, #92]	; (8087030 <tcp_input_delayed_close+0x6c>)
 8086fd4:	f240 225a 	movw	r2, #602	; 0x25a
 8086fd8:	4916      	ldr	r1, [pc, #88]	; (8087034 <tcp_input_delayed_close+0x70>)
 8086fda:	4817      	ldr	r0, [pc, #92]	; (8087038 <tcp_input_delayed_close+0x74>)
 8086fdc:	f005 ff7a 	bl	808ced4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8086fe0:	4b16      	ldr	r3, [pc, #88]	; (808703c <tcp_input_delayed_close+0x78>)
 8086fe2:	781b      	ldrb	r3, [r3, #0]
 8086fe4:	f003 0310 	and.w	r3, r3, #16
 8086fe8:	2b00      	cmp	r3, #0
 8086fea:	d01c      	beq.n	8087026 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8086fec:	687b      	ldr	r3, [r7, #4]
 8086fee:	8b5b      	ldrh	r3, [r3, #26]
 8086ff0:	f003 0310 	and.w	r3, r3, #16
 8086ff4:	2b00      	cmp	r3, #0
 8086ff6:	d10d      	bne.n	8087014 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8086ff8:	687b      	ldr	r3, [r7, #4]
 8086ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8086ffe:	2b00      	cmp	r3, #0
 8087000:	d008      	beq.n	8087014 <tcp_input_delayed_close+0x50>
 8087002:	687b      	ldr	r3, [r7, #4]
 8087004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8087008:	687a      	ldr	r2, [r7, #4]
 808700a:	6912      	ldr	r2, [r2, #16]
 808700c:	f06f 010e 	mvn.w	r1, #14
 8087010:	4610      	mov	r0, r2
 8087012:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8087014:	6879      	ldr	r1, [r7, #4]
 8087016:	480a      	ldr	r0, [pc, #40]	; (8087040 <tcp_input_delayed_close+0x7c>)
 8087018:	f7ff fa50 	bl	80864bc <tcp_pcb_remove>
    tcp_free(pcb);
 808701c:	6878      	ldr	r0, [r7, #4]
 808701e:	f7fe f83d 	bl	808509c <tcp_free>
    return 1;
 8087022:	2301      	movs	r3, #1
 8087024:	e000      	b.n	8087028 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8087026:	2300      	movs	r3, #0
}
 8087028:	4618      	mov	r0, r3
 808702a:	3708      	adds	r7, #8
 808702c:	46bd      	mov	sp, r7
 808702e:	bd80      	pop	{r7, pc}
 8087030:	0808f1c0 	.word	0x0808f1c0
 8087034:	0808f390 	.word	0x0808f390
 8087038:	0808f20c 	.word	0x0808f20c
 808703c:	20008279 	.word	0x20008279
 8087040:	20008240 	.word	0x20008240

08087044 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8087044:	b590      	push	{r4, r7, lr}
 8087046:	b08b      	sub	sp, #44	; 0x2c
 8087048:	af04      	add	r7, sp, #16
 808704a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 808704c:	4b6f      	ldr	r3, [pc, #444]	; (808720c <tcp_listen_input+0x1c8>)
 808704e:	781b      	ldrb	r3, [r3, #0]
 8087050:	f003 0304 	and.w	r3, r3, #4
 8087054:	2b00      	cmp	r3, #0
 8087056:	f040 80d2 	bne.w	80871fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 808705a:	687b      	ldr	r3, [r7, #4]
 808705c:	2b00      	cmp	r3, #0
 808705e:	d106      	bne.n	808706e <tcp_listen_input+0x2a>
 8087060:	4b6b      	ldr	r3, [pc, #428]	; (8087210 <tcp_listen_input+0x1cc>)
 8087062:	f240 2281 	movw	r2, #641	; 0x281
 8087066:	496b      	ldr	r1, [pc, #428]	; (8087214 <tcp_listen_input+0x1d0>)
 8087068:	486b      	ldr	r0, [pc, #428]	; (8087218 <tcp_listen_input+0x1d4>)
 808706a:	f005 ff33 	bl	808ced4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 808706e:	4b67      	ldr	r3, [pc, #412]	; (808720c <tcp_listen_input+0x1c8>)
 8087070:	781b      	ldrb	r3, [r3, #0]
 8087072:	f003 0310 	and.w	r3, r3, #16
 8087076:	2b00      	cmp	r3, #0
 8087078:	d019      	beq.n	80870ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 808707a:	4b68      	ldr	r3, [pc, #416]	; (808721c <tcp_listen_input+0x1d8>)
 808707c:	6819      	ldr	r1, [r3, #0]
 808707e:	4b68      	ldr	r3, [pc, #416]	; (8087220 <tcp_listen_input+0x1dc>)
 8087080:	881b      	ldrh	r3, [r3, #0]
 8087082:	461a      	mov	r2, r3
 8087084:	4b67      	ldr	r3, [pc, #412]	; (8087224 <tcp_listen_input+0x1e0>)
 8087086:	681b      	ldr	r3, [r3, #0]
 8087088:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 808708a:	4b67      	ldr	r3, [pc, #412]	; (8087228 <tcp_listen_input+0x1e4>)
 808708c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 808708e:	885b      	ldrh	r3, [r3, #2]
 8087090:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8087092:	4a65      	ldr	r2, [pc, #404]	; (8087228 <tcp_listen_input+0x1e4>)
 8087094:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8087096:	8812      	ldrh	r2, [r2, #0]
 8087098:	b292      	uxth	r2, r2
 808709a:	9202      	str	r2, [sp, #8]
 808709c:	9301      	str	r3, [sp, #4]
 808709e:	4b63      	ldr	r3, [pc, #396]	; (808722c <tcp_listen_input+0x1e8>)
 80870a0:	9300      	str	r3, [sp, #0]
 80870a2:	4b63      	ldr	r3, [pc, #396]	; (8087230 <tcp_listen_input+0x1ec>)
 80870a4:	4602      	mov	r2, r0
 80870a6:	6878      	ldr	r0, [r7, #4]
 80870a8:	f002 ff80 	bl	8089fac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80870ac:	e0a9      	b.n	8087202 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80870ae:	4b57      	ldr	r3, [pc, #348]	; (808720c <tcp_listen_input+0x1c8>)
 80870b0:	781b      	ldrb	r3, [r3, #0]
 80870b2:	f003 0302 	and.w	r3, r3, #2
 80870b6:	2b00      	cmp	r3, #0
 80870b8:	f000 80a3 	beq.w	8087202 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80870bc:	687b      	ldr	r3, [r7, #4]
 80870be:	7d5b      	ldrb	r3, [r3, #21]
 80870c0:	4618      	mov	r0, r3
 80870c2:	f7ff f927 	bl	8086314 <tcp_alloc>
 80870c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80870c8:	697b      	ldr	r3, [r7, #20]
 80870ca:	2b00      	cmp	r3, #0
 80870cc:	d111      	bne.n	80870f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80870ce:	687b      	ldr	r3, [r7, #4]
 80870d0:	699b      	ldr	r3, [r3, #24]
 80870d2:	2b00      	cmp	r3, #0
 80870d4:	d00a      	beq.n	80870ec <tcp_listen_input+0xa8>
 80870d6:	687b      	ldr	r3, [r7, #4]
 80870d8:	699b      	ldr	r3, [r3, #24]
 80870da:	687a      	ldr	r2, [r7, #4]
 80870dc:	6910      	ldr	r0, [r2, #16]
 80870de:	f04f 32ff 	mov.w	r2, #4294967295
 80870e2:	2100      	movs	r1, #0
 80870e4:	4798      	blx	r3
 80870e6:	4603      	mov	r3, r0
 80870e8:	73bb      	strb	r3, [r7, #14]
      return;
 80870ea:	e08b      	b.n	8087204 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80870ec:	23f0      	movs	r3, #240	; 0xf0
 80870ee:	73bb      	strb	r3, [r7, #14]
      return;
 80870f0:	e088      	b.n	8087204 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80870f2:	4b50      	ldr	r3, [pc, #320]	; (8087234 <tcp_listen_input+0x1f0>)
 80870f4:	695a      	ldr	r2, [r3, #20]
 80870f6:	697b      	ldr	r3, [r7, #20]
 80870f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80870fa:	4b4e      	ldr	r3, [pc, #312]	; (8087234 <tcp_listen_input+0x1f0>)
 80870fc:	691a      	ldr	r2, [r3, #16]
 80870fe:	697b      	ldr	r3, [r7, #20]
 8087100:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8087102:	687b      	ldr	r3, [r7, #4]
 8087104:	8ada      	ldrh	r2, [r3, #22]
 8087106:	697b      	ldr	r3, [r7, #20]
 8087108:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 808710a:	4b47      	ldr	r3, [pc, #284]	; (8087228 <tcp_listen_input+0x1e4>)
 808710c:	681b      	ldr	r3, [r3, #0]
 808710e:	881b      	ldrh	r3, [r3, #0]
 8087110:	b29a      	uxth	r2, r3
 8087112:	697b      	ldr	r3, [r7, #20]
 8087114:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8087116:	697b      	ldr	r3, [r7, #20]
 8087118:	2203      	movs	r2, #3
 808711a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 808711c:	4b41      	ldr	r3, [pc, #260]	; (8087224 <tcp_listen_input+0x1e0>)
 808711e:	681b      	ldr	r3, [r3, #0]
 8087120:	1c5a      	adds	r2, r3, #1
 8087122:	697b      	ldr	r3, [r7, #20]
 8087124:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8087126:	697b      	ldr	r3, [r7, #20]
 8087128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 808712a:	697b      	ldr	r3, [r7, #20]
 808712c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 808712e:	6978      	ldr	r0, [r7, #20]
 8087130:	f7ff fa58 	bl	80865e4 <tcp_next_iss>
 8087134:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8087136:	697b      	ldr	r3, [r7, #20]
 8087138:	693a      	ldr	r2, [r7, #16]
 808713a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 808713c:	697b      	ldr	r3, [r7, #20]
 808713e:	693a      	ldr	r2, [r7, #16]
 8087140:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8087142:	697b      	ldr	r3, [r7, #20]
 8087144:	693a      	ldr	r2, [r7, #16]
 8087146:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8087148:	697b      	ldr	r3, [r7, #20]
 808714a:	693a      	ldr	r2, [r7, #16]
 808714c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 808714e:	4b35      	ldr	r3, [pc, #212]	; (8087224 <tcp_listen_input+0x1e0>)
 8087150:	681b      	ldr	r3, [r3, #0]
 8087152:	1e5a      	subs	r2, r3, #1
 8087154:	697b      	ldr	r3, [r7, #20]
 8087156:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8087158:	687b      	ldr	r3, [r7, #4]
 808715a:	691a      	ldr	r2, [r3, #16]
 808715c:	697b      	ldr	r3, [r7, #20]
 808715e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8087160:	697b      	ldr	r3, [r7, #20]
 8087162:	687a      	ldr	r2, [r7, #4]
 8087164:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8087166:	687b      	ldr	r3, [r7, #4]
 8087168:	7a5b      	ldrb	r3, [r3, #9]
 808716a:	f003 030c 	and.w	r3, r3, #12
 808716e:	b2da      	uxtb	r2, r3
 8087170:	697b      	ldr	r3, [r7, #20]
 8087172:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8087174:	687b      	ldr	r3, [r7, #4]
 8087176:	7a1a      	ldrb	r2, [r3, #8]
 8087178:	697b      	ldr	r3, [r7, #20]
 808717a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 808717c:	4b2e      	ldr	r3, [pc, #184]	; (8087238 <tcp_listen_input+0x1f4>)
 808717e:	681a      	ldr	r2, [r3, #0]
 8087180:	697b      	ldr	r3, [r7, #20]
 8087182:	60da      	str	r2, [r3, #12]
 8087184:	4a2c      	ldr	r2, [pc, #176]	; (8087238 <tcp_listen_input+0x1f4>)
 8087186:	697b      	ldr	r3, [r7, #20]
 8087188:	6013      	str	r3, [r2, #0]
 808718a:	f003 f8d1 	bl	808a330 <tcp_timer_needed>
 808718e:	4b2b      	ldr	r3, [pc, #172]	; (808723c <tcp_listen_input+0x1f8>)
 8087190:	2201      	movs	r2, #1
 8087192:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8087194:	6978      	ldr	r0, [r7, #20]
 8087196:	f001 fd8f 	bl	8088cb8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 808719a:	4b23      	ldr	r3, [pc, #140]	; (8087228 <tcp_listen_input+0x1e4>)
 808719c:	681b      	ldr	r3, [r3, #0]
 808719e:	89db      	ldrh	r3, [r3, #14]
 80871a0:	b29a      	uxth	r2, r3
 80871a2:	697b      	ldr	r3, [r7, #20]
 80871a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80871a8:	697b      	ldr	r3, [r7, #20]
 80871aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80871ae:	697b      	ldr	r3, [r7, #20]
 80871b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80871b4:	697b      	ldr	r3, [r7, #20]
 80871b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80871b8:	697b      	ldr	r3, [r7, #20]
 80871ba:	3304      	adds	r3, #4
 80871bc:	4618      	mov	r0, r3
 80871be:	f004 fc53 	bl	808ba68 <ip4_route>
 80871c2:	4601      	mov	r1, r0
 80871c4:	697b      	ldr	r3, [r7, #20]
 80871c6:	3304      	adds	r3, #4
 80871c8:	461a      	mov	r2, r3
 80871ca:	4620      	mov	r0, r4
 80871cc:	f7ff fa30 	bl	8086630 <tcp_eff_send_mss_netif>
 80871d0:	4603      	mov	r3, r0
 80871d2:	461a      	mov	r2, r3
 80871d4:	697b      	ldr	r3, [r7, #20]
 80871d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80871d8:	2112      	movs	r1, #18
 80871da:	6978      	ldr	r0, [r7, #20]
 80871dc:	f002 f844 	bl	8089268 <tcp_enqueue_flags>
 80871e0:	4603      	mov	r3, r0
 80871e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80871e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80871e8:	2b00      	cmp	r3, #0
 80871ea:	d004      	beq.n	80871f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80871ec:	2100      	movs	r1, #0
 80871ee:	6978      	ldr	r0, [r7, #20]
 80871f0:	f7fe f97e 	bl	80854f0 <tcp_abandon>
      return;
 80871f4:	e006      	b.n	8087204 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80871f6:	6978      	ldr	r0, [r7, #20]
 80871f8:	f002 f924 	bl	8089444 <tcp_output>
  return;
 80871fc:	e001      	b.n	8087202 <tcp_listen_input+0x1be>
    return;
 80871fe:	bf00      	nop
 8087200:	e000      	b.n	8087204 <tcp_listen_input+0x1c0>
  return;
 8087202:	bf00      	nop
}
 8087204:	371c      	adds	r7, #28
 8087206:	46bd      	mov	sp, r7
 8087208:	bd90      	pop	{r4, r7, pc}
 808720a:	bf00      	nop
 808720c:	20008278 	.word	0x20008278
 8087210:	0808f1c0 	.word	0x0808f1c0
 8087214:	0808f3b8 	.word	0x0808f3b8
 8087218:	0808f20c 	.word	0x0808f20c
 808721c:	20008270 	.word	0x20008270
 8087220:	20008276 	.word	0x20008276
 8087224:	2000826c 	.word	0x2000826c
 8087228:	2000825c 	.word	0x2000825c
 808722c:	20004cd4 	.word	0x20004cd4
 8087230:	20004cd8 	.word	0x20004cd8
 8087234:	20004cc4 	.word	0x20004cc4
 8087238:	20008240 	.word	0x20008240
 808723c:	20008248 	.word	0x20008248

08087240 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8087240:	b580      	push	{r7, lr}
 8087242:	b086      	sub	sp, #24
 8087244:	af04      	add	r7, sp, #16
 8087246:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8087248:	4b2f      	ldr	r3, [pc, #188]	; (8087308 <tcp_timewait_input+0xc8>)
 808724a:	781b      	ldrb	r3, [r3, #0]
 808724c:	f003 0304 	and.w	r3, r3, #4
 8087250:	2b00      	cmp	r3, #0
 8087252:	d153      	bne.n	80872fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8087254:	687b      	ldr	r3, [r7, #4]
 8087256:	2b00      	cmp	r3, #0
 8087258:	d106      	bne.n	8087268 <tcp_timewait_input+0x28>
 808725a:	4b2c      	ldr	r3, [pc, #176]	; (808730c <tcp_timewait_input+0xcc>)
 808725c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8087260:	492b      	ldr	r1, [pc, #172]	; (8087310 <tcp_timewait_input+0xd0>)
 8087262:	482c      	ldr	r0, [pc, #176]	; (8087314 <tcp_timewait_input+0xd4>)
 8087264:	f005 fe36 	bl	808ced4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8087268:	4b27      	ldr	r3, [pc, #156]	; (8087308 <tcp_timewait_input+0xc8>)
 808726a:	781b      	ldrb	r3, [r3, #0]
 808726c:	f003 0302 	and.w	r3, r3, #2
 8087270:	2b00      	cmp	r3, #0
 8087272:	d02a      	beq.n	80872ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8087274:	4b28      	ldr	r3, [pc, #160]	; (8087318 <tcp_timewait_input+0xd8>)
 8087276:	681a      	ldr	r2, [r3, #0]
 8087278:	687b      	ldr	r3, [r7, #4]
 808727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808727c:	1ad3      	subs	r3, r2, r3
 808727e:	2b00      	cmp	r3, #0
 8087280:	db2d      	blt.n	80872de <tcp_timewait_input+0x9e>
 8087282:	4b25      	ldr	r3, [pc, #148]	; (8087318 <tcp_timewait_input+0xd8>)
 8087284:	681a      	ldr	r2, [r3, #0]
 8087286:	687b      	ldr	r3, [r7, #4]
 8087288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808728a:	6879      	ldr	r1, [r7, #4]
 808728c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 808728e:	440b      	add	r3, r1
 8087290:	1ad3      	subs	r3, r2, r3
 8087292:	2b00      	cmp	r3, #0
 8087294:	dc23      	bgt.n	80872de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8087296:	4b21      	ldr	r3, [pc, #132]	; (808731c <tcp_timewait_input+0xdc>)
 8087298:	6819      	ldr	r1, [r3, #0]
 808729a:	4b21      	ldr	r3, [pc, #132]	; (8087320 <tcp_timewait_input+0xe0>)
 808729c:	881b      	ldrh	r3, [r3, #0]
 808729e:	461a      	mov	r2, r3
 80872a0:	4b1d      	ldr	r3, [pc, #116]	; (8087318 <tcp_timewait_input+0xd8>)
 80872a2:	681b      	ldr	r3, [r3, #0]
 80872a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80872a6:	4b1f      	ldr	r3, [pc, #124]	; (8087324 <tcp_timewait_input+0xe4>)
 80872a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80872aa:	885b      	ldrh	r3, [r3, #2]
 80872ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80872ae:	4a1d      	ldr	r2, [pc, #116]	; (8087324 <tcp_timewait_input+0xe4>)
 80872b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80872b2:	8812      	ldrh	r2, [r2, #0]
 80872b4:	b292      	uxth	r2, r2
 80872b6:	9202      	str	r2, [sp, #8]
 80872b8:	9301      	str	r3, [sp, #4]
 80872ba:	4b1b      	ldr	r3, [pc, #108]	; (8087328 <tcp_timewait_input+0xe8>)
 80872bc:	9300      	str	r3, [sp, #0]
 80872be:	4b1b      	ldr	r3, [pc, #108]	; (808732c <tcp_timewait_input+0xec>)
 80872c0:	4602      	mov	r2, r0
 80872c2:	6878      	ldr	r0, [r7, #4]
 80872c4:	f002 fe72 	bl	8089fac <tcp_rst>
      return;
 80872c8:	e01b      	b.n	8087302 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80872ca:	4b0f      	ldr	r3, [pc, #60]	; (8087308 <tcp_timewait_input+0xc8>)
 80872cc:	781b      	ldrb	r3, [r3, #0]
 80872ce:	f003 0301 	and.w	r3, r3, #1
 80872d2:	2b00      	cmp	r3, #0
 80872d4:	d003      	beq.n	80872de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80872d6:	4b16      	ldr	r3, [pc, #88]	; (8087330 <tcp_timewait_input+0xf0>)
 80872d8:	681a      	ldr	r2, [r3, #0]
 80872da:	687b      	ldr	r3, [r7, #4]
 80872dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80872de:	4b10      	ldr	r3, [pc, #64]	; (8087320 <tcp_timewait_input+0xe0>)
 80872e0:	881b      	ldrh	r3, [r3, #0]
 80872e2:	2b00      	cmp	r3, #0
 80872e4:	d00c      	beq.n	8087300 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80872e6:	687b      	ldr	r3, [r7, #4]
 80872e8:	8b5b      	ldrh	r3, [r3, #26]
 80872ea:	f043 0302 	orr.w	r3, r3, #2
 80872ee:	b29a      	uxth	r2, r3
 80872f0:	687b      	ldr	r3, [r7, #4]
 80872f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80872f4:	6878      	ldr	r0, [r7, #4]
 80872f6:	f002 f8a5 	bl	8089444 <tcp_output>
  }
  return;
 80872fa:	e001      	b.n	8087300 <tcp_timewait_input+0xc0>
    return;
 80872fc:	bf00      	nop
 80872fe:	e000      	b.n	8087302 <tcp_timewait_input+0xc2>
  return;
 8087300:	bf00      	nop
}
 8087302:	3708      	adds	r7, #8
 8087304:	46bd      	mov	sp, r7
 8087306:	bd80      	pop	{r7, pc}
 8087308:	20008278 	.word	0x20008278
 808730c:	0808f1c0 	.word	0x0808f1c0
 8087310:	0808f3d8 	.word	0x0808f3d8
 8087314:	0808f20c 	.word	0x0808f20c
 8087318:	2000826c 	.word	0x2000826c
 808731c:	20008270 	.word	0x20008270
 8087320:	20008276 	.word	0x20008276
 8087324:	2000825c 	.word	0x2000825c
 8087328:	20004cd4 	.word	0x20004cd4
 808732c:	20004cd8 	.word	0x20004cd8
 8087330:	20008234 	.word	0x20008234

08087334 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8087334:	b590      	push	{r4, r7, lr}
 8087336:	b08d      	sub	sp, #52	; 0x34
 8087338:	af04      	add	r7, sp, #16
 808733a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 808733c:	2300      	movs	r3, #0
 808733e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8087340:	2300      	movs	r3, #0
 8087342:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8087344:	687b      	ldr	r3, [r7, #4]
 8087346:	2b00      	cmp	r3, #0
 8087348:	d106      	bne.n	8087358 <tcp_process+0x24>
 808734a:	4b9d      	ldr	r3, [pc, #628]	; (80875c0 <tcp_process+0x28c>)
 808734c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8087350:	499c      	ldr	r1, [pc, #624]	; (80875c4 <tcp_process+0x290>)
 8087352:	489d      	ldr	r0, [pc, #628]	; (80875c8 <tcp_process+0x294>)
 8087354:	f005 fdbe 	bl	808ced4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8087358:	4b9c      	ldr	r3, [pc, #624]	; (80875cc <tcp_process+0x298>)
 808735a:	781b      	ldrb	r3, [r3, #0]
 808735c:	f003 0304 	and.w	r3, r3, #4
 8087360:	2b00      	cmp	r3, #0
 8087362:	d04e      	beq.n	8087402 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8087364:	687b      	ldr	r3, [r7, #4]
 8087366:	7d1b      	ldrb	r3, [r3, #20]
 8087368:	2b02      	cmp	r3, #2
 808736a:	d108      	bne.n	808737e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 808736c:	687b      	ldr	r3, [r7, #4]
 808736e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8087370:	4b97      	ldr	r3, [pc, #604]	; (80875d0 <tcp_process+0x29c>)
 8087372:	681b      	ldr	r3, [r3, #0]
 8087374:	429a      	cmp	r2, r3
 8087376:	d123      	bne.n	80873c0 <tcp_process+0x8c>
        acceptable = 1;
 8087378:	2301      	movs	r3, #1
 808737a:	76fb      	strb	r3, [r7, #27]
 808737c:	e020      	b.n	80873c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 808737e:	687b      	ldr	r3, [r7, #4]
 8087380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8087382:	4b94      	ldr	r3, [pc, #592]	; (80875d4 <tcp_process+0x2a0>)
 8087384:	681b      	ldr	r3, [r3, #0]
 8087386:	429a      	cmp	r2, r3
 8087388:	d102      	bne.n	8087390 <tcp_process+0x5c>
        acceptable = 1;
 808738a:	2301      	movs	r3, #1
 808738c:	76fb      	strb	r3, [r7, #27]
 808738e:	e017      	b.n	80873c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8087390:	4b90      	ldr	r3, [pc, #576]	; (80875d4 <tcp_process+0x2a0>)
 8087392:	681a      	ldr	r2, [r3, #0]
 8087394:	687b      	ldr	r3, [r7, #4]
 8087396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087398:	1ad3      	subs	r3, r2, r3
 808739a:	2b00      	cmp	r3, #0
 808739c:	db10      	blt.n	80873c0 <tcp_process+0x8c>
 808739e:	4b8d      	ldr	r3, [pc, #564]	; (80875d4 <tcp_process+0x2a0>)
 80873a0:	681a      	ldr	r2, [r3, #0]
 80873a2:	687b      	ldr	r3, [r7, #4]
 80873a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80873a6:	6879      	ldr	r1, [r7, #4]
 80873a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80873aa:	440b      	add	r3, r1
 80873ac:	1ad3      	subs	r3, r2, r3
 80873ae:	2b00      	cmp	r3, #0
 80873b0:	dc06      	bgt.n	80873c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80873b2:	687b      	ldr	r3, [r7, #4]
 80873b4:	8b5b      	ldrh	r3, [r3, #26]
 80873b6:	f043 0302 	orr.w	r3, r3, #2
 80873ba:	b29a      	uxth	r2, r3
 80873bc:	687b      	ldr	r3, [r7, #4]
 80873be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80873c0:	7efb      	ldrb	r3, [r7, #27]
 80873c2:	2b00      	cmp	r3, #0
 80873c4:	d01b      	beq.n	80873fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80873c6:	687b      	ldr	r3, [r7, #4]
 80873c8:	7d1b      	ldrb	r3, [r3, #20]
 80873ca:	2b00      	cmp	r3, #0
 80873cc:	d106      	bne.n	80873dc <tcp_process+0xa8>
 80873ce:	4b7c      	ldr	r3, [pc, #496]	; (80875c0 <tcp_process+0x28c>)
 80873d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80873d4:	4980      	ldr	r1, [pc, #512]	; (80875d8 <tcp_process+0x2a4>)
 80873d6:	487c      	ldr	r0, [pc, #496]	; (80875c8 <tcp_process+0x294>)
 80873d8:	f005 fd7c 	bl	808ced4 <iprintf>
      recv_flags |= TF_RESET;
 80873dc:	4b7f      	ldr	r3, [pc, #508]	; (80875dc <tcp_process+0x2a8>)
 80873de:	781b      	ldrb	r3, [r3, #0]
 80873e0:	f043 0308 	orr.w	r3, r3, #8
 80873e4:	b2da      	uxtb	r2, r3
 80873e6:	4b7d      	ldr	r3, [pc, #500]	; (80875dc <tcp_process+0x2a8>)
 80873e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80873ea:	687b      	ldr	r3, [r7, #4]
 80873ec:	8b5b      	ldrh	r3, [r3, #26]
 80873ee:	f023 0301 	bic.w	r3, r3, #1
 80873f2:	b29a      	uxth	r2, r3
 80873f4:	687b      	ldr	r3, [r7, #4]
 80873f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80873f8:	f06f 030d 	mvn.w	r3, #13
 80873fc:	e37a      	b.n	8087af4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80873fe:	2300      	movs	r3, #0
 8087400:	e378      	b.n	8087af4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8087402:	4b72      	ldr	r3, [pc, #456]	; (80875cc <tcp_process+0x298>)
 8087404:	781b      	ldrb	r3, [r3, #0]
 8087406:	f003 0302 	and.w	r3, r3, #2
 808740a:	2b00      	cmp	r3, #0
 808740c:	d010      	beq.n	8087430 <tcp_process+0xfc>
 808740e:	687b      	ldr	r3, [r7, #4]
 8087410:	7d1b      	ldrb	r3, [r3, #20]
 8087412:	2b02      	cmp	r3, #2
 8087414:	d00c      	beq.n	8087430 <tcp_process+0xfc>
 8087416:	687b      	ldr	r3, [r7, #4]
 8087418:	7d1b      	ldrb	r3, [r3, #20]
 808741a:	2b03      	cmp	r3, #3
 808741c:	d008      	beq.n	8087430 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 808741e:	687b      	ldr	r3, [r7, #4]
 8087420:	8b5b      	ldrh	r3, [r3, #26]
 8087422:	f043 0302 	orr.w	r3, r3, #2
 8087426:	b29a      	uxth	r2, r3
 8087428:	687b      	ldr	r3, [r7, #4]
 808742a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 808742c:	2300      	movs	r3, #0
 808742e:	e361      	b.n	8087af4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8087430:	687b      	ldr	r3, [r7, #4]
 8087432:	8b5b      	ldrh	r3, [r3, #26]
 8087434:	f003 0310 	and.w	r3, r3, #16
 8087438:	2b00      	cmp	r3, #0
 808743a:	d103      	bne.n	8087444 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 808743c:	4b68      	ldr	r3, [pc, #416]	; (80875e0 <tcp_process+0x2ac>)
 808743e:	681a      	ldr	r2, [r3, #0]
 8087440:	687b      	ldr	r3, [r7, #4]
 8087442:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8087444:	687b      	ldr	r3, [r7, #4]
 8087446:	2200      	movs	r2, #0
 8087448:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 808744c:	687b      	ldr	r3, [r7, #4]
 808744e:	2200      	movs	r2, #0
 8087450:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8087454:	6878      	ldr	r0, [r7, #4]
 8087456:	f001 fc2f 	bl	8088cb8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 808745a:	687b      	ldr	r3, [r7, #4]
 808745c:	7d1b      	ldrb	r3, [r3, #20]
 808745e:	3b02      	subs	r3, #2
 8087460:	2b07      	cmp	r3, #7
 8087462:	f200 8337 	bhi.w	8087ad4 <tcp_process+0x7a0>
 8087466:	a201      	add	r2, pc, #4	; (adr r2, 808746c <tcp_process+0x138>)
 8087468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808746c:	0808748d 	.word	0x0808748d
 8087470:	080876bd 	.word	0x080876bd
 8087474:	08087835 	.word	0x08087835
 8087478:	0808785f 	.word	0x0808785f
 808747c:	08087983 	.word	0x08087983
 8087480:	08087835 	.word	0x08087835
 8087484:	08087a0f 	.word	0x08087a0f
 8087488:	08087a9f 	.word	0x08087a9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 808748c:	4b4f      	ldr	r3, [pc, #316]	; (80875cc <tcp_process+0x298>)
 808748e:	781b      	ldrb	r3, [r3, #0]
 8087490:	f003 0310 	and.w	r3, r3, #16
 8087494:	2b00      	cmp	r3, #0
 8087496:	f000 80e4 	beq.w	8087662 <tcp_process+0x32e>
 808749a:	4b4c      	ldr	r3, [pc, #304]	; (80875cc <tcp_process+0x298>)
 808749c:	781b      	ldrb	r3, [r3, #0]
 808749e:	f003 0302 	and.w	r3, r3, #2
 80874a2:	2b00      	cmp	r3, #0
 80874a4:	f000 80dd 	beq.w	8087662 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80874a8:	687b      	ldr	r3, [r7, #4]
 80874aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80874ac:	1c5a      	adds	r2, r3, #1
 80874ae:	4b48      	ldr	r3, [pc, #288]	; (80875d0 <tcp_process+0x29c>)
 80874b0:	681b      	ldr	r3, [r3, #0]
 80874b2:	429a      	cmp	r2, r3
 80874b4:	f040 80d5 	bne.w	8087662 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80874b8:	4b46      	ldr	r3, [pc, #280]	; (80875d4 <tcp_process+0x2a0>)
 80874ba:	681b      	ldr	r3, [r3, #0]
 80874bc:	1c5a      	adds	r2, r3, #1
 80874be:	687b      	ldr	r3, [r7, #4]
 80874c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80874c2:	687b      	ldr	r3, [r7, #4]
 80874c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80874c6:	687b      	ldr	r3, [r7, #4]
 80874c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80874ca:	4b41      	ldr	r3, [pc, #260]	; (80875d0 <tcp_process+0x29c>)
 80874cc:	681a      	ldr	r2, [r3, #0]
 80874ce:	687b      	ldr	r3, [r7, #4]
 80874d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80874d2:	4b44      	ldr	r3, [pc, #272]	; (80875e4 <tcp_process+0x2b0>)
 80874d4:	681b      	ldr	r3, [r3, #0]
 80874d6:	89db      	ldrh	r3, [r3, #14]
 80874d8:	b29a      	uxth	r2, r3
 80874da:	687b      	ldr	r3, [r7, #4]
 80874dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80874e0:	687b      	ldr	r3, [r7, #4]
 80874e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80874e6:	687b      	ldr	r3, [r7, #4]
 80874e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80874ec:	4b39      	ldr	r3, [pc, #228]	; (80875d4 <tcp_process+0x2a0>)
 80874ee:	681b      	ldr	r3, [r3, #0]
 80874f0:	1e5a      	subs	r2, r3, #1
 80874f2:	687b      	ldr	r3, [r7, #4]
 80874f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80874f6:	687b      	ldr	r3, [r7, #4]
 80874f8:	2204      	movs	r2, #4
 80874fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80874fc:	687b      	ldr	r3, [r7, #4]
 80874fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8087500:	687b      	ldr	r3, [r7, #4]
 8087502:	3304      	adds	r3, #4
 8087504:	4618      	mov	r0, r3
 8087506:	f004 faaf 	bl	808ba68 <ip4_route>
 808750a:	4601      	mov	r1, r0
 808750c:	687b      	ldr	r3, [r7, #4]
 808750e:	3304      	adds	r3, #4
 8087510:	461a      	mov	r2, r3
 8087512:	4620      	mov	r0, r4
 8087514:	f7ff f88c 	bl	8086630 <tcp_eff_send_mss_netif>
 8087518:	4603      	mov	r3, r0
 808751a:	461a      	mov	r2, r3
 808751c:	687b      	ldr	r3, [r7, #4]
 808751e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8087520:	687b      	ldr	r3, [r7, #4]
 8087522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087524:	009a      	lsls	r2, r3, #2
 8087526:	687b      	ldr	r3, [r7, #4]
 8087528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 808752a:	005b      	lsls	r3, r3, #1
 808752c:	f241 111c 	movw	r1, #4380	; 0x111c
 8087530:	428b      	cmp	r3, r1
 8087532:	bf38      	it	cc
 8087534:	460b      	movcc	r3, r1
 8087536:	429a      	cmp	r2, r3
 8087538:	d204      	bcs.n	8087544 <tcp_process+0x210>
 808753a:	687b      	ldr	r3, [r7, #4]
 808753c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 808753e:	009b      	lsls	r3, r3, #2
 8087540:	b29b      	uxth	r3, r3
 8087542:	e00d      	b.n	8087560 <tcp_process+0x22c>
 8087544:	687b      	ldr	r3, [r7, #4]
 8087546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087548:	005b      	lsls	r3, r3, #1
 808754a:	f241 121c 	movw	r2, #4380	; 0x111c
 808754e:	4293      	cmp	r3, r2
 8087550:	d904      	bls.n	808755c <tcp_process+0x228>
 8087552:	687b      	ldr	r3, [r7, #4]
 8087554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087556:	005b      	lsls	r3, r3, #1
 8087558:	b29b      	uxth	r3, r3
 808755a:	e001      	b.n	8087560 <tcp_process+0x22c>
 808755c:	f241 131c 	movw	r3, #4380	; 0x111c
 8087560:	687a      	ldr	r2, [r7, #4]
 8087562:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8087566:	687b      	ldr	r3, [r7, #4]
 8087568:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 808756c:	2b00      	cmp	r3, #0
 808756e:	d106      	bne.n	808757e <tcp_process+0x24a>
 8087570:	4b13      	ldr	r3, [pc, #76]	; (80875c0 <tcp_process+0x28c>)
 8087572:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8087576:	491c      	ldr	r1, [pc, #112]	; (80875e8 <tcp_process+0x2b4>)
 8087578:	4813      	ldr	r0, [pc, #76]	; (80875c8 <tcp_process+0x294>)
 808757a:	f005 fcab 	bl	808ced4 <iprintf>
        --pcb->snd_queuelen;
 808757e:	687b      	ldr	r3, [r7, #4]
 8087580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8087584:	3b01      	subs	r3, #1
 8087586:	b29a      	uxth	r2, r3
 8087588:	687b      	ldr	r3, [r7, #4]
 808758a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 808758e:	687b      	ldr	r3, [r7, #4]
 8087590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8087592:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8087594:	69fb      	ldr	r3, [r7, #28]
 8087596:	2b00      	cmp	r3, #0
 8087598:	d12a      	bne.n	80875f0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 808759a:	687b      	ldr	r3, [r7, #4]
 808759c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808759e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80875a0:	69fb      	ldr	r3, [r7, #28]
 80875a2:	2b00      	cmp	r3, #0
 80875a4:	d106      	bne.n	80875b4 <tcp_process+0x280>
 80875a6:	4b06      	ldr	r3, [pc, #24]	; (80875c0 <tcp_process+0x28c>)
 80875a8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80875ac:	490f      	ldr	r1, [pc, #60]	; (80875ec <tcp_process+0x2b8>)
 80875ae:	4806      	ldr	r0, [pc, #24]	; (80875c8 <tcp_process+0x294>)
 80875b0:	f005 fc90 	bl	808ced4 <iprintf>
          pcb->unsent = rseg->next;
 80875b4:	69fb      	ldr	r3, [r7, #28]
 80875b6:	681a      	ldr	r2, [r3, #0]
 80875b8:	687b      	ldr	r3, [r7, #4]
 80875ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80875bc:	e01c      	b.n	80875f8 <tcp_process+0x2c4>
 80875be:	bf00      	nop
 80875c0:	0808f1c0 	.word	0x0808f1c0
 80875c4:	0808f3f8 	.word	0x0808f3f8
 80875c8:	0808f20c 	.word	0x0808f20c
 80875cc:	20008278 	.word	0x20008278
 80875d0:	20008270 	.word	0x20008270
 80875d4:	2000826c 	.word	0x2000826c
 80875d8:	0808f414 	.word	0x0808f414
 80875dc:	20008279 	.word	0x20008279
 80875e0:	20008234 	.word	0x20008234
 80875e4:	2000825c 	.word	0x2000825c
 80875e8:	0808f434 	.word	0x0808f434
 80875ec:	0808f44c 	.word	0x0808f44c
        } else {
          pcb->unacked = rseg->next;
 80875f0:	69fb      	ldr	r3, [r7, #28]
 80875f2:	681a      	ldr	r2, [r3, #0]
 80875f4:	687b      	ldr	r3, [r7, #4]
 80875f6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80875f8:	69f8      	ldr	r0, [r7, #28]
 80875fa:	f7fe fd22 	bl	8086042 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80875fe:	687b      	ldr	r3, [r7, #4]
 8087600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8087602:	2b00      	cmp	r3, #0
 8087604:	d104      	bne.n	8087610 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8087606:	687b      	ldr	r3, [r7, #4]
 8087608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808760c:	861a      	strh	r2, [r3, #48]	; 0x30
 808760e:	e006      	b.n	808761e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8087610:	687b      	ldr	r3, [r7, #4]
 8087612:	2200      	movs	r2, #0
 8087614:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8087616:	687b      	ldr	r3, [r7, #4]
 8087618:	2200      	movs	r2, #0
 808761a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 808761e:	687b      	ldr	r3, [r7, #4]
 8087620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8087624:	2b00      	cmp	r3, #0
 8087626:	d00a      	beq.n	808763e <tcp_process+0x30a>
 8087628:	687b      	ldr	r3, [r7, #4]
 808762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808762e:	687a      	ldr	r2, [r7, #4]
 8087630:	6910      	ldr	r0, [r2, #16]
 8087632:	2200      	movs	r2, #0
 8087634:	6879      	ldr	r1, [r7, #4]
 8087636:	4798      	blx	r3
 8087638:	4603      	mov	r3, r0
 808763a:	76bb      	strb	r3, [r7, #26]
 808763c:	e001      	b.n	8087642 <tcp_process+0x30e>
 808763e:	2300      	movs	r3, #0
 8087640:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8087642:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8087646:	f113 0f0d 	cmn.w	r3, #13
 808764a:	d102      	bne.n	8087652 <tcp_process+0x31e>
          return ERR_ABRT;
 808764c:	f06f 030c 	mvn.w	r3, #12
 8087650:	e250      	b.n	8087af4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8087652:	687b      	ldr	r3, [r7, #4]
 8087654:	8b5b      	ldrh	r3, [r3, #26]
 8087656:	f043 0302 	orr.w	r3, r3, #2
 808765a:	b29a      	uxth	r2, r3
 808765c:	687b      	ldr	r3, [r7, #4]
 808765e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8087660:	e23a      	b.n	8087ad8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8087662:	4b98      	ldr	r3, [pc, #608]	; (80878c4 <tcp_process+0x590>)
 8087664:	781b      	ldrb	r3, [r3, #0]
 8087666:	f003 0310 	and.w	r3, r3, #16
 808766a:	2b00      	cmp	r3, #0
 808766c:	f000 8234 	beq.w	8087ad8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8087670:	4b95      	ldr	r3, [pc, #596]	; (80878c8 <tcp_process+0x594>)
 8087672:	6819      	ldr	r1, [r3, #0]
 8087674:	4b95      	ldr	r3, [pc, #596]	; (80878cc <tcp_process+0x598>)
 8087676:	881b      	ldrh	r3, [r3, #0]
 8087678:	461a      	mov	r2, r3
 808767a:	4b95      	ldr	r3, [pc, #596]	; (80878d0 <tcp_process+0x59c>)
 808767c:	681b      	ldr	r3, [r3, #0]
 808767e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8087680:	4b94      	ldr	r3, [pc, #592]	; (80878d4 <tcp_process+0x5a0>)
 8087682:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8087684:	885b      	ldrh	r3, [r3, #2]
 8087686:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8087688:	4a92      	ldr	r2, [pc, #584]	; (80878d4 <tcp_process+0x5a0>)
 808768a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 808768c:	8812      	ldrh	r2, [r2, #0]
 808768e:	b292      	uxth	r2, r2
 8087690:	9202      	str	r2, [sp, #8]
 8087692:	9301      	str	r3, [sp, #4]
 8087694:	4b90      	ldr	r3, [pc, #576]	; (80878d8 <tcp_process+0x5a4>)
 8087696:	9300      	str	r3, [sp, #0]
 8087698:	4b90      	ldr	r3, [pc, #576]	; (80878dc <tcp_process+0x5a8>)
 808769a:	4602      	mov	r2, r0
 808769c:	6878      	ldr	r0, [r7, #4]
 808769e:	f002 fc85 	bl	8089fac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80876a2:	687b      	ldr	r3, [r7, #4]
 80876a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80876a8:	2b05      	cmp	r3, #5
 80876aa:	f200 8215 	bhi.w	8087ad8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80876ae:	687b      	ldr	r3, [r7, #4]
 80876b0:	2200      	movs	r2, #0
 80876b2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80876b4:	6878      	ldr	r0, [r7, #4]
 80876b6:	f002 fa4f 	bl	8089b58 <tcp_rexmit_rto>
      break;
 80876ba:	e20d      	b.n	8087ad8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80876bc:	4b81      	ldr	r3, [pc, #516]	; (80878c4 <tcp_process+0x590>)
 80876be:	781b      	ldrb	r3, [r3, #0]
 80876c0:	f003 0310 	and.w	r3, r3, #16
 80876c4:	2b00      	cmp	r3, #0
 80876c6:	f000 80a1 	beq.w	808780c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80876ca:	4b7f      	ldr	r3, [pc, #508]	; (80878c8 <tcp_process+0x594>)
 80876cc:	681a      	ldr	r2, [r3, #0]
 80876ce:	687b      	ldr	r3, [r7, #4]
 80876d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80876d2:	1ad3      	subs	r3, r2, r3
 80876d4:	3b01      	subs	r3, #1
 80876d6:	2b00      	cmp	r3, #0
 80876d8:	db7e      	blt.n	80877d8 <tcp_process+0x4a4>
 80876da:	4b7b      	ldr	r3, [pc, #492]	; (80878c8 <tcp_process+0x594>)
 80876dc:	681a      	ldr	r2, [r3, #0]
 80876de:	687b      	ldr	r3, [r7, #4]
 80876e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80876e2:	1ad3      	subs	r3, r2, r3
 80876e4:	2b00      	cmp	r3, #0
 80876e6:	dc77      	bgt.n	80877d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80876e8:	687b      	ldr	r3, [r7, #4]
 80876ea:	2204      	movs	r2, #4
 80876ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80876ee:	687b      	ldr	r3, [r7, #4]
 80876f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80876f2:	2b00      	cmp	r3, #0
 80876f4:	d102      	bne.n	80876fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80876f6:	23fa      	movs	r3, #250	; 0xfa
 80876f8:	76bb      	strb	r3, [r7, #26]
 80876fa:	e01d      	b.n	8087738 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80876fc:	687b      	ldr	r3, [r7, #4]
 80876fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8087700:	699b      	ldr	r3, [r3, #24]
 8087702:	2b00      	cmp	r3, #0
 8087704:	d106      	bne.n	8087714 <tcp_process+0x3e0>
 8087706:	4b76      	ldr	r3, [pc, #472]	; (80878e0 <tcp_process+0x5ac>)
 8087708:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 808770c:	4975      	ldr	r1, [pc, #468]	; (80878e4 <tcp_process+0x5b0>)
 808770e:	4876      	ldr	r0, [pc, #472]	; (80878e8 <tcp_process+0x5b4>)
 8087710:	f005 fbe0 	bl	808ced4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8087714:	687b      	ldr	r3, [r7, #4]
 8087716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8087718:	699b      	ldr	r3, [r3, #24]
 808771a:	2b00      	cmp	r3, #0
 808771c:	d00a      	beq.n	8087734 <tcp_process+0x400>
 808771e:	687b      	ldr	r3, [r7, #4]
 8087720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8087722:	699b      	ldr	r3, [r3, #24]
 8087724:	687a      	ldr	r2, [r7, #4]
 8087726:	6910      	ldr	r0, [r2, #16]
 8087728:	2200      	movs	r2, #0
 808772a:	6879      	ldr	r1, [r7, #4]
 808772c:	4798      	blx	r3
 808772e:	4603      	mov	r3, r0
 8087730:	76bb      	strb	r3, [r7, #26]
 8087732:	e001      	b.n	8087738 <tcp_process+0x404>
 8087734:	23f0      	movs	r3, #240	; 0xf0
 8087736:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8087738:	f997 301a 	ldrsb.w	r3, [r7, #26]
 808773c:	2b00      	cmp	r3, #0
 808773e:	d00a      	beq.n	8087756 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8087740:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8087744:	f113 0f0d 	cmn.w	r3, #13
 8087748:	d002      	beq.n	8087750 <tcp_process+0x41c>
              tcp_abort(pcb);
 808774a:	6878      	ldr	r0, [r7, #4]
 808774c:	f7fd ff8e 	bl	808566c <tcp_abort>
            }
            return ERR_ABRT;
 8087750:	f06f 030c 	mvn.w	r3, #12
 8087754:	e1ce      	b.n	8087af4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8087756:	6878      	ldr	r0, [r7, #4]
 8087758:	f000 fae0 	bl	8087d1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 808775c:	4b63      	ldr	r3, [pc, #396]	; (80878ec <tcp_process+0x5b8>)
 808775e:	881b      	ldrh	r3, [r3, #0]
 8087760:	2b00      	cmp	r3, #0
 8087762:	d005      	beq.n	8087770 <tcp_process+0x43c>
            recv_acked--;
 8087764:	4b61      	ldr	r3, [pc, #388]	; (80878ec <tcp_process+0x5b8>)
 8087766:	881b      	ldrh	r3, [r3, #0]
 8087768:	3b01      	subs	r3, #1
 808776a:	b29a      	uxth	r2, r3
 808776c:	4b5f      	ldr	r3, [pc, #380]	; (80878ec <tcp_process+0x5b8>)
 808776e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8087770:	687b      	ldr	r3, [r7, #4]
 8087772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087774:	009a      	lsls	r2, r3, #2
 8087776:	687b      	ldr	r3, [r7, #4]
 8087778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 808777a:	005b      	lsls	r3, r3, #1
 808777c:	f241 111c 	movw	r1, #4380	; 0x111c
 8087780:	428b      	cmp	r3, r1
 8087782:	bf38      	it	cc
 8087784:	460b      	movcc	r3, r1
 8087786:	429a      	cmp	r2, r3
 8087788:	d204      	bcs.n	8087794 <tcp_process+0x460>
 808778a:	687b      	ldr	r3, [r7, #4]
 808778c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 808778e:	009b      	lsls	r3, r3, #2
 8087790:	b29b      	uxth	r3, r3
 8087792:	e00d      	b.n	80877b0 <tcp_process+0x47c>
 8087794:	687b      	ldr	r3, [r7, #4]
 8087796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087798:	005b      	lsls	r3, r3, #1
 808779a:	f241 121c 	movw	r2, #4380	; 0x111c
 808779e:	4293      	cmp	r3, r2
 80877a0:	d904      	bls.n	80877ac <tcp_process+0x478>
 80877a2:	687b      	ldr	r3, [r7, #4]
 80877a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80877a6:	005b      	lsls	r3, r3, #1
 80877a8:	b29b      	uxth	r3, r3
 80877aa:	e001      	b.n	80877b0 <tcp_process+0x47c>
 80877ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80877b0:	687a      	ldr	r2, [r7, #4]
 80877b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80877b6:	4b4e      	ldr	r3, [pc, #312]	; (80878f0 <tcp_process+0x5bc>)
 80877b8:	781b      	ldrb	r3, [r3, #0]
 80877ba:	f003 0320 	and.w	r3, r3, #32
 80877be:	2b00      	cmp	r3, #0
 80877c0:	d037      	beq.n	8087832 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80877c2:	687b      	ldr	r3, [r7, #4]
 80877c4:	8b5b      	ldrh	r3, [r3, #26]
 80877c6:	f043 0302 	orr.w	r3, r3, #2
 80877ca:	b29a      	uxth	r2, r3
 80877cc:	687b      	ldr	r3, [r7, #4]
 80877ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80877d0:	687b      	ldr	r3, [r7, #4]
 80877d2:	2207      	movs	r2, #7
 80877d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80877d6:	e02c      	b.n	8087832 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80877d8:	4b3b      	ldr	r3, [pc, #236]	; (80878c8 <tcp_process+0x594>)
 80877da:	6819      	ldr	r1, [r3, #0]
 80877dc:	4b3b      	ldr	r3, [pc, #236]	; (80878cc <tcp_process+0x598>)
 80877de:	881b      	ldrh	r3, [r3, #0]
 80877e0:	461a      	mov	r2, r3
 80877e2:	4b3b      	ldr	r3, [pc, #236]	; (80878d0 <tcp_process+0x59c>)
 80877e4:	681b      	ldr	r3, [r3, #0]
 80877e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80877e8:	4b3a      	ldr	r3, [pc, #232]	; (80878d4 <tcp_process+0x5a0>)
 80877ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80877ec:	885b      	ldrh	r3, [r3, #2]
 80877ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80877f0:	4a38      	ldr	r2, [pc, #224]	; (80878d4 <tcp_process+0x5a0>)
 80877f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80877f4:	8812      	ldrh	r2, [r2, #0]
 80877f6:	b292      	uxth	r2, r2
 80877f8:	9202      	str	r2, [sp, #8]
 80877fa:	9301      	str	r3, [sp, #4]
 80877fc:	4b36      	ldr	r3, [pc, #216]	; (80878d8 <tcp_process+0x5a4>)
 80877fe:	9300      	str	r3, [sp, #0]
 8087800:	4b36      	ldr	r3, [pc, #216]	; (80878dc <tcp_process+0x5a8>)
 8087802:	4602      	mov	r2, r0
 8087804:	6878      	ldr	r0, [r7, #4]
 8087806:	f002 fbd1 	bl	8089fac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 808780a:	e167      	b.n	8087adc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 808780c:	4b2d      	ldr	r3, [pc, #180]	; (80878c4 <tcp_process+0x590>)
 808780e:	781b      	ldrb	r3, [r3, #0]
 8087810:	f003 0302 	and.w	r3, r3, #2
 8087814:	2b00      	cmp	r3, #0
 8087816:	f000 8161 	beq.w	8087adc <tcp_process+0x7a8>
 808781a:	687b      	ldr	r3, [r7, #4]
 808781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808781e:	1e5a      	subs	r2, r3, #1
 8087820:	4b2b      	ldr	r3, [pc, #172]	; (80878d0 <tcp_process+0x59c>)
 8087822:	681b      	ldr	r3, [r3, #0]
 8087824:	429a      	cmp	r2, r3
 8087826:	f040 8159 	bne.w	8087adc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 808782a:	6878      	ldr	r0, [r7, #4]
 808782c:	f002 f9b6 	bl	8089b9c <tcp_rexmit>
      break;
 8087830:	e154      	b.n	8087adc <tcp_process+0x7a8>
 8087832:	e153      	b.n	8087adc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8087834:	6878      	ldr	r0, [r7, #4]
 8087836:	f000 fa71 	bl	8087d1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 808783a:	4b2d      	ldr	r3, [pc, #180]	; (80878f0 <tcp_process+0x5bc>)
 808783c:	781b      	ldrb	r3, [r3, #0]
 808783e:	f003 0320 	and.w	r3, r3, #32
 8087842:	2b00      	cmp	r3, #0
 8087844:	f000 814c 	beq.w	8087ae0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8087848:	687b      	ldr	r3, [r7, #4]
 808784a:	8b5b      	ldrh	r3, [r3, #26]
 808784c:	f043 0302 	orr.w	r3, r3, #2
 8087850:	b29a      	uxth	r2, r3
 8087852:	687b      	ldr	r3, [r7, #4]
 8087854:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8087856:	687b      	ldr	r3, [r7, #4]
 8087858:	2207      	movs	r2, #7
 808785a:	751a      	strb	r2, [r3, #20]
      }
      break;
 808785c:	e140      	b.n	8087ae0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 808785e:	6878      	ldr	r0, [r7, #4]
 8087860:	f000 fa5c 	bl	8087d1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8087864:	4b22      	ldr	r3, [pc, #136]	; (80878f0 <tcp_process+0x5bc>)
 8087866:	781b      	ldrb	r3, [r3, #0]
 8087868:	f003 0320 	and.w	r3, r3, #32
 808786c:	2b00      	cmp	r3, #0
 808786e:	d071      	beq.n	8087954 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8087870:	4b14      	ldr	r3, [pc, #80]	; (80878c4 <tcp_process+0x590>)
 8087872:	781b      	ldrb	r3, [r3, #0]
 8087874:	f003 0310 	and.w	r3, r3, #16
 8087878:	2b00      	cmp	r3, #0
 808787a:	d060      	beq.n	808793e <tcp_process+0x60a>
 808787c:	687b      	ldr	r3, [r7, #4]
 808787e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8087880:	4b11      	ldr	r3, [pc, #68]	; (80878c8 <tcp_process+0x594>)
 8087882:	681b      	ldr	r3, [r3, #0]
 8087884:	429a      	cmp	r2, r3
 8087886:	d15a      	bne.n	808793e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8087888:	687b      	ldr	r3, [r7, #4]
 808788a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 808788c:	2b00      	cmp	r3, #0
 808788e:	d156      	bne.n	808793e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8087890:	687b      	ldr	r3, [r7, #4]
 8087892:	8b5b      	ldrh	r3, [r3, #26]
 8087894:	f043 0302 	orr.w	r3, r3, #2
 8087898:	b29a      	uxth	r2, r3
 808789a:	687b      	ldr	r3, [r7, #4]
 808789c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 808789e:	6878      	ldr	r0, [r7, #4]
 80878a0:	f7fe fdbc 	bl	808641c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80878a4:	4b13      	ldr	r3, [pc, #76]	; (80878f4 <tcp_process+0x5c0>)
 80878a6:	681b      	ldr	r3, [r3, #0]
 80878a8:	687a      	ldr	r2, [r7, #4]
 80878aa:	429a      	cmp	r2, r3
 80878ac:	d105      	bne.n	80878ba <tcp_process+0x586>
 80878ae:	4b11      	ldr	r3, [pc, #68]	; (80878f4 <tcp_process+0x5c0>)
 80878b0:	681b      	ldr	r3, [r3, #0]
 80878b2:	68db      	ldr	r3, [r3, #12]
 80878b4:	4a0f      	ldr	r2, [pc, #60]	; (80878f4 <tcp_process+0x5c0>)
 80878b6:	6013      	str	r3, [r2, #0]
 80878b8:	e02e      	b.n	8087918 <tcp_process+0x5e4>
 80878ba:	4b0e      	ldr	r3, [pc, #56]	; (80878f4 <tcp_process+0x5c0>)
 80878bc:	681b      	ldr	r3, [r3, #0]
 80878be:	617b      	str	r3, [r7, #20]
 80878c0:	e027      	b.n	8087912 <tcp_process+0x5de>
 80878c2:	bf00      	nop
 80878c4:	20008278 	.word	0x20008278
 80878c8:	20008270 	.word	0x20008270
 80878cc:	20008276 	.word	0x20008276
 80878d0:	2000826c 	.word	0x2000826c
 80878d4:	2000825c 	.word	0x2000825c
 80878d8:	20004cd4 	.word	0x20004cd4
 80878dc:	20004cd8 	.word	0x20004cd8
 80878e0:	0808f1c0 	.word	0x0808f1c0
 80878e4:	0808f460 	.word	0x0808f460
 80878e8:	0808f20c 	.word	0x0808f20c
 80878ec:	20008274 	.word	0x20008274
 80878f0:	20008279 	.word	0x20008279
 80878f4:	20008240 	.word	0x20008240
 80878f8:	697b      	ldr	r3, [r7, #20]
 80878fa:	68db      	ldr	r3, [r3, #12]
 80878fc:	687a      	ldr	r2, [r7, #4]
 80878fe:	429a      	cmp	r2, r3
 8087900:	d104      	bne.n	808790c <tcp_process+0x5d8>
 8087902:	687b      	ldr	r3, [r7, #4]
 8087904:	68da      	ldr	r2, [r3, #12]
 8087906:	697b      	ldr	r3, [r7, #20]
 8087908:	60da      	str	r2, [r3, #12]
 808790a:	e005      	b.n	8087918 <tcp_process+0x5e4>
 808790c:	697b      	ldr	r3, [r7, #20]
 808790e:	68db      	ldr	r3, [r3, #12]
 8087910:	617b      	str	r3, [r7, #20]
 8087912:	697b      	ldr	r3, [r7, #20]
 8087914:	2b00      	cmp	r3, #0
 8087916:	d1ef      	bne.n	80878f8 <tcp_process+0x5c4>
 8087918:	687b      	ldr	r3, [r7, #4]
 808791a:	2200      	movs	r2, #0
 808791c:	60da      	str	r2, [r3, #12]
 808791e:	4b77      	ldr	r3, [pc, #476]	; (8087afc <tcp_process+0x7c8>)
 8087920:	2201      	movs	r2, #1
 8087922:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8087924:	687b      	ldr	r3, [r7, #4]
 8087926:	220a      	movs	r2, #10
 8087928:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 808792a:	4b75      	ldr	r3, [pc, #468]	; (8087b00 <tcp_process+0x7cc>)
 808792c:	681a      	ldr	r2, [r3, #0]
 808792e:	687b      	ldr	r3, [r7, #4]
 8087930:	60da      	str	r2, [r3, #12]
 8087932:	4a73      	ldr	r2, [pc, #460]	; (8087b00 <tcp_process+0x7cc>)
 8087934:	687b      	ldr	r3, [r7, #4]
 8087936:	6013      	str	r3, [r2, #0]
 8087938:	f002 fcfa 	bl	808a330 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 808793c:	e0d2      	b.n	8087ae4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 808793e:	687b      	ldr	r3, [r7, #4]
 8087940:	8b5b      	ldrh	r3, [r3, #26]
 8087942:	f043 0302 	orr.w	r3, r3, #2
 8087946:	b29a      	uxth	r2, r3
 8087948:	687b      	ldr	r3, [r7, #4]
 808794a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 808794c:	687b      	ldr	r3, [r7, #4]
 808794e:	2208      	movs	r2, #8
 8087950:	751a      	strb	r2, [r3, #20]
      break;
 8087952:	e0c7      	b.n	8087ae4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8087954:	4b6b      	ldr	r3, [pc, #428]	; (8087b04 <tcp_process+0x7d0>)
 8087956:	781b      	ldrb	r3, [r3, #0]
 8087958:	f003 0310 	and.w	r3, r3, #16
 808795c:	2b00      	cmp	r3, #0
 808795e:	f000 80c1 	beq.w	8087ae4 <tcp_process+0x7b0>
 8087962:	687b      	ldr	r3, [r7, #4]
 8087964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8087966:	4b68      	ldr	r3, [pc, #416]	; (8087b08 <tcp_process+0x7d4>)
 8087968:	681b      	ldr	r3, [r3, #0]
 808796a:	429a      	cmp	r2, r3
 808796c:	f040 80ba 	bne.w	8087ae4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8087970:	687b      	ldr	r3, [r7, #4]
 8087972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8087974:	2b00      	cmp	r3, #0
 8087976:	f040 80b5 	bne.w	8087ae4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 808797a:	687b      	ldr	r3, [r7, #4]
 808797c:	2206      	movs	r2, #6
 808797e:	751a      	strb	r2, [r3, #20]
      break;
 8087980:	e0b0      	b.n	8087ae4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8087982:	6878      	ldr	r0, [r7, #4]
 8087984:	f000 f9ca 	bl	8087d1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8087988:	4b60      	ldr	r3, [pc, #384]	; (8087b0c <tcp_process+0x7d8>)
 808798a:	781b      	ldrb	r3, [r3, #0]
 808798c:	f003 0320 	and.w	r3, r3, #32
 8087990:	2b00      	cmp	r3, #0
 8087992:	f000 80a9 	beq.w	8087ae8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8087996:	687b      	ldr	r3, [r7, #4]
 8087998:	8b5b      	ldrh	r3, [r3, #26]
 808799a:	f043 0302 	orr.w	r3, r3, #2
 808799e:	b29a      	uxth	r2, r3
 80879a0:	687b      	ldr	r3, [r7, #4]
 80879a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80879a4:	6878      	ldr	r0, [r7, #4]
 80879a6:	f7fe fd39 	bl	808641c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80879aa:	4b59      	ldr	r3, [pc, #356]	; (8087b10 <tcp_process+0x7dc>)
 80879ac:	681b      	ldr	r3, [r3, #0]
 80879ae:	687a      	ldr	r2, [r7, #4]
 80879b0:	429a      	cmp	r2, r3
 80879b2:	d105      	bne.n	80879c0 <tcp_process+0x68c>
 80879b4:	4b56      	ldr	r3, [pc, #344]	; (8087b10 <tcp_process+0x7dc>)
 80879b6:	681b      	ldr	r3, [r3, #0]
 80879b8:	68db      	ldr	r3, [r3, #12]
 80879ba:	4a55      	ldr	r2, [pc, #340]	; (8087b10 <tcp_process+0x7dc>)
 80879bc:	6013      	str	r3, [r2, #0]
 80879be:	e013      	b.n	80879e8 <tcp_process+0x6b4>
 80879c0:	4b53      	ldr	r3, [pc, #332]	; (8087b10 <tcp_process+0x7dc>)
 80879c2:	681b      	ldr	r3, [r3, #0]
 80879c4:	613b      	str	r3, [r7, #16]
 80879c6:	e00c      	b.n	80879e2 <tcp_process+0x6ae>
 80879c8:	693b      	ldr	r3, [r7, #16]
 80879ca:	68db      	ldr	r3, [r3, #12]
 80879cc:	687a      	ldr	r2, [r7, #4]
 80879ce:	429a      	cmp	r2, r3
 80879d0:	d104      	bne.n	80879dc <tcp_process+0x6a8>
 80879d2:	687b      	ldr	r3, [r7, #4]
 80879d4:	68da      	ldr	r2, [r3, #12]
 80879d6:	693b      	ldr	r3, [r7, #16]
 80879d8:	60da      	str	r2, [r3, #12]
 80879da:	e005      	b.n	80879e8 <tcp_process+0x6b4>
 80879dc:	693b      	ldr	r3, [r7, #16]
 80879de:	68db      	ldr	r3, [r3, #12]
 80879e0:	613b      	str	r3, [r7, #16]
 80879e2:	693b      	ldr	r3, [r7, #16]
 80879e4:	2b00      	cmp	r3, #0
 80879e6:	d1ef      	bne.n	80879c8 <tcp_process+0x694>
 80879e8:	687b      	ldr	r3, [r7, #4]
 80879ea:	2200      	movs	r2, #0
 80879ec:	60da      	str	r2, [r3, #12]
 80879ee:	4b43      	ldr	r3, [pc, #268]	; (8087afc <tcp_process+0x7c8>)
 80879f0:	2201      	movs	r2, #1
 80879f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80879f4:	687b      	ldr	r3, [r7, #4]
 80879f6:	220a      	movs	r2, #10
 80879f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80879fa:	4b41      	ldr	r3, [pc, #260]	; (8087b00 <tcp_process+0x7cc>)
 80879fc:	681a      	ldr	r2, [r3, #0]
 80879fe:	687b      	ldr	r3, [r7, #4]
 8087a00:	60da      	str	r2, [r3, #12]
 8087a02:	4a3f      	ldr	r2, [pc, #252]	; (8087b00 <tcp_process+0x7cc>)
 8087a04:	687b      	ldr	r3, [r7, #4]
 8087a06:	6013      	str	r3, [r2, #0]
 8087a08:	f002 fc92 	bl	808a330 <tcp_timer_needed>
      }
      break;
 8087a0c:	e06c      	b.n	8087ae8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8087a0e:	6878      	ldr	r0, [r7, #4]
 8087a10:	f000 f984 	bl	8087d1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8087a14:	4b3b      	ldr	r3, [pc, #236]	; (8087b04 <tcp_process+0x7d0>)
 8087a16:	781b      	ldrb	r3, [r3, #0]
 8087a18:	f003 0310 	and.w	r3, r3, #16
 8087a1c:	2b00      	cmp	r3, #0
 8087a1e:	d065      	beq.n	8087aec <tcp_process+0x7b8>
 8087a20:	687b      	ldr	r3, [r7, #4]
 8087a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8087a24:	4b38      	ldr	r3, [pc, #224]	; (8087b08 <tcp_process+0x7d4>)
 8087a26:	681b      	ldr	r3, [r3, #0]
 8087a28:	429a      	cmp	r2, r3
 8087a2a:	d15f      	bne.n	8087aec <tcp_process+0x7b8>
 8087a2c:	687b      	ldr	r3, [r7, #4]
 8087a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8087a30:	2b00      	cmp	r3, #0
 8087a32:	d15b      	bne.n	8087aec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8087a34:	6878      	ldr	r0, [r7, #4]
 8087a36:	f7fe fcf1 	bl	808641c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8087a3a:	4b35      	ldr	r3, [pc, #212]	; (8087b10 <tcp_process+0x7dc>)
 8087a3c:	681b      	ldr	r3, [r3, #0]
 8087a3e:	687a      	ldr	r2, [r7, #4]
 8087a40:	429a      	cmp	r2, r3
 8087a42:	d105      	bne.n	8087a50 <tcp_process+0x71c>
 8087a44:	4b32      	ldr	r3, [pc, #200]	; (8087b10 <tcp_process+0x7dc>)
 8087a46:	681b      	ldr	r3, [r3, #0]
 8087a48:	68db      	ldr	r3, [r3, #12]
 8087a4a:	4a31      	ldr	r2, [pc, #196]	; (8087b10 <tcp_process+0x7dc>)
 8087a4c:	6013      	str	r3, [r2, #0]
 8087a4e:	e013      	b.n	8087a78 <tcp_process+0x744>
 8087a50:	4b2f      	ldr	r3, [pc, #188]	; (8087b10 <tcp_process+0x7dc>)
 8087a52:	681b      	ldr	r3, [r3, #0]
 8087a54:	60fb      	str	r3, [r7, #12]
 8087a56:	e00c      	b.n	8087a72 <tcp_process+0x73e>
 8087a58:	68fb      	ldr	r3, [r7, #12]
 8087a5a:	68db      	ldr	r3, [r3, #12]
 8087a5c:	687a      	ldr	r2, [r7, #4]
 8087a5e:	429a      	cmp	r2, r3
 8087a60:	d104      	bne.n	8087a6c <tcp_process+0x738>
 8087a62:	687b      	ldr	r3, [r7, #4]
 8087a64:	68da      	ldr	r2, [r3, #12]
 8087a66:	68fb      	ldr	r3, [r7, #12]
 8087a68:	60da      	str	r2, [r3, #12]
 8087a6a:	e005      	b.n	8087a78 <tcp_process+0x744>
 8087a6c:	68fb      	ldr	r3, [r7, #12]
 8087a6e:	68db      	ldr	r3, [r3, #12]
 8087a70:	60fb      	str	r3, [r7, #12]
 8087a72:	68fb      	ldr	r3, [r7, #12]
 8087a74:	2b00      	cmp	r3, #0
 8087a76:	d1ef      	bne.n	8087a58 <tcp_process+0x724>
 8087a78:	687b      	ldr	r3, [r7, #4]
 8087a7a:	2200      	movs	r2, #0
 8087a7c:	60da      	str	r2, [r3, #12]
 8087a7e:	4b1f      	ldr	r3, [pc, #124]	; (8087afc <tcp_process+0x7c8>)
 8087a80:	2201      	movs	r2, #1
 8087a82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8087a84:	687b      	ldr	r3, [r7, #4]
 8087a86:	220a      	movs	r2, #10
 8087a88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8087a8a:	4b1d      	ldr	r3, [pc, #116]	; (8087b00 <tcp_process+0x7cc>)
 8087a8c:	681a      	ldr	r2, [r3, #0]
 8087a8e:	687b      	ldr	r3, [r7, #4]
 8087a90:	60da      	str	r2, [r3, #12]
 8087a92:	4a1b      	ldr	r2, [pc, #108]	; (8087b00 <tcp_process+0x7cc>)
 8087a94:	687b      	ldr	r3, [r7, #4]
 8087a96:	6013      	str	r3, [r2, #0]
 8087a98:	f002 fc4a 	bl	808a330 <tcp_timer_needed>
      }
      break;
 8087a9c:	e026      	b.n	8087aec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8087a9e:	6878      	ldr	r0, [r7, #4]
 8087aa0:	f000 f93c 	bl	8087d1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8087aa4:	4b17      	ldr	r3, [pc, #92]	; (8087b04 <tcp_process+0x7d0>)
 8087aa6:	781b      	ldrb	r3, [r3, #0]
 8087aa8:	f003 0310 	and.w	r3, r3, #16
 8087aac:	2b00      	cmp	r3, #0
 8087aae:	d01f      	beq.n	8087af0 <tcp_process+0x7bc>
 8087ab0:	687b      	ldr	r3, [r7, #4]
 8087ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8087ab4:	4b14      	ldr	r3, [pc, #80]	; (8087b08 <tcp_process+0x7d4>)
 8087ab6:	681b      	ldr	r3, [r3, #0]
 8087ab8:	429a      	cmp	r2, r3
 8087aba:	d119      	bne.n	8087af0 <tcp_process+0x7bc>
 8087abc:	687b      	ldr	r3, [r7, #4]
 8087abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8087ac0:	2b00      	cmp	r3, #0
 8087ac2:	d115      	bne.n	8087af0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8087ac4:	4b11      	ldr	r3, [pc, #68]	; (8087b0c <tcp_process+0x7d8>)
 8087ac6:	781b      	ldrb	r3, [r3, #0]
 8087ac8:	f043 0310 	orr.w	r3, r3, #16
 8087acc:	b2da      	uxtb	r2, r3
 8087ace:	4b0f      	ldr	r3, [pc, #60]	; (8087b0c <tcp_process+0x7d8>)
 8087ad0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8087ad2:	e00d      	b.n	8087af0 <tcp_process+0x7bc>
    default:
      break;
 8087ad4:	bf00      	nop
 8087ad6:	e00c      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087ad8:	bf00      	nop
 8087ada:	e00a      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087adc:	bf00      	nop
 8087ade:	e008      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087ae0:	bf00      	nop
 8087ae2:	e006      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087ae4:	bf00      	nop
 8087ae6:	e004      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087ae8:	bf00      	nop
 8087aea:	e002      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087aec:	bf00      	nop
 8087aee:	e000      	b.n	8087af2 <tcp_process+0x7be>
      break;
 8087af0:	bf00      	nop
  }
  return ERR_OK;
 8087af2:	2300      	movs	r3, #0
}
 8087af4:	4618      	mov	r0, r3
 8087af6:	3724      	adds	r7, #36	; 0x24
 8087af8:	46bd      	mov	sp, r7
 8087afa:	bd90      	pop	{r4, r7, pc}
 8087afc:	20008248 	.word	0x20008248
 8087b00:	20008244 	.word	0x20008244
 8087b04:	20008278 	.word	0x20008278
 8087b08:	20008270 	.word	0x20008270
 8087b0c:	20008279 	.word	0x20008279
 8087b10:	20008240 	.word	0x20008240

08087b14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8087b14:	b590      	push	{r4, r7, lr}
 8087b16:	b085      	sub	sp, #20
 8087b18:	af00      	add	r7, sp, #0
 8087b1a:	6078      	str	r0, [r7, #4]
 8087b1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8087b1e:	687b      	ldr	r3, [r7, #4]
 8087b20:	2b00      	cmp	r3, #0
 8087b22:	d106      	bne.n	8087b32 <tcp_oos_insert_segment+0x1e>
 8087b24:	4b3b      	ldr	r3, [pc, #236]	; (8087c14 <tcp_oos_insert_segment+0x100>)
 8087b26:	f240 421f 	movw	r2, #1055	; 0x41f
 8087b2a:	493b      	ldr	r1, [pc, #236]	; (8087c18 <tcp_oos_insert_segment+0x104>)
 8087b2c:	483b      	ldr	r0, [pc, #236]	; (8087c1c <tcp_oos_insert_segment+0x108>)
 8087b2e:	f005 f9d1 	bl	808ced4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8087b32:	687b      	ldr	r3, [r7, #4]
 8087b34:	68db      	ldr	r3, [r3, #12]
 8087b36:	899b      	ldrh	r3, [r3, #12]
 8087b38:	b29b      	uxth	r3, r3
 8087b3a:	4618      	mov	r0, r3
 8087b3c:	f7fb fcd0 	bl	80834e0 <lwip_htons>
 8087b40:	4603      	mov	r3, r0
 8087b42:	b2db      	uxtb	r3, r3
 8087b44:	f003 0301 	and.w	r3, r3, #1
 8087b48:	2b00      	cmp	r3, #0
 8087b4a:	d028      	beq.n	8087b9e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8087b4c:	6838      	ldr	r0, [r7, #0]
 8087b4e:	f7fe fa63 	bl	8086018 <tcp_segs_free>
    next = NULL;
 8087b52:	2300      	movs	r3, #0
 8087b54:	603b      	str	r3, [r7, #0]
 8087b56:	e056      	b.n	8087c06 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8087b58:	683b      	ldr	r3, [r7, #0]
 8087b5a:	68db      	ldr	r3, [r3, #12]
 8087b5c:	899b      	ldrh	r3, [r3, #12]
 8087b5e:	b29b      	uxth	r3, r3
 8087b60:	4618      	mov	r0, r3
 8087b62:	f7fb fcbd 	bl	80834e0 <lwip_htons>
 8087b66:	4603      	mov	r3, r0
 8087b68:	b2db      	uxtb	r3, r3
 8087b6a:	f003 0301 	and.w	r3, r3, #1
 8087b6e:	2b00      	cmp	r3, #0
 8087b70:	d00d      	beq.n	8087b8e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8087b72:	687b      	ldr	r3, [r7, #4]
 8087b74:	68db      	ldr	r3, [r3, #12]
 8087b76:	899b      	ldrh	r3, [r3, #12]
 8087b78:	b29c      	uxth	r4, r3
 8087b7a:	2001      	movs	r0, #1
 8087b7c:	f7fb fcb0 	bl	80834e0 <lwip_htons>
 8087b80:	4603      	mov	r3, r0
 8087b82:	461a      	mov	r2, r3
 8087b84:	687b      	ldr	r3, [r7, #4]
 8087b86:	68db      	ldr	r3, [r3, #12]
 8087b88:	4322      	orrs	r2, r4
 8087b8a:	b292      	uxth	r2, r2
 8087b8c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8087b8e:	683b      	ldr	r3, [r7, #0]
 8087b90:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8087b92:	683b      	ldr	r3, [r7, #0]
 8087b94:	681b      	ldr	r3, [r3, #0]
 8087b96:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8087b98:	68f8      	ldr	r0, [r7, #12]
 8087b9a:	f7fe fa52 	bl	8086042 <tcp_seg_free>
    while (next &&
 8087b9e:	683b      	ldr	r3, [r7, #0]
 8087ba0:	2b00      	cmp	r3, #0
 8087ba2:	d00e      	beq.n	8087bc2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8087ba4:	687b      	ldr	r3, [r7, #4]
 8087ba6:	891b      	ldrh	r3, [r3, #8]
 8087ba8:	461a      	mov	r2, r3
 8087baa:	4b1d      	ldr	r3, [pc, #116]	; (8087c20 <tcp_oos_insert_segment+0x10c>)
 8087bac:	681b      	ldr	r3, [r3, #0]
 8087bae:	441a      	add	r2, r3
 8087bb0:	683b      	ldr	r3, [r7, #0]
 8087bb2:	68db      	ldr	r3, [r3, #12]
 8087bb4:	685b      	ldr	r3, [r3, #4]
 8087bb6:	6839      	ldr	r1, [r7, #0]
 8087bb8:	8909      	ldrh	r1, [r1, #8]
 8087bba:	440b      	add	r3, r1
 8087bbc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8087bbe:	2b00      	cmp	r3, #0
 8087bc0:	daca      	bge.n	8087b58 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8087bc2:	683b      	ldr	r3, [r7, #0]
 8087bc4:	2b00      	cmp	r3, #0
 8087bc6:	d01e      	beq.n	8087c06 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8087bc8:	687b      	ldr	r3, [r7, #4]
 8087bca:	891b      	ldrh	r3, [r3, #8]
 8087bcc:	461a      	mov	r2, r3
 8087bce:	4b14      	ldr	r3, [pc, #80]	; (8087c20 <tcp_oos_insert_segment+0x10c>)
 8087bd0:	681b      	ldr	r3, [r3, #0]
 8087bd2:	441a      	add	r2, r3
 8087bd4:	683b      	ldr	r3, [r7, #0]
 8087bd6:	68db      	ldr	r3, [r3, #12]
 8087bd8:	685b      	ldr	r3, [r3, #4]
 8087bda:	1ad3      	subs	r3, r2, r3
    if (next &&
 8087bdc:	2b00      	cmp	r3, #0
 8087bde:	dd12      	ble.n	8087c06 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8087be0:	683b      	ldr	r3, [r7, #0]
 8087be2:	68db      	ldr	r3, [r3, #12]
 8087be4:	685b      	ldr	r3, [r3, #4]
 8087be6:	b29a      	uxth	r2, r3
 8087be8:	4b0d      	ldr	r3, [pc, #52]	; (8087c20 <tcp_oos_insert_segment+0x10c>)
 8087bea:	681b      	ldr	r3, [r3, #0]
 8087bec:	b29b      	uxth	r3, r3
 8087bee:	1ad3      	subs	r3, r2, r3
 8087bf0:	b29a      	uxth	r2, r3
 8087bf2:	687b      	ldr	r3, [r7, #4]
 8087bf4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8087bf6:	687b      	ldr	r3, [r7, #4]
 8087bf8:	685a      	ldr	r2, [r3, #4]
 8087bfa:	687b      	ldr	r3, [r7, #4]
 8087bfc:	891b      	ldrh	r3, [r3, #8]
 8087bfe:	4619      	mov	r1, r3
 8087c00:	4610      	mov	r0, r2
 8087c02:	f7fc fe25 	bl	8084850 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8087c06:	687b      	ldr	r3, [r7, #4]
 8087c08:	683a      	ldr	r2, [r7, #0]
 8087c0a:	601a      	str	r2, [r3, #0]
}
 8087c0c:	bf00      	nop
 8087c0e:	3714      	adds	r7, #20
 8087c10:	46bd      	mov	sp, r7
 8087c12:	bd90      	pop	{r4, r7, pc}
 8087c14:	0808f1c0 	.word	0x0808f1c0
 8087c18:	0808f480 	.word	0x0808f480
 8087c1c:	0808f20c 	.word	0x0808f20c
 8087c20:	2000826c 	.word	0x2000826c

08087c24 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8087c24:	b5b0      	push	{r4, r5, r7, lr}
 8087c26:	b086      	sub	sp, #24
 8087c28:	af00      	add	r7, sp, #0
 8087c2a:	60f8      	str	r0, [r7, #12]
 8087c2c:	60b9      	str	r1, [r7, #8]
 8087c2e:	607a      	str	r2, [r7, #4]
 8087c30:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8087c32:	e03e      	b.n	8087cb2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8087c34:	68bb      	ldr	r3, [r7, #8]
 8087c36:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8087c38:	68bb      	ldr	r3, [r7, #8]
 8087c3a:	681b      	ldr	r3, [r3, #0]
 8087c3c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8087c3e:	697b      	ldr	r3, [r7, #20]
 8087c40:	685b      	ldr	r3, [r3, #4]
 8087c42:	4618      	mov	r0, r3
 8087c44:	f7fd f812 	bl	8084c6c <pbuf_clen>
 8087c48:	4603      	mov	r3, r0
 8087c4a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8087c4c:	68fb      	ldr	r3, [r7, #12]
 8087c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8087c52:	8a7a      	ldrh	r2, [r7, #18]
 8087c54:	429a      	cmp	r2, r3
 8087c56:	d906      	bls.n	8087c66 <tcp_free_acked_segments+0x42>
 8087c58:	4b2a      	ldr	r3, [pc, #168]	; (8087d04 <tcp_free_acked_segments+0xe0>)
 8087c5a:	f240 4257 	movw	r2, #1111	; 0x457
 8087c5e:	492a      	ldr	r1, [pc, #168]	; (8087d08 <tcp_free_acked_segments+0xe4>)
 8087c60:	482a      	ldr	r0, [pc, #168]	; (8087d0c <tcp_free_acked_segments+0xe8>)
 8087c62:	f005 f937 	bl	808ced4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8087c66:	68fb      	ldr	r3, [r7, #12]
 8087c68:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8087c6c:	8a7b      	ldrh	r3, [r7, #18]
 8087c6e:	1ad3      	subs	r3, r2, r3
 8087c70:	b29a      	uxth	r2, r3
 8087c72:	68fb      	ldr	r3, [r7, #12]
 8087c74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8087c78:	697b      	ldr	r3, [r7, #20]
 8087c7a:	891a      	ldrh	r2, [r3, #8]
 8087c7c:	4b24      	ldr	r3, [pc, #144]	; (8087d10 <tcp_free_acked_segments+0xec>)
 8087c7e:	881b      	ldrh	r3, [r3, #0]
 8087c80:	4413      	add	r3, r2
 8087c82:	b29a      	uxth	r2, r3
 8087c84:	4b22      	ldr	r3, [pc, #136]	; (8087d10 <tcp_free_acked_segments+0xec>)
 8087c86:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8087c88:	6978      	ldr	r0, [r7, #20]
 8087c8a:	f7fe f9da 	bl	8086042 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8087c8e:	68fb      	ldr	r3, [r7, #12]
 8087c90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8087c94:	2b00      	cmp	r3, #0
 8087c96:	d00c      	beq.n	8087cb2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8087c98:	68bb      	ldr	r3, [r7, #8]
 8087c9a:	2b00      	cmp	r3, #0
 8087c9c:	d109      	bne.n	8087cb2 <tcp_free_acked_segments+0x8e>
 8087c9e:	683b      	ldr	r3, [r7, #0]
 8087ca0:	2b00      	cmp	r3, #0
 8087ca2:	d106      	bne.n	8087cb2 <tcp_free_acked_segments+0x8e>
 8087ca4:	4b17      	ldr	r3, [pc, #92]	; (8087d04 <tcp_free_acked_segments+0xe0>)
 8087ca6:	f240 4261 	movw	r2, #1121	; 0x461
 8087caa:	491a      	ldr	r1, [pc, #104]	; (8087d14 <tcp_free_acked_segments+0xf0>)
 8087cac:	4817      	ldr	r0, [pc, #92]	; (8087d0c <tcp_free_acked_segments+0xe8>)
 8087cae:	f005 f911 	bl	808ced4 <iprintf>
  while (seg_list != NULL &&
 8087cb2:	68bb      	ldr	r3, [r7, #8]
 8087cb4:	2b00      	cmp	r3, #0
 8087cb6:	d020      	beq.n	8087cfa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8087cb8:	68bb      	ldr	r3, [r7, #8]
 8087cba:	68db      	ldr	r3, [r3, #12]
 8087cbc:	685b      	ldr	r3, [r3, #4]
 8087cbe:	4618      	mov	r0, r3
 8087cc0:	f7fb fc23 	bl	808350a <lwip_htonl>
 8087cc4:	4604      	mov	r4, r0
 8087cc6:	68bb      	ldr	r3, [r7, #8]
 8087cc8:	891b      	ldrh	r3, [r3, #8]
 8087cca:	461d      	mov	r5, r3
 8087ccc:	68bb      	ldr	r3, [r7, #8]
 8087cce:	68db      	ldr	r3, [r3, #12]
 8087cd0:	899b      	ldrh	r3, [r3, #12]
 8087cd2:	b29b      	uxth	r3, r3
 8087cd4:	4618      	mov	r0, r3
 8087cd6:	f7fb fc03 	bl	80834e0 <lwip_htons>
 8087cda:	4603      	mov	r3, r0
 8087cdc:	b2db      	uxtb	r3, r3
 8087cde:	f003 0303 	and.w	r3, r3, #3
 8087ce2:	2b00      	cmp	r3, #0
 8087ce4:	d001      	beq.n	8087cea <tcp_free_acked_segments+0xc6>
 8087ce6:	2301      	movs	r3, #1
 8087ce8:	e000      	b.n	8087cec <tcp_free_acked_segments+0xc8>
 8087cea:	2300      	movs	r3, #0
 8087cec:	442b      	add	r3, r5
 8087cee:	18e2      	adds	r2, r4, r3
 8087cf0:	4b09      	ldr	r3, [pc, #36]	; (8087d18 <tcp_free_acked_segments+0xf4>)
 8087cf2:	681b      	ldr	r3, [r3, #0]
 8087cf4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8087cf6:	2b00      	cmp	r3, #0
 8087cf8:	dd9c      	ble.n	8087c34 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8087cfa:	68bb      	ldr	r3, [r7, #8]
}
 8087cfc:	4618      	mov	r0, r3
 8087cfe:	3718      	adds	r7, #24
 8087d00:	46bd      	mov	sp, r7
 8087d02:	bdb0      	pop	{r4, r5, r7, pc}
 8087d04:	0808f1c0 	.word	0x0808f1c0
 8087d08:	0808f4a8 	.word	0x0808f4a8
 8087d0c:	0808f20c 	.word	0x0808f20c
 8087d10:	20008274 	.word	0x20008274
 8087d14:	0808f4d0 	.word	0x0808f4d0
 8087d18:	20008270 	.word	0x20008270

08087d1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8087d1c:	b5b0      	push	{r4, r5, r7, lr}
 8087d1e:	b094      	sub	sp, #80	; 0x50
 8087d20:	af00      	add	r7, sp, #0
 8087d22:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8087d24:	2300      	movs	r3, #0
 8087d26:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8087d28:	687b      	ldr	r3, [r7, #4]
 8087d2a:	2b00      	cmp	r3, #0
 8087d2c:	d106      	bne.n	8087d3c <tcp_receive+0x20>
 8087d2e:	4b91      	ldr	r3, [pc, #580]	; (8087f74 <tcp_receive+0x258>)
 8087d30:	f240 427b 	movw	r2, #1147	; 0x47b
 8087d34:	4990      	ldr	r1, [pc, #576]	; (8087f78 <tcp_receive+0x25c>)
 8087d36:	4891      	ldr	r0, [pc, #580]	; (8087f7c <tcp_receive+0x260>)
 8087d38:	f005 f8cc 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8087d3c:	687b      	ldr	r3, [r7, #4]
 8087d3e:	7d1b      	ldrb	r3, [r3, #20]
 8087d40:	2b03      	cmp	r3, #3
 8087d42:	d806      	bhi.n	8087d52 <tcp_receive+0x36>
 8087d44:	4b8b      	ldr	r3, [pc, #556]	; (8087f74 <tcp_receive+0x258>)
 8087d46:	f240 427c 	movw	r2, #1148	; 0x47c
 8087d4a:	498d      	ldr	r1, [pc, #564]	; (8087f80 <tcp_receive+0x264>)
 8087d4c:	488b      	ldr	r0, [pc, #556]	; (8087f7c <tcp_receive+0x260>)
 8087d4e:	f005 f8c1 	bl	808ced4 <iprintf>

  if (flags & TCP_ACK) {
 8087d52:	4b8c      	ldr	r3, [pc, #560]	; (8087f84 <tcp_receive+0x268>)
 8087d54:	781b      	ldrb	r3, [r3, #0]
 8087d56:	f003 0310 	and.w	r3, r3, #16
 8087d5a:	2b00      	cmp	r3, #0
 8087d5c:	f000 8264 	beq.w	8088228 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8087d60:	687b      	ldr	r3, [r7, #4]
 8087d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8087d66:	461a      	mov	r2, r3
 8087d68:	687b      	ldr	r3, [r7, #4]
 8087d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087d6c:	4413      	add	r3, r2
 8087d6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8087d70:	687b      	ldr	r3, [r7, #4]
 8087d72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8087d74:	4b84      	ldr	r3, [pc, #528]	; (8087f88 <tcp_receive+0x26c>)
 8087d76:	681b      	ldr	r3, [r3, #0]
 8087d78:	1ad3      	subs	r3, r2, r3
 8087d7a:	2b00      	cmp	r3, #0
 8087d7c:	db1b      	blt.n	8087db6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8087d7e:	687b      	ldr	r3, [r7, #4]
 8087d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8087d82:	4b81      	ldr	r3, [pc, #516]	; (8087f88 <tcp_receive+0x26c>)
 8087d84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8087d86:	429a      	cmp	r2, r3
 8087d88:	d106      	bne.n	8087d98 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8087d8a:	687b      	ldr	r3, [r7, #4]
 8087d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8087d8e:	4b7f      	ldr	r3, [pc, #508]	; (8087f8c <tcp_receive+0x270>)
 8087d90:	681b      	ldr	r3, [r3, #0]
 8087d92:	1ad3      	subs	r3, r2, r3
 8087d94:	2b00      	cmp	r3, #0
 8087d96:	db0e      	blt.n	8087db6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8087d98:	687b      	ldr	r3, [r7, #4]
 8087d9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8087d9c:	4b7b      	ldr	r3, [pc, #492]	; (8087f8c <tcp_receive+0x270>)
 8087d9e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8087da0:	429a      	cmp	r2, r3
 8087da2:	d125      	bne.n	8087df0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8087da4:	4b7a      	ldr	r3, [pc, #488]	; (8087f90 <tcp_receive+0x274>)
 8087da6:	681b      	ldr	r3, [r3, #0]
 8087da8:	89db      	ldrh	r3, [r3, #14]
 8087daa:	b29a      	uxth	r2, r3
 8087dac:	687b      	ldr	r3, [r7, #4]
 8087dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8087db2:	429a      	cmp	r2, r3
 8087db4:	d91c      	bls.n	8087df0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8087db6:	4b76      	ldr	r3, [pc, #472]	; (8087f90 <tcp_receive+0x274>)
 8087db8:	681b      	ldr	r3, [r3, #0]
 8087dba:	89db      	ldrh	r3, [r3, #14]
 8087dbc:	b29a      	uxth	r2, r3
 8087dbe:	687b      	ldr	r3, [r7, #4]
 8087dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8087dc4:	687b      	ldr	r3, [r7, #4]
 8087dc6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8087dca:	687b      	ldr	r3, [r7, #4]
 8087dcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8087dd0:	429a      	cmp	r2, r3
 8087dd2:	d205      	bcs.n	8087de0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8087dd4:	687b      	ldr	r3, [r7, #4]
 8087dd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8087dda:	687b      	ldr	r3, [r7, #4]
 8087ddc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8087de0:	4b69      	ldr	r3, [pc, #420]	; (8087f88 <tcp_receive+0x26c>)
 8087de2:	681a      	ldr	r2, [r3, #0]
 8087de4:	687b      	ldr	r3, [r7, #4]
 8087de6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8087de8:	4b68      	ldr	r3, [pc, #416]	; (8087f8c <tcp_receive+0x270>)
 8087dea:	681a      	ldr	r2, [r3, #0]
 8087dec:	687b      	ldr	r3, [r7, #4]
 8087dee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8087df0:	4b66      	ldr	r3, [pc, #408]	; (8087f8c <tcp_receive+0x270>)
 8087df2:	681a      	ldr	r2, [r3, #0]
 8087df4:	687b      	ldr	r3, [r7, #4]
 8087df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087df8:	1ad3      	subs	r3, r2, r3
 8087dfa:	2b00      	cmp	r3, #0
 8087dfc:	dc58      	bgt.n	8087eb0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8087dfe:	4b65      	ldr	r3, [pc, #404]	; (8087f94 <tcp_receive+0x278>)
 8087e00:	881b      	ldrh	r3, [r3, #0]
 8087e02:	2b00      	cmp	r3, #0
 8087e04:	d14b      	bne.n	8087e9e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8087e06:	687b      	ldr	r3, [r7, #4]
 8087e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087e0a:	687a      	ldr	r2, [r7, #4]
 8087e0c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8087e10:	4413      	add	r3, r2
 8087e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8087e14:	429a      	cmp	r2, r3
 8087e16:	d142      	bne.n	8087e9e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8087e18:	687b      	ldr	r3, [r7, #4]
 8087e1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8087e1e:	2b00      	cmp	r3, #0
 8087e20:	db3d      	blt.n	8087e9e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8087e22:	687b      	ldr	r3, [r7, #4]
 8087e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8087e26:	4b59      	ldr	r3, [pc, #356]	; (8087f8c <tcp_receive+0x270>)
 8087e28:	681b      	ldr	r3, [r3, #0]
 8087e2a:	429a      	cmp	r2, r3
 8087e2c:	d137      	bne.n	8087e9e <tcp_receive+0x182>
              found_dupack = 1;
 8087e2e:	2301      	movs	r3, #1
 8087e30:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8087e32:	687b      	ldr	r3, [r7, #4]
 8087e34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8087e38:	2bff      	cmp	r3, #255	; 0xff
 8087e3a:	d007      	beq.n	8087e4c <tcp_receive+0x130>
                ++pcb->dupacks;
 8087e3c:	687b      	ldr	r3, [r7, #4]
 8087e3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8087e42:	3301      	adds	r3, #1
 8087e44:	b2da      	uxtb	r2, r3
 8087e46:	687b      	ldr	r3, [r7, #4]
 8087e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8087e4c:	687b      	ldr	r3, [r7, #4]
 8087e4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8087e52:	2b03      	cmp	r3, #3
 8087e54:	d91b      	bls.n	8087e8e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8087e56:	687b      	ldr	r3, [r7, #4]
 8087e58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8087e5c:	687b      	ldr	r3, [r7, #4]
 8087e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087e60:	4413      	add	r3, r2
 8087e62:	b29a      	uxth	r2, r3
 8087e64:	687b      	ldr	r3, [r7, #4]
 8087e66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8087e6a:	429a      	cmp	r2, r3
 8087e6c:	d30a      	bcc.n	8087e84 <tcp_receive+0x168>
 8087e6e:	687b      	ldr	r3, [r7, #4]
 8087e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8087e74:	687b      	ldr	r3, [r7, #4]
 8087e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087e78:	4413      	add	r3, r2
 8087e7a:	b29a      	uxth	r2, r3
 8087e7c:	687b      	ldr	r3, [r7, #4]
 8087e7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8087e82:	e004      	b.n	8087e8e <tcp_receive+0x172>
 8087e84:	687b      	ldr	r3, [r7, #4]
 8087e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8087e8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8087e8e:	687b      	ldr	r3, [r7, #4]
 8087e90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8087e94:	2b02      	cmp	r3, #2
 8087e96:	d902      	bls.n	8087e9e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8087e98:	6878      	ldr	r0, [r7, #4]
 8087e9a:	f001 feeb 	bl	8089c74 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8087e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8087ea0:	2b00      	cmp	r3, #0
 8087ea2:	f040 8161 	bne.w	8088168 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8087ea6:	687b      	ldr	r3, [r7, #4]
 8087ea8:	2200      	movs	r2, #0
 8087eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8087eae:	e15b      	b.n	8088168 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8087eb0:	4b36      	ldr	r3, [pc, #216]	; (8087f8c <tcp_receive+0x270>)
 8087eb2:	681a      	ldr	r2, [r3, #0]
 8087eb4:	687b      	ldr	r3, [r7, #4]
 8087eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087eb8:	1ad3      	subs	r3, r2, r3
 8087eba:	3b01      	subs	r3, #1
 8087ebc:	2b00      	cmp	r3, #0
 8087ebe:	f2c0 814e 	blt.w	808815e <tcp_receive+0x442>
 8087ec2:	4b32      	ldr	r3, [pc, #200]	; (8087f8c <tcp_receive+0x270>)
 8087ec4:	681a      	ldr	r2, [r3, #0]
 8087ec6:	687b      	ldr	r3, [r7, #4]
 8087ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8087eca:	1ad3      	subs	r3, r2, r3
 8087ecc:	2b00      	cmp	r3, #0
 8087ece:	f300 8146 	bgt.w	808815e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8087ed2:	687b      	ldr	r3, [r7, #4]
 8087ed4:	8b5b      	ldrh	r3, [r3, #26]
 8087ed6:	f003 0304 	and.w	r3, r3, #4
 8087eda:	2b00      	cmp	r3, #0
 8087edc:	d010      	beq.n	8087f00 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8087ede:	687b      	ldr	r3, [r7, #4]
 8087ee0:	8b5b      	ldrh	r3, [r3, #26]
 8087ee2:	f023 0304 	bic.w	r3, r3, #4
 8087ee6:	b29a      	uxth	r2, r3
 8087ee8:	687b      	ldr	r3, [r7, #4]
 8087eea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8087eec:	687b      	ldr	r3, [r7, #4]
 8087eee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8087ef2:	687b      	ldr	r3, [r7, #4]
 8087ef4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8087ef8:	687b      	ldr	r3, [r7, #4]
 8087efa:	2200      	movs	r2, #0
 8087efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8087f00:	687b      	ldr	r3, [r7, #4]
 8087f02:	2200      	movs	r2, #0
 8087f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8087f08:	687b      	ldr	r3, [r7, #4]
 8087f0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8087f0e:	10db      	asrs	r3, r3, #3
 8087f10:	b21b      	sxth	r3, r3
 8087f12:	b29a      	uxth	r2, r3
 8087f14:	687b      	ldr	r3, [r7, #4]
 8087f16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8087f1a:	b29b      	uxth	r3, r3
 8087f1c:	4413      	add	r3, r2
 8087f1e:	b29b      	uxth	r3, r3
 8087f20:	b21a      	sxth	r2, r3
 8087f22:	687b      	ldr	r3, [r7, #4]
 8087f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8087f28:	4b18      	ldr	r3, [pc, #96]	; (8087f8c <tcp_receive+0x270>)
 8087f2a:	681b      	ldr	r3, [r3, #0]
 8087f2c:	b29a      	uxth	r2, r3
 8087f2e:	687b      	ldr	r3, [r7, #4]
 8087f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087f32:	b29b      	uxth	r3, r3
 8087f34:	1ad3      	subs	r3, r2, r3
 8087f36:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8087f38:	687b      	ldr	r3, [r7, #4]
 8087f3a:	2200      	movs	r2, #0
 8087f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8087f40:	4b12      	ldr	r3, [pc, #72]	; (8087f8c <tcp_receive+0x270>)
 8087f42:	681a      	ldr	r2, [r3, #0]
 8087f44:	687b      	ldr	r3, [r7, #4]
 8087f46:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8087f48:	687b      	ldr	r3, [r7, #4]
 8087f4a:	7d1b      	ldrb	r3, [r3, #20]
 8087f4c:	2b03      	cmp	r3, #3
 8087f4e:	f240 8097 	bls.w	8088080 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8087f52:	687b      	ldr	r3, [r7, #4]
 8087f54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8087f58:	687b      	ldr	r3, [r7, #4]
 8087f5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8087f5e:	429a      	cmp	r2, r3
 8087f60:	d245      	bcs.n	8087fee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8087f62:	687b      	ldr	r3, [r7, #4]
 8087f64:	8b5b      	ldrh	r3, [r3, #26]
 8087f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8087f6a:	2b00      	cmp	r3, #0
 8087f6c:	d014      	beq.n	8087f98 <tcp_receive+0x27c>
 8087f6e:	2301      	movs	r3, #1
 8087f70:	e013      	b.n	8087f9a <tcp_receive+0x27e>
 8087f72:	bf00      	nop
 8087f74:	0808f1c0 	.word	0x0808f1c0
 8087f78:	0808f4f0 	.word	0x0808f4f0
 8087f7c:	0808f20c 	.word	0x0808f20c
 8087f80:	0808f50c 	.word	0x0808f50c
 8087f84:	20008278 	.word	0x20008278
 8087f88:	2000826c 	.word	0x2000826c
 8087f8c:	20008270 	.word	0x20008270
 8087f90:	2000825c 	.word	0x2000825c
 8087f94:	20008276 	.word	0x20008276
 8087f98:	2302      	movs	r3, #2
 8087f9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8087f9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8087fa2:	b29a      	uxth	r2, r3
 8087fa4:	687b      	ldr	r3, [r7, #4]
 8087fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8087fa8:	fb12 f303 	smulbb	r3, r2, r3
 8087fac:	b29b      	uxth	r3, r3
 8087fae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8087fb0:	4293      	cmp	r3, r2
 8087fb2:	bf28      	it	cs
 8087fb4:	4613      	movcs	r3, r2
 8087fb6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8087fb8:	687b      	ldr	r3, [r7, #4]
 8087fba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8087fbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8087fc0:	4413      	add	r3, r2
 8087fc2:	b29a      	uxth	r2, r3
 8087fc4:	687b      	ldr	r3, [r7, #4]
 8087fc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8087fca:	429a      	cmp	r2, r3
 8087fcc:	d309      	bcc.n	8087fe2 <tcp_receive+0x2c6>
 8087fce:	687b      	ldr	r3, [r7, #4]
 8087fd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8087fd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8087fd6:	4413      	add	r3, r2
 8087fd8:	b29a      	uxth	r2, r3
 8087fda:	687b      	ldr	r3, [r7, #4]
 8087fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8087fe0:	e04e      	b.n	8088080 <tcp_receive+0x364>
 8087fe2:	687b      	ldr	r3, [r7, #4]
 8087fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8087fe8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8087fec:	e048      	b.n	8088080 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8087fee:	687b      	ldr	r3, [r7, #4]
 8087ff0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8087ff4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8087ff6:	4413      	add	r3, r2
 8087ff8:	b29a      	uxth	r2, r3
 8087ffa:	687b      	ldr	r3, [r7, #4]
 8087ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8088000:	429a      	cmp	r2, r3
 8088002:	d309      	bcc.n	8088018 <tcp_receive+0x2fc>
 8088004:	687b      	ldr	r3, [r7, #4]
 8088006:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 808800a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 808800c:	4413      	add	r3, r2
 808800e:	b29a      	uxth	r2, r3
 8088010:	687b      	ldr	r3, [r7, #4]
 8088012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8088016:	e004      	b.n	8088022 <tcp_receive+0x306>
 8088018:	687b      	ldr	r3, [r7, #4]
 808801a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808801e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8088022:	687b      	ldr	r3, [r7, #4]
 8088024:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8088028:	687b      	ldr	r3, [r7, #4]
 808802a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 808802e:	429a      	cmp	r2, r3
 8088030:	d326      	bcc.n	8088080 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8088032:	687b      	ldr	r3, [r7, #4]
 8088034:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8088038:	687b      	ldr	r3, [r7, #4]
 808803a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 808803e:	1ad3      	subs	r3, r2, r3
 8088040:	b29a      	uxth	r2, r3
 8088042:	687b      	ldr	r3, [r7, #4]
 8088044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8088048:	687b      	ldr	r3, [r7, #4]
 808804a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 808804e:	687b      	ldr	r3, [r7, #4]
 8088050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8088052:	4413      	add	r3, r2
 8088054:	b29a      	uxth	r2, r3
 8088056:	687b      	ldr	r3, [r7, #4]
 8088058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 808805c:	429a      	cmp	r2, r3
 808805e:	d30a      	bcc.n	8088076 <tcp_receive+0x35a>
 8088060:	687b      	ldr	r3, [r7, #4]
 8088062:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8088066:	687b      	ldr	r3, [r7, #4]
 8088068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 808806a:	4413      	add	r3, r2
 808806c:	b29a      	uxth	r2, r3
 808806e:	687b      	ldr	r3, [r7, #4]
 8088070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8088074:	e004      	b.n	8088080 <tcp_receive+0x364>
 8088076:	687b      	ldr	r3, [r7, #4]
 8088078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808807c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8088080:	687b      	ldr	r3, [r7, #4]
 8088082:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8088084:	687b      	ldr	r3, [r7, #4]
 8088086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8088088:	4a98      	ldr	r2, [pc, #608]	; (80882ec <tcp_receive+0x5d0>)
 808808a:	6878      	ldr	r0, [r7, #4]
 808808c:	f7ff fdca 	bl	8087c24 <tcp_free_acked_segments>
 8088090:	4602      	mov	r2, r0
 8088092:	687b      	ldr	r3, [r7, #4]
 8088094:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8088096:	687b      	ldr	r3, [r7, #4]
 8088098:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 808809a:	687b      	ldr	r3, [r7, #4]
 808809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808809e:	4a94      	ldr	r2, [pc, #592]	; (80882f0 <tcp_receive+0x5d4>)
 80880a0:	6878      	ldr	r0, [r7, #4]
 80880a2:	f7ff fdbf 	bl	8087c24 <tcp_free_acked_segments>
 80880a6:	4602      	mov	r2, r0
 80880a8:	687b      	ldr	r3, [r7, #4]
 80880aa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80880ac:	687b      	ldr	r3, [r7, #4]
 80880ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80880b0:	2b00      	cmp	r3, #0
 80880b2:	d104      	bne.n	80880be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80880b4:	687b      	ldr	r3, [r7, #4]
 80880b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80880ba:	861a      	strh	r2, [r3, #48]	; 0x30
 80880bc:	e002      	b.n	80880c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80880be:	687b      	ldr	r3, [r7, #4]
 80880c0:	2200      	movs	r2, #0
 80880c2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80880c4:	687b      	ldr	r3, [r7, #4]
 80880c6:	2200      	movs	r2, #0
 80880c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80880ca:	687b      	ldr	r3, [r7, #4]
 80880cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80880ce:	2b00      	cmp	r3, #0
 80880d0:	d103      	bne.n	80880da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80880d2:	687b      	ldr	r3, [r7, #4]
 80880d4:	2200      	movs	r2, #0
 80880d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80880da:	687b      	ldr	r3, [r7, #4]
 80880dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80880e0:	4b84      	ldr	r3, [pc, #528]	; (80882f4 <tcp_receive+0x5d8>)
 80880e2:	881b      	ldrh	r3, [r3, #0]
 80880e4:	4413      	add	r3, r2
 80880e6:	b29a      	uxth	r2, r3
 80880e8:	687b      	ldr	r3, [r7, #4]
 80880ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80880ee:	687b      	ldr	r3, [r7, #4]
 80880f0:	8b5b      	ldrh	r3, [r3, #26]
 80880f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80880f6:	2b00      	cmp	r3, #0
 80880f8:	d035      	beq.n	8088166 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80880fa:	687b      	ldr	r3, [r7, #4]
 80880fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80880fe:	2b00      	cmp	r3, #0
 8088100:	d118      	bne.n	8088134 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8088102:	687b      	ldr	r3, [r7, #4]
 8088104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8088106:	2b00      	cmp	r3, #0
 8088108:	d00c      	beq.n	8088124 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 808810a:	687b      	ldr	r3, [r7, #4]
 808810c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 808810e:	687b      	ldr	r3, [r7, #4]
 8088110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8088112:	68db      	ldr	r3, [r3, #12]
 8088114:	685b      	ldr	r3, [r3, #4]
 8088116:	4618      	mov	r0, r3
 8088118:	f7fb f9f7 	bl	808350a <lwip_htonl>
 808811c:	4603      	mov	r3, r0
 808811e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8088120:	2b00      	cmp	r3, #0
 8088122:	dc20      	bgt.n	8088166 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8088124:	687b      	ldr	r3, [r7, #4]
 8088126:	8b5b      	ldrh	r3, [r3, #26]
 8088128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 808812c:	b29a      	uxth	r2, r3
 808812e:	687b      	ldr	r3, [r7, #4]
 8088130:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8088132:	e018      	b.n	8088166 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8088134:	687b      	ldr	r3, [r7, #4]
 8088136:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8088138:	687b      	ldr	r3, [r7, #4]
 808813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808813c:	68db      	ldr	r3, [r3, #12]
 808813e:	685b      	ldr	r3, [r3, #4]
 8088140:	4618      	mov	r0, r3
 8088142:	f7fb f9e2 	bl	808350a <lwip_htonl>
 8088146:	4603      	mov	r3, r0
 8088148:	1ae3      	subs	r3, r4, r3
 808814a:	2b00      	cmp	r3, #0
 808814c:	dc0b      	bgt.n	8088166 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 808814e:	687b      	ldr	r3, [r7, #4]
 8088150:	8b5b      	ldrh	r3, [r3, #26]
 8088152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8088156:	b29a      	uxth	r2, r3
 8088158:	687b      	ldr	r3, [r7, #4]
 808815a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 808815c:	e003      	b.n	8088166 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 808815e:	6878      	ldr	r0, [r7, #4]
 8088160:	f001 ff76 	bl	808a050 <tcp_send_empty_ack>
 8088164:	e000      	b.n	8088168 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8088166:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8088168:	687b      	ldr	r3, [r7, #4]
 808816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808816c:	2b00      	cmp	r3, #0
 808816e:	d05b      	beq.n	8088228 <tcp_receive+0x50c>
 8088170:	687b      	ldr	r3, [r7, #4]
 8088172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8088174:	4b60      	ldr	r3, [pc, #384]	; (80882f8 <tcp_receive+0x5dc>)
 8088176:	681b      	ldr	r3, [r3, #0]
 8088178:	1ad3      	subs	r3, r2, r3
 808817a:	2b00      	cmp	r3, #0
 808817c:	da54      	bge.n	8088228 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 808817e:	4b5f      	ldr	r3, [pc, #380]	; (80882fc <tcp_receive+0x5e0>)
 8088180:	681b      	ldr	r3, [r3, #0]
 8088182:	b29a      	uxth	r2, r3
 8088184:	687b      	ldr	r3, [r7, #4]
 8088186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088188:	b29b      	uxth	r3, r3
 808818a:	1ad3      	subs	r3, r2, r3
 808818c:	b29b      	uxth	r3, r3
 808818e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8088192:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8088196:	687b      	ldr	r3, [r7, #4]
 8088198:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 808819c:	10db      	asrs	r3, r3, #3
 808819e:	b21b      	sxth	r3, r3
 80881a0:	b29b      	uxth	r3, r3
 80881a2:	1ad3      	subs	r3, r2, r3
 80881a4:	b29b      	uxth	r3, r3
 80881a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80881aa:	687b      	ldr	r3, [r7, #4]
 80881ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80881b0:	b29a      	uxth	r2, r3
 80881b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80881b6:	4413      	add	r3, r2
 80881b8:	b29b      	uxth	r3, r3
 80881ba:	b21a      	sxth	r2, r3
 80881bc:	687b      	ldr	r3, [r7, #4]
 80881be:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80881c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80881c4:	2b00      	cmp	r3, #0
 80881c6:	da05      	bge.n	80881d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80881c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80881cc:	425b      	negs	r3, r3
 80881ce:	b29b      	uxth	r3, r3
 80881d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80881d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80881d8:	687b      	ldr	r3, [r7, #4]
 80881da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80881de:	109b      	asrs	r3, r3, #2
 80881e0:	b21b      	sxth	r3, r3
 80881e2:	b29b      	uxth	r3, r3
 80881e4:	1ad3      	subs	r3, r2, r3
 80881e6:	b29b      	uxth	r3, r3
 80881e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80881ec:	687b      	ldr	r3, [r7, #4]
 80881ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80881f2:	b29a      	uxth	r2, r3
 80881f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80881f8:	4413      	add	r3, r2
 80881fa:	b29b      	uxth	r3, r3
 80881fc:	b21a      	sxth	r2, r3
 80881fe:	687b      	ldr	r3, [r7, #4]
 8088200:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8088202:	687b      	ldr	r3, [r7, #4]
 8088204:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8088208:	10db      	asrs	r3, r3, #3
 808820a:	b21b      	sxth	r3, r3
 808820c:	b29a      	uxth	r2, r3
 808820e:	687b      	ldr	r3, [r7, #4]
 8088210:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8088214:	b29b      	uxth	r3, r3
 8088216:	4413      	add	r3, r2
 8088218:	b29b      	uxth	r3, r3
 808821a:	b21a      	sxth	r2, r3
 808821c:	687b      	ldr	r3, [r7, #4]
 808821e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8088222:	687b      	ldr	r3, [r7, #4]
 8088224:	2200      	movs	r2, #0
 8088226:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8088228:	4b35      	ldr	r3, [pc, #212]	; (8088300 <tcp_receive+0x5e4>)
 808822a:	881b      	ldrh	r3, [r3, #0]
 808822c:	2b00      	cmp	r3, #0
 808822e:	f000 84e2 	beq.w	8088bf6 <tcp_receive+0xeda>
 8088232:	687b      	ldr	r3, [r7, #4]
 8088234:	7d1b      	ldrb	r3, [r3, #20]
 8088236:	2b06      	cmp	r3, #6
 8088238:	f200 84dd 	bhi.w	8088bf6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 808823c:	687b      	ldr	r3, [r7, #4]
 808823e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8088240:	4b30      	ldr	r3, [pc, #192]	; (8088304 <tcp_receive+0x5e8>)
 8088242:	681b      	ldr	r3, [r3, #0]
 8088244:	1ad3      	subs	r3, r2, r3
 8088246:	3b01      	subs	r3, #1
 8088248:	2b00      	cmp	r3, #0
 808824a:	f2c0 808f 	blt.w	808836c <tcp_receive+0x650>
 808824e:	687b      	ldr	r3, [r7, #4]
 8088250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8088252:	4b2b      	ldr	r3, [pc, #172]	; (8088300 <tcp_receive+0x5e4>)
 8088254:	881b      	ldrh	r3, [r3, #0]
 8088256:	4619      	mov	r1, r3
 8088258:	4b2a      	ldr	r3, [pc, #168]	; (8088304 <tcp_receive+0x5e8>)
 808825a:	681b      	ldr	r3, [r3, #0]
 808825c:	440b      	add	r3, r1
 808825e:	1ad3      	subs	r3, r2, r3
 8088260:	3301      	adds	r3, #1
 8088262:	2b00      	cmp	r3, #0
 8088264:	f300 8082 	bgt.w	808836c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8088268:	4b27      	ldr	r3, [pc, #156]	; (8088308 <tcp_receive+0x5ec>)
 808826a:	685b      	ldr	r3, [r3, #4]
 808826c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 808826e:	687b      	ldr	r3, [r7, #4]
 8088270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8088272:	4b24      	ldr	r3, [pc, #144]	; (8088304 <tcp_receive+0x5e8>)
 8088274:	681b      	ldr	r3, [r3, #0]
 8088276:	1ad3      	subs	r3, r2, r3
 8088278:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 808827a:	4b23      	ldr	r3, [pc, #140]	; (8088308 <tcp_receive+0x5ec>)
 808827c:	685b      	ldr	r3, [r3, #4]
 808827e:	2b00      	cmp	r3, #0
 8088280:	d106      	bne.n	8088290 <tcp_receive+0x574>
 8088282:	4b22      	ldr	r3, [pc, #136]	; (808830c <tcp_receive+0x5f0>)
 8088284:	f240 5294 	movw	r2, #1428	; 0x594
 8088288:	4921      	ldr	r1, [pc, #132]	; (8088310 <tcp_receive+0x5f4>)
 808828a:	4822      	ldr	r0, [pc, #136]	; (8088314 <tcp_receive+0x5f8>)
 808828c:	f004 fe22 	bl	808ced4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8088290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8088292:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8088296:	4293      	cmp	r3, r2
 8088298:	d906      	bls.n	80882a8 <tcp_receive+0x58c>
 808829a:	4b1c      	ldr	r3, [pc, #112]	; (808830c <tcp_receive+0x5f0>)
 808829c:	f240 5295 	movw	r2, #1429	; 0x595
 80882a0:	491d      	ldr	r1, [pc, #116]	; (8088318 <tcp_receive+0x5fc>)
 80882a2:	481c      	ldr	r0, [pc, #112]	; (8088314 <tcp_receive+0x5f8>)
 80882a4:	f004 fe16 	bl	808ced4 <iprintf>
      off = (u16_t)off32;
 80882a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80882aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80882ae:	4b16      	ldr	r3, [pc, #88]	; (8088308 <tcp_receive+0x5ec>)
 80882b0:	685b      	ldr	r3, [r3, #4]
 80882b2:	891b      	ldrh	r3, [r3, #8]
 80882b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80882b8:	429a      	cmp	r2, r3
 80882ba:	d906      	bls.n	80882ca <tcp_receive+0x5ae>
 80882bc:	4b13      	ldr	r3, [pc, #76]	; (808830c <tcp_receive+0x5f0>)
 80882be:	f240 5297 	movw	r2, #1431	; 0x597
 80882c2:	4916      	ldr	r1, [pc, #88]	; (808831c <tcp_receive+0x600>)
 80882c4:	4813      	ldr	r0, [pc, #76]	; (8088314 <tcp_receive+0x5f8>)
 80882c6:	f004 fe05 	bl	808ced4 <iprintf>
      inseg.len -= off;
 80882ca:	4b0f      	ldr	r3, [pc, #60]	; (8088308 <tcp_receive+0x5ec>)
 80882cc:	891a      	ldrh	r2, [r3, #8]
 80882ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80882d2:	1ad3      	subs	r3, r2, r3
 80882d4:	b29a      	uxth	r2, r3
 80882d6:	4b0c      	ldr	r3, [pc, #48]	; (8088308 <tcp_receive+0x5ec>)
 80882d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80882da:	4b0b      	ldr	r3, [pc, #44]	; (8088308 <tcp_receive+0x5ec>)
 80882dc:	685b      	ldr	r3, [r3, #4]
 80882de:	891a      	ldrh	r2, [r3, #8]
 80882e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80882e4:	1ad3      	subs	r3, r2, r3
 80882e6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80882e8:	e02a      	b.n	8088340 <tcp_receive+0x624>
 80882ea:	bf00      	nop
 80882ec:	0808f528 	.word	0x0808f528
 80882f0:	0808f530 	.word	0x0808f530
 80882f4:	20008274 	.word	0x20008274
 80882f8:	20008270 	.word	0x20008270
 80882fc:	20008234 	.word	0x20008234
 8088300:	20008276 	.word	0x20008276
 8088304:	2000826c 	.word	0x2000826c
 8088308:	2000824c 	.word	0x2000824c
 808830c:	0808f1c0 	.word	0x0808f1c0
 8088310:	0808f538 	.word	0x0808f538
 8088314:	0808f20c 	.word	0x0808f20c
 8088318:	0808f548 	.word	0x0808f548
 808831c:	0808f558 	.word	0x0808f558
        off -= p->len;
 8088320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8088322:	895b      	ldrh	r3, [r3, #10]
 8088324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8088328:	1ad3      	subs	r3, r2, r3
 808832a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 808832e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8088330:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8088332:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8088334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8088336:	2200      	movs	r2, #0
 8088338:	815a      	strh	r2, [r3, #10]
        p = p->next;
 808833a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 808833c:	681b      	ldr	r3, [r3, #0]
 808833e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8088340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8088342:	895b      	ldrh	r3, [r3, #10]
 8088344:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8088348:	429a      	cmp	r2, r3
 808834a:	d8e9      	bhi.n	8088320 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 808834c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8088350:	4619      	mov	r1, r3
 8088352:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8088354:	f7fc fb7c 	bl	8084a50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8088358:	687b      	ldr	r3, [r7, #4]
 808835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808835c:	4a91      	ldr	r2, [pc, #580]	; (80885a4 <tcp_receive+0x888>)
 808835e:	6013      	str	r3, [r2, #0]
 8088360:	4b91      	ldr	r3, [pc, #580]	; (80885a8 <tcp_receive+0x88c>)
 8088362:	68db      	ldr	r3, [r3, #12]
 8088364:	4a8f      	ldr	r2, [pc, #572]	; (80885a4 <tcp_receive+0x888>)
 8088366:	6812      	ldr	r2, [r2, #0]
 8088368:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 808836a:	e00d      	b.n	8088388 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 808836c:	4b8d      	ldr	r3, [pc, #564]	; (80885a4 <tcp_receive+0x888>)
 808836e:	681a      	ldr	r2, [r3, #0]
 8088370:	687b      	ldr	r3, [r7, #4]
 8088372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088374:	1ad3      	subs	r3, r2, r3
 8088376:	2b00      	cmp	r3, #0
 8088378:	da06      	bge.n	8088388 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 808837a:	687b      	ldr	r3, [r7, #4]
 808837c:	8b5b      	ldrh	r3, [r3, #26]
 808837e:	f043 0302 	orr.w	r3, r3, #2
 8088382:	b29a      	uxth	r2, r3
 8088384:	687b      	ldr	r3, [r7, #4]
 8088386:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8088388:	4b86      	ldr	r3, [pc, #536]	; (80885a4 <tcp_receive+0x888>)
 808838a:	681a      	ldr	r2, [r3, #0]
 808838c:	687b      	ldr	r3, [r7, #4]
 808838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088390:	1ad3      	subs	r3, r2, r3
 8088392:	2b00      	cmp	r3, #0
 8088394:	f2c0 842a 	blt.w	8088bec <tcp_receive+0xed0>
 8088398:	4b82      	ldr	r3, [pc, #520]	; (80885a4 <tcp_receive+0x888>)
 808839a:	681a      	ldr	r2, [r3, #0]
 808839c:	687b      	ldr	r3, [r7, #4]
 808839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80883a0:	6879      	ldr	r1, [r7, #4]
 80883a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80883a4:	440b      	add	r3, r1
 80883a6:	1ad3      	subs	r3, r2, r3
 80883a8:	3301      	adds	r3, #1
 80883aa:	2b00      	cmp	r3, #0
 80883ac:	f300 841e 	bgt.w	8088bec <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80883b0:	687b      	ldr	r3, [r7, #4]
 80883b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80883b4:	4b7b      	ldr	r3, [pc, #492]	; (80885a4 <tcp_receive+0x888>)
 80883b6:	681b      	ldr	r3, [r3, #0]
 80883b8:	429a      	cmp	r2, r3
 80883ba:	f040 829a 	bne.w	80888f2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80883be:	4b7a      	ldr	r3, [pc, #488]	; (80885a8 <tcp_receive+0x88c>)
 80883c0:	891c      	ldrh	r4, [r3, #8]
 80883c2:	4b79      	ldr	r3, [pc, #484]	; (80885a8 <tcp_receive+0x88c>)
 80883c4:	68db      	ldr	r3, [r3, #12]
 80883c6:	899b      	ldrh	r3, [r3, #12]
 80883c8:	b29b      	uxth	r3, r3
 80883ca:	4618      	mov	r0, r3
 80883cc:	f7fb f888 	bl	80834e0 <lwip_htons>
 80883d0:	4603      	mov	r3, r0
 80883d2:	b2db      	uxtb	r3, r3
 80883d4:	f003 0303 	and.w	r3, r3, #3
 80883d8:	2b00      	cmp	r3, #0
 80883da:	d001      	beq.n	80883e0 <tcp_receive+0x6c4>
 80883dc:	2301      	movs	r3, #1
 80883de:	e000      	b.n	80883e2 <tcp_receive+0x6c6>
 80883e0:	2300      	movs	r3, #0
 80883e2:	4423      	add	r3, r4
 80883e4:	b29a      	uxth	r2, r3
 80883e6:	4b71      	ldr	r3, [pc, #452]	; (80885ac <tcp_receive+0x890>)
 80883e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80883ea:	687b      	ldr	r3, [r7, #4]
 80883ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80883ee:	4b6f      	ldr	r3, [pc, #444]	; (80885ac <tcp_receive+0x890>)
 80883f0:	881b      	ldrh	r3, [r3, #0]
 80883f2:	429a      	cmp	r2, r3
 80883f4:	d275      	bcs.n	80884e2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80883f6:	4b6c      	ldr	r3, [pc, #432]	; (80885a8 <tcp_receive+0x88c>)
 80883f8:	68db      	ldr	r3, [r3, #12]
 80883fa:	899b      	ldrh	r3, [r3, #12]
 80883fc:	b29b      	uxth	r3, r3
 80883fe:	4618      	mov	r0, r3
 8088400:	f7fb f86e 	bl	80834e0 <lwip_htons>
 8088404:	4603      	mov	r3, r0
 8088406:	b2db      	uxtb	r3, r3
 8088408:	f003 0301 	and.w	r3, r3, #1
 808840c:	2b00      	cmp	r3, #0
 808840e:	d01f      	beq.n	8088450 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8088410:	4b65      	ldr	r3, [pc, #404]	; (80885a8 <tcp_receive+0x88c>)
 8088412:	68db      	ldr	r3, [r3, #12]
 8088414:	899b      	ldrh	r3, [r3, #12]
 8088416:	b29b      	uxth	r3, r3
 8088418:	b21b      	sxth	r3, r3
 808841a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 808841e:	b21c      	sxth	r4, r3
 8088420:	4b61      	ldr	r3, [pc, #388]	; (80885a8 <tcp_receive+0x88c>)
 8088422:	68db      	ldr	r3, [r3, #12]
 8088424:	899b      	ldrh	r3, [r3, #12]
 8088426:	b29b      	uxth	r3, r3
 8088428:	4618      	mov	r0, r3
 808842a:	f7fb f859 	bl	80834e0 <lwip_htons>
 808842e:	4603      	mov	r3, r0
 8088430:	b2db      	uxtb	r3, r3
 8088432:	b29b      	uxth	r3, r3
 8088434:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8088438:	b29b      	uxth	r3, r3
 808843a:	4618      	mov	r0, r3
 808843c:	f7fb f850 	bl	80834e0 <lwip_htons>
 8088440:	4603      	mov	r3, r0
 8088442:	b21b      	sxth	r3, r3
 8088444:	4323      	orrs	r3, r4
 8088446:	b21a      	sxth	r2, r3
 8088448:	4b57      	ldr	r3, [pc, #348]	; (80885a8 <tcp_receive+0x88c>)
 808844a:	68db      	ldr	r3, [r3, #12]
 808844c:	b292      	uxth	r2, r2
 808844e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8088450:	687b      	ldr	r3, [r7, #4]
 8088452:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8088454:	4b54      	ldr	r3, [pc, #336]	; (80885a8 <tcp_receive+0x88c>)
 8088456:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8088458:	4b53      	ldr	r3, [pc, #332]	; (80885a8 <tcp_receive+0x88c>)
 808845a:	68db      	ldr	r3, [r3, #12]
 808845c:	899b      	ldrh	r3, [r3, #12]
 808845e:	b29b      	uxth	r3, r3
 8088460:	4618      	mov	r0, r3
 8088462:	f7fb f83d 	bl	80834e0 <lwip_htons>
 8088466:	4603      	mov	r3, r0
 8088468:	b2db      	uxtb	r3, r3
 808846a:	f003 0302 	and.w	r3, r3, #2
 808846e:	2b00      	cmp	r3, #0
 8088470:	d005      	beq.n	808847e <tcp_receive+0x762>
            inseg.len -= 1;
 8088472:	4b4d      	ldr	r3, [pc, #308]	; (80885a8 <tcp_receive+0x88c>)
 8088474:	891b      	ldrh	r3, [r3, #8]
 8088476:	3b01      	subs	r3, #1
 8088478:	b29a      	uxth	r2, r3
 808847a:	4b4b      	ldr	r3, [pc, #300]	; (80885a8 <tcp_receive+0x88c>)
 808847c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 808847e:	4b4a      	ldr	r3, [pc, #296]	; (80885a8 <tcp_receive+0x88c>)
 8088480:	685b      	ldr	r3, [r3, #4]
 8088482:	4a49      	ldr	r2, [pc, #292]	; (80885a8 <tcp_receive+0x88c>)
 8088484:	8912      	ldrh	r2, [r2, #8]
 8088486:	4611      	mov	r1, r2
 8088488:	4618      	mov	r0, r3
 808848a:	f7fc f9e1 	bl	8084850 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 808848e:	4b46      	ldr	r3, [pc, #280]	; (80885a8 <tcp_receive+0x88c>)
 8088490:	891c      	ldrh	r4, [r3, #8]
 8088492:	4b45      	ldr	r3, [pc, #276]	; (80885a8 <tcp_receive+0x88c>)
 8088494:	68db      	ldr	r3, [r3, #12]
 8088496:	899b      	ldrh	r3, [r3, #12]
 8088498:	b29b      	uxth	r3, r3
 808849a:	4618      	mov	r0, r3
 808849c:	f7fb f820 	bl	80834e0 <lwip_htons>
 80884a0:	4603      	mov	r3, r0
 80884a2:	b2db      	uxtb	r3, r3
 80884a4:	f003 0303 	and.w	r3, r3, #3
 80884a8:	2b00      	cmp	r3, #0
 80884aa:	d001      	beq.n	80884b0 <tcp_receive+0x794>
 80884ac:	2301      	movs	r3, #1
 80884ae:	e000      	b.n	80884b2 <tcp_receive+0x796>
 80884b0:	2300      	movs	r3, #0
 80884b2:	4423      	add	r3, r4
 80884b4:	b29a      	uxth	r2, r3
 80884b6:	4b3d      	ldr	r3, [pc, #244]	; (80885ac <tcp_receive+0x890>)
 80884b8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80884ba:	4b3c      	ldr	r3, [pc, #240]	; (80885ac <tcp_receive+0x890>)
 80884bc:	881b      	ldrh	r3, [r3, #0]
 80884be:	461a      	mov	r2, r3
 80884c0:	4b38      	ldr	r3, [pc, #224]	; (80885a4 <tcp_receive+0x888>)
 80884c2:	681b      	ldr	r3, [r3, #0]
 80884c4:	441a      	add	r2, r3
 80884c6:	687b      	ldr	r3, [r7, #4]
 80884c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80884ca:	6879      	ldr	r1, [r7, #4]
 80884cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80884ce:	440b      	add	r3, r1
 80884d0:	429a      	cmp	r2, r3
 80884d2:	d006      	beq.n	80884e2 <tcp_receive+0x7c6>
 80884d4:	4b36      	ldr	r3, [pc, #216]	; (80885b0 <tcp_receive+0x894>)
 80884d6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80884da:	4936      	ldr	r1, [pc, #216]	; (80885b4 <tcp_receive+0x898>)
 80884dc:	4836      	ldr	r0, [pc, #216]	; (80885b8 <tcp_receive+0x89c>)
 80884de:	f004 fcf9 	bl	808ced4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80884e2:	687b      	ldr	r3, [r7, #4]
 80884e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80884e6:	2b00      	cmp	r3, #0
 80884e8:	f000 80e7 	beq.w	80886ba <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80884ec:	4b2e      	ldr	r3, [pc, #184]	; (80885a8 <tcp_receive+0x88c>)
 80884ee:	68db      	ldr	r3, [r3, #12]
 80884f0:	899b      	ldrh	r3, [r3, #12]
 80884f2:	b29b      	uxth	r3, r3
 80884f4:	4618      	mov	r0, r3
 80884f6:	f7fa fff3 	bl	80834e0 <lwip_htons>
 80884fa:	4603      	mov	r3, r0
 80884fc:	b2db      	uxtb	r3, r3
 80884fe:	f003 0301 	and.w	r3, r3, #1
 8088502:	2b00      	cmp	r3, #0
 8088504:	d010      	beq.n	8088528 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8088506:	e00a      	b.n	808851e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8088508:	687b      	ldr	r3, [r7, #4]
 808850a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808850c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 808850e:	687b      	ldr	r3, [r7, #4]
 8088510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8088512:	681a      	ldr	r2, [r3, #0]
 8088514:	687b      	ldr	r3, [r7, #4]
 8088516:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8088518:	68f8      	ldr	r0, [r7, #12]
 808851a:	f7fd fd92 	bl	8086042 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 808851e:	687b      	ldr	r3, [r7, #4]
 8088520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8088522:	2b00      	cmp	r3, #0
 8088524:	d1f0      	bne.n	8088508 <tcp_receive+0x7ec>
 8088526:	e0c8      	b.n	80886ba <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8088528:	687b      	ldr	r3, [r7, #4]
 808852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808852c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 808852e:	e052      	b.n	80885d6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8088530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8088532:	68db      	ldr	r3, [r3, #12]
 8088534:	899b      	ldrh	r3, [r3, #12]
 8088536:	b29b      	uxth	r3, r3
 8088538:	4618      	mov	r0, r3
 808853a:	f7fa ffd1 	bl	80834e0 <lwip_htons>
 808853e:	4603      	mov	r3, r0
 8088540:	b2db      	uxtb	r3, r3
 8088542:	f003 0301 	and.w	r3, r3, #1
 8088546:	2b00      	cmp	r3, #0
 8088548:	d03d      	beq.n	80885c6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 808854a:	4b17      	ldr	r3, [pc, #92]	; (80885a8 <tcp_receive+0x88c>)
 808854c:	68db      	ldr	r3, [r3, #12]
 808854e:	899b      	ldrh	r3, [r3, #12]
 8088550:	b29b      	uxth	r3, r3
 8088552:	4618      	mov	r0, r3
 8088554:	f7fa ffc4 	bl	80834e0 <lwip_htons>
 8088558:	4603      	mov	r3, r0
 808855a:	b2db      	uxtb	r3, r3
 808855c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8088560:	2b00      	cmp	r3, #0
 8088562:	d130      	bne.n	80885c6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8088564:	4b10      	ldr	r3, [pc, #64]	; (80885a8 <tcp_receive+0x88c>)
 8088566:	68db      	ldr	r3, [r3, #12]
 8088568:	899b      	ldrh	r3, [r3, #12]
 808856a:	b29c      	uxth	r4, r3
 808856c:	2001      	movs	r0, #1
 808856e:	f7fa ffb7 	bl	80834e0 <lwip_htons>
 8088572:	4603      	mov	r3, r0
 8088574:	461a      	mov	r2, r3
 8088576:	4b0c      	ldr	r3, [pc, #48]	; (80885a8 <tcp_receive+0x88c>)
 8088578:	68db      	ldr	r3, [r3, #12]
 808857a:	4322      	orrs	r2, r4
 808857c:	b292      	uxth	r2, r2
 808857e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8088580:	4b09      	ldr	r3, [pc, #36]	; (80885a8 <tcp_receive+0x88c>)
 8088582:	891c      	ldrh	r4, [r3, #8]
 8088584:	4b08      	ldr	r3, [pc, #32]	; (80885a8 <tcp_receive+0x88c>)
 8088586:	68db      	ldr	r3, [r3, #12]
 8088588:	899b      	ldrh	r3, [r3, #12]
 808858a:	b29b      	uxth	r3, r3
 808858c:	4618      	mov	r0, r3
 808858e:	f7fa ffa7 	bl	80834e0 <lwip_htons>
 8088592:	4603      	mov	r3, r0
 8088594:	b2db      	uxtb	r3, r3
 8088596:	f003 0303 	and.w	r3, r3, #3
 808859a:	2b00      	cmp	r3, #0
 808859c:	d00e      	beq.n	80885bc <tcp_receive+0x8a0>
 808859e:	2301      	movs	r3, #1
 80885a0:	e00d      	b.n	80885be <tcp_receive+0x8a2>
 80885a2:	bf00      	nop
 80885a4:	2000826c 	.word	0x2000826c
 80885a8:	2000824c 	.word	0x2000824c
 80885ac:	20008276 	.word	0x20008276
 80885b0:	0808f1c0 	.word	0x0808f1c0
 80885b4:	0808f568 	.word	0x0808f568
 80885b8:	0808f20c 	.word	0x0808f20c
 80885bc:	2300      	movs	r3, #0
 80885be:	4423      	add	r3, r4
 80885c0:	b29a      	uxth	r2, r3
 80885c2:	4b98      	ldr	r3, [pc, #608]	; (8088824 <tcp_receive+0xb08>)
 80885c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80885c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80885c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80885ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80885cc:	681b      	ldr	r3, [r3, #0]
 80885ce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80885d0:	6938      	ldr	r0, [r7, #16]
 80885d2:	f7fd fd36 	bl	8086042 <tcp_seg_free>
            while (next &&
 80885d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80885d8:	2b00      	cmp	r3, #0
 80885da:	d00e      	beq.n	80885fa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80885dc:	4b91      	ldr	r3, [pc, #580]	; (8088824 <tcp_receive+0xb08>)
 80885de:	881b      	ldrh	r3, [r3, #0]
 80885e0:	461a      	mov	r2, r3
 80885e2:	4b91      	ldr	r3, [pc, #580]	; (8088828 <tcp_receive+0xb0c>)
 80885e4:	681b      	ldr	r3, [r3, #0]
 80885e6:	441a      	add	r2, r3
 80885e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80885ea:	68db      	ldr	r3, [r3, #12]
 80885ec:	685b      	ldr	r3, [r3, #4]
 80885ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80885f0:	8909      	ldrh	r1, [r1, #8]
 80885f2:	440b      	add	r3, r1
 80885f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80885f6:	2b00      	cmp	r3, #0
 80885f8:	da9a      	bge.n	8088530 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80885fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80885fc:	2b00      	cmp	r3, #0
 80885fe:	d059      	beq.n	80886b4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8088600:	4b88      	ldr	r3, [pc, #544]	; (8088824 <tcp_receive+0xb08>)
 8088602:	881b      	ldrh	r3, [r3, #0]
 8088604:	461a      	mov	r2, r3
 8088606:	4b88      	ldr	r3, [pc, #544]	; (8088828 <tcp_receive+0xb0c>)
 8088608:	681b      	ldr	r3, [r3, #0]
 808860a:	441a      	add	r2, r3
 808860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808860e:	68db      	ldr	r3, [r3, #12]
 8088610:	685b      	ldr	r3, [r3, #4]
 8088612:	1ad3      	subs	r3, r2, r3
            if (next &&
 8088614:	2b00      	cmp	r3, #0
 8088616:	dd4d      	ble.n	80886b4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8088618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808861a:	68db      	ldr	r3, [r3, #12]
 808861c:	685b      	ldr	r3, [r3, #4]
 808861e:	b29a      	uxth	r2, r3
 8088620:	4b81      	ldr	r3, [pc, #516]	; (8088828 <tcp_receive+0xb0c>)
 8088622:	681b      	ldr	r3, [r3, #0]
 8088624:	b29b      	uxth	r3, r3
 8088626:	1ad3      	subs	r3, r2, r3
 8088628:	b29a      	uxth	r2, r3
 808862a:	4b80      	ldr	r3, [pc, #512]	; (808882c <tcp_receive+0xb10>)
 808862c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 808862e:	4b7f      	ldr	r3, [pc, #508]	; (808882c <tcp_receive+0xb10>)
 8088630:	68db      	ldr	r3, [r3, #12]
 8088632:	899b      	ldrh	r3, [r3, #12]
 8088634:	b29b      	uxth	r3, r3
 8088636:	4618      	mov	r0, r3
 8088638:	f7fa ff52 	bl	80834e0 <lwip_htons>
 808863c:	4603      	mov	r3, r0
 808863e:	b2db      	uxtb	r3, r3
 8088640:	f003 0302 	and.w	r3, r3, #2
 8088644:	2b00      	cmp	r3, #0
 8088646:	d005      	beq.n	8088654 <tcp_receive+0x938>
                inseg.len -= 1;
 8088648:	4b78      	ldr	r3, [pc, #480]	; (808882c <tcp_receive+0xb10>)
 808864a:	891b      	ldrh	r3, [r3, #8]
 808864c:	3b01      	subs	r3, #1
 808864e:	b29a      	uxth	r2, r3
 8088650:	4b76      	ldr	r3, [pc, #472]	; (808882c <tcp_receive+0xb10>)
 8088652:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8088654:	4b75      	ldr	r3, [pc, #468]	; (808882c <tcp_receive+0xb10>)
 8088656:	685b      	ldr	r3, [r3, #4]
 8088658:	4a74      	ldr	r2, [pc, #464]	; (808882c <tcp_receive+0xb10>)
 808865a:	8912      	ldrh	r2, [r2, #8]
 808865c:	4611      	mov	r1, r2
 808865e:	4618      	mov	r0, r3
 8088660:	f7fc f8f6 	bl	8084850 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8088664:	4b71      	ldr	r3, [pc, #452]	; (808882c <tcp_receive+0xb10>)
 8088666:	891c      	ldrh	r4, [r3, #8]
 8088668:	4b70      	ldr	r3, [pc, #448]	; (808882c <tcp_receive+0xb10>)
 808866a:	68db      	ldr	r3, [r3, #12]
 808866c:	899b      	ldrh	r3, [r3, #12]
 808866e:	b29b      	uxth	r3, r3
 8088670:	4618      	mov	r0, r3
 8088672:	f7fa ff35 	bl	80834e0 <lwip_htons>
 8088676:	4603      	mov	r3, r0
 8088678:	b2db      	uxtb	r3, r3
 808867a:	f003 0303 	and.w	r3, r3, #3
 808867e:	2b00      	cmp	r3, #0
 8088680:	d001      	beq.n	8088686 <tcp_receive+0x96a>
 8088682:	2301      	movs	r3, #1
 8088684:	e000      	b.n	8088688 <tcp_receive+0x96c>
 8088686:	2300      	movs	r3, #0
 8088688:	4423      	add	r3, r4
 808868a:	b29a      	uxth	r2, r3
 808868c:	4b65      	ldr	r3, [pc, #404]	; (8088824 <tcp_receive+0xb08>)
 808868e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8088690:	4b64      	ldr	r3, [pc, #400]	; (8088824 <tcp_receive+0xb08>)
 8088692:	881b      	ldrh	r3, [r3, #0]
 8088694:	461a      	mov	r2, r3
 8088696:	4b64      	ldr	r3, [pc, #400]	; (8088828 <tcp_receive+0xb0c>)
 8088698:	681b      	ldr	r3, [r3, #0]
 808869a:	441a      	add	r2, r3
 808869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808869e:	68db      	ldr	r3, [r3, #12]
 80886a0:	685b      	ldr	r3, [r3, #4]
 80886a2:	429a      	cmp	r2, r3
 80886a4:	d006      	beq.n	80886b4 <tcp_receive+0x998>
 80886a6:	4b62      	ldr	r3, [pc, #392]	; (8088830 <tcp_receive+0xb14>)
 80886a8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80886ac:	4961      	ldr	r1, [pc, #388]	; (8088834 <tcp_receive+0xb18>)
 80886ae:	4862      	ldr	r0, [pc, #392]	; (8088838 <tcp_receive+0xb1c>)
 80886b0:	f004 fc10 	bl	808ced4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80886b4:	687b      	ldr	r3, [r7, #4]
 80886b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80886b8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80886ba:	4b5a      	ldr	r3, [pc, #360]	; (8088824 <tcp_receive+0xb08>)
 80886bc:	881b      	ldrh	r3, [r3, #0]
 80886be:	461a      	mov	r2, r3
 80886c0:	4b59      	ldr	r3, [pc, #356]	; (8088828 <tcp_receive+0xb0c>)
 80886c2:	681b      	ldr	r3, [r3, #0]
 80886c4:	441a      	add	r2, r3
 80886c6:	687b      	ldr	r3, [r7, #4]
 80886c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80886ca:	687b      	ldr	r3, [r7, #4]
 80886cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80886ce:	4b55      	ldr	r3, [pc, #340]	; (8088824 <tcp_receive+0xb08>)
 80886d0:	881b      	ldrh	r3, [r3, #0]
 80886d2:	429a      	cmp	r2, r3
 80886d4:	d206      	bcs.n	80886e4 <tcp_receive+0x9c8>
 80886d6:	4b56      	ldr	r3, [pc, #344]	; (8088830 <tcp_receive+0xb14>)
 80886d8:	f240 6207 	movw	r2, #1543	; 0x607
 80886dc:	4957      	ldr	r1, [pc, #348]	; (808883c <tcp_receive+0xb20>)
 80886de:	4856      	ldr	r0, [pc, #344]	; (8088838 <tcp_receive+0xb1c>)
 80886e0:	f004 fbf8 	bl	808ced4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80886e4:	687b      	ldr	r3, [r7, #4]
 80886e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80886e8:	4b4e      	ldr	r3, [pc, #312]	; (8088824 <tcp_receive+0xb08>)
 80886ea:	881b      	ldrh	r3, [r3, #0]
 80886ec:	1ad3      	subs	r3, r2, r3
 80886ee:	b29a      	uxth	r2, r3
 80886f0:	687b      	ldr	r3, [r7, #4]
 80886f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80886f4:	6878      	ldr	r0, [r7, #4]
 80886f6:	f7fc ffc5 	bl	8085684 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80886fa:	4b4c      	ldr	r3, [pc, #304]	; (808882c <tcp_receive+0xb10>)
 80886fc:	685b      	ldr	r3, [r3, #4]
 80886fe:	891b      	ldrh	r3, [r3, #8]
 8088700:	2b00      	cmp	r3, #0
 8088702:	d006      	beq.n	8088712 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8088704:	4b49      	ldr	r3, [pc, #292]	; (808882c <tcp_receive+0xb10>)
 8088706:	685b      	ldr	r3, [r3, #4]
 8088708:	4a4d      	ldr	r2, [pc, #308]	; (8088840 <tcp_receive+0xb24>)
 808870a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 808870c:	4b47      	ldr	r3, [pc, #284]	; (808882c <tcp_receive+0xb10>)
 808870e:	2200      	movs	r2, #0
 8088710:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8088712:	4b46      	ldr	r3, [pc, #280]	; (808882c <tcp_receive+0xb10>)
 8088714:	68db      	ldr	r3, [r3, #12]
 8088716:	899b      	ldrh	r3, [r3, #12]
 8088718:	b29b      	uxth	r3, r3
 808871a:	4618      	mov	r0, r3
 808871c:	f7fa fee0 	bl	80834e0 <lwip_htons>
 8088720:	4603      	mov	r3, r0
 8088722:	b2db      	uxtb	r3, r3
 8088724:	f003 0301 	and.w	r3, r3, #1
 8088728:	2b00      	cmp	r3, #0
 808872a:	f000 80b8 	beq.w	808889e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 808872e:	4b45      	ldr	r3, [pc, #276]	; (8088844 <tcp_receive+0xb28>)
 8088730:	781b      	ldrb	r3, [r3, #0]
 8088732:	f043 0320 	orr.w	r3, r3, #32
 8088736:	b2da      	uxtb	r2, r3
 8088738:	4b42      	ldr	r3, [pc, #264]	; (8088844 <tcp_receive+0xb28>)
 808873a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 808873c:	e0af      	b.n	808889e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 808873e:	687b      	ldr	r3, [r7, #4]
 8088740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8088742:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8088744:	687b      	ldr	r3, [r7, #4]
 8088746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8088748:	68db      	ldr	r3, [r3, #12]
 808874a:	685b      	ldr	r3, [r3, #4]
 808874c:	4a36      	ldr	r2, [pc, #216]	; (8088828 <tcp_receive+0xb0c>)
 808874e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8088750:	68bb      	ldr	r3, [r7, #8]
 8088752:	891b      	ldrh	r3, [r3, #8]
 8088754:	461c      	mov	r4, r3
 8088756:	68bb      	ldr	r3, [r7, #8]
 8088758:	68db      	ldr	r3, [r3, #12]
 808875a:	899b      	ldrh	r3, [r3, #12]
 808875c:	b29b      	uxth	r3, r3
 808875e:	4618      	mov	r0, r3
 8088760:	f7fa febe 	bl	80834e0 <lwip_htons>
 8088764:	4603      	mov	r3, r0
 8088766:	b2db      	uxtb	r3, r3
 8088768:	f003 0303 	and.w	r3, r3, #3
 808876c:	2b00      	cmp	r3, #0
 808876e:	d001      	beq.n	8088774 <tcp_receive+0xa58>
 8088770:	2301      	movs	r3, #1
 8088772:	e000      	b.n	8088776 <tcp_receive+0xa5a>
 8088774:	2300      	movs	r3, #0
 8088776:	191a      	adds	r2, r3, r4
 8088778:	687b      	ldr	r3, [r7, #4]
 808877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808877c:	441a      	add	r2, r3
 808877e:	687b      	ldr	r3, [r7, #4]
 8088780:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8088782:	687b      	ldr	r3, [r7, #4]
 8088784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8088786:	461c      	mov	r4, r3
 8088788:	68bb      	ldr	r3, [r7, #8]
 808878a:	891b      	ldrh	r3, [r3, #8]
 808878c:	461d      	mov	r5, r3
 808878e:	68bb      	ldr	r3, [r7, #8]
 8088790:	68db      	ldr	r3, [r3, #12]
 8088792:	899b      	ldrh	r3, [r3, #12]
 8088794:	b29b      	uxth	r3, r3
 8088796:	4618      	mov	r0, r3
 8088798:	f7fa fea2 	bl	80834e0 <lwip_htons>
 808879c:	4603      	mov	r3, r0
 808879e:	b2db      	uxtb	r3, r3
 80887a0:	f003 0303 	and.w	r3, r3, #3
 80887a4:	2b00      	cmp	r3, #0
 80887a6:	d001      	beq.n	80887ac <tcp_receive+0xa90>
 80887a8:	2301      	movs	r3, #1
 80887aa:	e000      	b.n	80887ae <tcp_receive+0xa92>
 80887ac:	2300      	movs	r3, #0
 80887ae:	442b      	add	r3, r5
 80887b0:	429c      	cmp	r4, r3
 80887b2:	d206      	bcs.n	80887c2 <tcp_receive+0xaa6>
 80887b4:	4b1e      	ldr	r3, [pc, #120]	; (8088830 <tcp_receive+0xb14>)
 80887b6:	f240 622b 	movw	r2, #1579	; 0x62b
 80887ba:	4923      	ldr	r1, [pc, #140]	; (8088848 <tcp_receive+0xb2c>)
 80887bc:	481e      	ldr	r0, [pc, #120]	; (8088838 <tcp_receive+0xb1c>)
 80887be:	f004 fb89 	bl	808ced4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80887c2:	68bb      	ldr	r3, [r7, #8]
 80887c4:	891b      	ldrh	r3, [r3, #8]
 80887c6:	461c      	mov	r4, r3
 80887c8:	68bb      	ldr	r3, [r7, #8]
 80887ca:	68db      	ldr	r3, [r3, #12]
 80887cc:	899b      	ldrh	r3, [r3, #12]
 80887ce:	b29b      	uxth	r3, r3
 80887d0:	4618      	mov	r0, r3
 80887d2:	f7fa fe85 	bl	80834e0 <lwip_htons>
 80887d6:	4603      	mov	r3, r0
 80887d8:	b2db      	uxtb	r3, r3
 80887da:	f003 0303 	and.w	r3, r3, #3
 80887de:	2b00      	cmp	r3, #0
 80887e0:	d001      	beq.n	80887e6 <tcp_receive+0xaca>
 80887e2:	2301      	movs	r3, #1
 80887e4:	e000      	b.n	80887e8 <tcp_receive+0xacc>
 80887e6:	2300      	movs	r3, #0
 80887e8:	1919      	adds	r1, r3, r4
 80887ea:	687b      	ldr	r3, [r7, #4]
 80887ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80887ee:	b28b      	uxth	r3, r1
 80887f0:	1ad3      	subs	r3, r2, r3
 80887f2:	b29a      	uxth	r2, r3
 80887f4:	687b      	ldr	r3, [r7, #4]
 80887f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80887f8:	6878      	ldr	r0, [r7, #4]
 80887fa:	f7fc ff43 	bl	8085684 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80887fe:	68bb      	ldr	r3, [r7, #8]
 8088800:	685b      	ldr	r3, [r3, #4]
 8088802:	891b      	ldrh	r3, [r3, #8]
 8088804:	2b00      	cmp	r3, #0
 8088806:	d028      	beq.n	808885a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8088808:	4b0d      	ldr	r3, [pc, #52]	; (8088840 <tcp_receive+0xb24>)
 808880a:	681b      	ldr	r3, [r3, #0]
 808880c:	2b00      	cmp	r3, #0
 808880e:	d01d      	beq.n	808884c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8088810:	4b0b      	ldr	r3, [pc, #44]	; (8088840 <tcp_receive+0xb24>)
 8088812:	681a      	ldr	r2, [r3, #0]
 8088814:	68bb      	ldr	r3, [r7, #8]
 8088816:	685b      	ldr	r3, [r3, #4]
 8088818:	4619      	mov	r1, r3
 808881a:	4610      	mov	r0, r2
 808881c:	f7fc fa60 	bl	8084ce0 <pbuf_cat>
 8088820:	e018      	b.n	8088854 <tcp_receive+0xb38>
 8088822:	bf00      	nop
 8088824:	20008276 	.word	0x20008276
 8088828:	2000826c 	.word	0x2000826c
 808882c:	2000824c 	.word	0x2000824c
 8088830:	0808f1c0 	.word	0x0808f1c0
 8088834:	0808f5a0 	.word	0x0808f5a0
 8088838:	0808f20c 	.word	0x0808f20c
 808883c:	0808f5dc 	.word	0x0808f5dc
 8088840:	2000827c 	.word	0x2000827c
 8088844:	20008279 	.word	0x20008279
 8088848:	0808f5fc 	.word	0x0808f5fc
            } else {
              recv_data = cseg->p;
 808884c:	68bb      	ldr	r3, [r7, #8]
 808884e:	685b      	ldr	r3, [r3, #4]
 8088850:	4a70      	ldr	r2, [pc, #448]	; (8088a14 <tcp_receive+0xcf8>)
 8088852:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8088854:	68bb      	ldr	r3, [r7, #8]
 8088856:	2200      	movs	r2, #0
 8088858:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 808885a:	68bb      	ldr	r3, [r7, #8]
 808885c:	68db      	ldr	r3, [r3, #12]
 808885e:	899b      	ldrh	r3, [r3, #12]
 8088860:	b29b      	uxth	r3, r3
 8088862:	4618      	mov	r0, r3
 8088864:	f7fa fe3c 	bl	80834e0 <lwip_htons>
 8088868:	4603      	mov	r3, r0
 808886a:	b2db      	uxtb	r3, r3
 808886c:	f003 0301 	and.w	r3, r3, #1
 8088870:	2b00      	cmp	r3, #0
 8088872:	d00d      	beq.n	8088890 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8088874:	4b68      	ldr	r3, [pc, #416]	; (8088a18 <tcp_receive+0xcfc>)
 8088876:	781b      	ldrb	r3, [r3, #0]
 8088878:	f043 0320 	orr.w	r3, r3, #32
 808887c:	b2da      	uxtb	r2, r3
 808887e:	4b66      	ldr	r3, [pc, #408]	; (8088a18 <tcp_receive+0xcfc>)
 8088880:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8088882:	687b      	ldr	r3, [r7, #4]
 8088884:	7d1b      	ldrb	r3, [r3, #20]
 8088886:	2b04      	cmp	r3, #4
 8088888:	d102      	bne.n	8088890 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 808888a:	687b      	ldr	r3, [r7, #4]
 808888c:	2207      	movs	r2, #7
 808888e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8088890:	68bb      	ldr	r3, [r7, #8]
 8088892:	681a      	ldr	r2, [r3, #0]
 8088894:	687b      	ldr	r3, [r7, #4]
 8088896:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8088898:	68b8      	ldr	r0, [r7, #8]
 808889a:	f7fd fbd2 	bl	8086042 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 808889e:	687b      	ldr	r3, [r7, #4]
 80888a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80888a2:	2b00      	cmp	r3, #0
 80888a4:	d008      	beq.n	80888b8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80888a6:	687b      	ldr	r3, [r7, #4]
 80888a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80888aa:	68db      	ldr	r3, [r3, #12]
 80888ac:	685a      	ldr	r2, [r3, #4]
 80888ae:	687b      	ldr	r3, [r7, #4]
 80888b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80888b2:	429a      	cmp	r2, r3
 80888b4:	f43f af43 	beq.w	808873e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80888b8:	687b      	ldr	r3, [r7, #4]
 80888ba:	8b5b      	ldrh	r3, [r3, #26]
 80888bc:	f003 0301 	and.w	r3, r3, #1
 80888c0:	2b00      	cmp	r3, #0
 80888c2:	d00e      	beq.n	80888e2 <tcp_receive+0xbc6>
 80888c4:	687b      	ldr	r3, [r7, #4]
 80888c6:	8b5b      	ldrh	r3, [r3, #26]
 80888c8:	f023 0301 	bic.w	r3, r3, #1
 80888cc:	b29a      	uxth	r2, r3
 80888ce:	687b      	ldr	r3, [r7, #4]
 80888d0:	835a      	strh	r2, [r3, #26]
 80888d2:	687b      	ldr	r3, [r7, #4]
 80888d4:	8b5b      	ldrh	r3, [r3, #26]
 80888d6:	f043 0302 	orr.w	r3, r3, #2
 80888da:	b29a      	uxth	r2, r3
 80888dc:	687b      	ldr	r3, [r7, #4]
 80888de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80888e0:	e188      	b.n	8088bf4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80888e2:	687b      	ldr	r3, [r7, #4]
 80888e4:	8b5b      	ldrh	r3, [r3, #26]
 80888e6:	f043 0301 	orr.w	r3, r3, #1
 80888ea:	b29a      	uxth	r2, r3
 80888ec:	687b      	ldr	r3, [r7, #4]
 80888ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80888f0:	e180      	b.n	8088bf4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80888f2:	687b      	ldr	r3, [r7, #4]
 80888f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80888f6:	2b00      	cmp	r3, #0
 80888f8:	d106      	bne.n	8088908 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80888fa:	4848      	ldr	r0, [pc, #288]	; (8088a1c <tcp_receive+0xd00>)
 80888fc:	f7fd fbba 	bl	8086074 <tcp_seg_copy>
 8088900:	4602      	mov	r2, r0
 8088902:	687b      	ldr	r3, [r7, #4]
 8088904:	675a      	str	r2, [r3, #116]	; 0x74
 8088906:	e16d      	b.n	8088be4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8088908:	2300      	movs	r3, #0
 808890a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 808890c:	687b      	ldr	r3, [r7, #4]
 808890e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8088910:	63bb      	str	r3, [r7, #56]	; 0x38
 8088912:	e157      	b.n	8088bc4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8088914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088916:	68db      	ldr	r3, [r3, #12]
 8088918:	685a      	ldr	r2, [r3, #4]
 808891a:	4b41      	ldr	r3, [pc, #260]	; (8088a20 <tcp_receive+0xd04>)
 808891c:	681b      	ldr	r3, [r3, #0]
 808891e:	429a      	cmp	r2, r3
 8088920:	d11d      	bne.n	808895e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8088922:	4b3e      	ldr	r3, [pc, #248]	; (8088a1c <tcp_receive+0xd00>)
 8088924:	891a      	ldrh	r2, [r3, #8]
 8088926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088928:	891b      	ldrh	r3, [r3, #8]
 808892a:	429a      	cmp	r2, r3
 808892c:	f240 814f 	bls.w	8088bce <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8088930:	483a      	ldr	r0, [pc, #232]	; (8088a1c <tcp_receive+0xd00>)
 8088932:	f7fd fb9f 	bl	8086074 <tcp_seg_copy>
 8088936:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8088938:	697b      	ldr	r3, [r7, #20]
 808893a:	2b00      	cmp	r3, #0
 808893c:	f000 8149 	beq.w	8088bd2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8088940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8088942:	2b00      	cmp	r3, #0
 8088944:	d003      	beq.n	808894e <tcp_receive+0xc32>
                    prev->next = cseg;
 8088946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8088948:	697a      	ldr	r2, [r7, #20]
 808894a:	601a      	str	r2, [r3, #0]
 808894c:	e002      	b.n	8088954 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 808894e:	687b      	ldr	r3, [r7, #4]
 8088950:	697a      	ldr	r2, [r7, #20]
 8088952:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8088954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8088956:	6978      	ldr	r0, [r7, #20]
 8088958:	f7ff f8dc 	bl	8087b14 <tcp_oos_insert_segment>
                }
                break;
 808895c:	e139      	b.n	8088bd2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 808895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8088960:	2b00      	cmp	r3, #0
 8088962:	d117      	bne.n	8088994 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8088964:	4b2e      	ldr	r3, [pc, #184]	; (8088a20 <tcp_receive+0xd04>)
 8088966:	681a      	ldr	r2, [r3, #0]
 8088968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808896a:	68db      	ldr	r3, [r3, #12]
 808896c:	685b      	ldr	r3, [r3, #4]
 808896e:	1ad3      	subs	r3, r2, r3
 8088970:	2b00      	cmp	r3, #0
 8088972:	da57      	bge.n	8088a24 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8088974:	4829      	ldr	r0, [pc, #164]	; (8088a1c <tcp_receive+0xd00>)
 8088976:	f7fd fb7d 	bl	8086074 <tcp_seg_copy>
 808897a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 808897c:	69bb      	ldr	r3, [r7, #24]
 808897e:	2b00      	cmp	r3, #0
 8088980:	f000 8129 	beq.w	8088bd6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8088984:	687b      	ldr	r3, [r7, #4]
 8088986:	69ba      	ldr	r2, [r7, #24]
 8088988:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 808898a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 808898c:	69b8      	ldr	r0, [r7, #24]
 808898e:	f7ff f8c1 	bl	8087b14 <tcp_oos_insert_segment>
                  }
                  break;
 8088992:	e120      	b.n	8088bd6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8088994:	4b22      	ldr	r3, [pc, #136]	; (8088a20 <tcp_receive+0xd04>)
 8088996:	681a      	ldr	r2, [r3, #0]
 8088998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808899a:	68db      	ldr	r3, [r3, #12]
 808899c:	685b      	ldr	r3, [r3, #4]
 808899e:	1ad3      	subs	r3, r2, r3
 80889a0:	3b01      	subs	r3, #1
 80889a2:	2b00      	cmp	r3, #0
 80889a4:	db3e      	blt.n	8088a24 <tcp_receive+0xd08>
 80889a6:	4b1e      	ldr	r3, [pc, #120]	; (8088a20 <tcp_receive+0xd04>)
 80889a8:	681a      	ldr	r2, [r3, #0]
 80889aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80889ac:	68db      	ldr	r3, [r3, #12]
 80889ae:	685b      	ldr	r3, [r3, #4]
 80889b0:	1ad3      	subs	r3, r2, r3
 80889b2:	3301      	adds	r3, #1
 80889b4:	2b00      	cmp	r3, #0
 80889b6:	dc35      	bgt.n	8088a24 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80889b8:	4818      	ldr	r0, [pc, #96]	; (8088a1c <tcp_receive+0xd00>)
 80889ba:	f7fd fb5b 	bl	8086074 <tcp_seg_copy>
 80889be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80889c0:	69fb      	ldr	r3, [r7, #28]
 80889c2:	2b00      	cmp	r3, #0
 80889c4:	f000 8109 	beq.w	8088bda <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80889c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80889ca:	68db      	ldr	r3, [r3, #12]
 80889cc:	685b      	ldr	r3, [r3, #4]
 80889ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80889d0:	8912      	ldrh	r2, [r2, #8]
 80889d2:	441a      	add	r2, r3
 80889d4:	4b12      	ldr	r3, [pc, #72]	; (8088a20 <tcp_receive+0xd04>)
 80889d6:	681b      	ldr	r3, [r3, #0]
 80889d8:	1ad3      	subs	r3, r2, r3
 80889da:	2b00      	cmp	r3, #0
 80889dc:	dd12      	ble.n	8088a04 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80889de:	4b10      	ldr	r3, [pc, #64]	; (8088a20 <tcp_receive+0xd04>)
 80889e0:	681b      	ldr	r3, [r3, #0]
 80889e2:	b29a      	uxth	r2, r3
 80889e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80889e6:	68db      	ldr	r3, [r3, #12]
 80889e8:	685b      	ldr	r3, [r3, #4]
 80889ea:	b29b      	uxth	r3, r3
 80889ec:	1ad3      	subs	r3, r2, r3
 80889ee:	b29a      	uxth	r2, r3
 80889f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80889f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80889f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80889f6:	685a      	ldr	r2, [r3, #4]
 80889f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80889fa:	891b      	ldrh	r3, [r3, #8]
 80889fc:	4619      	mov	r1, r3
 80889fe:	4610      	mov	r0, r2
 8088a00:	f7fb ff26 	bl	8084850 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8088a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8088a06:	69fa      	ldr	r2, [r7, #28]
 8088a08:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8088a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8088a0c:	69f8      	ldr	r0, [r7, #28]
 8088a0e:	f7ff f881 	bl	8087b14 <tcp_oos_insert_segment>
                  }
                  break;
 8088a12:	e0e2      	b.n	8088bda <tcp_receive+0xebe>
 8088a14:	2000827c 	.word	0x2000827c
 8088a18:	20008279 	.word	0x20008279
 8088a1c:	2000824c 	.word	0x2000824c
 8088a20:	2000826c 	.word	0x2000826c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8088a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a26:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8088a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a2a:	681b      	ldr	r3, [r3, #0]
 8088a2c:	2b00      	cmp	r3, #0
 8088a2e:	f040 80c6 	bne.w	8088bbe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8088a32:	4b80      	ldr	r3, [pc, #512]	; (8088c34 <tcp_receive+0xf18>)
 8088a34:	681a      	ldr	r2, [r3, #0]
 8088a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a38:	68db      	ldr	r3, [r3, #12]
 8088a3a:	685b      	ldr	r3, [r3, #4]
 8088a3c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8088a3e:	2b00      	cmp	r3, #0
 8088a40:	f340 80bd 	ble.w	8088bbe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8088a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a46:	68db      	ldr	r3, [r3, #12]
 8088a48:	899b      	ldrh	r3, [r3, #12]
 8088a4a:	b29b      	uxth	r3, r3
 8088a4c:	4618      	mov	r0, r3
 8088a4e:	f7fa fd47 	bl	80834e0 <lwip_htons>
 8088a52:	4603      	mov	r3, r0
 8088a54:	b2db      	uxtb	r3, r3
 8088a56:	f003 0301 	and.w	r3, r3, #1
 8088a5a:	2b00      	cmp	r3, #0
 8088a5c:	f040 80bf 	bne.w	8088bde <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8088a60:	4875      	ldr	r0, [pc, #468]	; (8088c38 <tcp_receive+0xf1c>)
 8088a62:	f7fd fb07 	bl	8086074 <tcp_seg_copy>
 8088a66:	4602      	mov	r2, r0
 8088a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a6a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8088a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a6e:	681b      	ldr	r3, [r3, #0]
 8088a70:	2b00      	cmp	r3, #0
 8088a72:	f000 80b6 	beq.w	8088be2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8088a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a78:	68db      	ldr	r3, [r3, #12]
 8088a7a:	685b      	ldr	r3, [r3, #4]
 8088a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8088a7e:	8912      	ldrh	r2, [r2, #8]
 8088a80:	441a      	add	r2, r3
 8088a82:	4b6c      	ldr	r3, [pc, #432]	; (8088c34 <tcp_receive+0xf18>)
 8088a84:	681b      	ldr	r3, [r3, #0]
 8088a86:	1ad3      	subs	r3, r2, r3
 8088a88:	2b00      	cmp	r3, #0
 8088a8a:	dd12      	ble.n	8088ab2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8088a8c:	4b69      	ldr	r3, [pc, #420]	; (8088c34 <tcp_receive+0xf18>)
 8088a8e:	681b      	ldr	r3, [r3, #0]
 8088a90:	b29a      	uxth	r2, r3
 8088a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088a94:	68db      	ldr	r3, [r3, #12]
 8088a96:	685b      	ldr	r3, [r3, #4]
 8088a98:	b29b      	uxth	r3, r3
 8088a9a:	1ad3      	subs	r3, r2, r3
 8088a9c:	b29a      	uxth	r2, r3
 8088a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088aa0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8088aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088aa4:	685a      	ldr	r2, [r3, #4]
 8088aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088aa8:	891b      	ldrh	r3, [r3, #8]
 8088aaa:	4619      	mov	r1, r3
 8088aac:	4610      	mov	r0, r2
 8088aae:	f7fb fecf 	bl	8084850 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8088ab2:	4b62      	ldr	r3, [pc, #392]	; (8088c3c <tcp_receive+0xf20>)
 8088ab4:	881b      	ldrh	r3, [r3, #0]
 8088ab6:	461a      	mov	r2, r3
 8088ab8:	4b5e      	ldr	r3, [pc, #376]	; (8088c34 <tcp_receive+0xf18>)
 8088aba:	681b      	ldr	r3, [r3, #0]
 8088abc:	441a      	add	r2, r3
 8088abe:	687b      	ldr	r3, [r7, #4]
 8088ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088ac2:	6879      	ldr	r1, [r7, #4]
 8088ac4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8088ac6:	440b      	add	r3, r1
 8088ac8:	1ad3      	subs	r3, r2, r3
 8088aca:	2b00      	cmp	r3, #0
 8088acc:	f340 8089 	ble.w	8088be2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8088ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088ad2:	681b      	ldr	r3, [r3, #0]
 8088ad4:	68db      	ldr	r3, [r3, #12]
 8088ad6:	899b      	ldrh	r3, [r3, #12]
 8088ad8:	b29b      	uxth	r3, r3
 8088ada:	4618      	mov	r0, r3
 8088adc:	f7fa fd00 	bl	80834e0 <lwip_htons>
 8088ae0:	4603      	mov	r3, r0
 8088ae2:	b2db      	uxtb	r3, r3
 8088ae4:	f003 0301 	and.w	r3, r3, #1
 8088ae8:	2b00      	cmp	r3, #0
 8088aea:	d022      	beq.n	8088b32 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8088aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088aee:	681b      	ldr	r3, [r3, #0]
 8088af0:	68db      	ldr	r3, [r3, #12]
 8088af2:	899b      	ldrh	r3, [r3, #12]
 8088af4:	b29b      	uxth	r3, r3
 8088af6:	b21b      	sxth	r3, r3
 8088af8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8088afc:	b21c      	sxth	r4, r3
 8088afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b00:	681b      	ldr	r3, [r3, #0]
 8088b02:	68db      	ldr	r3, [r3, #12]
 8088b04:	899b      	ldrh	r3, [r3, #12]
 8088b06:	b29b      	uxth	r3, r3
 8088b08:	4618      	mov	r0, r3
 8088b0a:	f7fa fce9 	bl	80834e0 <lwip_htons>
 8088b0e:	4603      	mov	r3, r0
 8088b10:	b2db      	uxtb	r3, r3
 8088b12:	b29b      	uxth	r3, r3
 8088b14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8088b18:	b29b      	uxth	r3, r3
 8088b1a:	4618      	mov	r0, r3
 8088b1c:	f7fa fce0 	bl	80834e0 <lwip_htons>
 8088b20:	4603      	mov	r3, r0
 8088b22:	b21b      	sxth	r3, r3
 8088b24:	4323      	orrs	r3, r4
 8088b26:	b21a      	sxth	r2, r3
 8088b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b2a:	681b      	ldr	r3, [r3, #0]
 8088b2c:	68db      	ldr	r3, [r3, #12]
 8088b2e:	b292      	uxth	r2, r2
 8088b30:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8088b32:	687b      	ldr	r3, [r7, #4]
 8088b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088b36:	b29a      	uxth	r2, r3
 8088b38:	687b      	ldr	r3, [r7, #4]
 8088b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8088b3c:	4413      	add	r3, r2
 8088b3e:	b299      	uxth	r1, r3
 8088b40:	4b3c      	ldr	r3, [pc, #240]	; (8088c34 <tcp_receive+0xf18>)
 8088b42:	681b      	ldr	r3, [r3, #0]
 8088b44:	b29a      	uxth	r2, r3
 8088b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b48:	681b      	ldr	r3, [r3, #0]
 8088b4a:	1a8a      	subs	r2, r1, r2
 8088b4c:	b292      	uxth	r2, r2
 8088b4e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8088b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b52:	681b      	ldr	r3, [r3, #0]
 8088b54:	685a      	ldr	r2, [r3, #4]
 8088b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b58:	681b      	ldr	r3, [r3, #0]
 8088b5a:	891b      	ldrh	r3, [r3, #8]
 8088b5c:	4619      	mov	r1, r3
 8088b5e:	4610      	mov	r0, r2
 8088b60:	f7fb fe76 	bl	8084850 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8088b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b66:	681b      	ldr	r3, [r3, #0]
 8088b68:	891c      	ldrh	r4, [r3, #8]
 8088b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088b6c:	681b      	ldr	r3, [r3, #0]
 8088b6e:	68db      	ldr	r3, [r3, #12]
 8088b70:	899b      	ldrh	r3, [r3, #12]
 8088b72:	b29b      	uxth	r3, r3
 8088b74:	4618      	mov	r0, r3
 8088b76:	f7fa fcb3 	bl	80834e0 <lwip_htons>
 8088b7a:	4603      	mov	r3, r0
 8088b7c:	b2db      	uxtb	r3, r3
 8088b7e:	f003 0303 	and.w	r3, r3, #3
 8088b82:	2b00      	cmp	r3, #0
 8088b84:	d001      	beq.n	8088b8a <tcp_receive+0xe6e>
 8088b86:	2301      	movs	r3, #1
 8088b88:	e000      	b.n	8088b8c <tcp_receive+0xe70>
 8088b8a:	2300      	movs	r3, #0
 8088b8c:	4423      	add	r3, r4
 8088b8e:	b29a      	uxth	r2, r3
 8088b90:	4b2a      	ldr	r3, [pc, #168]	; (8088c3c <tcp_receive+0xf20>)
 8088b92:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8088b94:	4b29      	ldr	r3, [pc, #164]	; (8088c3c <tcp_receive+0xf20>)
 8088b96:	881b      	ldrh	r3, [r3, #0]
 8088b98:	461a      	mov	r2, r3
 8088b9a:	4b26      	ldr	r3, [pc, #152]	; (8088c34 <tcp_receive+0xf18>)
 8088b9c:	681b      	ldr	r3, [r3, #0]
 8088b9e:	441a      	add	r2, r3
 8088ba0:	687b      	ldr	r3, [r7, #4]
 8088ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088ba4:	6879      	ldr	r1, [r7, #4]
 8088ba6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8088ba8:	440b      	add	r3, r1
 8088baa:	429a      	cmp	r2, r3
 8088bac:	d019      	beq.n	8088be2 <tcp_receive+0xec6>
 8088bae:	4b24      	ldr	r3, [pc, #144]	; (8088c40 <tcp_receive+0xf24>)
 8088bb0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8088bb4:	4923      	ldr	r1, [pc, #140]	; (8088c44 <tcp_receive+0xf28>)
 8088bb6:	4824      	ldr	r0, [pc, #144]	; (8088c48 <tcp_receive+0xf2c>)
 8088bb8:	f004 f98c 	bl	808ced4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8088bbc:	e011      	b.n	8088be2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8088bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088bc0:	681b      	ldr	r3, [r3, #0]
 8088bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8088bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8088bc6:	2b00      	cmp	r3, #0
 8088bc8:	f47f aea4 	bne.w	8088914 <tcp_receive+0xbf8>
 8088bcc:	e00a      	b.n	8088be4 <tcp_receive+0xec8>
                break;
 8088bce:	bf00      	nop
 8088bd0:	e008      	b.n	8088be4 <tcp_receive+0xec8>
                break;
 8088bd2:	bf00      	nop
 8088bd4:	e006      	b.n	8088be4 <tcp_receive+0xec8>
                  break;
 8088bd6:	bf00      	nop
 8088bd8:	e004      	b.n	8088be4 <tcp_receive+0xec8>
                  break;
 8088bda:	bf00      	nop
 8088bdc:	e002      	b.n	8088be4 <tcp_receive+0xec8>
                  break;
 8088bde:	bf00      	nop
 8088be0:	e000      	b.n	8088be4 <tcp_receive+0xec8>
                break;
 8088be2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8088be4:	6878      	ldr	r0, [r7, #4]
 8088be6:	f001 fa33 	bl	808a050 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8088bea:	e003      	b.n	8088bf4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8088bec:	6878      	ldr	r0, [r7, #4]
 8088bee:	f001 fa2f 	bl	808a050 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8088bf2:	e01a      	b.n	8088c2a <tcp_receive+0xf0e>
 8088bf4:	e019      	b.n	8088c2a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8088bf6:	4b0f      	ldr	r3, [pc, #60]	; (8088c34 <tcp_receive+0xf18>)
 8088bf8:	681a      	ldr	r2, [r3, #0]
 8088bfa:	687b      	ldr	r3, [r7, #4]
 8088bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088bfe:	1ad3      	subs	r3, r2, r3
 8088c00:	2b00      	cmp	r3, #0
 8088c02:	db0a      	blt.n	8088c1a <tcp_receive+0xefe>
 8088c04:	4b0b      	ldr	r3, [pc, #44]	; (8088c34 <tcp_receive+0xf18>)
 8088c06:	681a      	ldr	r2, [r3, #0]
 8088c08:	687b      	ldr	r3, [r7, #4]
 8088c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088c0c:	6879      	ldr	r1, [r7, #4]
 8088c0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8088c10:	440b      	add	r3, r1
 8088c12:	1ad3      	subs	r3, r2, r3
 8088c14:	3301      	adds	r3, #1
 8088c16:	2b00      	cmp	r3, #0
 8088c18:	dd07      	ble.n	8088c2a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8088c1a:	687b      	ldr	r3, [r7, #4]
 8088c1c:	8b5b      	ldrh	r3, [r3, #26]
 8088c1e:	f043 0302 	orr.w	r3, r3, #2
 8088c22:	b29a      	uxth	r2, r3
 8088c24:	687b      	ldr	r3, [r7, #4]
 8088c26:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8088c28:	e7ff      	b.n	8088c2a <tcp_receive+0xf0e>
 8088c2a:	bf00      	nop
 8088c2c:	3750      	adds	r7, #80	; 0x50
 8088c2e:	46bd      	mov	sp, r7
 8088c30:	bdb0      	pop	{r4, r5, r7, pc}
 8088c32:	bf00      	nop
 8088c34:	2000826c 	.word	0x2000826c
 8088c38:	2000824c 	.word	0x2000824c
 8088c3c:	20008276 	.word	0x20008276
 8088c40:	0808f1c0 	.word	0x0808f1c0
 8088c44:	0808f568 	.word	0x0808f568
 8088c48:	0808f20c 	.word	0x0808f20c

08088c4c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8088c4c:	b480      	push	{r7}
 8088c4e:	b083      	sub	sp, #12
 8088c50:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8088c52:	4b15      	ldr	r3, [pc, #84]	; (8088ca8 <tcp_get_next_optbyte+0x5c>)
 8088c54:	881b      	ldrh	r3, [r3, #0]
 8088c56:	1c5a      	adds	r2, r3, #1
 8088c58:	b291      	uxth	r1, r2
 8088c5a:	4a13      	ldr	r2, [pc, #76]	; (8088ca8 <tcp_get_next_optbyte+0x5c>)
 8088c5c:	8011      	strh	r1, [r2, #0]
 8088c5e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8088c60:	4b12      	ldr	r3, [pc, #72]	; (8088cac <tcp_get_next_optbyte+0x60>)
 8088c62:	681b      	ldr	r3, [r3, #0]
 8088c64:	2b00      	cmp	r3, #0
 8088c66:	d004      	beq.n	8088c72 <tcp_get_next_optbyte+0x26>
 8088c68:	4b11      	ldr	r3, [pc, #68]	; (8088cb0 <tcp_get_next_optbyte+0x64>)
 8088c6a:	881b      	ldrh	r3, [r3, #0]
 8088c6c:	88fa      	ldrh	r2, [r7, #6]
 8088c6e:	429a      	cmp	r2, r3
 8088c70:	d208      	bcs.n	8088c84 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8088c72:	4b10      	ldr	r3, [pc, #64]	; (8088cb4 <tcp_get_next_optbyte+0x68>)
 8088c74:	681b      	ldr	r3, [r3, #0]
 8088c76:	3314      	adds	r3, #20
 8088c78:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8088c7a:	88fb      	ldrh	r3, [r7, #6]
 8088c7c:	683a      	ldr	r2, [r7, #0]
 8088c7e:	4413      	add	r3, r2
 8088c80:	781b      	ldrb	r3, [r3, #0]
 8088c82:	e00b      	b.n	8088c9c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8088c84:	88fb      	ldrh	r3, [r7, #6]
 8088c86:	b2da      	uxtb	r2, r3
 8088c88:	4b09      	ldr	r3, [pc, #36]	; (8088cb0 <tcp_get_next_optbyte+0x64>)
 8088c8a:	881b      	ldrh	r3, [r3, #0]
 8088c8c:	b2db      	uxtb	r3, r3
 8088c8e:	1ad3      	subs	r3, r2, r3
 8088c90:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8088c92:	4b06      	ldr	r3, [pc, #24]	; (8088cac <tcp_get_next_optbyte+0x60>)
 8088c94:	681a      	ldr	r2, [r3, #0]
 8088c96:	797b      	ldrb	r3, [r7, #5]
 8088c98:	4413      	add	r3, r2
 8088c9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8088c9c:	4618      	mov	r0, r3
 8088c9e:	370c      	adds	r7, #12
 8088ca0:	46bd      	mov	sp, r7
 8088ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088ca6:	4770      	bx	lr
 8088ca8:	20008268 	.word	0x20008268
 8088cac:	20008264 	.word	0x20008264
 8088cb0:	20008262 	.word	0x20008262
 8088cb4:	2000825c 	.word	0x2000825c

08088cb8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8088cb8:	b580      	push	{r7, lr}
 8088cba:	b084      	sub	sp, #16
 8088cbc:	af00      	add	r7, sp, #0
 8088cbe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8088cc0:	687b      	ldr	r3, [r7, #4]
 8088cc2:	2b00      	cmp	r3, #0
 8088cc4:	d106      	bne.n	8088cd4 <tcp_parseopt+0x1c>
 8088cc6:	4b32      	ldr	r3, [pc, #200]	; (8088d90 <tcp_parseopt+0xd8>)
 8088cc8:	f240 727d 	movw	r2, #1917	; 0x77d
 8088ccc:	4931      	ldr	r1, [pc, #196]	; (8088d94 <tcp_parseopt+0xdc>)
 8088cce:	4832      	ldr	r0, [pc, #200]	; (8088d98 <tcp_parseopt+0xe0>)
 8088cd0:	f004 f900 	bl	808ced4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8088cd4:	4b31      	ldr	r3, [pc, #196]	; (8088d9c <tcp_parseopt+0xe4>)
 8088cd6:	881b      	ldrh	r3, [r3, #0]
 8088cd8:	2b00      	cmp	r3, #0
 8088cda:	d055      	beq.n	8088d88 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8088cdc:	4b30      	ldr	r3, [pc, #192]	; (8088da0 <tcp_parseopt+0xe8>)
 8088cde:	2200      	movs	r2, #0
 8088ce0:	801a      	strh	r2, [r3, #0]
 8088ce2:	e045      	b.n	8088d70 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8088ce4:	f7ff ffb2 	bl	8088c4c <tcp_get_next_optbyte>
 8088ce8:	4603      	mov	r3, r0
 8088cea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8088cec:	7bfb      	ldrb	r3, [r7, #15]
 8088cee:	2b02      	cmp	r3, #2
 8088cf0:	d006      	beq.n	8088d00 <tcp_parseopt+0x48>
 8088cf2:	2b02      	cmp	r3, #2
 8088cf4:	dc2b      	bgt.n	8088d4e <tcp_parseopt+0x96>
 8088cf6:	2b00      	cmp	r3, #0
 8088cf8:	d041      	beq.n	8088d7e <tcp_parseopt+0xc6>
 8088cfa:	2b01      	cmp	r3, #1
 8088cfc:	d127      	bne.n	8088d4e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8088cfe:	e037      	b.n	8088d70 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8088d00:	f7ff ffa4 	bl	8088c4c <tcp_get_next_optbyte>
 8088d04:	4603      	mov	r3, r0
 8088d06:	2b04      	cmp	r3, #4
 8088d08:	d13b      	bne.n	8088d82 <tcp_parseopt+0xca>
 8088d0a:	4b25      	ldr	r3, [pc, #148]	; (8088da0 <tcp_parseopt+0xe8>)
 8088d0c:	881b      	ldrh	r3, [r3, #0]
 8088d0e:	3301      	adds	r3, #1
 8088d10:	4a22      	ldr	r2, [pc, #136]	; (8088d9c <tcp_parseopt+0xe4>)
 8088d12:	8812      	ldrh	r2, [r2, #0]
 8088d14:	4293      	cmp	r3, r2
 8088d16:	da34      	bge.n	8088d82 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8088d18:	f7ff ff98 	bl	8088c4c <tcp_get_next_optbyte>
 8088d1c:	4603      	mov	r3, r0
 8088d1e:	b29b      	uxth	r3, r3
 8088d20:	021b      	lsls	r3, r3, #8
 8088d22:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8088d24:	f7ff ff92 	bl	8088c4c <tcp_get_next_optbyte>
 8088d28:	4603      	mov	r3, r0
 8088d2a:	b29a      	uxth	r2, r3
 8088d2c:	89bb      	ldrh	r3, [r7, #12]
 8088d2e:	4313      	orrs	r3, r2
 8088d30:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8088d32:	89bb      	ldrh	r3, [r7, #12]
 8088d34:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8088d38:	d804      	bhi.n	8088d44 <tcp_parseopt+0x8c>
 8088d3a:	89bb      	ldrh	r3, [r7, #12]
 8088d3c:	2b00      	cmp	r3, #0
 8088d3e:	d001      	beq.n	8088d44 <tcp_parseopt+0x8c>
 8088d40:	89ba      	ldrh	r2, [r7, #12]
 8088d42:	e001      	b.n	8088d48 <tcp_parseopt+0x90>
 8088d44:	f44f 7206 	mov.w	r2, #536	; 0x218
 8088d48:	687b      	ldr	r3, [r7, #4]
 8088d4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8088d4c:	e010      	b.n	8088d70 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8088d4e:	f7ff ff7d 	bl	8088c4c <tcp_get_next_optbyte>
 8088d52:	4603      	mov	r3, r0
 8088d54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8088d56:	7afb      	ldrb	r3, [r7, #11]
 8088d58:	2b01      	cmp	r3, #1
 8088d5a:	d914      	bls.n	8088d86 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8088d5c:	7afb      	ldrb	r3, [r7, #11]
 8088d5e:	b29a      	uxth	r2, r3
 8088d60:	4b0f      	ldr	r3, [pc, #60]	; (8088da0 <tcp_parseopt+0xe8>)
 8088d62:	881b      	ldrh	r3, [r3, #0]
 8088d64:	4413      	add	r3, r2
 8088d66:	b29b      	uxth	r3, r3
 8088d68:	3b02      	subs	r3, #2
 8088d6a:	b29a      	uxth	r2, r3
 8088d6c:	4b0c      	ldr	r3, [pc, #48]	; (8088da0 <tcp_parseopt+0xe8>)
 8088d6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8088d70:	4b0b      	ldr	r3, [pc, #44]	; (8088da0 <tcp_parseopt+0xe8>)
 8088d72:	881a      	ldrh	r2, [r3, #0]
 8088d74:	4b09      	ldr	r3, [pc, #36]	; (8088d9c <tcp_parseopt+0xe4>)
 8088d76:	881b      	ldrh	r3, [r3, #0]
 8088d78:	429a      	cmp	r2, r3
 8088d7a:	d3b3      	bcc.n	8088ce4 <tcp_parseopt+0x2c>
 8088d7c:	e004      	b.n	8088d88 <tcp_parseopt+0xd0>
          return;
 8088d7e:	bf00      	nop
 8088d80:	e002      	b.n	8088d88 <tcp_parseopt+0xd0>
            return;
 8088d82:	bf00      	nop
 8088d84:	e000      	b.n	8088d88 <tcp_parseopt+0xd0>
            return;
 8088d86:	bf00      	nop
      }
    }
  }
}
 8088d88:	3710      	adds	r7, #16
 8088d8a:	46bd      	mov	sp, r7
 8088d8c:	bd80      	pop	{r7, pc}
 8088d8e:	bf00      	nop
 8088d90:	0808f1c0 	.word	0x0808f1c0
 8088d94:	0808f624 	.word	0x0808f624
 8088d98:	0808f20c 	.word	0x0808f20c
 8088d9c:	20008260 	.word	0x20008260
 8088da0:	20008268 	.word	0x20008268

08088da4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8088da4:	b480      	push	{r7}
 8088da6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8088da8:	4b05      	ldr	r3, [pc, #20]	; (8088dc0 <tcp_trigger_input_pcb_close+0x1c>)
 8088daa:	781b      	ldrb	r3, [r3, #0]
 8088dac:	f043 0310 	orr.w	r3, r3, #16
 8088db0:	b2da      	uxtb	r2, r3
 8088db2:	4b03      	ldr	r3, [pc, #12]	; (8088dc0 <tcp_trigger_input_pcb_close+0x1c>)
 8088db4:	701a      	strb	r2, [r3, #0]
}
 8088db6:	bf00      	nop
 8088db8:	46bd      	mov	sp, r7
 8088dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088dbe:	4770      	bx	lr
 8088dc0:	20008279 	.word	0x20008279

08088dc4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8088dc4:	b580      	push	{r7, lr}
 8088dc6:	b084      	sub	sp, #16
 8088dc8:	af00      	add	r7, sp, #0
 8088dca:	60f8      	str	r0, [r7, #12]
 8088dcc:	60b9      	str	r1, [r7, #8]
 8088dce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8088dd0:	68fb      	ldr	r3, [r7, #12]
 8088dd2:	2b00      	cmp	r3, #0
 8088dd4:	d00a      	beq.n	8088dec <tcp_route+0x28>
 8088dd6:	68fb      	ldr	r3, [r7, #12]
 8088dd8:	7a1b      	ldrb	r3, [r3, #8]
 8088dda:	2b00      	cmp	r3, #0
 8088ddc:	d006      	beq.n	8088dec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8088dde:	68fb      	ldr	r3, [r7, #12]
 8088de0:	7a1b      	ldrb	r3, [r3, #8]
 8088de2:	4618      	mov	r0, r3
 8088de4:	f7fb fb7a 	bl	80844dc <netif_get_by_index>
 8088de8:	4603      	mov	r3, r0
 8088dea:	e003      	b.n	8088df4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8088dec:	6878      	ldr	r0, [r7, #4]
 8088dee:	f002 fe3b 	bl	808ba68 <ip4_route>
 8088df2:	4603      	mov	r3, r0
  }
}
 8088df4:	4618      	mov	r0, r3
 8088df6:	3710      	adds	r7, #16
 8088df8:	46bd      	mov	sp, r7
 8088dfa:	bd80      	pop	{r7, pc}

08088dfc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8088dfc:	b590      	push	{r4, r7, lr}
 8088dfe:	b087      	sub	sp, #28
 8088e00:	af00      	add	r7, sp, #0
 8088e02:	60f8      	str	r0, [r7, #12]
 8088e04:	60b9      	str	r1, [r7, #8]
 8088e06:	603b      	str	r3, [r7, #0]
 8088e08:	4613      	mov	r3, r2
 8088e0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8088e0c:	68fb      	ldr	r3, [r7, #12]
 8088e0e:	2b00      	cmp	r3, #0
 8088e10:	d105      	bne.n	8088e1e <tcp_create_segment+0x22>
 8088e12:	4b44      	ldr	r3, [pc, #272]	; (8088f24 <tcp_create_segment+0x128>)
 8088e14:	22a3      	movs	r2, #163	; 0xa3
 8088e16:	4944      	ldr	r1, [pc, #272]	; (8088f28 <tcp_create_segment+0x12c>)
 8088e18:	4844      	ldr	r0, [pc, #272]	; (8088f2c <tcp_create_segment+0x130>)
 8088e1a:	f004 f85b 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8088e1e:	68bb      	ldr	r3, [r7, #8]
 8088e20:	2b00      	cmp	r3, #0
 8088e22:	d105      	bne.n	8088e30 <tcp_create_segment+0x34>
 8088e24:	4b3f      	ldr	r3, [pc, #252]	; (8088f24 <tcp_create_segment+0x128>)
 8088e26:	22a4      	movs	r2, #164	; 0xa4
 8088e28:	4941      	ldr	r1, [pc, #260]	; (8088f30 <tcp_create_segment+0x134>)
 8088e2a:	4840      	ldr	r0, [pc, #256]	; (8088f2c <tcp_create_segment+0x130>)
 8088e2c:	f004 f852 	bl	808ced4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8088e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8088e34:	009b      	lsls	r3, r3, #2
 8088e36:	b2db      	uxtb	r3, r3
 8088e38:	f003 0304 	and.w	r3, r3, #4
 8088e3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8088e3e:	2003      	movs	r0, #3
 8088e40:	f7fa ffc6 	bl	8083dd0 <memp_malloc>
 8088e44:	6138      	str	r0, [r7, #16]
 8088e46:	693b      	ldr	r3, [r7, #16]
 8088e48:	2b00      	cmp	r3, #0
 8088e4a:	d104      	bne.n	8088e56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8088e4c:	68b8      	ldr	r0, [r7, #8]
 8088e4e:	f7fb fe85 	bl	8084b5c <pbuf_free>
    return NULL;
 8088e52:	2300      	movs	r3, #0
 8088e54:	e061      	b.n	8088f1a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8088e56:	693b      	ldr	r3, [r7, #16]
 8088e58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8088e5c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8088e5e:	693b      	ldr	r3, [r7, #16]
 8088e60:	2200      	movs	r2, #0
 8088e62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8088e64:	693b      	ldr	r3, [r7, #16]
 8088e66:	68ba      	ldr	r2, [r7, #8]
 8088e68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8088e6a:	68bb      	ldr	r3, [r7, #8]
 8088e6c:	891a      	ldrh	r2, [r3, #8]
 8088e6e:	7dfb      	ldrb	r3, [r7, #23]
 8088e70:	b29b      	uxth	r3, r3
 8088e72:	429a      	cmp	r2, r3
 8088e74:	d205      	bcs.n	8088e82 <tcp_create_segment+0x86>
 8088e76:	4b2b      	ldr	r3, [pc, #172]	; (8088f24 <tcp_create_segment+0x128>)
 8088e78:	22b0      	movs	r2, #176	; 0xb0
 8088e7a:	492e      	ldr	r1, [pc, #184]	; (8088f34 <tcp_create_segment+0x138>)
 8088e7c:	482b      	ldr	r0, [pc, #172]	; (8088f2c <tcp_create_segment+0x130>)
 8088e7e:	f004 f829 	bl	808ced4 <iprintf>
  seg->len = p->tot_len - optlen;
 8088e82:	68bb      	ldr	r3, [r7, #8]
 8088e84:	891a      	ldrh	r2, [r3, #8]
 8088e86:	7dfb      	ldrb	r3, [r7, #23]
 8088e88:	b29b      	uxth	r3, r3
 8088e8a:	1ad3      	subs	r3, r2, r3
 8088e8c:	b29a      	uxth	r2, r3
 8088e8e:	693b      	ldr	r3, [r7, #16]
 8088e90:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8088e92:	2114      	movs	r1, #20
 8088e94:	68b8      	ldr	r0, [r7, #8]
 8088e96:	f7fb fdcb 	bl	8084a30 <pbuf_add_header>
 8088e9a:	4603      	mov	r3, r0
 8088e9c:	2b00      	cmp	r3, #0
 8088e9e:	d004      	beq.n	8088eaa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8088ea0:	6938      	ldr	r0, [r7, #16]
 8088ea2:	f7fd f8ce 	bl	8086042 <tcp_seg_free>
    return NULL;
 8088ea6:	2300      	movs	r3, #0
 8088ea8:	e037      	b.n	8088f1a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8088eaa:	693b      	ldr	r3, [r7, #16]
 8088eac:	685b      	ldr	r3, [r3, #4]
 8088eae:	685a      	ldr	r2, [r3, #4]
 8088eb0:	693b      	ldr	r3, [r7, #16]
 8088eb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8088eb4:	68fb      	ldr	r3, [r7, #12]
 8088eb6:	8ada      	ldrh	r2, [r3, #22]
 8088eb8:	693b      	ldr	r3, [r7, #16]
 8088eba:	68dc      	ldr	r4, [r3, #12]
 8088ebc:	4610      	mov	r0, r2
 8088ebe:	f7fa fb0f 	bl	80834e0 <lwip_htons>
 8088ec2:	4603      	mov	r3, r0
 8088ec4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8088ec6:	68fb      	ldr	r3, [r7, #12]
 8088ec8:	8b1a      	ldrh	r2, [r3, #24]
 8088eca:	693b      	ldr	r3, [r7, #16]
 8088ecc:	68dc      	ldr	r4, [r3, #12]
 8088ece:	4610      	mov	r0, r2
 8088ed0:	f7fa fb06 	bl	80834e0 <lwip_htons>
 8088ed4:	4603      	mov	r3, r0
 8088ed6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8088ed8:	693b      	ldr	r3, [r7, #16]
 8088eda:	68dc      	ldr	r4, [r3, #12]
 8088edc:	6838      	ldr	r0, [r7, #0]
 8088ede:	f7fa fb14 	bl	808350a <lwip_htonl>
 8088ee2:	4603      	mov	r3, r0
 8088ee4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8088ee6:	7dfb      	ldrb	r3, [r7, #23]
 8088ee8:	089b      	lsrs	r3, r3, #2
 8088eea:	b2db      	uxtb	r3, r3
 8088eec:	b29b      	uxth	r3, r3
 8088eee:	3305      	adds	r3, #5
 8088ef0:	b29b      	uxth	r3, r3
 8088ef2:	031b      	lsls	r3, r3, #12
 8088ef4:	b29a      	uxth	r2, r3
 8088ef6:	79fb      	ldrb	r3, [r7, #7]
 8088ef8:	b29b      	uxth	r3, r3
 8088efa:	4313      	orrs	r3, r2
 8088efc:	b29a      	uxth	r2, r3
 8088efe:	693b      	ldr	r3, [r7, #16]
 8088f00:	68dc      	ldr	r4, [r3, #12]
 8088f02:	4610      	mov	r0, r2
 8088f04:	f7fa faec 	bl	80834e0 <lwip_htons>
 8088f08:	4603      	mov	r3, r0
 8088f0a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8088f0c:	693b      	ldr	r3, [r7, #16]
 8088f0e:	68db      	ldr	r3, [r3, #12]
 8088f10:	2200      	movs	r2, #0
 8088f12:	749a      	strb	r2, [r3, #18]
 8088f14:	2200      	movs	r2, #0
 8088f16:	74da      	strb	r2, [r3, #19]
  return seg;
 8088f18:	693b      	ldr	r3, [r7, #16]
}
 8088f1a:	4618      	mov	r0, r3
 8088f1c:	371c      	adds	r7, #28
 8088f1e:	46bd      	mov	sp, r7
 8088f20:	bd90      	pop	{r4, r7, pc}
 8088f22:	bf00      	nop
 8088f24:	0808f640 	.word	0x0808f640
 8088f28:	0808f674 	.word	0x0808f674
 8088f2c:	0808f694 	.word	0x0808f694
 8088f30:	0808f6bc 	.word	0x0808f6bc
 8088f34:	0808f6e0 	.word	0x0808f6e0

08088f38 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8088f38:	b590      	push	{r4, r7, lr}
 8088f3a:	b08b      	sub	sp, #44	; 0x2c
 8088f3c:	af02      	add	r7, sp, #8
 8088f3e:	6078      	str	r0, [r7, #4]
 8088f40:	460b      	mov	r3, r1
 8088f42:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8088f44:	2300      	movs	r3, #0
 8088f46:	61fb      	str	r3, [r7, #28]
 8088f48:	2300      	movs	r3, #0
 8088f4a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8088f4c:	2300      	movs	r3, #0
 8088f4e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8088f50:	687b      	ldr	r3, [r7, #4]
 8088f52:	2b00      	cmp	r3, #0
 8088f54:	d106      	bne.n	8088f64 <tcp_split_unsent_seg+0x2c>
 8088f56:	4b95      	ldr	r3, [pc, #596]	; (80891ac <tcp_split_unsent_seg+0x274>)
 8088f58:	f240 324b 	movw	r2, #843	; 0x34b
 8088f5c:	4994      	ldr	r1, [pc, #592]	; (80891b0 <tcp_split_unsent_seg+0x278>)
 8088f5e:	4895      	ldr	r0, [pc, #596]	; (80891b4 <tcp_split_unsent_seg+0x27c>)
 8088f60:	f003 ffb8 	bl	808ced4 <iprintf>

  useg = pcb->unsent;
 8088f64:	687b      	ldr	r3, [r7, #4]
 8088f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8088f68:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8088f6a:	697b      	ldr	r3, [r7, #20]
 8088f6c:	2b00      	cmp	r3, #0
 8088f6e:	d102      	bne.n	8088f76 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8088f70:	f04f 33ff 	mov.w	r3, #4294967295
 8088f74:	e116      	b.n	80891a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8088f76:	887b      	ldrh	r3, [r7, #2]
 8088f78:	2b00      	cmp	r3, #0
 8088f7a:	d109      	bne.n	8088f90 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8088f7c:	4b8b      	ldr	r3, [pc, #556]	; (80891ac <tcp_split_unsent_seg+0x274>)
 8088f7e:	f240 3253 	movw	r2, #851	; 0x353
 8088f82:	498d      	ldr	r1, [pc, #564]	; (80891b8 <tcp_split_unsent_seg+0x280>)
 8088f84:	488b      	ldr	r0, [pc, #556]	; (80891b4 <tcp_split_unsent_seg+0x27c>)
 8088f86:	f003 ffa5 	bl	808ced4 <iprintf>
    return ERR_VAL;
 8088f8a:	f06f 0305 	mvn.w	r3, #5
 8088f8e:	e109      	b.n	80891a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8088f90:	697b      	ldr	r3, [r7, #20]
 8088f92:	891b      	ldrh	r3, [r3, #8]
 8088f94:	887a      	ldrh	r2, [r7, #2]
 8088f96:	429a      	cmp	r2, r3
 8088f98:	d301      	bcc.n	8088f9e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8088f9a:	2300      	movs	r3, #0
 8088f9c:	e102      	b.n	80891a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8088f9e:	687b      	ldr	r3, [r7, #4]
 8088fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8088fa2:	887a      	ldrh	r2, [r7, #2]
 8088fa4:	429a      	cmp	r2, r3
 8088fa6:	d906      	bls.n	8088fb6 <tcp_split_unsent_seg+0x7e>
 8088fa8:	4b80      	ldr	r3, [pc, #512]	; (80891ac <tcp_split_unsent_seg+0x274>)
 8088faa:	f240 325b 	movw	r2, #859	; 0x35b
 8088fae:	4983      	ldr	r1, [pc, #524]	; (80891bc <tcp_split_unsent_seg+0x284>)
 8088fb0:	4880      	ldr	r0, [pc, #512]	; (80891b4 <tcp_split_unsent_seg+0x27c>)
 8088fb2:	f003 ff8f 	bl	808ced4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8088fb6:	697b      	ldr	r3, [r7, #20]
 8088fb8:	891b      	ldrh	r3, [r3, #8]
 8088fba:	2b00      	cmp	r3, #0
 8088fbc:	d106      	bne.n	8088fcc <tcp_split_unsent_seg+0x94>
 8088fbe:	4b7b      	ldr	r3, [pc, #492]	; (80891ac <tcp_split_unsent_seg+0x274>)
 8088fc0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8088fc4:	497e      	ldr	r1, [pc, #504]	; (80891c0 <tcp_split_unsent_seg+0x288>)
 8088fc6:	487b      	ldr	r0, [pc, #492]	; (80891b4 <tcp_split_unsent_seg+0x27c>)
 8088fc8:	f003 ff84 	bl	808ced4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8088fcc:	697b      	ldr	r3, [r7, #20]
 8088fce:	7a9b      	ldrb	r3, [r3, #10]
 8088fd0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8088fd2:	7bfb      	ldrb	r3, [r7, #15]
 8088fd4:	009b      	lsls	r3, r3, #2
 8088fd6:	b2db      	uxtb	r3, r3
 8088fd8:	f003 0304 	and.w	r3, r3, #4
 8088fdc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8088fde:	697b      	ldr	r3, [r7, #20]
 8088fe0:	891a      	ldrh	r2, [r3, #8]
 8088fe2:	887b      	ldrh	r3, [r7, #2]
 8088fe4:	1ad3      	subs	r3, r2, r3
 8088fe6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8088fe8:	7bbb      	ldrb	r3, [r7, #14]
 8088fea:	b29a      	uxth	r2, r3
 8088fec:	89bb      	ldrh	r3, [r7, #12]
 8088fee:	4413      	add	r3, r2
 8088ff0:	b29b      	uxth	r3, r3
 8088ff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8088ff6:	4619      	mov	r1, r3
 8088ff8:	2036      	movs	r0, #54	; 0x36
 8088ffa:	f7fb facb 	bl	8084594 <pbuf_alloc>
 8088ffe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8089000:	693b      	ldr	r3, [r7, #16]
 8089002:	2b00      	cmp	r3, #0
 8089004:	f000 80b7 	beq.w	8089176 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8089008:	697b      	ldr	r3, [r7, #20]
 808900a:	685b      	ldr	r3, [r3, #4]
 808900c:	891a      	ldrh	r2, [r3, #8]
 808900e:	697b      	ldr	r3, [r7, #20]
 8089010:	891b      	ldrh	r3, [r3, #8]
 8089012:	1ad3      	subs	r3, r2, r3
 8089014:	b29a      	uxth	r2, r3
 8089016:	887b      	ldrh	r3, [r7, #2]
 8089018:	4413      	add	r3, r2
 808901a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 808901c:	697b      	ldr	r3, [r7, #20]
 808901e:	6858      	ldr	r0, [r3, #4]
 8089020:	693b      	ldr	r3, [r7, #16]
 8089022:	685a      	ldr	r2, [r3, #4]
 8089024:	7bbb      	ldrb	r3, [r7, #14]
 8089026:	18d1      	adds	r1, r2, r3
 8089028:	897b      	ldrh	r3, [r7, #10]
 808902a:	89ba      	ldrh	r2, [r7, #12]
 808902c:	f7fb ff80 	bl	8084f30 <pbuf_copy_partial>
 8089030:	4603      	mov	r3, r0
 8089032:	461a      	mov	r2, r3
 8089034:	89bb      	ldrh	r3, [r7, #12]
 8089036:	4293      	cmp	r3, r2
 8089038:	f040 809f 	bne.w	808917a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 808903c:	697b      	ldr	r3, [r7, #20]
 808903e:	68db      	ldr	r3, [r3, #12]
 8089040:	899b      	ldrh	r3, [r3, #12]
 8089042:	b29b      	uxth	r3, r3
 8089044:	4618      	mov	r0, r3
 8089046:	f7fa fa4b 	bl	80834e0 <lwip_htons>
 808904a:	4603      	mov	r3, r0
 808904c:	b2db      	uxtb	r3, r3
 808904e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8089052:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8089054:	2300      	movs	r3, #0
 8089056:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8089058:	7efb      	ldrb	r3, [r7, #27]
 808905a:	f003 0308 	and.w	r3, r3, #8
 808905e:	2b00      	cmp	r3, #0
 8089060:	d007      	beq.n	8089072 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8089062:	7efb      	ldrb	r3, [r7, #27]
 8089064:	f023 0308 	bic.w	r3, r3, #8
 8089068:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 808906a:	7ebb      	ldrb	r3, [r7, #26]
 808906c:	f043 0308 	orr.w	r3, r3, #8
 8089070:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8089072:	7efb      	ldrb	r3, [r7, #27]
 8089074:	f003 0301 	and.w	r3, r3, #1
 8089078:	2b00      	cmp	r3, #0
 808907a:	d007      	beq.n	808908c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 808907c:	7efb      	ldrb	r3, [r7, #27]
 808907e:	f023 0301 	bic.w	r3, r3, #1
 8089082:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8089084:	7ebb      	ldrb	r3, [r7, #26]
 8089086:	f043 0301 	orr.w	r3, r3, #1
 808908a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 808908c:	697b      	ldr	r3, [r7, #20]
 808908e:	68db      	ldr	r3, [r3, #12]
 8089090:	685b      	ldr	r3, [r3, #4]
 8089092:	4618      	mov	r0, r3
 8089094:	f7fa fa39 	bl	808350a <lwip_htonl>
 8089098:	4602      	mov	r2, r0
 808909a:	887b      	ldrh	r3, [r7, #2]
 808909c:	18d1      	adds	r1, r2, r3
 808909e:	7eba      	ldrb	r2, [r7, #26]
 80890a0:	7bfb      	ldrb	r3, [r7, #15]
 80890a2:	9300      	str	r3, [sp, #0]
 80890a4:	460b      	mov	r3, r1
 80890a6:	6939      	ldr	r1, [r7, #16]
 80890a8:	6878      	ldr	r0, [r7, #4]
 80890aa:	f7ff fea7 	bl	8088dfc <tcp_create_segment>
 80890ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80890b0:	69fb      	ldr	r3, [r7, #28]
 80890b2:	2b00      	cmp	r3, #0
 80890b4:	d063      	beq.n	808917e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80890b6:	697b      	ldr	r3, [r7, #20]
 80890b8:	685b      	ldr	r3, [r3, #4]
 80890ba:	4618      	mov	r0, r3
 80890bc:	f7fb fdd6 	bl	8084c6c <pbuf_clen>
 80890c0:	4603      	mov	r3, r0
 80890c2:	461a      	mov	r2, r3
 80890c4:	687b      	ldr	r3, [r7, #4]
 80890c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80890ca:	1a9b      	subs	r3, r3, r2
 80890cc:	b29a      	uxth	r2, r3
 80890ce:	687b      	ldr	r3, [r7, #4]
 80890d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80890d4:	697b      	ldr	r3, [r7, #20]
 80890d6:	6858      	ldr	r0, [r3, #4]
 80890d8:	697b      	ldr	r3, [r7, #20]
 80890da:	685b      	ldr	r3, [r3, #4]
 80890dc:	891a      	ldrh	r2, [r3, #8]
 80890de:	89bb      	ldrh	r3, [r7, #12]
 80890e0:	1ad3      	subs	r3, r2, r3
 80890e2:	b29b      	uxth	r3, r3
 80890e4:	4619      	mov	r1, r3
 80890e6:	f7fb fbb3 	bl	8084850 <pbuf_realloc>
  useg->len -= remainder;
 80890ea:	697b      	ldr	r3, [r7, #20]
 80890ec:	891a      	ldrh	r2, [r3, #8]
 80890ee:	89bb      	ldrh	r3, [r7, #12]
 80890f0:	1ad3      	subs	r3, r2, r3
 80890f2:	b29a      	uxth	r2, r3
 80890f4:	697b      	ldr	r3, [r7, #20]
 80890f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80890f8:	697b      	ldr	r3, [r7, #20]
 80890fa:	68db      	ldr	r3, [r3, #12]
 80890fc:	899b      	ldrh	r3, [r3, #12]
 80890fe:	b29c      	uxth	r4, r3
 8089100:	7efb      	ldrb	r3, [r7, #27]
 8089102:	b29b      	uxth	r3, r3
 8089104:	4618      	mov	r0, r3
 8089106:	f7fa f9eb 	bl	80834e0 <lwip_htons>
 808910a:	4603      	mov	r3, r0
 808910c:	461a      	mov	r2, r3
 808910e:	697b      	ldr	r3, [r7, #20]
 8089110:	68db      	ldr	r3, [r3, #12]
 8089112:	4322      	orrs	r2, r4
 8089114:	b292      	uxth	r2, r2
 8089116:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8089118:	697b      	ldr	r3, [r7, #20]
 808911a:	685b      	ldr	r3, [r3, #4]
 808911c:	4618      	mov	r0, r3
 808911e:	f7fb fda5 	bl	8084c6c <pbuf_clen>
 8089122:	4603      	mov	r3, r0
 8089124:	461a      	mov	r2, r3
 8089126:	687b      	ldr	r3, [r7, #4]
 8089128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 808912c:	4413      	add	r3, r2
 808912e:	b29a      	uxth	r2, r3
 8089130:	687b      	ldr	r3, [r7, #4]
 8089132:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8089136:	69fb      	ldr	r3, [r7, #28]
 8089138:	685b      	ldr	r3, [r3, #4]
 808913a:	4618      	mov	r0, r3
 808913c:	f7fb fd96 	bl	8084c6c <pbuf_clen>
 8089140:	4603      	mov	r3, r0
 8089142:	461a      	mov	r2, r3
 8089144:	687b      	ldr	r3, [r7, #4]
 8089146:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 808914a:	4413      	add	r3, r2
 808914c:	b29a      	uxth	r2, r3
 808914e:	687b      	ldr	r3, [r7, #4]
 8089150:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8089154:	697b      	ldr	r3, [r7, #20]
 8089156:	681a      	ldr	r2, [r3, #0]
 8089158:	69fb      	ldr	r3, [r7, #28]
 808915a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 808915c:	697b      	ldr	r3, [r7, #20]
 808915e:	69fa      	ldr	r2, [r7, #28]
 8089160:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8089162:	69fb      	ldr	r3, [r7, #28]
 8089164:	681b      	ldr	r3, [r3, #0]
 8089166:	2b00      	cmp	r3, #0
 8089168:	d103      	bne.n	8089172 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 808916a:	687b      	ldr	r3, [r7, #4]
 808916c:	2200      	movs	r2, #0
 808916e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8089172:	2300      	movs	r3, #0
 8089174:	e016      	b.n	80891a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8089176:	bf00      	nop
 8089178:	e002      	b.n	8089180 <tcp_split_unsent_seg+0x248>
    goto memerr;
 808917a:	bf00      	nop
 808917c:	e000      	b.n	8089180 <tcp_split_unsent_seg+0x248>
    goto memerr;
 808917e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8089180:	69fb      	ldr	r3, [r7, #28]
 8089182:	2b00      	cmp	r3, #0
 8089184:	d006      	beq.n	8089194 <tcp_split_unsent_seg+0x25c>
 8089186:	4b09      	ldr	r3, [pc, #36]	; (80891ac <tcp_split_unsent_seg+0x274>)
 8089188:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 808918c:	490d      	ldr	r1, [pc, #52]	; (80891c4 <tcp_split_unsent_seg+0x28c>)
 808918e:	4809      	ldr	r0, [pc, #36]	; (80891b4 <tcp_split_unsent_seg+0x27c>)
 8089190:	f003 fea0 	bl	808ced4 <iprintf>
  if (p != NULL) {
 8089194:	693b      	ldr	r3, [r7, #16]
 8089196:	2b00      	cmp	r3, #0
 8089198:	d002      	beq.n	80891a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 808919a:	6938      	ldr	r0, [r7, #16]
 808919c:	f7fb fcde 	bl	8084b5c <pbuf_free>
  }

  return ERR_MEM;
 80891a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80891a4:	4618      	mov	r0, r3
 80891a6:	3724      	adds	r7, #36	; 0x24
 80891a8:	46bd      	mov	sp, r7
 80891aa:	bd90      	pop	{r4, r7, pc}
 80891ac:	0808f640 	.word	0x0808f640
 80891b0:	0808f9d4 	.word	0x0808f9d4
 80891b4:	0808f694 	.word	0x0808f694
 80891b8:	0808f9f8 	.word	0x0808f9f8
 80891bc:	0808fa1c 	.word	0x0808fa1c
 80891c0:	0808fa2c 	.word	0x0808fa2c
 80891c4:	0808fa3c 	.word	0x0808fa3c

080891c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80891c8:	b590      	push	{r4, r7, lr}
 80891ca:	b085      	sub	sp, #20
 80891cc:	af00      	add	r7, sp, #0
 80891ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80891d0:	687b      	ldr	r3, [r7, #4]
 80891d2:	2b00      	cmp	r3, #0
 80891d4:	d106      	bne.n	80891e4 <tcp_send_fin+0x1c>
 80891d6:	4b21      	ldr	r3, [pc, #132]	; (808925c <tcp_send_fin+0x94>)
 80891d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80891dc:	4920      	ldr	r1, [pc, #128]	; (8089260 <tcp_send_fin+0x98>)
 80891de:	4821      	ldr	r0, [pc, #132]	; (8089264 <tcp_send_fin+0x9c>)
 80891e0:	f003 fe78 	bl	808ced4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80891e4:	687b      	ldr	r3, [r7, #4]
 80891e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80891e8:	2b00      	cmp	r3, #0
 80891ea:	d02e      	beq.n	808924a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80891ec:	687b      	ldr	r3, [r7, #4]
 80891ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80891f0:	60fb      	str	r3, [r7, #12]
 80891f2:	e002      	b.n	80891fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80891f4:	68fb      	ldr	r3, [r7, #12]
 80891f6:	681b      	ldr	r3, [r3, #0]
 80891f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80891fa:	68fb      	ldr	r3, [r7, #12]
 80891fc:	681b      	ldr	r3, [r3, #0]
 80891fe:	2b00      	cmp	r3, #0
 8089200:	d1f8      	bne.n	80891f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8089202:	68fb      	ldr	r3, [r7, #12]
 8089204:	68db      	ldr	r3, [r3, #12]
 8089206:	899b      	ldrh	r3, [r3, #12]
 8089208:	b29b      	uxth	r3, r3
 808920a:	4618      	mov	r0, r3
 808920c:	f7fa f968 	bl	80834e0 <lwip_htons>
 8089210:	4603      	mov	r3, r0
 8089212:	b2db      	uxtb	r3, r3
 8089214:	f003 0307 	and.w	r3, r3, #7
 8089218:	2b00      	cmp	r3, #0
 808921a:	d116      	bne.n	808924a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 808921c:	68fb      	ldr	r3, [r7, #12]
 808921e:	68db      	ldr	r3, [r3, #12]
 8089220:	899b      	ldrh	r3, [r3, #12]
 8089222:	b29c      	uxth	r4, r3
 8089224:	2001      	movs	r0, #1
 8089226:	f7fa f95b 	bl	80834e0 <lwip_htons>
 808922a:	4603      	mov	r3, r0
 808922c:	461a      	mov	r2, r3
 808922e:	68fb      	ldr	r3, [r7, #12]
 8089230:	68db      	ldr	r3, [r3, #12]
 8089232:	4322      	orrs	r2, r4
 8089234:	b292      	uxth	r2, r2
 8089236:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8089238:	687b      	ldr	r3, [r7, #4]
 808923a:	8b5b      	ldrh	r3, [r3, #26]
 808923c:	f043 0320 	orr.w	r3, r3, #32
 8089240:	b29a      	uxth	r2, r3
 8089242:	687b      	ldr	r3, [r7, #4]
 8089244:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8089246:	2300      	movs	r3, #0
 8089248:	e004      	b.n	8089254 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 808924a:	2101      	movs	r1, #1
 808924c:	6878      	ldr	r0, [r7, #4]
 808924e:	f000 f80b 	bl	8089268 <tcp_enqueue_flags>
 8089252:	4603      	mov	r3, r0
}
 8089254:	4618      	mov	r0, r3
 8089256:	3714      	adds	r7, #20
 8089258:	46bd      	mov	sp, r7
 808925a:	bd90      	pop	{r4, r7, pc}
 808925c:	0808f640 	.word	0x0808f640
 8089260:	0808fa48 	.word	0x0808fa48
 8089264:	0808f694 	.word	0x0808f694

08089268 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8089268:	b580      	push	{r7, lr}
 808926a:	b08a      	sub	sp, #40	; 0x28
 808926c:	af02      	add	r7, sp, #8
 808926e:	6078      	str	r0, [r7, #4]
 8089270:	460b      	mov	r3, r1
 8089272:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8089274:	2300      	movs	r3, #0
 8089276:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8089278:	2300      	movs	r3, #0
 808927a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 808927c:	78fb      	ldrb	r3, [r7, #3]
 808927e:	f003 0303 	and.w	r3, r3, #3
 8089282:	2b00      	cmp	r3, #0
 8089284:	d106      	bne.n	8089294 <tcp_enqueue_flags+0x2c>
 8089286:	4b67      	ldr	r3, [pc, #412]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 8089288:	f240 4211 	movw	r2, #1041	; 0x411
 808928c:	4966      	ldr	r1, [pc, #408]	; (8089428 <tcp_enqueue_flags+0x1c0>)
 808928e:	4867      	ldr	r0, [pc, #412]	; (808942c <tcp_enqueue_flags+0x1c4>)
 8089290:	f003 fe20 	bl	808ced4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8089294:	687b      	ldr	r3, [r7, #4]
 8089296:	2b00      	cmp	r3, #0
 8089298:	d106      	bne.n	80892a8 <tcp_enqueue_flags+0x40>
 808929a:	4b62      	ldr	r3, [pc, #392]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 808929c:	f240 4213 	movw	r2, #1043	; 0x413
 80892a0:	4963      	ldr	r1, [pc, #396]	; (8089430 <tcp_enqueue_flags+0x1c8>)
 80892a2:	4862      	ldr	r0, [pc, #392]	; (808942c <tcp_enqueue_flags+0x1c4>)
 80892a4:	f003 fe16 	bl	808ced4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80892a8:	78fb      	ldrb	r3, [r7, #3]
 80892aa:	f003 0302 	and.w	r3, r3, #2
 80892ae:	2b00      	cmp	r3, #0
 80892b0:	d001      	beq.n	80892b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80892b2:	2301      	movs	r3, #1
 80892b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80892b6:	7ffb      	ldrb	r3, [r7, #31]
 80892b8:	009b      	lsls	r3, r3, #2
 80892ba:	b2db      	uxtb	r3, r3
 80892bc:	f003 0304 	and.w	r3, r3, #4
 80892c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80892c2:	7dfb      	ldrb	r3, [r7, #23]
 80892c4:	b29b      	uxth	r3, r3
 80892c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80892ca:	4619      	mov	r1, r3
 80892cc:	2036      	movs	r0, #54	; 0x36
 80892ce:	f7fb f961 	bl	8084594 <pbuf_alloc>
 80892d2:	6138      	str	r0, [r7, #16]
 80892d4:	693b      	ldr	r3, [r7, #16]
 80892d6:	2b00      	cmp	r3, #0
 80892d8:	d109      	bne.n	80892ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80892da:	687b      	ldr	r3, [r7, #4]
 80892dc:	8b5b      	ldrh	r3, [r3, #26]
 80892de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80892e2:	b29a      	uxth	r2, r3
 80892e4:	687b      	ldr	r3, [r7, #4]
 80892e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80892e8:	f04f 33ff 	mov.w	r3, #4294967295
 80892ec:	e095      	b.n	808941a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80892ee:	693b      	ldr	r3, [r7, #16]
 80892f0:	895a      	ldrh	r2, [r3, #10]
 80892f2:	7dfb      	ldrb	r3, [r7, #23]
 80892f4:	b29b      	uxth	r3, r3
 80892f6:	429a      	cmp	r2, r3
 80892f8:	d206      	bcs.n	8089308 <tcp_enqueue_flags+0xa0>
 80892fa:	4b4a      	ldr	r3, [pc, #296]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 80892fc:	f240 4239 	movw	r2, #1081	; 0x439
 8089300:	494c      	ldr	r1, [pc, #304]	; (8089434 <tcp_enqueue_flags+0x1cc>)
 8089302:	484a      	ldr	r0, [pc, #296]	; (808942c <tcp_enqueue_flags+0x1c4>)
 8089304:	f003 fde6 	bl	808ced4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8089308:	687b      	ldr	r3, [r7, #4]
 808930a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 808930c:	78fa      	ldrb	r2, [r7, #3]
 808930e:	7ffb      	ldrb	r3, [r7, #31]
 8089310:	9300      	str	r3, [sp, #0]
 8089312:	460b      	mov	r3, r1
 8089314:	6939      	ldr	r1, [r7, #16]
 8089316:	6878      	ldr	r0, [r7, #4]
 8089318:	f7ff fd70 	bl	8088dfc <tcp_create_segment>
 808931c:	60f8      	str	r0, [r7, #12]
 808931e:	68fb      	ldr	r3, [r7, #12]
 8089320:	2b00      	cmp	r3, #0
 8089322:	d109      	bne.n	8089338 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8089324:	687b      	ldr	r3, [r7, #4]
 8089326:	8b5b      	ldrh	r3, [r3, #26]
 8089328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808932c:	b29a      	uxth	r2, r3
 808932e:	687b      	ldr	r3, [r7, #4]
 8089330:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8089332:	f04f 33ff 	mov.w	r3, #4294967295
 8089336:	e070      	b.n	808941a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8089338:	68fb      	ldr	r3, [r7, #12]
 808933a:	68db      	ldr	r3, [r3, #12]
 808933c:	f003 0303 	and.w	r3, r3, #3
 8089340:	2b00      	cmp	r3, #0
 8089342:	d006      	beq.n	8089352 <tcp_enqueue_flags+0xea>
 8089344:	4b37      	ldr	r3, [pc, #220]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 8089346:	f240 4242 	movw	r2, #1090	; 0x442
 808934a:	493b      	ldr	r1, [pc, #236]	; (8089438 <tcp_enqueue_flags+0x1d0>)
 808934c:	4837      	ldr	r0, [pc, #220]	; (808942c <tcp_enqueue_flags+0x1c4>)
 808934e:	f003 fdc1 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8089352:	68fb      	ldr	r3, [r7, #12]
 8089354:	891b      	ldrh	r3, [r3, #8]
 8089356:	2b00      	cmp	r3, #0
 8089358:	d006      	beq.n	8089368 <tcp_enqueue_flags+0x100>
 808935a:	4b32      	ldr	r3, [pc, #200]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 808935c:	f240 4243 	movw	r2, #1091	; 0x443
 8089360:	4936      	ldr	r1, [pc, #216]	; (808943c <tcp_enqueue_flags+0x1d4>)
 8089362:	4832      	ldr	r0, [pc, #200]	; (808942c <tcp_enqueue_flags+0x1c4>)
 8089364:	f003 fdb6 	bl	808ced4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8089368:	687b      	ldr	r3, [r7, #4]
 808936a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808936c:	2b00      	cmp	r3, #0
 808936e:	d103      	bne.n	8089378 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8089370:	687b      	ldr	r3, [r7, #4]
 8089372:	68fa      	ldr	r2, [r7, #12]
 8089374:	66da      	str	r2, [r3, #108]	; 0x6c
 8089376:	e00d      	b.n	8089394 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8089378:	687b      	ldr	r3, [r7, #4]
 808937a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808937c:	61bb      	str	r3, [r7, #24]
 808937e:	e002      	b.n	8089386 <tcp_enqueue_flags+0x11e>
 8089380:	69bb      	ldr	r3, [r7, #24]
 8089382:	681b      	ldr	r3, [r3, #0]
 8089384:	61bb      	str	r3, [r7, #24]
 8089386:	69bb      	ldr	r3, [r7, #24]
 8089388:	681b      	ldr	r3, [r3, #0]
 808938a:	2b00      	cmp	r3, #0
 808938c:	d1f8      	bne.n	8089380 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 808938e:	69bb      	ldr	r3, [r7, #24]
 8089390:	68fa      	ldr	r2, [r7, #12]
 8089392:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8089394:	687b      	ldr	r3, [r7, #4]
 8089396:	2200      	movs	r2, #0
 8089398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 808939c:	78fb      	ldrb	r3, [r7, #3]
 808939e:	f003 0302 	and.w	r3, r3, #2
 80893a2:	2b00      	cmp	r3, #0
 80893a4:	d104      	bne.n	80893b0 <tcp_enqueue_flags+0x148>
 80893a6:	78fb      	ldrb	r3, [r7, #3]
 80893a8:	f003 0301 	and.w	r3, r3, #1
 80893ac:	2b00      	cmp	r3, #0
 80893ae:	d004      	beq.n	80893ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80893b0:	687b      	ldr	r3, [r7, #4]
 80893b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80893b4:	1c5a      	adds	r2, r3, #1
 80893b6:	687b      	ldr	r3, [r7, #4]
 80893b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80893ba:	78fb      	ldrb	r3, [r7, #3]
 80893bc:	f003 0301 	and.w	r3, r3, #1
 80893c0:	2b00      	cmp	r3, #0
 80893c2:	d006      	beq.n	80893d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80893c4:	687b      	ldr	r3, [r7, #4]
 80893c6:	8b5b      	ldrh	r3, [r3, #26]
 80893c8:	f043 0320 	orr.w	r3, r3, #32
 80893cc:	b29a      	uxth	r2, r3
 80893ce:	687b      	ldr	r3, [r7, #4]
 80893d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80893d2:	68fb      	ldr	r3, [r7, #12]
 80893d4:	685b      	ldr	r3, [r3, #4]
 80893d6:	4618      	mov	r0, r3
 80893d8:	f7fb fc48 	bl	8084c6c <pbuf_clen>
 80893dc:	4603      	mov	r3, r0
 80893de:	461a      	mov	r2, r3
 80893e0:	687b      	ldr	r3, [r7, #4]
 80893e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80893e6:	4413      	add	r3, r2
 80893e8:	b29a      	uxth	r2, r3
 80893ea:	687b      	ldr	r3, [r7, #4]
 80893ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80893f0:	687b      	ldr	r3, [r7, #4]
 80893f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80893f6:	2b00      	cmp	r3, #0
 80893f8:	d00e      	beq.n	8089418 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80893fa:	687b      	ldr	r3, [r7, #4]
 80893fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80893fe:	2b00      	cmp	r3, #0
 8089400:	d10a      	bne.n	8089418 <tcp_enqueue_flags+0x1b0>
 8089402:	687b      	ldr	r3, [r7, #4]
 8089404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8089406:	2b00      	cmp	r3, #0
 8089408:	d106      	bne.n	8089418 <tcp_enqueue_flags+0x1b0>
 808940a:	4b06      	ldr	r3, [pc, #24]	; (8089424 <tcp_enqueue_flags+0x1bc>)
 808940c:	f240 4265 	movw	r2, #1125	; 0x465
 8089410:	490b      	ldr	r1, [pc, #44]	; (8089440 <tcp_enqueue_flags+0x1d8>)
 8089412:	4806      	ldr	r0, [pc, #24]	; (808942c <tcp_enqueue_flags+0x1c4>)
 8089414:	f003 fd5e 	bl	808ced4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8089418:	2300      	movs	r3, #0
}
 808941a:	4618      	mov	r0, r3
 808941c:	3720      	adds	r7, #32
 808941e:	46bd      	mov	sp, r7
 8089420:	bd80      	pop	{r7, pc}
 8089422:	bf00      	nop
 8089424:	0808f640 	.word	0x0808f640
 8089428:	0808fa64 	.word	0x0808fa64
 808942c:	0808f694 	.word	0x0808f694
 8089430:	0808fabc 	.word	0x0808fabc
 8089434:	0808fadc 	.word	0x0808fadc
 8089438:	0808fb18 	.word	0x0808fb18
 808943c:	0808fb30 	.word	0x0808fb30
 8089440:	0808fb5c 	.word	0x0808fb5c

08089444 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8089444:	b5b0      	push	{r4, r5, r7, lr}
 8089446:	b08a      	sub	sp, #40	; 0x28
 8089448:	af00      	add	r7, sp, #0
 808944a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 808944c:	687b      	ldr	r3, [r7, #4]
 808944e:	2b00      	cmp	r3, #0
 8089450:	d106      	bne.n	8089460 <tcp_output+0x1c>
 8089452:	4b8a      	ldr	r3, [pc, #552]	; (808967c <tcp_output+0x238>)
 8089454:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8089458:	4989      	ldr	r1, [pc, #548]	; (8089680 <tcp_output+0x23c>)
 808945a:	488a      	ldr	r0, [pc, #552]	; (8089684 <tcp_output+0x240>)
 808945c:	f003 fd3a 	bl	808ced4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8089460:	687b      	ldr	r3, [r7, #4]
 8089462:	7d1b      	ldrb	r3, [r3, #20]
 8089464:	2b01      	cmp	r3, #1
 8089466:	d106      	bne.n	8089476 <tcp_output+0x32>
 8089468:	4b84      	ldr	r3, [pc, #528]	; (808967c <tcp_output+0x238>)
 808946a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 808946e:	4986      	ldr	r1, [pc, #536]	; (8089688 <tcp_output+0x244>)
 8089470:	4884      	ldr	r0, [pc, #528]	; (8089684 <tcp_output+0x240>)
 8089472:	f003 fd2f 	bl	808ced4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8089476:	4b85      	ldr	r3, [pc, #532]	; (808968c <tcp_output+0x248>)
 8089478:	681b      	ldr	r3, [r3, #0]
 808947a:	687a      	ldr	r2, [r7, #4]
 808947c:	429a      	cmp	r2, r3
 808947e:	d101      	bne.n	8089484 <tcp_output+0x40>
    return ERR_OK;
 8089480:	2300      	movs	r3, #0
 8089482:	e1ce      	b.n	8089822 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8089484:	687b      	ldr	r3, [r7, #4]
 8089486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 808948a:	687b      	ldr	r3, [r7, #4]
 808948c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8089490:	4293      	cmp	r3, r2
 8089492:	bf28      	it	cs
 8089494:	4613      	movcs	r3, r2
 8089496:	b29b      	uxth	r3, r3
 8089498:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 808949a:	687b      	ldr	r3, [r7, #4]
 808949c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808949e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80894a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80894a2:	2b00      	cmp	r3, #0
 80894a4:	d10b      	bne.n	80894be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80894a6:	687b      	ldr	r3, [r7, #4]
 80894a8:	8b5b      	ldrh	r3, [r3, #26]
 80894aa:	f003 0302 	and.w	r3, r3, #2
 80894ae:	2b00      	cmp	r3, #0
 80894b0:	f000 81aa 	beq.w	8089808 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80894b4:	6878      	ldr	r0, [r7, #4]
 80894b6:	f000 fdcb 	bl	808a050 <tcp_send_empty_ack>
 80894ba:	4603      	mov	r3, r0
 80894bc:	e1b1      	b.n	8089822 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80894be:	6879      	ldr	r1, [r7, #4]
 80894c0:	687b      	ldr	r3, [r7, #4]
 80894c2:	3304      	adds	r3, #4
 80894c4:	461a      	mov	r2, r3
 80894c6:	6878      	ldr	r0, [r7, #4]
 80894c8:	f7ff fc7c 	bl	8088dc4 <tcp_route>
 80894cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80894ce:	697b      	ldr	r3, [r7, #20]
 80894d0:	2b00      	cmp	r3, #0
 80894d2:	d102      	bne.n	80894da <tcp_output+0x96>
    return ERR_RTE;
 80894d4:	f06f 0303 	mvn.w	r3, #3
 80894d8:	e1a3      	b.n	8089822 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80894da:	687b      	ldr	r3, [r7, #4]
 80894dc:	2b00      	cmp	r3, #0
 80894de:	d003      	beq.n	80894e8 <tcp_output+0xa4>
 80894e0:	687b      	ldr	r3, [r7, #4]
 80894e2:	681b      	ldr	r3, [r3, #0]
 80894e4:	2b00      	cmp	r3, #0
 80894e6:	d111      	bne.n	808950c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80894e8:	697b      	ldr	r3, [r7, #20]
 80894ea:	2b00      	cmp	r3, #0
 80894ec:	d002      	beq.n	80894f4 <tcp_output+0xb0>
 80894ee:	697b      	ldr	r3, [r7, #20]
 80894f0:	3304      	adds	r3, #4
 80894f2:	e000      	b.n	80894f6 <tcp_output+0xb2>
 80894f4:	2300      	movs	r3, #0
 80894f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80894f8:	693b      	ldr	r3, [r7, #16]
 80894fa:	2b00      	cmp	r3, #0
 80894fc:	d102      	bne.n	8089504 <tcp_output+0xc0>
      return ERR_RTE;
 80894fe:	f06f 0303 	mvn.w	r3, #3
 8089502:	e18e      	b.n	8089822 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8089504:	693b      	ldr	r3, [r7, #16]
 8089506:	681a      	ldr	r2, [r3, #0]
 8089508:	687b      	ldr	r3, [r7, #4]
 808950a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 808950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808950e:	68db      	ldr	r3, [r3, #12]
 8089510:	685b      	ldr	r3, [r3, #4]
 8089512:	4618      	mov	r0, r3
 8089514:	f7f9 fff9 	bl	808350a <lwip_htonl>
 8089518:	4602      	mov	r2, r0
 808951a:	687b      	ldr	r3, [r7, #4]
 808951c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808951e:	1ad3      	subs	r3, r2, r3
 8089520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8089522:	8912      	ldrh	r2, [r2, #8]
 8089524:	4413      	add	r3, r2
 8089526:	69ba      	ldr	r2, [r7, #24]
 8089528:	429a      	cmp	r2, r3
 808952a:	d227      	bcs.n	808957c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 808952c:	687b      	ldr	r3, [r7, #4]
 808952e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8089532:	461a      	mov	r2, r3
 8089534:	69bb      	ldr	r3, [r7, #24]
 8089536:	4293      	cmp	r3, r2
 8089538:	d114      	bne.n	8089564 <tcp_output+0x120>
 808953a:	687b      	ldr	r3, [r7, #4]
 808953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808953e:	2b00      	cmp	r3, #0
 8089540:	d110      	bne.n	8089564 <tcp_output+0x120>
 8089542:	687b      	ldr	r3, [r7, #4]
 8089544:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8089548:	2b00      	cmp	r3, #0
 808954a:	d10b      	bne.n	8089564 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 808954c:	687b      	ldr	r3, [r7, #4]
 808954e:	2200      	movs	r2, #0
 8089550:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8089554:	687b      	ldr	r3, [r7, #4]
 8089556:	2201      	movs	r2, #1
 8089558:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 808955c:	687b      	ldr	r3, [r7, #4]
 808955e:	2200      	movs	r2, #0
 8089560:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8089564:	687b      	ldr	r3, [r7, #4]
 8089566:	8b5b      	ldrh	r3, [r3, #26]
 8089568:	f003 0302 	and.w	r3, r3, #2
 808956c:	2b00      	cmp	r3, #0
 808956e:	f000 814d 	beq.w	808980c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8089572:	6878      	ldr	r0, [r7, #4]
 8089574:	f000 fd6c 	bl	808a050 <tcp_send_empty_ack>
 8089578:	4603      	mov	r3, r0
 808957a:	e152      	b.n	8089822 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 808957c:	687b      	ldr	r3, [r7, #4]
 808957e:	2200      	movs	r2, #0
 8089580:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8089584:	687b      	ldr	r3, [r7, #4]
 8089586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089588:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 808958a:	6a3b      	ldr	r3, [r7, #32]
 808958c:	2b00      	cmp	r3, #0
 808958e:	f000 811c 	beq.w	80897ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8089592:	e002      	b.n	808959a <tcp_output+0x156>
 8089594:	6a3b      	ldr	r3, [r7, #32]
 8089596:	681b      	ldr	r3, [r3, #0]
 8089598:	623b      	str	r3, [r7, #32]
 808959a:	6a3b      	ldr	r3, [r7, #32]
 808959c:	681b      	ldr	r3, [r3, #0]
 808959e:	2b00      	cmp	r3, #0
 80895a0:	d1f8      	bne.n	8089594 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80895a2:	e112      	b.n	80897ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80895a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80895a6:	68db      	ldr	r3, [r3, #12]
 80895a8:	899b      	ldrh	r3, [r3, #12]
 80895aa:	b29b      	uxth	r3, r3
 80895ac:	4618      	mov	r0, r3
 80895ae:	f7f9 ff97 	bl	80834e0 <lwip_htons>
 80895b2:	4603      	mov	r3, r0
 80895b4:	b2db      	uxtb	r3, r3
 80895b6:	f003 0304 	and.w	r3, r3, #4
 80895ba:	2b00      	cmp	r3, #0
 80895bc:	d006      	beq.n	80895cc <tcp_output+0x188>
 80895be:	4b2f      	ldr	r3, [pc, #188]	; (808967c <tcp_output+0x238>)
 80895c0:	f240 5236 	movw	r2, #1334	; 0x536
 80895c4:	4932      	ldr	r1, [pc, #200]	; (8089690 <tcp_output+0x24c>)
 80895c6:	482f      	ldr	r0, [pc, #188]	; (8089684 <tcp_output+0x240>)
 80895c8:	f003 fc84 	bl	808ced4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80895cc:	687b      	ldr	r3, [r7, #4]
 80895ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80895d0:	2b00      	cmp	r3, #0
 80895d2:	d01f      	beq.n	8089614 <tcp_output+0x1d0>
 80895d4:	687b      	ldr	r3, [r7, #4]
 80895d6:	8b5b      	ldrh	r3, [r3, #26]
 80895d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80895dc:	2b00      	cmp	r3, #0
 80895de:	d119      	bne.n	8089614 <tcp_output+0x1d0>
 80895e0:	687b      	ldr	r3, [r7, #4]
 80895e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80895e4:	2b00      	cmp	r3, #0
 80895e6:	d00b      	beq.n	8089600 <tcp_output+0x1bc>
 80895e8:	687b      	ldr	r3, [r7, #4]
 80895ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80895ec:	681b      	ldr	r3, [r3, #0]
 80895ee:	2b00      	cmp	r3, #0
 80895f0:	d110      	bne.n	8089614 <tcp_output+0x1d0>
 80895f2:	687b      	ldr	r3, [r7, #4]
 80895f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80895f6:	891a      	ldrh	r2, [r3, #8]
 80895f8:	687b      	ldr	r3, [r7, #4]
 80895fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80895fc:	429a      	cmp	r2, r3
 80895fe:	d209      	bcs.n	8089614 <tcp_output+0x1d0>
 8089600:	687b      	ldr	r3, [r7, #4]
 8089602:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8089606:	2b00      	cmp	r3, #0
 8089608:	d004      	beq.n	8089614 <tcp_output+0x1d0>
 808960a:	687b      	ldr	r3, [r7, #4]
 808960c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8089610:	2b08      	cmp	r3, #8
 8089612:	d901      	bls.n	8089618 <tcp_output+0x1d4>
 8089614:	2301      	movs	r3, #1
 8089616:	e000      	b.n	808961a <tcp_output+0x1d6>
 8089618:	2300      	movs	r3, #0
 808961a:	2b00      	cmp	r3, #0
 808961c:	d106      	bne.n	808962c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 808961e:	687b      	ldr	r3, [r7, #4]
 8089620:	8b5b      	ldrh	r3, [r3, #26]
 8089622:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8089626:	2b00      	cmp	r3, #0
 8089628:	f000 80e4 	beq.w	80897f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 808962c:	687b      	ldr	r3, [r7, #4]
 808962e:	7d1b      	ldrb	r3, [r3, #20]
 8089630:	2b02      	cmp	r3, #2
 8089632:	d00d      	beq.n	8089650 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8089634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089636:	68db      	ldr	r3, [r3, #12]
 8089638:	899b      	ldrh	r3, [r3, #12]
 808963a:	b29c      	uxth	r4, r3
 808963c:	2010      	movs	r0, #16
 808963e:	f7f9 ff4f 	bl	80834e0 <lwip_htons>
 8089642:	4603      	mov	r3, r0
 8089644:	461a      	mov	r2, r3
 8089646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089648:	68db      	ldr	r3, [r3, #12]
 808964a:	4322      	orrs	r2, r4
 808964c:	b292      	uxth	r2, r2
 808964e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8089650:	697a      	ldr	r2, [r7, #20]
 8089652:	6879      	ldr	r1, [r7, #4]
 8089654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8089656:	f000 f909 	bl	808986c <tcp_output_segment>
 808965a:	4603      	mov	r3, r0
 808965c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 808965e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8089662:	2b00      	cmp	r3, #0
 8089664:	d016      	beq.n	8089694 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8089666:	687b      	ldr	r3, [r7, #4]
 8089668:	8b5b      	ldrh	r3, [r3, #26]
 808966a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808966e:	b29a      	uxth	r2, r3
 8089670:	687b      	ldr	r3, [r7, #4]
 8089672:	835a      	strh	r2, [r3, #26]
      return err;
 8089674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8089678:	e0d3      	b.n	8089822 <tcp_output+0x3de>
 808967a:	bf00      	nop
 808967c:	0808f640 	.word	0x0808f640
 8089680:	0808fb84 	.word	0x0808fb84
 8089684:	0808f694 	.word	0x0808f694
 8089688:	0808fb9c 	.word	0x0808fb9c
 808968c:	20008280 	.word	0x20008280
 8089690:	0808fbc4 	.word	0x0808fbc4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8089694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089696:	681a      	ldr	r2, [r3, #0]
 8089698:	687b      	ldr	r3, [r7, #4]
 808969a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 808969c:	687b      	ldr	r3, [r7, #4]
 808969e:	7d1b      	ldrb	r3, [r3, #20]
 80896a0:	2b02      	cmp	r3, #2
 80896a2:	d006      	beq.n	80896b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80896a4:	687b      	ldr	r3, [r7, #4]
 80896a6:	8b5b      	ldrh	r3, [r3, #26]
 80896a8:	f023 0303 	bic.w	r3, r3, #3
 80896ac:	b29a      	uxth	r2, r3
 80896ae:	687b      	ldr	r3, [r7, #4]
 80896b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80896b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80896b4:	68db      	ldr	r3, [r3, #12]
 80896b6:	685b      	ldr	r3, [r3, #4]
 80896b8:	4618      	mov	r0, r3
 80896ba:	f7f9 ff26 	bl	808350a <lwip_htonl>
 80896be:	4604      	mov	r4, r0
 80896c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80896c2:	891b      	ldrh	r3, [r3, #8]
 80896c4:	461d      	mov	r5, r3
 80896c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80896c8:	68db      	ldr	r3, [r3, #12]
 80896ca:	899b      	ldrh	r3, [r3, #12]
 80896cc:	b29b      	uxth	r3, r3
 80896ce:	4618      	mov	r0, r3
 80896d0:	f7f9 ff06 	bl	80834e0 <lwip_htons>
 80896d4:	4603      	mov	r3, r0
 80896d6:	b2db      	uxtb	r3, r3
 80896d8:	f003 0303 	and.w	r3, r3, #3
 80896dc:	2b00      	cmp	r3, #0
 80896de:	d001      	beq.n	80896e4 <tcp_output+0x2a0>
 80896e0:	2301      	movs	r3, #1
 80896e2:	e000      	b.n	80896e6 <tcp_output+0x2a2>
 80896e4:	2300      	movs	r3, #0
 80896e6:	442b      	add	r3, r5
 80896e8:	4423      	add	r3, r4
 80896ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80896ec:	687b      	ldr	r3, [r7, #4]
 80896ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80896f0:	68bb      	ldr	r3, [r7, #8]
 80896f2:	1ad3      	subs	r3, r2, r3
 80896f4:	2b00      	cmp	r3, #0
 80896f6:	da02      	bge.n	80896fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80896f8:	687b      	ldr	r3, [r7, #4]
 80896fa:	68ba      	ldr	r2, [r7, #8]
 80896fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80896fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089700:	891b      	ldrh	r3, [r3, #8]
 8089702:	461c      	mov	r4, r3
 8089704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089706:	68db      	ldr	r3, [r3, #12]
 8089708:	899b      	ldrh	r3, [r3, #12]
 808970a:	b29b      	uxth	r3, r3
 808970c:	4618      	mov	r0, r3
 808970e:	f7f9 fee7 	bl	80834e0 <lwip_htons>
 8089712:	4603      	mov	r3, r0
 8089714:	b2db      	uxtb	r3, r3
 8089716:	f003 0303 	and.w	r3, r3, #3
 808971a:	2b00      	cmp	r3, #0
 808971c:	d001      	beq.n	8089722 <tcp_output+0x2de>
 808971e:	2301      	movs	r3, #1
 8089720:	e000      	b.n	8089724 <tcp_output+0x2e0>
 8089722:	2300      	movs	r3, #0
 8089724:	4423      	add	r3, r4
 8089726:	2b00      	cmp	r3, #0
 8089728:	d049      	beq.n	80897be <tcp_output+0x37a>
      seg->next = NULL;
 808972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808972c:	2200      	movs	r2, #0
 808972e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8089730:	687b      	ldr	r3, [r7, #4]
 8089732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089734:	2b00      	cmp	r3, #0
 8089736:	d105      	bne.n	8089744 <tcp_output+0x300>
        pcb->unacked = seg;
 8089738:	687b      	ldr	r3, [r7, #4]
 808973a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808973c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 808973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089740:	623b      	str	r3, [r7, #32]
 8089742:	e03f      	b.n	80897c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8089744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089746:	68db      	ldr	r3, [r3, #12]
 8089748:	685b      	ldr	r3, [r3, #4]
 808974a:	4618      	mov	r0, r3
 808974c:	f7f9 fedd 	bl	808350a <lwip_htonl>
 8089750:	4604      	mov	r4, r0
 8089752:	6a3b      	ldr	r3, [r7, #32]
 8089754:	68db      	ldr	r3, [r3, #12]
 8089756:	685b      	ldr	r3, [r3, #4]
 8089758:	4618      	mov	r0, r3
 808975a:	f7f9 fed6 	bl	808350a <lwip_htonl>
 808975e:	4603      	mov	r3, r0
 8089760:	1ae3      	subs	r3, r4, r3
 8089762:	2b00      	cmp	r3, #0
 8089764:	da24      	bge.n	80897b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8089766:	687b      	ldr	r3, [r7, #4]
 8089768:	3370      	adds	r3, #112	; 0x70
 808976a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 808976c:	e002      	b.n	8089774 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 808976e:	69fb      	ldr	r3, [r7, #28]
 8089770:	681b      	ldr	r3, [r3, #0]
 8089772:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8089774:	69fb      	ldr	r3, [r7, #28]
 8089776:	681b      	ldr	r3, [r3, #0]
 8089778:	2b00      	cmp	r3, #0
 808977a:	d011      	beq.n	80897a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 808977c:	69fb      	ldr	r3, [r7, #28]
 808977e:	681b      	ldr	r3, [r3, #0]
 8089780:	68db      	ldr	r3, [r3, #12]
 8089782:	685b      	ldr	r3, [r3, #4]
 8089784:	4618      	mov	r0, r3
 8089786:	f7f9 fec0 	bl	808350a <lwip_htonl>
 808978a:	4604      	mov	r4, r0
 808978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808978e:	68db      	ldr	r3, [r3, #12]
 8089790:	685b      	ldr	r3, [r3, #4]
 8089792:	4618      	mov	r0, r3
 8089794:	f7f9 feb9 	bl	808350a <lwip_htonl>
 8089798:	4603      	mov	r3, r0
 808979a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 808979c:	2b00      	cmp	r3, #0
 808979e:	dbe6      	blt.n	808976e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80897a0:	69fb      	ldr	r3, [r7, #28]
 80897a2:	681a      	ldr	r2, [r3, #0]
 80897a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80897a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80897a8:	69fb      	ldr	r3, [r7, #28]
 80897aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80897ac:	601a      	str	r2, [r3, #0]
 80897ae:	e009      	b.n	80897c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80897b0:	6a3b      	ldr	r3, [r7, #32]
 80897b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80897b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80897b6:	6a3b      	ldr	r3, [r7, #32]
 80897b8:	681b      	ldr	r3, [r3, #0]
 80897ba:	623b      	str	r3, [r7, #32]
 80897bc:	e002      	b.n	80897c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80897be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80897c0:	f7fc fc3f 	bl	8086042 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80897c4:	687b      	ldr	r3, [r7, #4]
 80897c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80897c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80897ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80897cc:	2b00      	cmp	r3, #0
 80897ce:	d012      	beq.n	80897f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80897d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80897d2:	68db      	ldr	r3, [r3, #12]
 80897d4:	685b      	ldr	r3, [r3, #4]
 80897d6:	4618      	mov	r0, r3
 80897d8:	f7f9 fe97 	bl	808350a <lwip_htonl>
 80897dc:	4602      	mov	r2, r0
 80897de:	687b      	ldr	r3, [r7, #4]
 80897e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80897e2:	1ad3      	subs	r3, r2, r3
 80897e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80897e6:	8912      	ldrh	r2, [r2, #8]
 80897e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80897ea:	69ba      	ldr	r2, [r7, #24]
 80897ec:	429a      	cmp	r2, r3
 80897ee:	f4bf aed9 	bcs.w	80895a4 <tcp_output+0x160>
 80897f2:	e000      	b.n	80897f6 <tcp_output+0x3b2>
      break;
 80897f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80897f6:	687b      	ldr	r3, [r7, #4]
 80897f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80897fa:	2b00      	cmp	r3, #0
 80897fc:	d108      	bne.n	8089810 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80897fe:	687b      	ldr	r3, [r7, #4]
 8089800:	2200      	movs	r2, #0
 8089802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8089806:	e004      	b.n	8089812 <tcp_output+0x3ce>
    goto output_done;
 8089808:	bf00      	nop
 808980a:	e002      	b.n	8089812 <tcp_output+0x3ce>
    goto output_done;
 808980c:	bf00      	nop
 808980e:	e000      	b.n	8089812 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8089810:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8089812:	687b      	ldr	r3, [r7, #4]
 8089814:	8b5b      	ldrh	r3, [r3, #26]
 8089816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 808981a:	b29a      	uxth	r2, r3
 808981c:	687b      	ldr	r3, [r7, #4]
 808981e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8089820:	2300      	movs	r3, #0
}
 8089822:	4618      	mov	r0, r3
 8089824:	3728      	adds	r7, #40	; 0x28
 8089826:	46bd      	mov	sp, r7
 8089828:	bdb0      	pop	{r4, r5, r7, pc}
 808982a:	bf00      	nop

0808982c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 808982c:	b580      	push	{r7, lr}
 808982e:	b082      	sub	sp, #8
 8089830:	af00      	add	r7, sp, #0
 8089832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8089834:	687b      	ldr	r3, [r7, #4]
 8089836:	2b00      	cmp	r3, #0
 8089838:	d106      	bne.n	8089848 <tcp_output_segment_busy+0x1c>
 808983a:	4b09      	ldr	r3, [pc, #36]	; (8089860 <tcp_output_segment_busy+0x34>)
 808983c:	f240 529a 	movw	r2, #1434	; 0x59a
 8089840:	4908      	ldr	r1, [pc, #32]	; (8089864 <tcp_output_segment_busy+0x38>)
 8089842:	4809      	ldr	r0, [pc, #36]	; (8089868 <tcp_output_segment_busy+0x3c>)
 8089844:	f003 fb46 	bl	808ced4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8089848:	687b      	ldr	r3, [r7, #4]
 808984a:	685b      	ldr	r3, [r3, #4]
 808984c:	7b9b      	ldrb	r3, [r3, #14]
 808984e:	2b01      	cmp	r3, #1
 8089850:	d001      	beq.n	8089856 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8089852:	2301      	movs	r3, #1
 8089854:	e000      	b.n	8089858 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8089856:	2300      	movs	r3, #0
}
 8089858:	4618      	mov	r0, r3
 808985a:	3708      	adds	r7, #8
 808985c:	46bd      	mov	sp, r7
 808985e:	bd80      	pop	{r7, pc}
 8089860:	0808f640 	.word	0x0808f640
 8089864:	0808fbdc 	.word	0x0808fbdc
 8089868:	0808f694 	.word	0x0808f694

0808986c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 808986c:	b5b0      	push	{r4, r5, r7, lr}
 808986e:	b08c      	sub	sp, #48	; 0x30
 8089870:	af04      	add	r7, sp, #16
 8089872:	60f8      	str	r0, [r7, #12]
 8089874:	60b9      	str	r1, [r7, #8]
 8089876:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8089878:	68fb      	ldr	r3, [r7, #12]
 808987a:	2b00      	cmp	r3, #0
 808987c:	d106      	bne.n	808988c <tcp_output_segment+0x20>
 808987e:	4b63      	ldr	r3, [pc, #396]	; (8089a0c <tcp_output_segment+0x1a0>)
 8089880:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8089884:	4962      	ldr	r1, [pc, #392]	; (8089a10 <tcp_output_segment+0x1a4>)
 8089886:	4863      	ldr	r0, [pc, #396]	; (8089a14 <tcp_output_segment+0x1a8>)
 8089888:	f003 fb24 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 808988c:	68bb      	ldr	r3, [r7, #8]
 808988e:	2b00      	cmp	r3, #0
 8089890:	d106      	bne.n	80898a0 <tcp_output_segment+0x34>
 8089892:	4b5e      	ldr	r3, [pc, #376]	; (8089a0c <tcp_output_segment+0x1a0>)
 8089894:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8089898:	495f      	ldr	r1, [pc, #380]	; (8089a18 <tcp_output_segment+0x1ac>)
 808989a:	485e      	ldr	r0, [pc, #376]	; (8089a14 <tcp_output_segment+0x1a8>)
 808989c:	f003 fb1a 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80898a0:	687b      	ldr	r3, [r7, #4]
 80898a2:	2b00      	cmp	r3, #0
 80898a4:	d106      	bne.n	80898b4 <tcp_output_segment+0x48>
 80898a6:	4b59      	ldr	r3, [pc, #356]	; (8089a0c <tcp_output_segment+0x1a0>)
 80898a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80898ac:	495b      	ldr	r1, [pc, #364]	; (8089a1c <tcp_output_segment+0x1b0>)
 80898ae:	4859      	ldr	r0, [pc, #356]	; (8089a14 <tcp_output_segment+0x1a8>)
 80898b0:	f003 fb10 	bl	808ced4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80898b4:	68f8      	ldr	r0, [r7, #12]
 80898b6:	f7ff ffb9 	bl	808982c <tcp_output_segment_busy>
 80898ba:	4603      	mov	r3, r0
 80898bc:	2b00      	cmp	r3, #0
 80898be:	d001      	beq.n	80898c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80898c0:	2300      	movs	r3, #0
 80898c2:	e09f      	b.n	8089a04 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80898c4:	68bb      	ldr	r3, [r7, #8]
 80898c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80898c8:	68fb      	ldr	r3, [r7, #12]
 80898ca:	68dc      	ldr	r4, [r3, #12]
 80898cc:	4610      	mov	r0, r2
 80898ce:	f7f9 fe1c 	bl	808350a <lwip_htonl>
 80898d2:	4603      	mov	r3, r0
 80898d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80898d6:	68bb      	ldr	r3, [r7, #8]
 80898d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80898da:	68fb      	ldr	r3, [r7, #12]
 80898dc:	68dc      	ldr	r4, [r3, #12]
 80898de:	4610      	mov	r0, r2
 80898e0:	f7f9 fdfe 	bl	80834e0 <lwip_htons>
 80898e4:	4603      	mov	r3, r0
 80898e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80898e8:	68bb      	ldr	r3, [r7, #8]
 80898ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80898ec:	68ba      	ldr	r2, [r7, #8]
 80898ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80898f0:	441a      	add	r2, r3
 80898f2:	68bb      	ldr	r3, [r7, #8]
 80898f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80898f6:	68fb      	ldr	r3, [r7, #12]
 80898f8:	68db      	ldr	r3, [r3, #12]
 80898fa:	3314      	adds	r3, #20
 80898fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80898fe:	68fb      	ldr	r3, [r7, #12]
 8089900:	7a9b      	ldrb	r3, [r3, #10]
 8089902:	f003 0301 	and.w	r3, r3, #1
 8089906:	2b00      	cmp	r3, #0
 8089908:	d015      	beq.n	8089936 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 808990a:	68bb      	ldr	r3, [r7, #8]
 808990c:	3304      	adds	r3, #4
 808990e:	461a      	mov	r2, r3
 8089910:	6879      	ldr	r1, [r7, #4]
 8089912:	f44f 7006 	mov.w	r0, #536	; 0x218
 8089916:	f7fc fe8b 	bl	8086630 <tcp_eff_send_mss_netif>
 808991a:	4603      	mov	r3, r0
 808991c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 808991e:	8b7b      	ldrh	r3, [r7, #26]
 8089920:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8089924:	4618      	mov	r0, r3
 8089926:	f7f9 fdf0 	bl	808350a <lwip_htonl>
 808992a:	4602      	mov	r2, r0
 808992c:	69fb      	ldr	r3, [r7, #28]
 808992e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8089930:	69fb      	ldr	r3, [r7, #28]
 8089932:	3304      	adds	r3, #4
 8089934:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8089936:	68bb      	ldr	r3, [r7, #8]
 8089938:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 808993c:	2b00      	cmp	r3, #0
 808993e:	da02      	bge.n	8089946 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8089940:	68bb      	ldr	r3, [r7, #8]
 8089942:	2200      	movs	r2, #0
 8089944:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8089946:	68bb      	ldr	r3, [r7, #8]
 8089948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808994a:	2b00      	cmp	r3, #0
 808994c:	d10c      	bne.n	8089968 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 808994e:	4b34      	ldr	r3, [pc, #208]	; (8089a20 <tcp_output_segment+0x1b4>)
 8089950:	681a      	ldr	r2, [r3, #0]
 8089952:	68bb      	ldr	r3, [r7, #8]
 8089954:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8089956:	68fb      	ldr	r3, [r7, #12]
 8089958:	68db      	ldr	r3, [r3, #12]
 808995a:	685b      	ldr	r3, [r3, #4]
 808995c:	4618      	mov	r0, r3
 808995e:	f7f9 fdd4 	bl	808350a <lwip_htonl>
 8089962:	4602      	mov	r2, r0
 8089964:	68bb      	ldr	r3, [r7, #8]
 8089966:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8089968:	68fb      	ldr	r3, [r7, #12]
 808996a:	68da      	ldr	r2, [r3, #12]
 808996c:	68fb      	ldr	r3, [r7, #12]
 808996e:	685b      	ldr	r3, [r3, #4]
 8089970:	685b      	ldr	r3, [r3, #4]
 8089972:	1ad3      	subs	r3, r2, r3
 8089974:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8089976:	68fb      	ldr	r3, [r7, #12]
 8089978:	685b      	ldr	r3, [r3, #4]
 808997a:	8959      	ldrh	r1, [r3, #10]
 808997c:	68fb      	ldr	r3, [r7, #12]
 808997e:	685b      	ldr	r3, [r3, #4]
 8089980:	8b3a      	ldrh	r2, [r7, #24]
 8089982:	1a8a      	subs	r2, r1, r2
 8089984:	b292      	uxth	r2, r2
 8089986:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8089988:	68fb      	ldr	r3, [r7, #12]
 808998a:	685b      	ldr	r3, [r3, #4]
 808998c:	8919      	ldrh	r1, [r3, #8]
 808998e:	68fb      	ldr	r3, [r7, #12]
 8089990:	685b      	ldr	r3, [r3, #4]
 8089992:	8b3a      	ldrh	r2, [r7, #24]
 8089994:	1a8a      	subs	r2, r1, r2
 8089996:	b292      	uxth	r2, r2
 8089998:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 808999a:	68fb      	ldr	r3, [r7, #12]
 808999c:	685b      	ldr	r3, [r3, #4]
 808999e:	68fa      	ldr	r2, [r7, #12]
 80899a0:	68d2      	ldr	r2, [r2, #12]
 80899a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80899a4:	68fb      	ldr	r3, [r7, #12]
 80899a6:	68db      	ldr	r3, [r3, #12]
 80899a8:	2200      	movs	r2, #0
 80899aa:	741a      	strb	r2, [r3, #16]
 80899ac:	2200      	movs	r2, #0
 80899ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80899b0:	68fb      	ldr	r3, [r7, #12]
 80899b2:	68db      	ldr	r3, [r3, #12]
 80899b4:	f103 0214 	add.w	r2, r3, #20
 80899b8:	68fb      	ldr	r3, [r7, #12]
 80899ba:	7a9b      	ldrb	r3, [r3, #10]
 80899bc:	009b      	lsls	r3, r3, #2
 80899be:	f003 0304 	and.w	r3, r3, #4
 80899c2:	4413      	add	r3, r2
 80899c4:	69fa      	ldr	r2, [r7, #28]
 80899c6:	429a      	cmp	r2, r3
 80899c8:	d006      	beq.n	80899d8 <tcp_output_segment+0x16c>
 80899ca:	4b10      	ldr	r3, [pc, #64]	; (8089a0c <tcp_output_segment+0x1a0>)
 80899cc:	f240 621c 	movw	r2, #1564	; 0x61c
 80899d0:	4914      	ldr	r1, [pc, #80]	; (8089a24 <tcp_output_segment+0x1b8>)
 80899d2:	4810      	ldr	r0, [pc, #64]	; (8089a14 <tcp_output_segment+0x1a8>)
 80899d4:	f003 fa7e 	bl	808ced4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80899d8:	68fb      	ldr	r3, [r7, #12]
 80899da:	6858      	ldr	r0, [r3, #4]
 80899dc:	68b9      	ldr	r1, [r7, #8]
 80899de:	68bb      	ldr	r3, [r7, #8]
 80899e0:	1d1c      	adds	r4, r3, #4
 80899e2:	68bb      	ldr	r3, [r7, #8]
 80899e4:	7add      	ldrb	r5, [r3, #11]
 80899e6:	68bb      	ldr	r3, [r7, #8]
 80899e8:	7a9b      	ldrb	r3, [r3, #10]
 80899ea:	687a      	ldr	r2, [r7, #4]
 80899ec:	9202      	str	r2, [sp, #8]
 80899ee:	2206      	movs	r2, #6
 80899f0:	9201      	str	r2, [sp, #4]
 80899f2:	9300      	str	r3, [sp, #0]
 80899f4:	462b      	mov	r3, r5
 80899f6:	4622      	mov	r2, r4
 80899f8:	f002 f9f4 	bl	808bde4 <ip4_output_if>
 80899fc:	4603      	mov	r3, r0
 80899fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8089a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8089a04:	4618      	mov	r0, r3
 8089a06:	3720      	adds	r7, #32
 8089a08:	46bd      	mov	sp, r7
 8089a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8089a0c:	0808f640 	.word	0x0808f640
 8089a10:	0808fc04 	.word	0x0808fc04
 8089a14:	0808f694 	.word	0x0808f694
 8089a18:	0808fc24 	.word	0x0808fc24
 8089a1c:	0808fc44 	.word	0x0808fc44
 8089a20:	20008234 	.word	0x20008234
 8089a24:	0808fc68 	.word	0x0808fc68

08089a28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8089a28:	b5b0      	push	{r4, r5, r7, lr}
 8089a2a:	b084      	sub	sp, #16
 8089a2c:	af00      	add	r7, sp, #0
 8089a2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8089a30:	687b      	ldr	r3, [r7, #4]
 8089a32:	2b00      	cmp	r3, #0
 8089a34:	d106      	bne.n	8089a44 <tcp_rexmit_rto_prepare+0x1c>
 8089a36:	4b31      	ldr	r3, [pc, #196]	; (8089afc <tcp_rexmit_rto_prepare+0xd4>)
 8089a38:	f240 6263 	movw	r2, #1635	; 0x663
 8089a3c:	4930      	ldr	r1, [pc, #192]	; (8089b00 <tcp_rexmit_rto_prepare+0xd8>)
 8089a3e:	4831      	ldr	r0, [pc, #196]	; (8089b04 <tcp_rexmit_rto_prepare+0xdc>)
 8089a40:	f003 fa48 	bl	808ced4 <iprintf>

  if (pcb->unacked == NULL) {
 8089a44:	687b      	ldr	r3, [r7, #4]
 8089a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089a48:	2b00      	cmp	r3, #0
 8089a4a:	d102      	bne.n	8089a52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8089a4c:	f06f 0305 	mvn.w	r3, #5
 8089a50:	e050      	b.n	8089af4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8089a52:	687b      	ldr	r3, [r7, #4]
 8089a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089a56:	60fb      	str	r3, [r7, #12]
 8089a58:	e00b      	b.n	8089a72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8089a5a:	68f8      	ldr	r0, [r7, #12]
 8089a5c:	f7ff fee6 	bl	808982c <tcp_output_segment_busy>
 8089a60:	4603      	mov	r3, r0
 8089a62:	2b00      	cmp	r3, #0
 8089a64:	d002      	beq.n	8089a6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8089a66:	f06f 0305 	mvn.w	r3, #5
 8089a6a:	e043      	b.n	8089af4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8089a6c:	68fb      	ldr	r3, [r7, #12]
 8089a6e:	681b      	ldr	r3, [r3, #0]
 8089a70:	60fb      	str	r3, [r7, #12]
 8089a72:	68fb      	ldr	r3, [r7, #12]
 8089a74:	681b      	ldr	r3, [r3, #0]
 8089a76:	2b00      	cmp	r3, #0
 8089a78:	d1ef      	bne.n	8089a5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8089a7a:	68f8      	ldr	r0, [r7, #12]
 8089a7c:	f7ff fed6 	bl	808982c <tcp_output_segment_busy>
 8089a80:	4603      	mov	r3, r0
 8089a82:	2b00      	cmp	r3, #0
 8089a84:	d002      	beq.n	8089a8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8089a86:	f06f 0305 	mvn.w	r3, #5
 8089a8a:	e033      	b.n	8089af4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8089a8c:	687b      	ldr	r3, [r7, #4]
 8089a8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8089a90:	68fb      	ldr	r3, [r7, #12]
 8089a92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8089a94:	687b      	ldr	r3, [r7, #4]
 8089a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8089a98:	687b      	ldr	r3, [r7, #4]
 8089a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8089a9c:	687b      	ldr	r3, [r7, #4]
 8089a9e:	2200      	movs	r2, #0
 8089aa0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8089aa2:	687b      	ldr	r3, [r7, #4]
 8089aa4:	8b5b      	ldrh	r3, [r3, #26]
 8089aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8089aaa:	b29a      	uxth	r2, r3
 8089aac:	687b      	ldr	r3, [r7, #4]
 8089aae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8089ab0:	68fb      	ldr	r3, [r7, #12]
 8089ab2:	68db      	ldr	r3, [r3, #12]
 8089ab4:	685b      	ldr	r3, [r3, #4]
 8089ab6:	4618      	mov	r0, r3
 8089ab8:	f7f9 fd27 	bl	808350a <lwip_htonl>
 8089abc:	4604      	mov	r4, r0
 8089abe:	68fb      	ldr	r3, [r7, #12]
 8089ac0:	891b      	ldrh	r3, [r3, #8]
 8089ac2:	461d      	mov	r5, r3
 8089ac4:	68fb      	ldr	r3, [r7, #12]
 8089ac6:	68db      	ldr	r3, [r3, #12]
 8089ac8:	899b      	ldrh	r3, [r3, #12]
 8089aca:	b29b      	uxth	r3, r3
 8089acc:	4618      	mov	r0, r3
 8089ace:	f7f9 fd07 	bl	80834e0 <lwip_htons>
 8089ad2:	4603      	mov	r3, r0
 8089ad4:	b2db      	uxtb	r3, r3
 8089ad6:	f003 0303 	and.w	r3, r3, #3
 8089ada:	2b00      	cmp	r3, #0
 8089adc:	d001      	beq.n	8089ae2 <tcp_rexmit_rto_prepare+0xba>
 8089ade:	2301      	movs	r3, #1
 8089ae0:	e000      	b.n	8089ae4 <tcp_rexmit_rto_prepare+0xbc>
 8089ae2:	2300      	movs	r3, #0
 8089ae4:	442b      	add	r3, r5
 8089ae6:	18e2      	adds	r2, r4, r3
 8089ae8:	687b      	ldr	r3, [r7, #4]
 8089aea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8089aec:	687b      	ldr	r3, [r7, #4]
 8089aee:	2200      	movs	r2, #0
 8089af0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8089af2:	2300      	movs	r3, #0
}
 8089af4:	4618      	mov	r0, r3
 8089af6:	3710      	adds	r7, #16
 8089af8:	46bd      	mov	sp, r7
 8089afa:	bdb0      	pop	{r4, r5, r7, pc}
 8089afc:	0808f640 	.word	0x0808f640
 8089b00:	0808fc7c 	.word	0x0808fc7c
 8089b04:	0808f694 	.word	0x0808f694

08089b08 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8089b08:	b580      	push	{r7, lr}
 8089b0a:	b082      	sub	sp, #8
 8089b0c:	af00      	add	r7, sp, #0
 8089b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8089b10:	687b      	ldr	r3, [r7, #4]
 8089b12:	2b00      	cmp	r3, #0
 8089b14:	d106      	bne.n	8089b24 <tcp_rexmit_rto_commit+0x1c>
 8089b16:	4b0d      	ldr	r3, [pc, #52]	; (8089b4c <tcp_rexmit_rto_commit+0x44>)
 8089b18:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8089b1c:	490c      	ldr	r1, [pc, #48]	; (8089b50 <tcp_rexmit_rto_commit+0x48>)
 8089b1e:	480d      	ldr	r0, [pc, #52]	; (8089b54 <tcp_rexmit_rto_commit+0x4c>)
 8089b20:	f003 f9d8 	bl	808ced4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8089b24:	687b      	ldr	r3, [r7, #4]
 8089b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8089b2a:	2bff      	cmp	r3, #255	; 0xff
 8089b2c:	d007      	beq.n	8089b3e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8089b2e:	687b      	ldr	r3, [r7, #4]
 8089b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8089b34:	3301      	adds	r3, #1
 8089b36:	b2da      	uxtb	r2, r3
 8089b38:	687b      	ldr	r3, [r7, #4]
 8089b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8089b3e:	6878      	ldr	r0, [r7, #4]
 8089b40:	f7ff fc80 	bl	8089444 <tcp_output>
}
 8089b44:	bf00      	nop
 8089b46:	3708      	adds	r7, #8
 8089b48:	46bd      	mov	sp, r7
 8089b4a:	bd80      	pop	{r7, pc}
 8089b4c:	0808f640 	.word	0x0808f640
 8089b50:	0808fca0 	.word	0x0808fca0
 8089b54:	0808f694 	.word	0x0808f694

08089b58 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8089b58:	b580      	push	{r7, lr}
 8089b5a:	b082      	sub	sp, #8
 8089b5c:	af00      	add	r7, sp, #0
 8089b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8089b60:	687b      	ldr	r3, [r7, #4]
 8089b62:	2b00      	cmp	r3, #0
 8089b64:	d106      	bne.n	8089b74 <tcp_rexmit_rto+0x1c>
 8089b66:	4b0a      	ldr	r3, [pc, #40]	; (8089b90 <tcp_rexmit_rto+0x38>)
 8089b68:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8089b6c:	4909      	ldr	r1, [pc, #36]	; (8089b94 <tcp_rexmit_rto+0x3c>)
 8089b6e:	480a      	ldr	r0, [pc, #40]	; (8089b98 <tcp_rexmit_rto+0x40>)
 8089b70:	f003 f9b0 	bl	808ced4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8089b74:	6878      	ldr	r0, [r7, #4]
 8089b76:	f7ff ff57 	bl	8089a28 <tcp_rexmit_rto_prepare>
 8089b7a:	4603      	mov	r3, r0
 8089b7c:	2b00      	cmp	r3, #0
 8089b7e:	d102      	bne.n	8089b86 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8089b80:	6878      	ldr	r0, [r7, #4]
 8089b82:	f7ff ffc1 	bl	8089b08 <tcp_rexmit_rto_commit>
  }
}
 8089b86:	bf00      	nop
 8089b88:	3708      	adds	r7, #8
 8089b8a:	46bd      	mov	sp, r7
 8089b8c:	bd80      	pop	{r7, pc}
 8089b8e:	bf00      	nop
 8089b90:	0808f640 	.word	0x0808f640
 8089b94:	0808fcc4 	.word	0x0808fcc4
 8089b98:	0808f694 	.word	0x0808f694

08089b9c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8089b9c:	b590      	push	{r4, r7, lr}
 8089b9e:	b085      	sub	sp, #20
 8089ba0:	af00      	add	r7, sp, #0
 8089ba2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8089ba4:	687b      	ldr	r3, [r7, #4]
 8089ba6:	2b00      	cmp	r3, #0
 8089ba8:	d106      	bne.n	8089bb8 <tcp_rexmit+0x1c>
 8089baa:	4b2f      	ldr	r3, [pc, #188]	; (8089c68 <tcp_rexmit+0xcc>)
 8089bac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8089bb0:	492e      	ldr	r1, [pc, #184]	; (8089c6c <tcp_rexmit+0xd0>)
 8089bb2:	482f      	ldr	r0, [pc, #188]	; (8089c70 <tcp_rexmit+0xd4>)
 8089bb4:	f003 f98e 	bl	808ced4 <iprintf>

  if (pcb->unacked == NULL) {
 8089bb8:	687b      	ldr	r3, [r7, #4]
 8089bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089bbc:	2b00      	cmp	r3, #0
 8089bbe:	d102      	bne.n	8089bc6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8089bc0:	f06f 0305 	mvn.w	r3, #5
 8089bc4:	e04c      	b.n	8089c60 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8089bc6:	687b      	ldr	r3, [r7, #4]
 8089bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089bca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8089bcc:	68b8      	ldr	r0, [r7, #8]
 8089bce:	f7ff fe2d 	bl	808982c <tcp_output_segment_busy>
 8089bd2:	4603      	mov	r3, r0
 8089bd4:	2b00      	cmp	r3, #0
 8089bd6:	d002      	beq.n	8089bde <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8089bd8:	f06f 0305 	mvn.w	r3, #5
 8089bdc:	e040      	b.n	8089c60 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8089bde:	68bb      	ldr	r3, [r7, #8]
 8089be0:	681a      	ldr	r2, [r3, #0]
 8089be2:	687b      	ldr	r3, [r7, #4]
 8089be4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8089be6:	687b      	ldr	r3, [r7, #4]
 8089be8:	336c      	adds	r3, #108	; 0x6c
 8089bea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8089bec:	e002      	b.n	8089bf4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8089bee:	68fb      	ldr	r3, [r7, #12]
 8089bf0:	681b      	ldr	r3, [r3, #0]
 8089bf2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8089bf4:	68fb      	ldr	r3, [r7, #12]
 8089bf6:	681b      	ldr	r3, [r3, #0]
 8089bf8:	2b00      	cmp	r3, #0
 8089bfa:	d011      	beq.n	8089c20 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8089bfc:	68fb      	ldr	r3, [r7, #12]
 8089bfe:	681b      	ldr	r3, [r3, #0]
 8089c00:	68db      	ldr	r3, [r3, #12]
 8089c02:	685b      	ldr	r3, [r3, #4]
 8089c04:	4618      	mov	r0, r3
 8089c06:	f7f9 fc80 	bl	808350a <lwip_htonl>
 8089c0a:	4604      	mov	r4, r0
 8089c0c:	68bb      	ldr	r3, [r7, #8]
 8089c0e:	68db      	ldr	r3, [r3, #12]
 8089c10:	685b      	ldr	r3, [r3, #4]
 8089c12:	4618      	mov	r0, r3
 8089c14:	f7f9 fc79 	bl	808350a <lwip_htonl>
 8089c18:	4603      	mov	r3, r0
 8089c1a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8089c1c:	2b00      	cmp	r3, #0
 8089c1e:	dbe6      	blt.n	8089bee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8089c20:	68fb      	ldr	r3, [r7, #12]
 8089c22:	681a      	ldr	r2, [r3, #0]
 8089c24:	68bb      	ldr	r3, [r7, #8]
 8089c26:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8089c28:	68fb      	ldr	r3, [r7, #12]
 8089c2a:	68ba      	ldr	r2, [r7, #8]
 8089c2c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8089c2e:	68bb      	ldr	r3, [r7, #8]
 8089c30:	681b      	ldr	r3, [r3, #0]
 8089c32:	2b00      	cmp	r3, #0
 8089c34:	d103      	bne.n	8089c3e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8089c36:	687b      	ldr	r3, [r7, #4]
 8089c38:	2200      	movs	r2, #0
 8089c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8089c3e:	687b      	ldr	r3, [r7, #4]
 8089c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8089c44:	2bff      	cmp	r3, #255	; 0xff
 8089c46:	d007      	beq.n	8089c58 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8089c48:	687b      	ldr	r3, [r7, #4]
 8089c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8089c4e:	3301      	adds	r3, #1
 8089c50:	b2da      	uxtb	r2, r3
 8089c52:	687b      	ldr	r3, [r7, #4]
 8089c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8089c58:	687b      	ldr	r3, [r7, #4]
 8089c5a:	2200      	movs	r2, #0
 8089c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8089c5e:	2300      	movs	r3, #0
}
 8089c60:	4618      	mov	r0, r3
 8089c62:	3714      	adds	r7, #20
 8089c64:	46bd      	mov	sp, r7
 8089c66:	bd90      	pop	{r4, r7, pc}
 8089c68:	0808f640 	.word	0x0808f640
 8089c6c:	0808fce0 	.word	0x0808fce0
 8089c70:	0808f694 	.word	0x0808f694

08089c74 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8089c74:	b580      	push	{r7, lr}
 8089c76:	b082      	sub	sp, #8
 8089c78:	af00      	add	r7, sp, #0
 8089c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8089c7c:	687b      	ldr	r3, [r7, #4]
 8089c7e:	2b00      	cmp	r3, #0
 8089c80:	d106      	bne.n	8089c90 <tcp_rexmit_fast+0x1c>
 8089c82:	4b2a      	ldr	r3, [pc, #168]	; (8089d2c <tcp_rexmit_fast+0xb8>)
 8089c84:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8089c88:	4929      	ldr	r1, [pc, #164]	; (8089d30 <tcp_rexmit_fast+0xbc>)
 8089c8a:	482a      	ldr	r0, [pc, #168]	; (8089d34 <tcp_rexmit_fast+0xc0>)
 8089c8c:	f003 f922 	bl	808ced4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8089c90:	687b      	ldr	r3, [r7, #4]
 8089c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8089c94:	2b00      	cmp	r3, #0
 8089c96:	d044      	beq.n	8089d22 <tcp_rexmit_fast+0xae>
 8089c98:	687b      	ldr	r3, [r7, #4]
 8089c9a:	8b5b      	ldrh	r3, [r3, #26]
 8089c9c:	f003 0304 	and.w	r3, r3, #4
 8089ca0:	2b00      	cmp	r3, #0
 8089ca2:	d13e      	bne.n	8089d22 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8089ca4:	6878      	ldr	r0, [r7, #4]
 8089ca6:	f7ff ff79 	bl	8089b9c <tcp_rexmit>
 8089caa:	4603      	mov	r3, r0
 8089cac:	2b00      	cmp	r3, #0
 8089cae:	d138      	bne.n	8089d22 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8089cb0:	687b      	ldr	r3, [r7, #4]
 8089cb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8089cb6:	687b      	ldr	r3, [r7, #4]
 8089cb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8089cbc:	4293      	cmp	r3, r2
 8089cbe:	bf28      	it	cs
 8089cc0:	4613      	movcs	r3, r2
 8089cc2:	b29b      	uxth	r3, r3
 8089cc4:	0fda      	lsrs	r2, r3, #31
 8089cc6:	4413      	add	r3, r2
 8089cc8:	105b      	asrs	r3, r3, #1
 8089cca:	b29a      	uxth	r2, r3
 8089ccc:	687b      	ldr	r3, [r7, #4]
 8089cce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8089cd2:	687b      	ldr	r3, [r7, #4]
 8089cd4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8089cd8:	461a      	mov	r2, r3
 8089cda:	687b      	ldr	r3, [r7, #4]
 8089cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8089cde:	005b      	lsls	r3, r3, #1
 8089ce0:	429a      	cmp	r2, r3
 8089ce2:	d206      	bcs.n	8089cf2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8089ce4:	687b      	ldr	r3, [r7, #4]
 8089ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8089ce8:	005b      	lsls	r3, r3, #1
 8089cea:	b29a      	uxth	r2, r3
 8089cec:	687b      	ldr	r3, [r7, #4]
 8089cee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8089cf2:	687b      	ldr	r3, [r7, #4]
 8089cf4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8089cf8:	687b      	ldr	r3, [r7, #4]
 8089cfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8089cfc:	4619      	mov	r1, r3
 8089cfe:	0049      	lsls	r1, r1, #1
 8089d00:	440b      	add	r3, r1
 8089d02:	b29b      	uxth	r3, r3
 8089d04:	4413      	add	r3, r2
 8089d06:	b29a      	uxth	r2, r3
 8089d08:	687b      	ldr	r3, [r7, #4]
 8089d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8089d0e:	687b      	ldr	r3, [r7, #4]
 8089d10:	8b5b      	ldrh	r3, [r3, #26]
 8089d12:	f043 0304 	orr.w	r3, r3, #4
 8089d16:	b29a      	uxth	r2, r3
 8089d18:	687b      	ldr	r3, [r7, #4]
 8089d1a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8089d1c:	687b      	ldr	r3, [r7, #4]
 8089d1e:	2200      	movs	r2, #0
 8089d20:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8089d22:	bf00      	nop
 8089d24:	3708      	adds	r7, #8
 8089d26:	46bd      	mov	sp, r7
 8089d28:	bd80      	pop	{r7, pc}
 8089d2a:	bf00      	nop
 8089d2c:	0808f640 	.word	0x0808f640
 8089d30:	0808fcf8 	.word	0x0808fcf8
 8089d34:	0808f694 	.word	0x0808f694

08089d38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8089d38:	b580      	push	{r7, lr}
 8089d3a:	b086      	sub	sp, #24
 8089d3c:	af00      	add	r7, sp, #0
 8089d3e:	60f8      	str	r0, [r7, #12]
 8089d40:	607b      	str	r3, [r7, #4]
 8089d42:	460b      	mov	r3, r1
 8089d44:	817b      	strh	r3, [r7, #10]
 8089d46:	4613      	mov	r3, r2
 8089d48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8089d4a:	897a      	ldrh	r2, [r7, #10]
 8089d4c:	893b      	ldrh	r3, [r7, #8]
 8089d4e:	4413      	add	r3, r2
 8089d50:	b29b      	uxth	r3, r3
 8089d52:	3314      	adds	r3, #20
 8089d54:	b29b      	uxth	r3, r3
 8089d56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8089d5a:	4619      	mov	r1, r3
 8089d5c:	2022      	movs	r0, #34	; 0x22
 8089d5e:	f7fa fc19 	bl	8084594 <pbuf_alloc>
 8089d62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8089d64:	697b      	ldr	r3, [r7, #20]
 8089d66:	2b00      	cmp	r3, #0
 8089d68:	d04d      	beq.n	8089e06 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8089d6a:	897b      	ldrh	r3, [r7, #10]
 8089d6c:	3313      	adds	r3, #19
 8089d6e:	697a      	ldr	r2, [r7, #20]
 8089d70:	8952      	ldrh	r2, [r2, #10]
 8089d72:	4293      	cmp	r3, r2
 8089d74:	db06      	blt.n	8089d84 <tcp_output_alloc_header_common+0x4c>
 8089d76:	4b26      	ldr	r3, [pc, #152]	; (8089e10 <tcp_output_alloc_header_common+0xd8>)
 8089d78:	f240 7223 	movw	r2, #1827	; 0x723
 8089d7c:	4925      	ldr	r1, [pc, #148]	; (8089e14 <tcp_output_alloc_header_common+0xdc>)
 8089d7e:	4826      	ldr	r0, [pc, #152]	; (8089e18 <tcp_output_alloc_header_common+0xe0>)
 8089d80:	f003 f8a8 	bl	808ced4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8089d84:	697b      	ldr	r3, [r7, #20]
 8089d86:	685b      	ldr	r3, [r3, #4]
 8089d88:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8089d8a:	8c3b      	ldrh	r3, [r7, #32]
 8089d8c:	4618      	mov	r0, r3
 8089d8e:	f7f9 fba7 	bl	80834e0 <lwip_htons>
 8089d92:	4603      	mov	r3, r0
 8089d94:	461a      	mov	r2, r3
 8089d96:	693b      	ldr	r3, [r7, #16]
 8089d98:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8089d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8089d9c:	4618      	mov	r0, r3
 8089d9e:	f7f9 fb9f 	bl	80834e0 <lwip_htons>
 8089da2:	4603      	mov	r3, r0
 8089da4:	461a      	mov	r2, r3
 8089da6:	693b      	ldr	r3, [r7, #16]
 8089da8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8089daa:	693b      	ldr	r3, [r7, #16]
 8089dac:	687a      	ldr	r2, [r7, #4]
 8089dae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8089db0:	68f8      	ldr	r0, [r7, #12]
 8089db2:	f7f9 fbaa 	bl	808350a <lwip_htonl>
 8089db6:	4602      	mov	r2, r0
 8089db8:	693b      	ldr	r3, [r7, #16]
 8089dba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8089dbc:	897b      	ldrh	r3, [r7, #10]
 8089dbe:	089b      	lsrs	r3, r3, #2
 8089dc0:	b29b      	uxth	r3, r3
 8089dc2:	3305      	adds	r3, #5
 8089dc4:	b29b      	uxth	r3, r3
 8089dc6:	031b      	lsls	r3, r3, #12
 8089dc8:	b29a      	uxth	r2, r3
 8089dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8089dce:	b29b      	uxth	r3, r3
 8089dd0:	4313      	orrs	r3, r2
 8089dd2:	b29b      	uxth	r3, r3
 8089dd4:	4618      	mov	r0, r3
 8089dd6:	f7f9 fb83 	bl	80834e0 <lwip_htons>
 8089dda:	4603      	mov	r3, r0
 8089ddc:	461a      	mov	r2, r3
 8089dde:	693b      	ldr	r3, [r7, #16]
 8089de0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8089de2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8089de4:	4618      	mov	r0, r3
 8089de6:	f7f9 fb7b 	bl	80834e0 <lwip_htons>
 8089dea:	4603      	mov	r3, r0
 8089dec:	461a      	mov	r2, r3
 8089dee:	693b      	ldr	r3, [r7, #16]
 8089df0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8089df2:	693b      	ldr	r3, [r7, #16]
 8089df4:	2200      	movs	r2, #0
 8089df6:	741a      	strb	r2, [r3, #16]
 8089df8:	2200      	movs	r2, #0
 8089dfa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8089dfc:	693b      	ldr	r3, [r7, #16]
 8089dfe:	2200      	movs	r2, #0
 8089e00:	749a      	strb	r2, [r3, #18]
 8089e02:	2200      	movs	r2, #0
 8089e04:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8089e06:	697b      	ldr	r3, [r7, #20]
}
 8089e08:	4618      	mov	r0, r3
 8089e0a:	3718      	adds	r7, #24
 8089e0c:	46bd      	mov	sp, r7
 8089e0e:	bd80      	pop	{r7, pc}
 8089e10:	0808f640 	.word	0x0808f640
 8089e14:	0808fd18 	.word	0x0808fd18
 8089e18:	0808f694 	.word	0x0808f694

08089e1c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8089e1c:	b5b0      	push	{r4, r5, r7, lr}
 8089e1e:	b08a      	sub	sp, #40	; 0x28
 8089e20:	af04      	add	r7, sp, #16
 8089e22:	60f8      	str	r0, [r7, #12]
 8089e24:	607b      	str	r3, [r7, #4]
 8089e26:	460b      	mov	r3, r1
 8089e28:	817b      	strh	r3, [r7, #10]
 8089e2a:	4613      	mov	r3, r2
 8089e2c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8089e2e:	68fb      	ldr	r3, [r7, #12]
 8089e30:	2b00      	cmp	r3, #0
 8089e32:	d106      	bne.n	8089e42 <tcp_output_alloc_header+0x26>
 8089e34:	4b15      	ldr	r3, [pc, #84]	; (8089e8c <tcp_output_alloc_header+0x70>)
 8089e36:	f240 7242 	movw	r2, #1858	; 0x742
 8089e3a:	4915      	ldr	r1, [pc, #84]	; (8089e90 <tcp_output_alloc_header+0x74>)
 8089e3c:	4815      	ldr	r0, [pc, #84]	; (8089e94 <tcp_output_alloc_header+0x78>)
 8089e3e:	f003 f849 	bl	808ced4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8089e42:	68fb      	ldr	r3, [r7, #12]
 8089e44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8089e46:	68fb      	ldr	r3, [r7, #12]
 8089e48:	8adb      	ldrh	r3, [r3, #22]
 8089e4a:	68fa      	ldr	r2, [r7, #12]
 8089e4c:	8b12      	ldrh	r2, [r2, #24]
 8089e4e:	68f9      	ldr	r1, [r7, #12]
 8089e50:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8089e52:	893d      	ldrh	r5, [r7, #8]
 8089e54:	897c      	ldrh	r4, [r7, #10]
 8089e56:	9103      	str	r1, [sp, #12]
 8089e58:	2110      	movs	r1, #16
 8089e5a:	9102      	str	r1, [sp, #8]
 8089e5c:	9201      	str	r2, [sp, #4]
 8089e5e:	9300      	str	r3, [sp, #0]
 8089e60:	687b      	ldr	r3, [r7, #4]
 8089e62:	462a      	mov	r2, r5
 8089e64:	4621      	mov	r1, r4
 8089e66:	f7ff ff67 	bl	8089d38 <tcp_output_alloc_header_common>
 8089e6a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8089e6c:	697b      	ldr	r3, [r7, #20]
 8089e6e:	2b00      	cmp	r3, #0
 8089e70:	d006      	beq.n	8089e80 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8089e72:	68fb      	ldr	r3, [r7, #12]
 8089e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8089e76:	68fa      	ldr	r2, [r7, #12]
 8089e78:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8089e7a:	441a      	add	r2, r3
 8089e7c:	68fb      	ldr	r3, [r7, #12]
 8089e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8089e80:	697b      	ldr	r3, [r7, #20]
}
 8089e82:	4618      	mov	r0, r3
 8089e84:	3718      	adds	r7, #24
 8089e86:	46bd      	mov	sp, r7
 8089e88:	bdb0      	pop	{r4, r5, r7, pc}
 8089e8a:	bf00      	nop
 8089e8c:	0808f640 	.word	0x0808f640
 8089e90:	0808fd48 	.word	0x0808fd48
 8089e94:	0808f694 	.word	0x0808f694

08089e98 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8089e98:	b580      	push	{r7, lr}
 8089e9a:	b088      	sub	sp, #32
 8089e9c:	af00      	add	r7, sp, #0
 8089e9e:	60f8      	str	r0, [r7, #12]
 8089ea0:	60b9      	str	r1, [r7, #8]
 8089ea2:	4611      	mov	r1, r2
 8089ea4:	461a      	mov	r2, r3
 8089ea6:	460b      	mov	r3, r1
 8089ea8:	71fb      	strb	r3, [r7, #7]
 8089eaa:	4613      	mov	r3, r2
 8089eac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8089eae:	2300      	movs	r3, #0
 8089eb0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8089eb2:	68bb      	ldr	r3, [r7, #8]
 8089eb4:	2b00      	cmp	r3, #0
 8089eb6:	d106      	bne.n	8089ec6 <tcp_output_fill_options+0x2e>
 8089eb8:	4b13      	ldr	r3, [pc, #76]	; (8089f08 <tcp_output_fill_options+0x70>)
 8089eba:	f240 7256 	movw	r2, #1878	; 0x756
 8089ebe:	4913      	ldr	r1, [pc, #76]	; (8089f0c <tcp_output_fill_options+0x74>)
 8089ec0:	4813      	ldr	r0, [pc, #76]	; (8089f10 <tcp_output_fill_options+0x78>)
 8089ec2:	f003 f807 	bl	808ced4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8089ec6:	68bb      	ldr	r3, [r7, #8]
 8089ec8:	685b      	ldr	r3, [r3, #4]
 8089eca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8089ecc:	69bb      	ldr	r3, [r7, #24]
 8089ece:	3314      	adds	r3, #20
 8089ed0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8089ed2:	69bb      	ldr	r3, [r7, #24]
 8089ed4:	f103 0214 	add.w	r2, r3, #20
 8089ed8:	8bfb      	ldrh	r3, [r7, #30]
 8089eda:	009b      	lsls	r3, r3, #2
 8089edc:	4619      	mov	r1, r3
 8089ede:	79fb      	ldrb	r3, [r7, #7]
 8089ee0:	009b      	lsls	r3, r3, #2
 8089ee2:	f003 0304 	and.w	r3, r3, #4
 8089ee6:	440b      	add	r3, r1
 8089ee8:	4413      	add	r3, r2
 8089eea:	697a      	ldr	r2, [r7, #20]
 8089eec:	429a      	cmp	r2, r3
 8089eee:	d006      	beq.n	8089efe <tcp_output_fill_options+0x66>
 8089ef0:	4b05      	ldr	r3, [pc, #20]	; (8089f08 <tcp_output_fill_options+0x70>)
 8089ef2:	f240 7275 	movw	r2, #1909	; 0x775
 8089ef6:	4907      	ldr	r1, [pc, #28]	; (8089f14 <tcp_output_fill_options+0x7c>)
 8089ef8:	4805      	ldr	r0, [pc, #20]	; (8089f10 <tcp_output_fill_options+0x78>)
 8089efa:	f002 ffeb 	bl	808ced4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8089efe:	bf00      	nop
 8089f00:	3720      	adds	r7, #32
 8089f02:	46bd      	mov	sp, r7
 8089f04:	bd80      	pop	{r7, pc}
 8089f06:	bf00      	nop
 8089f08:	0808f640 	.word	0x0808f640
 8089f0c:	0808fd70 	.word	0x0808fd70
 8089f10:	0808f694 	.word	0x0808f694
 8089f14:	0808fc68 	.word	0x0808fc68

08089f18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8089f18:	b580      	push	{r7, lr}
 8089f1a:	b08a      	sub	sp, #40	; 0x28
 8089f1c:	af04      	add	r7, sp, #16
 8089f1e:	60f8      	str	r0, [r7, #12]
 8089f20:	60b9      	str	r1, [r7, #8]
 8089f22:	607a      	str	r2, [r7, #4]
 8089f24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8089f26:	68bb      	ldr	r3, [r7, #8]
 8089f28:	2b00      	cmp	r3, #0
 8089f2a:	d106      	bne.n	8089f3a <tcp_output_control_segment+0x22>
 8089f2c:	4b1c      	ldr	r3, [pc, #112]	; (8089fa0 <tcp_output_control_segment+0x88>)
 8089f2e:	f240 7287 	movw	r2, #1927	; 0x787
 8089f32:	491c      	ldr	r1, [pc, #112]	; (8089fa4 <tcp_output_control_segment+0x8c>)
 8089f34:	481c      	ldr	r0, [pc, #112]	; (8089fa8 <tcp_output_control_segment+0x90>)
 8089f36:	f002 ffcd 	bl	808ced4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8089f3a:	683a      	ldr	r2, [r7, #0]
 8089f3c:	6879      	ldr	r1, [r7, #4]
 8089f3e:	68f8      	ldr	r0, [r7, #12]
 8089f40:	f7fe ff40 	bl	8088dc4 <tcp_route>
 8089f44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8089f46:	693b      	ldr	r3, [r7, #16]
 8089f48:	2b00      	cmp	r3, #0
 8089f4a:	d102      	bne.n	8089f52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8089f4c:	23fc      	movs	r3, #252	; 0xfc
 8089f4e:	75fb      	strb	r3, [r7, #23]
 8089f50:	e01c      	b.n	8089f8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8089f52:	68fb      	ldr	r3, [r7, #12]
 8089f54:	2b00      	cmp	r3, #0
 8089f56:	d006      	beq.n	8089f66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8089f58:	68fb      	ldr	r3, [r7, #12]
 8089f5a:	7adb      	ldrb	r3, [r3, #11]
 8089f5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8089f5e:	68fb      	ldr	r3, [r7, #12]
 8089f60:	7a9b      	ldrb	r3, [r3, #10]
 8089f62:	757b      	strb	r3, [r7, #21]
 8089f64:	e003      	b.n	8089f6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8089f66:	23ff      	movs	r3, #255	; 0xff
 8089f68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8089f6a:	2300      	movs	r3, #0
 8089f6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8089f6e:	7dba      	ldrb	r2, [r7, #22]
 8089f70:	693b      	ldr	r3, [r7, #16]
 8089f72:	9302      	str	r3, [sp, #8]
 8089f74:	2306      	movs	r3, #6
 8089f76:	9301      	str	r3, [sp, #4]
 8089f78:	7d7b      	ldrb	r3, [r7, #21]
 8089f7a:	9300      	str	r3, [sp, #0]
 8089f7c:	4613      	mov	r3, r2
 8089f7e:	683a      	ldr	r2, [r7, #0]
 8089f80:	6879      	ldr	r1, [r7, #4]
 8089f82:	68b8      	ldr	r0, [r7, #8]
 8089f84:	f001 ff2e 	bl	808bde4 <ip4_output_if>
 8089f88:	4603      	mov	r3, r0
 8089f8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8089f8c:	68b8      	ldr	r0, [r7, #8]
 8089f8e:	f7fa fde5 	bl	8084b5c <pbuf_free>
  return err;
 8089f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8089f96:	4618      	mov	r0, r3
 8089f98:	3718      	adds	r7, #24
 8089f9a:	46bd      	mov	sp, r7
 8089f9c:	bd80      	pop	{r7, pc}
 8089f9e:	bf00      	nop
 8089fa0:	0808f640 	.word	0x0808f640
 8089fa4:	0808fd98 	.word	0x0808fd98
 8089fa8:	0808f694 	.word	0x0808f694

08089fac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8089fac:	b590      	push	{r4, r7, lr}
 8089fae:	b08b      	sub	sp, #44	; 0x2c
 8089fb0:	af04      	add	r7, sp, #16
 8089fb2:	60f8      	str	r0, [r7, #12]
 8089fb4:	60b9      	str	r1, [r7, #8]
 8089fb6:	607a      	str	r2, [r7, #4]
 8089fb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8089fba:	683b      	ldr	r3, [r7, #0]
 8089fbc:	2b00      	cmp	r3, #0
 8089fbe:	d106      	bne.n	8089fce <tcp_rst+0x22>
 8089fc0:	4b1f      	ldr	r3, [pc, #124]	; (808a040 <tcp_rst+0x94>)
 8089fc2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8089fc6:	491f      	ldr	r1, [pc, #124]	; (808a044 <tcp_rst+0x98>)
 8089fc8:	481f      	ldr	r0, [pc, #124]	; (808a048 <tcp_rst+0x9c>)
 8089fca:	f002 ff83 	bl	808ced4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8089fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8089fd0:	2b00      	cmp	r3, #0
 8089fd2:	d106      	bne.n	8089fe2 <tcp_rst+0x36>
 8089fd4:	4b1a      	ldr	r3, [pc, #104]	; (808a040 <tcp_rst+0x94>)
 8089fd6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8089fda:	491c      	ldr	r1, [pc, #112]	; (808a04c <tcp_rst+0xa0>)
 8089fdc:	481a      	ldr	r0, [pc, #104]	; (808a048 <tcp_rst+0x9c>)
 8089fde:	f002 ff79 	bl	808ced4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8089fe2:	2300      	movs	r3, #0
 8089fe4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8089fe6:	f246 0308 	movw	r3, #24584	; 0x6008
 8089fea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8089fec:	7dfb      	ldrb	r3, [r7, #23]
 8089fee:	b29c      	uxth	r4, r3
 8089ff0:	68b8      	ldr	r0, [r7, #8]
 8089ff2:	f7f9 fa8a 	bl	808350a <lwip_htonl>
 8089ff6:	4602      	mov	r2, r0
 8089ff8:	8abb      	ldrh	r3, [r7, #20]
 8089ffa:	9303      	str	r3, [sp, #12]
 8089ffc:	2314      	movs	r3, #20
 8089ffe:	9302      	str	r3, [sp, #8]
 808a000:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 808a002:	9301      	str	r3, [sp, #4]
 808a004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 808a006:	9300      	str	r3, [sp, #0]
 808a008:	4613      	mov	r3, r2
 808a00a:	2200      	movs	r2, #0
 808a00c:	4621      	mov	r1, r4
 808a00e:	6878      	ldr	r0, [r7, #4]
 808a010:	f7ff fe92 	bl	8089d38 <tcp_output_alloc_header_common>
 808a014:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 808a016:	693b      	ldr	r3, [r7, #16]
 808a018:	2b00      	cmp	r3, #0
 808a01a:	d00c      	beq.n	808a036 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 808a01c:	7dfb      	ldrb	r3, [r7, #23]
 808a01e:	2200      	movs	r2, #0
 808a020:	6939      	ldr	r1, [r7, #16]
 808a022:	68f8      	ldr	r0, [r7, #12]
 808a024:	f7ff ff38 	bl	8089e98 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 808a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808a02a:	683a      	ldr	r2, [r7, #0]
 808a02c:	6939      	ldr	r1, [r7, #16]
 808a02e:	68f8      	ldr	r0, [r7, #12]
 808a030:	f7ff ff72 	bl	8089f18 <tcp_output_control_segment>
 808a034:	e000      	b.n	808a038 <tcp_rst+0x8c>
    return;
 808a036:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 808a038:	371c      	adds	r7, #28
 808a03a:	46bd      	mov	sp, r7
 808a03c:	bd90      	pop	{r4, r7, pc}
 808a03e:	bf00      	nop
 808a040:	0808f640 	.word	0x0808f640
 808a044:	0808fdc4 	.word	0x0808fdc4
 808a048:	0808f694 	.word	0x0808f694
 808a04c:	0808fde0 	.word	0x0808fde0

0808a050 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 808a050:	b590      	push	{r4, r7, lr}
 808a052:	b087      	sub	sp, #28
 808a054:	af00      	add	r7, sp, #0
 808a056:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 808a058:	2300      	movs	r3, #0
 808a05a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 808a05c:	2300      	movs	r3, #0
 808a05e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 808a060:	687b      	ldr	r3, [r7, #4]
 808a062:	2b00      	cmp	r3, #0
 808a064:	d106      	bne.n	808a074 <tcp_send_empty_ack+0x24>
 808a066:	4b28      	ldr	r3, [pc, #160]	; (808a108 <tcp_send_empty_ack+0xb8>)
 808a068:	f240 72ea 	movw	r2, #2026	; 0x7ea
 808a06c:	4927      	ldr	r1, [pc, #156]	; (808a10c <tcp_send_empty_ack+0xbc>)
 808a06e:	4828      	ldr	r0, [pc, #160]	; (808a110 <tcp_send_empty_ack+0xc0>)
 808a070:	f002 ff30 	bl	808ced4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 808a074:	7dfb      	ldrb	r3, [r7, #23]
 808a076:	009b      	lsls	r3, r3, #2
 808a078:	b2db      	uxtb	r3, r3
 808a07a:	f003 0304 	and.w	r3, r3, #4
 808a07e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 808a080:	7d7b      	ldrb	r3, [r7, #21]
 808a082:	b29c      	uxth	r4, r3
 808a084:	687b      	ldr	r3, [r7, #4]
 808a086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a088:	4618      	mov	r0, r3
 808a08a:	f7f9 fa3e 	bl	808350a <lwip_htonl>
 808a08e:	4603      	mov	r3, r0
 808a090:	2200      	movs	r2, #0
 808a092:	4621      	mov	r1, r4
 808a094:	6878      	ldr	r0, [r7, #4]
 808a096:	f7ff fec1 	bl	8089e1c <tcp_output_alloc_header>
 808a09a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 808a09c:	693b      	ldr	r3, [r7, #16]
 808a09e:	2b00      	cmp	r3, #0
 808a0a0:	d109      	bne.n	808a0b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 808a0a2:	687b      	ldr	r3, [r7, #4]
 808a0a4:	8b5b      	ldrh	r3, [r3, #26]
 808a0a6:	f043 0303 	orr.w	r3, r3, #3
 808a0aa:	b29a      	uxth	r2, r3
 808a0ac:	687b      	ldr	r3, [r7, #4]
 808a0ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 808a0b0:	f06f 0301 	mvn.w	r3, #1
 808a0b4:	e023      	b.n	808a0fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 808a0b6:	7dbb      	ldrb	r3, [r7, #22]
 808a0b8:	7dfa      	ldrb	r2, [r7, #23]
 808a0ba:	6939      	ldr	r1, [r7, #16]
 808a0bc:	6878      	ldr	r0, [r7, #4]
 808a0be:	f7ff feeb 	bl	8089e98 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 808a0c2:	687a      	ldr	r2, [r7, #4]
 808a0c4:	687b      	ldr	r3, [r7, #4]
 808a0c6:	3304      	adds	r3, #4
 808a0c8:	6939      	ldr	r1, [r7, #16]
 808a0ca:	6878      	ldr	r0, [r7, #4]
 808a0cc:	f7ff ff24 	bl	8089f18 <tcp_output_control_segment>
 808a0d0:	4603      	mov	r3, r0
 808a0d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 808a0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 808a0d8:	2b00      	cmp	r3, #0
 808a0da:	d007      	beq.n	808a0ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 808a0dc:	687b      	ldr	r3, [r7, #4]
 808a0de:	8b5b      	ldrh	r3, [r3, #26]
 808a0e0:	f043 0303 	orr.w	r3, r3, #3
 808a0e4:	b29a      	uxth	r2, r3
 808a0e6:	687b      	ldr	r3, [r7, #4]
 808a0e8:	835a      	strh	r2, [r3, #26]
 808a0ea:	e006      	b.n	808a0fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 808a0ec:	687b      	ldr	r3, [r7, #4]
 808a0ee:	8b5b      	ldrh	r3, [r3, #26]
 808a0f0:	f023 0303 	bic.w	r3, r3, #3
 808a0f4:	b29a      	uxth	r2, r3
 808a0f6:	687b      	ldr	r3, [r7, #4]
 808a0f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 808a0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 808a0fe:	4618      	mov	r0, r3
 808a100:	371c      	adds	r7, #28
 808a102:	46bd      	mov	sp, r7
 808a104:	bd90      	pop	{r4, r7, pc}
 808a106:	bf00      	nop
 808a108:	0808f640 	.word	0x0808f640
 808a10c:	0808fdfc 	.word	0x0808fdfc
 808a110:	0808f694 	.word	0x0808f694

0808a114 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 808a114:	b590      	push	{r4, r7, lr}
 808a116:	b087      	sub	sp, #28
 808a118:	af00      	add	r7, sp, #0
 808a11a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 808a11c:	2300      	movs	r3, #0
 808a11e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 808a120:	687b      	ldr	r3, [r7, #4]
 808a122:	2b00      	cmp	r3, #0
 808a124:	d106      	bne.n	808a134 <tcp_keepalive+0x20>
 808a126:	4b18      	ldr	r3, [pc, #96]	; (808a188 <tcp_keepalive+0x74>)
 808a128:	f640 0224 	movw	r2, #2084	; 0x824
 808a12c:	4917      	ldr	r1, [pc, #92]	; (808a18c <tcp_keepalive+0x78>)
 808a12e:	4818      	ldr	r0, [pc, #96]	; (808a190 <tcp_keepalive+0x7c>)
 808a130:	f002 fed0 	bl	808ced4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 808a134:	7dfb      	ldrb	r3, [r7, #23]
 808a136:	b29c      	uxth	r4, r3
 808a138:	687b      	ldr	r3, [r7, #4]
 808a13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a13c:	3b01      	subs	r3, #1
 808a13e:	4618      	mov	r0, r3
 808a140:	f7f9 f9e3 	bl	808350a <lwip_htonl>
 808a144:	4603      	mov	r3, r0
 808a146:	2200      	movs	r2, #0
 808a148:	4621      	mov	r1, r4
 808a14a:	6878      	ldr	r0, [r7, #4]
 808a14c:	f7ff fe66 	bl	8089e1c <tcp_output_alloc_header>
 808a150:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 808a152:	693b      	ldr	r3, [r7, #16]
 808a154:	2b00      	cmp	r3, #0
 808a156:	d102      	bne.n	808a15e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 808a158:	f04f 33ff 	mov.w	r3, #4294967295
 808a15c:	e010      	b.n	808a180 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 808a15e:	7dfb      	ldrb	r3, [r7, #23]
 808a160:	2200      	movs	r2, #0
 808a162:	6939      	ldr	r1, [r7, #16]
 808a164:	6878      	ldr	r0, [r7, #4]
 808a166:	f7ff fe97 	bl	8089e98 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 808a16a:	687a      	ldr	r2, [r7, #4]
 808a16c:	687b      	ldr	r3, [r7, #4]
 808a16e:	3304      	adds	r3, #4
 808a170:	6939      	ldr	r1, [r7, #16]
 808a172:	6878      	ldr	r0, [r7, #4]
 808a174:	f7ff fed0 	bl	8089f18 <tcp_output_control_segment>
 808a178:	4603      	mov	r3, r0
 808a17a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 808a17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 808a180:	4618      	mov	r0, r3
 808a182:	371c      	adds	r7, #28
 808a184:	46bd      	mov	sp, r7
 808a186:	bd90      	pop	{r4, r7, pc}
 808a188:	0808f640 	.word	0x0808f640
 808a18c:	0808fe1c 	.word	0x0808fe1c
 808a190:	0808f694 	.word	0x0808f694

0808a194 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 808a194:	b590      	push	{r4, r7, lr}
 808a196:	b08b      	sub	sp, #44	; 0x2c
 808a198:	af00      	add	r7, sp, #0
 808a19a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 808a19c:	2300      	movs	r3, #0
 808a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 808a1a2:	687b      	ldr	r3, [r7, #4]
 808a1a4:	2b00      	cmp	r3, #0
 808a1a6:	d106      	bne.n	808a1b6 <tcp_zero_window_probe+0x22>
 808a1a8:	4b4c      	ldr	r3, [pc, #304]	; (808a2dc <tcp_zero_window_probe+0x148>)
 808a1aa:	f640 024f 	movw	r2, #2127	; 0x84f
 808a1ae:	494c      	ldr	r1, [pc, #304]	; (808a2e0 <tcp_zero_window_probe+0x14c>)
 808a1b0:	484c      	ldr	r0, [pc, #304]	; (808a2e4 <tcp_zero_window_probe+0x150>)
 808a1b2:	f002 fe8f 	bl	808ced4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 808a1b6:	687b      	ldr	r3, [r7, #4]
 808a1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808a1ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 808a1bc:	6a3b      	ldr	r3, [r7, #32]
 808a1be:	2b00      	cmp	r3, #0
 808a1c0:	d101      	bne.n	808a1c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 808a1c2:	2300      	movs	r3, #0
 808a1c4:	e086      	b.n	808a2d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 808a1c6:	687b      	ldr	r3, [r7, #4]
 808a1c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 808a1cc:	2bff      	cmp	r3, #255	; 0xff
 808a1ce:	d007      	beq.n	808a1e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 808a1d0:	687b      	ldr	r3, [r7, #4]
 808a1d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 808a1d6:	3301      	adds	r3, #1
 808a1d8:	b2da      	uxtb	r2, r3
 808a1da:	687b      	ldr	r3, [r7, #4]
 808a1dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 808a1e0:	6a3b      	ldr	r3, [r7, #32]
 808a1e2:	68db      	ldr	r3, [r3, #12]
 808a1e4:	899b      	ldrh	r3, [r3, #12]
 808a1e6:	b29b      	uxth	r3, r3
 808a1e8:	4618      	mov	r0, r3
 808a1ea:	f7f9 f979 	bl	80834e0 <lwip_htons>
 808a1ee:	4603      	mov	r3, r0
 808a1f0:	b2db      	uxtb	r3, r3
 808a1f2:	f003 0301 	and.w	r3, r3, #1
 808a1f6:	2b00      	cmp	r3, #0
 808a1f8:	d005      	beq.n	808a206 <tcp_zero_window_probe+0x72>
 808a1fa:	6a3b      	ldr	r3, [r7, #32]
 808a1fc:	891b      	ldrh	r3, [r3, #8]
 808a1fe:	2b00      	cmp	r3, #0
 808a200:	d101      	bne.n	808a206 <tcp_zero_window_probe+0x72>
 808a202:	2301      	movs	r3, #1
 808a204:	e000      	b.n	808a208 <tcp_zero_window_probe+0x74>
 808a206:	2300      	movs	r3, #0
 808a208:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 808a20a:	7ffb      	ldrb	r3, [r7, #31]
 808a20c:	2b00      	cmp	r3, #0
 808a20e:	bf0c      	ite	eq
 808a210:	2301      	moveq	r3, #1
 808a212:	2300      	movne	r3, #0
 808a214:	b2db      	uxtb	r3, r3
 808a216:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 808a218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 808a21c:	b299      	uxth	r1, r3
 808a21e:	6a3b      	ldr	r3, [r7, #32]
 808a220:	68db      	ldr	r3, [r3, #12]
 808a222:	685b      	ldr	r3, [r3, #4]
 808a224:	8bba      	ldrh	r2, [r7, #28]
 808a226:	6878      	ldr	r0, [r7, #4]
 808a228:	f7ff fdf8 	bl	8089e1c <tcp_output_alloc_header>
 808a22c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 808a22e:	69bb      	ldr	r3, [r7, #24]
 808a230:	2b00      	cmp	r3, #0
 808a232:	d102      	bne.n	808a23a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 808a234:	f04f 33ff 	mov.w	r3, #4294967295
 808a238:	e04c      	b.n	808a2d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 808a23a:	69bb      	ldr	r3, [r7, #24]
 808a23c:	685b      	ldr	r3, [r3, #4]
 808a23e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 808a240:	7ffb      	ldrb	r3, [r7, #31]
 808a242:	2b00      	cmp	r3, #0
 808a244:	d011      	beq.n	808a26a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 808a246:	697b      	ldr	r3, [r7, #20]
 808a248:	899b      	ldrh	r3, [r3, #12]
 808a24a:	b29b      	uxth	r3, r3
 808a24c:	b21b      	sxth	r3, r3
 808a24e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 808a252:	b21c      	sxth	r4, r3
 808a254:	2011      	movs	r0, #17
 808a256:	f7f9 f943 	bl	80834e0 <lwip_htons>
 808a25a:	4603      	mov	r3, r0
 808a25c:	b21b      	sxth	r3, r3
 808a25e:	4323      	orrs	r3, r4
 808a260:	b21b      	sxth	r3, r3
 808a262:	b29a      	uxth	r2, r3
 808a264:	697b      	ldr	r3, [r7, #20]
 808a266:	819a      	strh	r2, [r3, #12]
 808a268:	e010      	b.n	808a28c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 808a26a:	69bb      	ldr	r3, [r7, #24]
 808a26c:	685b      	ldr	r3, [r3, #4]
 808a26e:	3314      	adds	r3, #20
 808a270:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 808a272:	6a3b      	ldr	r3, [r7, #32]
 808a274:	6858      	ldr	r0, [r3, #4]
 808a276:	6a3b      	ldr	r3, [r7, #32]
 808a278:	685b      	ldr	r3, [r3, #4]
 808a27a:	891a      	ldrh	r2, [r3, #8]
 808a27c:	6a3b      	ldr	r3, [r7, #32]
 808a27e:	891b      	ldrh	r3, [r3, #8]
 808a280:	1ad3      	subs	r3, r2, r3
 808a282:	b29b      	uxth	r3, r3
 808a284:	2201      	movs	r2, #1
 808a286:	6939      	ldr	r1, [r7, #16]
 808a288:	f7fa fe52 	bl	8084f30 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 808a28c:	6a3b      	ldr	r3, [r7, #32]
 808a28e:	68db      	ldr	r3, [r3, #12]
 808a290:	685b      	ldr	r3, [r3, #4]
 808a292:	4618      	mov	r0, r3
 808a294:	f7f9 f939 	bl	808350a <lwip_htonl>
 808a298:	4603      	mov	r3, r0
 808a29a:	3301      	adds	r3, #1
 808a29c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 808a29e:	687b      	ldr	r3, [r7, #4]
 808a2a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 808a2a2:	68fb      	ldr	r3, [r7, #12]
 808a2a4:	1ad3      	subs	r3, r2, r3
 808a2a6:	2b00      	cmp	r3, #0
 808a2a8:	da02      	bge.n	808a2b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 808a2aa:	687b      	ldr	r3, [r7, #4]
 808a2ac:	68fa      	ldr	r2, [r7, #12]
 808a2ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 808a2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 808a2b4:	2200      	movs	r2, #0
 808a2b6:	69b9      	ldr	r1, [r7, #24]
 808a2b8:	6878      	ldr	r0, [r7, #4]
 808a2ba:	f7ff fded 	bl	8089e98 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 808a2be:	687a      	ldr	r2, [r7, #4]
 808a2c0:	687b      	ldr	r3, [r7, #4]
 808a2c2:	3304      	adds	r3, #4
 808a2c4:	69b9      	ldr	r1, [r7, #24]
 808a2c6:	6878      	ldr	r0, [r7, #4]
 808a2c8:	f7ff fe26 	bl	8089f18 <tcp_output_control_segment>
 808a2cc:	4603      	mov	r3, r0
 808a2ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 808a2d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 808a2d4:	4618      	mov	r0, r3
 808a2d6:	372c      	adds	r7, #44	; 0x2c
 808a2d8:	46bd      	mov	sp, r7
 808a2da:	bd90      	pop	{r4, r7, pc}
 808a2dc:	0808f640 	.word	0x0808f640
 808a2e0:	0808fe38 	.word	0x0808fe38
 808a2e4:	0808f694 	.word	0x0808f694

0808a2e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 808a2e8:	b580      	push	{r7, lr}
 808a2ea:	b082      	sub	sp, #8
 808a2ec:	af00      	add	r7, sp, #0
 808a2ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 808a2f0:	f7fa ff0c 	bl	808510c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 808a2f4:	4b0a      	ldr	r3, [pc, #40]	; (808a320 <tcpip_tcp_timer+0x38>)
 808a2f6:	681b      	ldr	r3, [r3, #0]
 808a2f8:	2b00      	cmp	r3, #0
 808a2fa:	d103      	bne.n	808a304 <tcpip_tcp_timer+0x1c>
 808a2fc:	4b09      	ldr	r3, [pc, #36]	; (808a324 <tcpip_tcp_timer+0x3c>)
 808a2fe:	681b      	ldr	r3, [r3, #0]
 808a300:	2b00      	cmp	r3, #0
 808a302:	d005      	beq.n	808a310 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 808a304:	2200      	movs	r2, #0
 808a306:	4908      	ldr	r1, [pc, #32]	; (808a328 <tcpip_tcp_timer+0x40>)
 808a308:	20fa      	movs	r0, #250	; 0xfa
 808a30a:	f000 f8f3 	bl	808a4f4 <sys_timeout>
 808a30e:	e003      	b.n	808a318 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 808a310:	4b06      	ldr	r3, [pc, #24]	; (808a32c <tcpip_tcp_timer+0x44>)
 808a312:	2200      	movs	r2, #0
 808a314:	601a      	str	r2, [r3, #0]
  }
}
 808a316:	bf00      	nop
 808a318:	bf00      	nop
 808a31a:	3708      	adds	r7, #8
 808a31c:	46bd      	mov	sp, r7
 808a31e:	bd80      	pop	{r7, pc}
 808a320:	20008240 	.word	0x20008240
 808a324:	20008244 	.word	0x20008244
 808a328:	0808a2e9 	.word	0x0808a2e9
 808a32c:	2000828c 	.word	0x2000828c

0808a330 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 808a330:	b580      	push	{r7, lr}
 808a332:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 808a334:	4b0a      	ldr	r3, [pc, #40]	; (808a360 <tcp_timer_needed+0x30>)
 808a336:	681b      	ldr	r3, [r3, #0]
 808a338:	2b00      	cmp	r3, #0
 808a33a:	d10f      	bne.n	808a35c <tcp_timer_needed+0x2c>
 808a33c:	4b09      	ldr	r3, [pc, #36]	; (808a364 <tcp_timer_needed+0x34>)
 808a33e:	681b      	ldr	r3, [r3, #0]
 808a340:	2b00      	cmp	r3, #0
 808a342:	d103      	bne.n	808a34c <tcp_timer_needed+0x1c>
 808a344:	4b08      	ldr	r3, [pc, #32]	; (808a368 <tcp_timer_needed+0x38>)
 808a346:	681b      	ldr	r3, [r3, #0]
 808a348:	2b00      	cmp	r3, #0
 808a34a:	d007      	beq.n	808a35c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 808a34c:	4b04      	ldr	r3, [pc, #16]	; (808a360 <tcp_timer_needed+0x30>)
 808a34e:	2201      	movs	r2, #1
 808a350:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 808a352:	2200      	movs	r2, #0
 808a354:	4905      	ldr	r1, [pc, #20]	; (808a36c <tcp_timer_needed+0x3c>)
 808a356:	20fa      	movs	r0, #250	; 0xfa
 808a358:	f000 f8cc 	bl	808a4f4 <sys_timeout>
  }
}
 808a35c:	bf00      	nop
 808a35e:	bd80      	pop	{r7, pc}
 808a360:	2000828c 	.word	0x2000828c
 808a364:	20008240 	.word	0x20008240
 808a368:	20008244 	.word	0x20008244
 808a36c:	0808a2e9 	.word	0x0808a2e9

0808a370 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 808a370:	b580      	push	{r7, lr}
 808a372:	b086      	sub	sp, #24
 808a374:	af00      	add	r7, sp, #0
 808a376:	60f8      	str	r0, [r7, #12]
 808a378:	60b9      	str	r1, [r7, #8]
 808a37a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 808a37c:	2006      	movs	r0, #6
 808a37e:	f7f9 fd27 	bl	8083dd0 <memp_malloc>
 808a382:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 808a384:	693b      	ldr	r3, [r7, #16]
 808a386:	2b00      	cmp	r3, #0
 808a388:	d109      	bne.n	808a39e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 808a38a:	693b      	ldr	r3, [r7, #16]
 808a38c:	2b00      	cmp	r3, #0
 808a38e:	d151      	bne.n	808a434 <sys_timeout_abs+0xc4>
 808a390:	4b2a      	ldr	r3, [pc, #168]	; (808a43c <sys_timeout_abs+0xcc>)
 808a392:	22be      	movs	r2, #190	; 0xbe
 808a394:	492a      	ldr	r1, [pc, #168]	; (808a440 <sys_timeout_abs+0xd0>)
 808a396:	482b      	ldr	r0, [pc, #172]	; (808a444 <sys_timeout_abs+0xd4>)
 808a398:	f002 fd9c 	bl	808ced4 <iprintf>
    return;
 808a39c:	e04a      	b.n	808a434 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 808a39e:	693b      	ldr	r3, [r7, #16]
 808a3a0:	2200      	movs	r2, #0
 808a3a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 808a3a4:	693b      	ldr	r3, [r7, #16]
 808a3a6:	68ba      	ldr	r2, [r7, #8]
 808a3a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 808a3aa:	693b      	ldr	r3, [r7, #16]
 808a3ac:	687a      	ldr	r2, [r7, #4]
 808a3ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 808a3b0:	693b      	ldr	r3, [r7, #16]
 808a3b2:	68fa      	ldr	r2, [r7, #12]
 808a3b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 808a3b6:	4b24      	ldr	r3, [pc, #144]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3b8:	681b      	ldr	r3, [r3, #0]
 808a3ba:	2b00      	cmp	r3, #0
 808a3bc:	d103      	bne.n	808a3c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 808a3be:	4a22      	ldr	r2, [pc, #136]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3c0:	693b      	ldr	r3, [r7, #16]
 808a3c2:	6013      	str	r3, [r2, #0]
    return;
 808a3c4:	e037      	b.n	808a436 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 808a3c6:	693b      	ldr	r3, [r7, #16]
 808a3c8:	685a      	ldr	r2, [r3, #4]
 808a3ca:	4b1f      	ldr	r3, [pc, #124]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3cc:	681b      	ldr	r3, [r3, #0]
 808a3ce:	685b      	ldr	r3, [r3, #4]
 808a3d0:	1ad3      	subs	r3, r2, r3
 808a3d2:	0fdb      	lsrs	r3, r3, #31
 808a3d4:	f003 0301 	and.w	r3, r3, #1
 808a3d8:	b2db      	uxtb	r3, r3
 808a3da:	2b00      	cmp	r3, #0
 808a3dc:	d007      	beq.n	808a3ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 808a3de:	4b1a      	ldr	r3, [pc, #104]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3e0:	681a      	ldr	r2, [r3, #0]
 808a3e2:	693b      	ldr	r3, [r7, #16]
 808a3e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 808a3e6:	4a18      	ldr	r2, [pc, #96]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3e8:	693b      	ldr	r3, [r7, #16]
 808a3ea:	6013      	str	r3, [r2, #0]
 808a3ec:	e023      	b.n	808a436 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 808a3ee:	4b16      	ldr	r3, [pc, #88]	; (808a448 <sys_timeout_abs+0xd8>)
 808a3f0:	681b      	ldr	r3, [r3, #0]
 808a3f2:	617b      	str	r3, [r7, #20]
 808a3f4:	e01a      	b.n	808a42c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 808a3f6:	697b      	ldr	r3, [r7, #20]
 808a3f8:	681b      	ldr	r3, [r3, #0]
 808a3fa:	2b00      	cmp	r3, #0
 808a3fc:	d00b      	beq.n	808a416 <sys_timeout_abs+0xa6>
 808a3fe:	693b      	ldr	r3, [r7, #16]
 808a400:	685a      	ldr	r2, [r3, #4]
 808a402:	697b      	ldr	r3, [r7, #20]
 808a404:	681b      	ldr	r3, [r3, #0]
 808a406:	685b      	ldr	r3, [r3, #4]
 808a408:	1ad3      	subs	r3, r2, r3
 808a40a:	0fdb      	lsrs	r3, r3, #31
 808a40c:	f003 0301 	and.w	r3, r3, #1
 808a410:	b2db      	uxtb	r3, r3
 808a412:	2b00      	cmp	r3, #0
 808a414:	d007      	beq.n	808a426 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 808a416:	697b      	ldr	r3, [r7, #20]
 808a418:	681a      	ldr	r2, [r3, #0]
 808a41a:	693b      	ldr	r3, [r7, #16]
 808a41c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 808a41e:	697b      	ldr	r3, [r7, #20]
 808a420:	693a      	ldr	r2, [r7, #16]
 808a422:	601a      	str	r2, [r3, #0]
        break;
 808a424:	e007      	b.n	808a436 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 808a426:	697b      	ldr	r3, [r7, #20]
 808a428:	681b      	ldr	r3, [r3, #0]
 808a42a:	617b      	str	r3, [r7, #20]
 808a42c:	697b      	ldr	r3, [r7, #20]
 808a42e:	2b00      	cmp	r3, #0
 808a430:	d1e1      	bne.n	808a3f6 <sys_timeout_abs+0x86>
 808a432:	e000      	b.n	808a436 <sys_timeout_abs+0xc6>
    return;
 808a434:	bf00      	nop
      }
    }
  }
}
 808a436:	3718      	adds	r7, #24
 808a438:	46bd      	mov	sp, r7
 808a43a:	bd80      	pop	{r7, pc}
 808a43c:	0808fe5c 	.word	0x0808fe5c
 808a440:	0808fe90 	.word	0x0808fe90
 808a444:	0808fed0 	.word	0x0808fed0
 808a448:	20008284 	.word	0x20008284

0808a44c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 808a44c:	b580      	push	{r7, lr}
 808a44e:	b086      	sub	sp, #24
 808a450:	af00      	add	r7, sp, #0
 808a452:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 808a454:	687b      	ldr	r3, [r7, #4]
 808a456:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 808a458:	697b      	ldr	r3, [r7, #20]
 808a45a:	685b      	ldr	r3, [r3, #4]
 808a45c:	4798      	blx	r3

  now = sys_now();
 808a45e:	f7f8 fe67 	bl	8083130 <sys_now>
 808a462:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 808a464:	697b      	ldr	r3, [r7, #20]
 808a466:	681a      	ldr	r2, [r3, #0]
 808a468:	4b0f      	ldr	r3, [pc, #60]	; (808a4a8 <lwip_cyclic_timer+0x5c>)
 808a46a:	681b      	ldr	r3, [r3, #0]
 808a46c:	4413      	add	r3, r2
 808a46e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 808a470:	68fa      	ldr	r2, [r7, #12]
 808a472:	693b      	ldr	r3, [r7, #16]
 808a474:	1ad3      	subs	r3, r2, r3
 808a476:	0fdb      	lsrs	r3, r3, #31
 808a478:	f003 0301 	and.w	r3, r3, #1
 808a47c:	b2db      	uxtb	r3, r3
 808a47e:	2b00      	cmp	r3, #0
 808a480:	d009      	beq.n	808a496 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 808a482:	697b      	ldr	r3, [r7, #20]
 808a484:	681a      	ldr	r2, [r3, #0]
 808a486:	693b      	ldr	r3, [r7, #16]
 808a488:	4413      	add	r3, r2
 808a48a:	687a      	ldr	r2, [r7, #4]
 808a48c:	4907      	ldr	r1, [pc, #28]	; (808a4ac <lwip_cyclic_timer+0x60>)
 808a48e:	4618      	mov	r0, r3
 808a490:	f7ff ff6e 	bl	808a370 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 808a494:	e004      	b.n	808a4a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 808a496:	687a      	ldr	r2, [r7, #4]
 808a498:	4904      	ldr	r1, [pc, #16]	; (808a4ac <lwip_cyclic_timer+0x60>)
 808a49a:	68f8      	ldr	r0, [r7, #12]
 808a49c:	f7ff ff68 	bl	808a370 <sys_timeout_abs>
}
 808a4a0:	bf00      	nop
 808a4a2:	3718      	adds	r7, #24
 808a4a4:	46bd      	mov	sp, r7
 808a4a6:	bd80      	pop	{r7, pc}
 808a4a8:	20008288 	.word	0x20008288
 808a4ac:	0808a44d 	.word	0x0808a44d

0808a4b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 808a4b0:	b580      	push	{r7, lr}
 808a4b2:	b082      	sub	sp, #8
 808a4b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 808a4b6:	2301      	movs	r3, #1
 808a4b8:	607b      	str	r3, [r7, #4]
 808a4ba:	e00e      	b.n	808a4da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 808a4bc:	4a0b      	ldr	r2, [pc, #44]	; (808a4ec <sys_timeouts_init+0x3c>)
 808a4be:	687b      	ldr	r3, [r7, #4]
 808a4c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 808a4c4:	687b      	ldr	r3, [r7, #4]
 808a4c6:	00db      	lsls	r3, r3, #3
 808a4c8:	4a08      	ldr	r2, [pc, #32]	; (808a4ec <sys_timeouts_init+0x3c>)
 808a4ca:	4413      	add	r3, r2
 808a4cc:	461a      	mov	r2, r3
 808a4ce:	4908      	ldr	r1, [pc, #32]	; (808a4f0 <sys_timeouts_init+0x40>)
 808a4d0:	f000 f810 	bl	808a4f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 808a4d4:	687b      	ldr	r3, [r7, #4]
 808a4d6:	3301      	adds	r3, #1
 808a4d8:	607b      	str	r3, [r7, #4]
 808a4da:	687b      	ldr	r3, [r7, #4]
 808a4dc:	2b02      	cmp	r3, #2
 808a4de:	d9ed      	bls.n	808a4bc <sys_timeouts_init+0xc>
  }
}
 808a4e0:	bf00      	nop
 808a4e2:	bf00      	nop
 808a4e4:	3708      	adds	r7, #8
 808a4e6:	46bd      	mov	sp, r7
 808a4e8:	bd80      	pop	{r7, pc}
 808a4ea:	bf00      	nop
 808a4ec:	08090a40 	.word	0x08090a40
 808a4f0:	0808a44d 	.word	0x0808a44d

0808a4f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 808a4f4:	b580      	push	{r7, lr}
 808a4f6:	b086      	sub	sp, #24
 808a4f8:	af00      	add	r7, sp, #0
 808a4fa:	60f8      	str	r0, [r7, #12]
 808a4fc:	60b9      	str	r1, [r7, #8]
 808a4fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 808a500:	68fb      	ldr	r3, [r7, #12]
 808a502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 808a506:	d306      	bcc.n	808a516 <sys_timeout+0x22>
 808a508:	4b0a      	ldr	r3, [pc, #40]	; (808a534 <sys_timeout+0x40>)
 808a50a:	f240 1229 	movw	r2, #297	; 0x129
 808a50e:	490a      	ldr	r1, [pc, #40]	; (808a538 <sys_timeout+0x44>)
 808a510:	480a      	ldr	r0, [pc, #40]	; (808a53c <sys_timeout+0x48>)
 808a512:	f002 fcdf 	bl	808ced4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 808a516:	f7f8 fe0b 	bl	8083130 <sys_now>
 808a51a:	4602      	mov	r2, r0
 808a51c:	68fb      	ldr	r3, [r7, #12]
 808a51e:	4413      	add	r3, r2
 808a520:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 808a522:	687a      	ldr	r2, [r7, #4]
 808a524:	68b9      	ldr	r1, [r7, #8]
 808a526:	6978      	ldr	r0, [r7, #20]
 808a528:	f7ff ff22 	bl	808a370 <sys_timeout_abs>
#endif
}
 808a52c:	bf00      	nop
 808a52e:	3718      	adds	r7, #24
 808a530:	46bd      	mov	sp, r7
 808a532:	bd80      	pop	{r7, pc}
 808a534:	0808fe5c 	.word	0x0808fe5c
 808a538:	0808fef8 	.word	0x0808fef8
 808a53c:	0808fed0 	.word	0x0808fed0

0808a540 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 808a540:	b580      	push	{r7, lr}
 808a542:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 808a544:	f002 fcde 	bl	808cf04 <rand>
 808a548:	4603      	mov	r3, r0
 808a54a:	b29b      	uxth	r3, r3
 808a54c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 808a550:	b29b      	uxth	r3, r3
 808a552:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 808a556:	b29a      	uxth	r2, r3
 808a558:	4b01      	ldr	r3, [pc, #4]	; (808a560 <udp_init+0x20>)
 808a55a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 808a55c:	bf00      	nop
 808a55e:	bd80      	pop	{r7, pc}
 808a560:	20000028 	.word	0x20000028

0808a564 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 808a564:	b580      	push	{r7, lr}
 808a566:	b084      	sub	sp, #16
 808a568:	af00      	add	r7, sp, #0
 808a56a:	60f8      	str	r0, [r7, #12]
 808a56c:	60b9      	str	r1, [r7, #8]
 808a56e:	4613      	mov	r3, r2
 808a570:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 808a572:	68fb      	ldr	r3, [r7, #12]
 808a574:	2b00      	cmp	r3, #0
 808a576:	d105      	bne.n	808a584 <udp_input_local_match+0x20>
 808a578:	4b27      	ldr	r3, [pc, #156]	; (808a618 <udp_input_local_match+0xb4>)
 808a57a:	2287      	movs	r2, #135	; 0x87
 808a57c:	4927      	ldr	r1, [pc, #156]	; (808a61c <udp_input_local_match+0xb8>)
 808a57e:	4828      	ldr	r0, [pc, #160]	; (808a620 <udp_input_local_match+0xbc>)
 808a580:	f002 fca8 	bl	808ced4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 808a584:	68bb      	ldr	r3, [r7, #8]
 808a586:	2b00      	cmp	r3, #0
 808a588:	d105      	bne.n	808a596 <udp_input_local_match+0x32>
 808a58a:	4b23      	ldr	r3, [pc, #140]	; (808a618 <udp_input_local_match+0xb4>)
 808a58c:	2288      	movs	r2, #136	; 0x88
 808a58e:	4925      	ldr	r1, [pc, #148]	; (808a624 <udp_input_local_match+0xc0>)
 808a590:	4823      	ldr	r0, [pc, #140]	; (808a620 <udp_input_local_match+0xbc>)
 808a592:	f002 fc9f 	bl	808ced4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 808a596:	68fb      	ldr	r3, [r7, #12]
 808a598:	7a1b      	ldrb	r3, [r3, #8]
 808a59a:	2b00      	cmp	r3, #0
 808a59c:	d00b      	beq.n	808a5b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 808a59e:	68fb      	ldr	r3, [r7, #12]
 808a5a0:	7a1a      	ldrb	r2, [r3, #8]
 808a5a2:	4b21      	ldr	r3, [pc, #132]	; (808a628 <udp_input_local_match+0xc4>)
 808a5a4:	685b      	ldr	r3, [r3, #4]
 808a5a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 808a5aa:	3301      	adds	r3, #1
 808a5ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 808a5ae:	429a      	cmp	r2, r3
 808a5b0:	d001      	beq.n	808a5b6 <udp_input_local_match+0x52>
    return 0;
 808a5b2:	2300      	movs	r3, #0
 808a5b4:	e02b      	b.n	808a60e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 808a5b6:	79fb      	ldrb	r3, [r7, #7]
 808a5b8:	2b00      	cmp	r3, #0
 808a5ba:	d018      	beq.n	808a5ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 808a5bc:	68fb      	ldr	r3, [r7, #12]
 808a5be:	2b00      	cmp	r3, #0
 808a5c0:	d013      	beq.n	808a5ea <udp_input_local_match+0x86>
 808a5c2:	68fb      	ldr	r3, [r7, #12]
 808a5c4:	681b      	ldr	r3, [r3, #0]
 808a5c6:	2b00      	cmp	r3, #0
 808a5c8:	d00f      	beq.n	808a5ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 808a5ca:	4b17      	ldr	r3, [pc, #92]	; (808a628 <udp_input_local_match+0xc4>)
 808a5cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 808a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 808a5d2:	d00a      	beq.n	808a5ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 808a5d4:	68fb      	ldr	r3, [r7, #12]
 808a5d6:	681a      	ldr	r2, [r3, #0]
 808a5d8:	4b13      	ldr	r3, [pc, #76]	; (808a628 <udp_input_local_match+0xc4>)
 808a5da:	695b      	ldr	r3, [r3, #20]
 808a5dc:	405a      	eors	r2, r3
 808a5de:	68bb      	ldr	r3, [r7, #8]
 808a5e0:	3308      	adds	r3, #8
 808a5e2:	681b      	ldr	r3, [r3, #0]
 808a5e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 808a5e6:	2b00      	cmp	r3, #0
 808a5e8:	d110      	bne.n	808a60c <udp_input_local_match+0xa8>
          return 1;
 808a5ea:	2301      	movs	r3, #1
 808a5ec:	e00f      	b.n	808a60e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 808a5ee:	68fb      	ldr	r3, [r7, #12]
 808a5f0:	2b00      	cmp	r3, #0
 808a5f2:	d009      	beq.n	808a608 <udp_input_local_match+0xa4>
 808a5f4:	68fb      	ldr	r3, [r7, #12]
 808a5f6:	681b      	ldr	r3, [r3, #0]
 808a5f8:	2b00      	cmp	r3, #0
 808a5fa:	d005      	beq.n	808a608 <udp_input_local_match+0xa4>
 808a5fc:	68fb      	ldr	r3, [r7, #12]
 808a5fe:	681a      	ldr	r2, [r3, #0]
 808a600:	4b09      	ldr	r3, [pc, #36]	; (808a628 <udp_input_local_match+0xc4>)
 808a602:	695b      	ldr	r3, [r3, #20]
 808a604:	429a      	cmp	r2, r3
 808a606:	d101      	bne.n	808a60c <udp_input_local_match+0xa8>
        return 1;
 808a608:	2301      	movs	r3, #1
 808a60a:	e000      	b.n	808a60e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 808a60c:	2300      	movs	r3, #0
}
 808a60e:	4618      	mov	r0, r3
 808a610:	3710      	adds	r7, #16
 808a612:	46bd      	mov	sp, r7
 808a614:	bd80      	pop	{r7, pc}
 808a616:	bf00      	nop
 808a618:	0808ff44 	.word	0x0808ff44
 808a61c:	0808ff74 	.word	0x0808ff74
 808a620:	0808ff98 	.word	0x0808ff98
 808a624:	0808ffc0 	.word	0x0808ffc0
 808a628:	20004cc4 	.word	0x20004cc4

0808a62c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 808a62c:	b590      	push	{r4, r7, lr}
 808a62e:	b08d      	sub	sp, #52	; 0x34
 808a630:	af02      	add	r7, sp, #8
 808a632:	6078      	str	r0, [r7, #4]
 808a634:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 808a636:	2300      	movs	r3, #0
 808a638:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 808a63a:	687b      	ldr	r3, [r7, #4]
 808a63c:	2b00      	cmp	r3, #0
 808a63e:	d105      	bne.n	808a64c <udp_input+0x20>
 808a640:	4b7c      	ldr	r3, [pc, #496]	; (808a834 <udp_input+0x208>)
 808a642:	22cf      	movs	r2, #207	; 0xcf
 808a644:	497c      	ldr	r1, [pc, #496]	; (808a838 <udp_input+0x20c>)
 808a646:	487d      	ldr	r0, [pc, #500]	; (808a83c <udp_input+0x210>)
 808a648:	f002 fc44 	bl	808ced4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 808a64c:	683b      	ldr	r3, [r7, #0]
 808a64e:	2b00      	cmp	r3, #0
 808a650:	d105      	bne.n	808a65e <udp_input+0x32>
 808a652:	4b78      	ldr	r3, [pc, #480]	; (808a834 <udp_input+0x208>)
 808a654:	22d0      	movs	r2, #208	; 0xd0
 808a656:	497a      	ldr	r1, [pc, #488]	; (808a840 <udp_input+0x214>)
 808a658:	4878      	ldr	r0, [pc, #480]	; (808a83c <udp_input+0x210>)
 808a65a:	f002 fc3b 	bl	808ced4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 808a65e:	687b      	ldr	r3, [r7, #4]
 808a660:	895b      	ldrh	r3, [r3, #10]
 808a662:	2b07      	cmp	r3, #7
 808a664:	d803      	bhi.n	808a66e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 808a666:	6878      	ldr	r0, [r7, #4]
 808a668:	f7fa fa78 	bl	8084b5c <pbuf_free>
    goto end;
 808a66c:	e0de      	b.n	808a82c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 808a66e:	687b      	ldr	r3, [r7, #4]
 808a670:	685b      	ldr	r3, [r3, #4]
 808a672:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 808a674:	4b73      	ldr	r3, [pc, #460]	; (808a844 <udp_input+0x218>)
 808a676:	695b      	ldr	r3, [r3, #20]
 808a678:	4a72      	ldr	r2, [pc, #456]	; (808a844 <udp_input+0x218>)
 808a67a:	6812      	ldr	r2, [r2, #0]
 808a67c:	4611      	mov	r1, r2
 808a67e:	4618      	mov	r0, r3
 808a680:	f001 fc88 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808a684:	4603      	mov	r3, r0
 808a686:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 808a688:	697b      	ldr	r3, [r7, #20]
 808a68a:	881b      	ldrh	r3, [r3, #0]
 808a68c:	b29b      	uxth	r3, r3
 808a68e:	4618      	mov	r0, r3
 808a690:	f7f8 ff26 	bl	80834e0 <lwip_htons>
 808a694:	4603      	mov	r3, r0
 808a696:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 808a698:	697b      	ldr	r3, [r7, #20]
 808a69a:	885b      	ldrh	r3, [r3, #2]
 808a69c:	b29b      	uxth	r3, r3
 808a69e:	4618      	mov	r0, r3
 808a6a0:	f7f8 ff1e 	bl	80834e0 <lwip_htons>
 808a6a4:	4603      	mov	r3, r0
 808a6a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 808a6a8:	2300      	movs	r3, #0
 808a6aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 808a6ac:	2300      	movs	r3, #0
 808a6ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 808a6b0:	2300      	movs	r3, #0
 808a6b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 808a6b4:	4b64      	ldr	r3, [pc, #400]	; (808a848 <udp_input+0x21c>)
 808a6b6:	681b      	ldr	r3, [r3, #0]
 808a6b8:	627b      	str	r3, [r7, #36]	; 0x24
 808a6ba:	e054      	b.n	808a766 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 808a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a6be:	8a5b      	ldrh	r3, [r3, #18]
 808a6c0:	89fa      	ldrh	r2, [r7, #14]
 808a6c2:	429a      	cmp	r2, r3
 808a6c4:	d14a      	bne.n	808a75c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 808a6c6:	7cfb      	ldrb	r3, [r7, #19]
 808a6c8:	461a      	mov	r2, r3
 808a6ca:	6839      	ldr	r1, [r7, #0]
 808a6cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808a6ce:	f7ff ff49 	bl	808a564 <udp_input_local_match>
 808a6d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 808a6d4:	2b00      	cmp	r3, #0
 808a6d6:	d041      	beq.n	808a75c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 808a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a6da:	7c1b      	ldrb	r3, [r3, #16]
 808a6dc:	f003 0304 	and.w	r3, r3, #4
 808a6e0:	2b00      	cmp	r3, #0
 808a6e2:	d11d      	bne.n	808a720 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 808a6e4:	69fb      	ldr	r3, [r7, #28]
 808a6e6:	2b00      	cmp	r3, #0
 808a6e8:	d102      	bne.n	808a6f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 808a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a6ec:	61fb      	str	r3, [r7, #28]
 808a6ee:	e017      	b.n	808a720 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 808a6f0:	7cfb      	ldrb	r3, [r7, #19]
 808a6f2:	2b00      	cmp	r3, #0
 808a6f4:	d014      	beq.n	808a720 <udp_input+0xf4>
 808a6f6:	4b53      	ldr	r3, [pc, #332]	; (808a844 <udp_input+0x218>)
 808a6f8:	695b      	ldr	r3, [r3, #20]
 808a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 808a6fe:	d10f      	bne.n	808a720 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 808a700:	69fb      	ldr	r3, [r7, #28]
 808a702:	681a      	ldr	r2, [r3, #0]
 808a704:	683b      	ldr	r3, [r7, #0]
 808a706:	3304      	adds	r3, #4
 808a708:	681b      	ldr	r3, [r3, #0]
 808a70a:	429a      	cmp	r2, r3
 808a70c:	d008      	beq.n	808a720 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 808a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a710:	681a      	ldr	r2, [r3, #0]
 808a712:	683b      	ldr	r3, [r7, #0]
 808a714:	3304      	adds	r3, #4
 808a716:	681b      	ldr	r3, [r3, #0]
 808a718:	429a      	cmp	r2, r3
 808a71a:	d101      	bne.n	808a720 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 808a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a71e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 808a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a722:	8a9b      	ldrh	r3, [r3, #20]
 808a724:	8a3a      	ldrh	r2, [r7, #16]
 808a726:	429a      	cmp	r2, r3
 808a728:	d118      	bne.n	808a75c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 808a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a72c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 808a72e:	2b00      	cmp	r3, #0
 808a730:	d005      	beq.n	808a73e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 808a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a734:	685a      	ldr	r2, [r3, #4]
 808a736:	4b43      	ldr	r3, [pc, #268]	; (808a844 <udp_input+0x218>)
 808a738:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 808a73a:	429a      	cmp	r2, r3
 808a73c:	d10e      	bne.n	808a75c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 808a73e:	6a3b      	ldr	r3, [r7, #32]
 808a740:	2b00      	cmp	r3, #0
 808a742:	d014      	beq.n	808a76e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 808a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a746:	68da      	ldr	r2, [r3, #12]
 808a748:	6a3b      	ldr	r3, [r7, #32]
 808a74a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 808a74c:	4b3e      	ldr	r3, [pc, #248]	; (808a848 <udp_input+0x21c>)
 808a74e:	681a      	ldr	r2, [r3, #0]
 808a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a752:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 808a754:	4a3c      	ldr	r2, [pc, #240]	; (808a848 <udp_input+0x21c>)
 808a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a758:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 808a75a:	e008      	b.n	808a76e <udp_input+0x142>
      }
    }

    prev = pcb;
 808a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a75e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 808a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a762:	68db      	ldr	r3, [r3, #12]
 808a764:	627b      	str	r3, [r7, #36]	; 0x24
 808a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a768:	2b00      	cmp	r3, #0
 808a76a:	d1a7      	bne.n	808a6bc <udp_input+0x90>
 808a76c:	e000      	b.n	808a770 <udp_input+0x144>
        break;
 808a76e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 808a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a772:	2b00      	cmp	r3, #0
 808a774:	d101      	bne.n	808a77a <udp_input+0x14e>
    pcb = uncon_pcb;
 808a776:	69fb      	ldr	r3, [r7, #28]
 808a778:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 808a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a77c:	2b00      	cmp	r3, #0
 808a77e:	d002      	beq.n	808a786 <udp_input+0x15a>
    for_us = 1;
 808a780:	2301      	movs	r3, #1
 808a782:	76fb      	strb	r3, [r7, #27]
 808a784:	e00a      	b.n	808a79c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 808a786:	683b      	ldr	r3, [r7, #0]
 808a788:	3304      	adds	r3, #4
 808a78a:	681a      	ldr	r2, [r3, #0]
 808a78c:	4b2d      	ldr	r3, [pc, #180]	; (808a844 <udp_input+0x218>)
 808a78e:	695b      	ldr	r3, [r3, #20]
 808a790:	429a      	cmp	r2, r3
 808a792:	bf0c      	ite	eq
 808a794:	2301      	moveq	r3, #1
 808a796:	2300      	movne	r3, #0
 808a798:	b2db      	uxtb	r3, r3
 808a79a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 808a79c:	7efb      	ldrb	r3, [r7, #27]
 808a79e:	2b00      	cmp	r3, #0
 808a7a0:	d041      	beq.n	808a826 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 808a7a2:	2108      	movs	r1, #8
 808a7a4:	6878      	ldr	r0, [r7, #4]
 808a7a6:	f7fa f953 	bl	8084a50 <pbuf_remove_header>
 808a7aa:	4603      	mov	r3, r0
 808a7ac:	2b00      	cmp	r3, #0
 808a7ae:	d00a      	beq.n	808a7c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 808a7b0:	4b20      	ldr	r3, [pc, #128]	; (808a834 <udp_input+0x208>)
 808a7b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 808a7b6:	4925      	ldr	r1, [pc, #148]	; (808a84c <udp_input+0x220>)
 808a7b8:	4820      	ldr	r0, [pc, #128]	; (808a83c <udp_input+0x210>)
 808a7ba:	f002 fb8b 	bl	808ced4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 808a7be:	6878      	ldr	r0, [r7, #4]
 808a7c0:	f7fa f9cc 	bl	8084b5c <pbuf_free>
      goto end;
 808a7c4:	e032      	b.n	808a82c <udp_input+0x200>
    }

    if (pcb != NULL) {
 808a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a7c8:	2b00      	cmp	r3, #0
 808a7ca:	d012      	beq.n	808a7f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 808a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a7ce:	699b      	ldr	r3, [r3, #24]
 808a7d0:	2b00      	cmp	r3, #0
 808a7d2:	d00a      	beq.n	808a7ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 808a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a7d6:	699c      	ldr	r4, [r3, #24]
 808a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808a7da:	69d8      	ldr	r0, [r3, #28]
 808a7dc:	8a3b      	ldrh	r3, [r7, #16]
 808a7de:	9300      	str	r3, [sp, #0]
 808a7e0:	4b1b      	ldr	r3, [pc, #108]	; (808a850 <udp_input+0x224>)
 808a7e2:	687a      	ldr	r2, [r7, #4]
 808a7e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 808a7e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 808a7e8:	e021      	b.n	808a82e <udp_input+0x202>
        pbuf_free(p);
 808a7ea:	6878      	ldr	r0, [r7, #4]
 808a7ec:	f7fa f9b6 	bl	8084b5c <pbuf_free>
        goto end;
 808a7f0:	e01c      	b.n	808a82c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 808a7f2:	7cfb      	ldrb	r3, [r7, #19]
 808a7f4:	2b00      	cmp	r3, #0
 808a7f6:	d112      	bne.n	808a81e <udp_input+0x1f2>
 808a7f8:	4b12      	ldr	r3, [pc, #72]	; (808a844 <udp_input+0x218>)
 808a7fa:	695b      	ldr	r3, [r3, #20]
 808a7fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808a800:	2be0      	cmp	r3, #224	; 0xe0
 808a802:	d00c      	beq.n	808a81e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 808a804:	4b0f      	ldr	r3, [pc, #60]	; (808a844 <udp_input+0x218>)
 808a806:	899b      	ldrh	r3, [r3, #12]
 808a808:	3308      	adds	r3, #8
 808a80a:	b29b      	uxth	r3, r3
 808a80c:	b21b      	sxth	r3, r3
 808a80e:	4619      	mov	r1, r3
 808a810:	6878      	ldr	r0, [r7, #4]
 808a812:	f7fa f990 	bl	8084b36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 808a816:	2103      	movs	r1, #3
 808a818:	6878      	ldr	r0, [r7, #4]
 808a81a:	f001 f89b 	bl	808b954 <icmp_dest_unreach>
      pbuf_free(p);
 808a81e:	6878      	ldr	r0, [r7, #4]
 808a820:	f7fa f99c 	bl	8084b5c <pbuf_free>
  return;
 808a824:	e003      	b.n	808a82e <udp_input+0x202>
    pbuf_free(p);
 808a826:	6878      	ldr	r0, [r7, #4]
 808a828:	f7fa f998 	bl	8084b5c <pbuf_free>
  return;
 808a82c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 808a82e:	372c      	adds	r7, #44	; 0x2c
 808a830:	46bd      	mov	sp, r7
 808a832:	bd90      	pop	{r4, r7, pc}
 808a834:	0808ff44 	.word	0x0808ff44
 808a838:	0808ffe8 	.word	0x0808ffe8
 808a83c:	0808ff98 	.word	0x0808ff98
 808a840:	08090000 	.word	0x08090000
 808a844:	20004cc4 	.word	0x20004cc4
 808a848:	20008290 	.word	0x20008290
 808a84c:	0809001c 	.word	0x0809001c
 808a850:	20004cd4 	.word	0x20004cd4

0808a854 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 808a854:	b480      	push	{r7}
 808a856:	b085      	sub	sp, #20
 808a858:	af00      	add	r7, sp, #0
 808a85a:	6078      	str	r0, [r7, #4]
 808a85c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 808a85e:	687b      	ldr	r3, [r7, #4]
 808a860:	2b00      	cmp	r3, #0
 808a862:	d01e      	beq.n	808a8a2 <udp_netif_ip_addr_changed+0x4e>
 808a864:	687b      	ldr	r3, [r7, #4]
 808a866:	681b      	ldr	r3, [r3, #0]
 808a868:	2b00      	cmp	r3, #0
 808a86a:	d01a      	beq.n	808a8a2 <udp_netif_ip_addr_changed+0x4e>
 808a86c:	683b      	ldr	r3, [r7, #0]
 808a86e:	2b00      	cmp	r3, #0
 808a870:	d017      	beq.n	808a8a2 <udp_netif_ip_addr_changed+0x4e>
 808a872:	683b      	ldr	r3, [r7, #0]
 808a874:	681b      	ldr	r3, [r3, #0]
 808a876:	2b00      	cmp	r3, #0
 808a878:	d013      	beq.n	808a8a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 808a87a:	4b0d      	ldr	r3, [pc, #52]	; (808a8b0 <udp_netif_ip_addr_changed+0x5c>)
 808a87c:	681b      	ldr	r3, [r3, #0]
 808a87e:	60fb      	str	r3, [r7, #12]
 808a880:	e00c      	b.n	808a89c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 808a882:	68fb      	ldr	r3, [r7, #12]
 808a884:	681a      	ldr	r2, [r3, #0]
 808a886:	687b      	ldr	r3, [r7, #4]
 808a888:	681b      	ldr	r3, [r3, #0]
 808a88a:	429a      	cmp	r2, r3
 808a88c:	d103      	bne.n	808a896 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 808a88e:	683b      	ldr	r3, [r7, #0]
 808a890:	681a      	ldr	r2, [r3, #0]
 808a892:	68fb      	ldr	r3, [r7, #12]
 808a894:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 808a896:	68fb      	ldr	r3, [r7, #12]
 808a898:	68db      	ldr	r3, [r3, #12]
 808a89a:	60fb      	str	r3, [r7, #12]
 808a89c:	68fb      	ldr	r3, [r7, #12]
 808a89e:	2b00      	cmp	r3, #0
 808a8a0:	d1ef      	bne.n	808a882 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 808a8a2:	bf00      	nop
 808a8a4:	3714      	adds	r7, #20
 808a8a6:	46bd      	mov	sp, r7
 808a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a8ac:	4770      	bx	lr
 808a8ae:	bf00      	nop
 808a8b0:	20008290 	.word	0x20008290

0808a8b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 808a8b4:	b580      	push	{r7, lr}
 808a8b6:	b082      	sub	sp, #8
 808a8b8:	af00      	add	r7, sp, #0
 808a8ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 808a8bc:	4915      	ldr	r1, [pc, #84]	; (808a914 <etharp_free_entry+0x60>)
 808a8be:	687a      	ldr	r2, [r7, #4]
 808a8c0:	4613      	mov	r3, r2
 808a8c2:	005b      	lsls	r3, r3, #1
 808a8c4:	4413      	add	r3, r2
 808a8c6:	00db      	lsls	r3, r3, #3
 808a8c8:	440b      	add	r3, r1
 808a8ca:	681b      	ldr	r3, [r3, #0]
 808a8cc:	2b00      	cmp	r3, #0
 808a8ce:	d013      	beq.n	808a8f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 808a8d0:	4910      	ldr	r1, [pc, #64]	; (808a914 <etharp_free_entry+0x60>)
 808a8d2:	687a      	ldr	r2, [r7, #4]
 808a8d4:	4613      	mov	r3, r2
 808a8d6:	005b      	lsls	r3, r3, #1
 808a8d8:	4413      	add	r3, r2
 808a8da:	00db      	lsls	r3, r3, #3
 808a8dc:	440b      	add	r3, r1
 808a8de:	681b      	ldr	r3, [r3, #0]
 808a8e0:	4618      	mov	r0, r3
 808a8e2:	f7fa f93b 	bl	8084b5c <pbuf_free>
    arp_table[i].q = NULL;
 808a8e6:	490b      	ldr	r1, [pc, #44]	; (808a914 <etharp_free_entry+0x60>)
 808a8e8:	687a      	ldr	r2, [r7, #4]
 808a8ea:	4613      	mov	r3, r2
 808a8ec:	005b      	lsls	r3, r3, #1
 808a8ee:	4413      	add	r3, r2
 808a8f0:	00db      	lsls	r3, r3, #3
 808a8f2:	440b      	add	r3, r1
 808a8f4:	2200      	movs	r2, #0
 808a8f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 808a8f8:	4906      	ldr	r1, [pc, #24]	; (808a914 <etharp_free_entry+0x60>)
 808a8fa:	687a      	ldr	r2, [r7, #4]
 808a8fc:	4613      	mov	r3, r2
 808a8fe:	005b      	lsls	r3, r3, #1
 808a900:	4413      	add	r3, r2
 808a902:	00db      	lsls	r3, r3, #3
 808a904:	440b      	add	r3, r1
 808a906:	3314      	adds	r3, #20
 808a908:	2200      	movs	r2, #0
 808a90a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 808a90c:	bf00      	nop
 808a90e:	3708      	adds	r7, #8
 808a910:	46bd      	mov	sp, r7
 808a912:	bd80      	pop	{r7, pc}
 808a914:	20008294 	.word	0x20008294

0808a918 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 808a918:	b580      	push	{r7, lr}
 808a91a:	b082      	sub	sp, #8
 808a91c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808a91e:	2300      	movs	r3, #0
 808a920:	607b      	str	r3, [r7, #4]
 808a922:	e096      	b.n	808aa52 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 808a924:	494f      	ldr	r1, [pc, #316]	; (808aa64 <etharp_tmr+0x14c>)
 808a926:	687a      	ldr	r2, [r7, #4]
 808a928:	4613      	mov	r3, r2
 808a92a:	005b      	lsls	r3, r3, #1
 808a92c:	4413      	add	r3, r2
 808a92e:	00db      	lsls	r3, r3, #3
 808a930:	440b      	add	r3, r1
 808a932:	3314      	adds	r3, #20
 808a934:	781b      	ldrb	r3, [r3, #0]
 808a936:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 808a938:	78fb      	ldrb	r3, [r7, #3]
 808a93a:	2b00      	cmp	r3, #0
 808a93c:	f000 8086 	beq.w	808aa4c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 808a940:	4948      	ldr	r1, [pc, #288]	; (808aa64 <etharp_tmr+0x14c>)
 808a942:	687a      	ldr	r2, [r7, #4]
 808a944:	4613      	mov	r3, r2
 808a946:	005b      	lsls	r3, r3, #1
 808a948:	4413      	add	r3, r2
 808a94a:	00db      	lsls	r3, r3, #3
 808a94c:	440b      	add	r3, r1
 808a94e:	3312      	adds	r3, #18
 808a950:	881b      	ldrh	r3, [r3, #0]
 808a952:	3301      	adds	r3, #1
 808a954:	b298      	uxth	r0, r3
 808a956:	4943      	ldr	r1, [pc, #268]	; (808aa64 <etharp_tmr+0x14c>)
 808a958:	687a      	ldr	r2, [r7, #4]
 808a95a:	4613      	mov	r3, r2
 808a95c:	005b      	lsls	r3, r3, #1
 808a95e:	4413      	add	r3, r2
 808a960:	00db      	lsls	r3, r3, #3
 808a962:	440b      	add	r3, r1
 808a964:	3312      	adds	r3, #18
 808a966:	4602      	mov	r2, r0
 808a968:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 808a96a:	493e      	ldr	r1, [pc, #248]	; (808aa64 <etharp_tmr+0x14c>)
 808a96c:	687a      	ldr	r2, [r7, #4]
 808a96e:	4613      	mov	r3, r2
 808a970:	005b      	lsls	r3, r3, #1
 808a972:	4413      	add	r3, r2
 808a974:	00db      	lsls	r3, r3, #3
 808a976:	440b      	add	r3, r1
 808a978:	3312      	adds	r3, #18
 808a97a:	881b      	ldrh	r3, [r3, #0]
 808a97c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 808a980:	d215      	bcs.n	808a9ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 808a982:	4938      	ldr	r1, [pc, #224]	; (808aa64 <etharp_tmr+0x14c>)
 808a984:	687a      	ldr	r2, [r7, #4]
 808a986:	4613      	mov	r3, r2
 808a988:	005b      	lsls	r3, r3, #1
 808a98a:	4413      	add	r3, r2
 808a98c:	00db      	lsls	r3, r3, #3
 808a98e:	440b      	add	r3, r1
 808a990:	3314      	adds	r3, #20
 808a992:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 808a994:	2b01      	cmp	r3, #1
 808a996:	d10e      	bne.n	808a9b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 808a998:	4932      	ldr	r1, [pc, #200]	; (808aa64 <etharp_tmr+0x14c>)
 808a99a:	687a      	ldr	r2, [r7, #4]
 808a99c:	4613      	mov	r3, r2
 808a99e:	005b      	lsls	r3, r3, #1
 808a9a0:	4413      	add	r3, r2
 808a9a2:	00db      	lsls	r3, r3, #3
 808a9a4:	440b      	add	r3, r1
 808a9a6:	3312      	adds	r3, #18
 808a9a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 808a9aa:	2b04      	cmp	r3, #4
 808a9ac:	d903      	bls.n	808a9b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 808a9ae:	6878      	ldr	r0, [r7, #4]
 808a9b0:	f7ff ff80 	bl	808a8b4 <etharp_free_entry>
 808a9b4:	e04a      	b.n	808aa4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 808a9b6:	492b      	ldr	r1, [pc, #172]	; (808aa64 <etharp_tmr+0x14c>)
 808a9b8:	687a      	ldr	r2, [r7, #4]
 808a9ba:	4613      	mov	r3, r2
 808a9bc:	005b      	lsls	r3, r3, #1
 808a9be:	4413      	add	r3, r2
 808a9c0:	00db      	lsls	r3, r3, #3
 808a9c2:	440b      	add	r3, r1
 808a9c4:	3314      	adds	r3, #20
 808a9c6:	781b      	ldrb	r3, [r3, #0]
 808a9c8:	2b03      	cmp	r3, #3
 808a9ca:	d10a      	bne.n	808a9e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 808a9cc:	4925      	ldr	r1, [pc, #148]	; (808aa64 <etharp_tmr+0x14c>)
 808a9ce:	687a      	ldr	r2, [r7, #4]
 808a9d0:	4613      	mov	r3, r2
 808a9d2:	005b      	lsls	r3, r3, #1
 808a9d4:	4413      	add	r3, r2
 808a9d6:	00db      	lsls	r3, r3, #3
 808a9d8:	440b      	add	r3, r1
 808a9da:	3314      	adds	r3, #20
 808a9dc:	2204      	movs	r2, #4
 808a9de:	701a      	strb	r2, [r3, #0]
 808a9e0:	e034      	b.n	808aa4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 808a9e2:	4920      	ldr	r1, [pc, #128]	; (808aa64 <etharp_tmr+0x14c>)
 808a9e4:	687a      	ldr	r2, [r7, #4]
 808a9e6:	4613      	mov	r3, r2
 808a9e8:	005b      	lsls	r3, r3, #1
 808a9ea:	4413      	add	r3, r2
 808a9ec:	00db      	lsls	r3, r3, #3
 808a9ee:	440b      	add	r3, r1
 808a9f0:	3314      	adds	r3, #20
 808a9f2:	781b      	ldrb	r3, [r3, #0]
 808a9f4:	2b04      	cmp	r3, #4
 808a9f6:	d10a      	bne.n	808aa0e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 808a9f8:	491a      	ldr	r1, [pc, #104]	; (808aa64 <etharp_tmr+0x14c>)
 808a9fa:	687a      	ldr	r2, [r7, #4]
 808a9fc:	4613      	mov	r3, r2
 808a9fe:	005b      	lsls	r3, r3, #1
 808aa00:	4413      	add	r3, r2
 808aa02:	00db      	lsls	r3, r3, #3
 808aa04:	440b      	add	r3, r1
 808aa06:	3314      	adds	r3, #20
 808aa08:	2202      	movs	r2, #2
 808aa0a:	701a      	strb	r2, [r3, #0]
 808aa0c:	e01e      	b.n	808aa4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 808aa0e:	4915      	ldr	r1, [pc, #84]	; (808aa64 <etharp_tmr+0x14c>)
 808aa10:	687a      	ldr	r2, [r7, #4]
 808aa12:	4613      	mov	r3, r2
 808aa14:	005b      	lsls	r3, r3, #1
 808aa16:	4413      	add	r3, r2
 808aa18:	00db      	lsls	r3, r3, #3
 808aa1a:	440b      	add	r3, r1
 808aa1c:	3314      	adds	r3, #20
 808aa1e:	781b      	ldrb	r3, [r3, #0]
 808aa20:	2b01      	cmp	r3, #1
 808aa22:	d113      	bne.n	808aa4c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 808aa24:	490f      	ldr	r1, [pc, #60]	; (808aa64 <etharp_tmr+0x14c>)
 808aa26:	687a      	ldr	r2, [r7, #4]
 808aa28:	4613      	mov	r3, r2
 808aa2a:	005b      	lsls	r3, r3, #1
 808aa2c:	4413      	add	r3, r2
 808aa2e:	00db      	lsls	r3, r3, #3
 808aa30:	440b      	add	r3, r1
 808aa32:	3308      	adds	r3, #8
 808aa34:	6818      	ldr	r0, [r3, #0]
 808aa36:	687a      	ldr	r2, [r7, #4]
 808aa38:	4613      	mov	r3, r2
 808aa3a:	005b      	lsls	r3, r3, #1
 808aa3c:	4413      	add	r3, r2
 808aa3e:	00db      	lsls	r3, r3, #3
 808aa40:	4a08      	ldr	r2, [pc, #32]	; (808aa64 <etharp_tmr+0x14c>)
 808aa42:	4413      	add	r3, r2
 808aa44:	3304      	adds	r3, #4
 808aa46:	4619      	mov	r1, r3
 808aa48:	f000 fe6e 	bl	808b728 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808aa4c:	687b      	ldr	r3, [r7, #4]
 808aa4e:	3301      	adds	r3, #1
 808aa50:	607b      	str	r3, [r7, #4]
 808aa52:	687b      	ldr	r3, [r7, #4]
 808aa54:	2b09      	cmp	r3, #9
 808aa56:	f77f af65 	ble.w	808a924 <etharp_tmr+0xc>
      }
    }
  }
}
 808aa5a:	bf00      	nop
 808aa5c:	bf00      	nop
 808aa5e:	3708      	adds	r7, #8
 808aa60:	46bd      	mov	sp, r7
 808aa62:	bd80      	pop	{r7, pc}
 808aa64:	20008294 	.word	0x20008294

0808aa68 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 808aa68:	b580      	push	{r7, lr}
 808aa6a:	b08a      	sub	sp, #40	; 0x28
 808aa6c:	af00      	add	r7, sp, #0
 808aa6e:	60f8      	str	r0, [r7, #12]
 808aa70:	460b      	mov	r3, r1
 808aa72:	607a      	str	r2, [r7, #4]
 808aa74:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 808aa76:	230a      	movs	r3, #10
 808aa78:	84fb      	strh	r3, [r7, #38]	; 0x26
 808aa7a:	230a      	movs	r3, #10
 808aa7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 808aa7e:	230a      	movs	r3, #10
 808aa80:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 808aa82:	2300      	movs	r3, #0
 808aa84:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 808aa86:	230a      	movs	r3, #10
 808aa88:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 808aa8a:	2300      	movs	r3, #0
 808aa8c:	83bb      	strh	r3, [r7, #28]
 808aa8e:	2300      	movs	r3, #0
 808aa90:	837b      	strh	r3, [r7, #26]
 808aa92:	2300      	movs	r3, #0
 808aa94:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808aa96:	2300      	movs	r3, #0
 808aa98:	843b      	strh	r3, [r7, #32]
 808aa9a:	e0ae      	b.n	808abfa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 808aa9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808aaa0:	49a6      	ldr	r1, [pc, #664]	; (808ad3c <etharp_find_entry+0x2d4>)
 808aaa2:	4613      	mov	r3, r2
 808aaa4:	005b      	lsls	r3, r3, #1
 808aaa6:	4413      	add	r3, r2
 808aaa8:	00db      	lsls	r3, r3, #3
 808aaaa:	440b      	add	r3, r1
 808aaac:	3314      	adds	r3, #20
 808aaae:	781b      	ldrb	r3, [r3, #0]
 808aab0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 808aab2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 808aab6:	2b0a      	cmp	r3, #10
 808aab8:	d105      	bne.n	808aac6 <etharp_find_entry+0x5e>
 808aaba:	7dfb      	ldrb	r3, [r7, #23]
 808aabc:	2b00      	cmp	r3, #0
 808aabe:	d102      	bne.n	808aac6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 808aac0:	8c3b      	ldrh	r3, [r7, #32]
 808aac2:	847b      	strh	r3, [r7, #34]	; 0x22
 808aac4:	e095      	b.n	808abf2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 808aac6:	7dfb      	ldrb	r3, [r7, #23]
 808aac8:	2b00      	cmp	r3, #0
 808aaca:	f000 8092 	beq.w	808abf2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 808aace:	7dfb      	ldrb	r3, [r7, #23]
 808aad0:	2b01      	cmp	r3, #1
 808aad2:	d009      	beq.n	808aae8 <etharp_find_entry+0x80>
 808aad4:	7dfb      	ldrb	r3, [r7, #23]
 808aad6:	2b01      	cmp	r3, #1
 808aad8:	d806      	bhi.n	808aae8 <etharp_find_entry+0x80>
 808aada:	4b99      	ldr	r3, [pc, #612]	; (808ad40 <etharp_find_entry+0x2d8>)
 808aadc:	f240 1223 	movw	r2, #291	; 0x123
 808aae0:	4998      	ldr	r1, [pc, #608]	; (808ad44 <etharp_find_entry+0x2dc>)
 808aae2:	4899      	ldr	r0, [pc, #612]	; (808ad48 <etharp_find_entry+0x2e0>)
 808aae4:	f002 f9f6 	bl	808ced4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 808aae8:	68fb      	ldr	r3, [r7, #12]
 808aaea:	2b00      	cmp	r3, #0
 808aaec:	d020      	beq.n	808ab30 <etharp_find_entry+0xc8>
 808aaee:	68fb      	ldr	r3, [r7, #12]
 808aaf0:	6819      	ldr	r1, [r3, #0]
 808aaf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808aaf6:	4891      	ldr	r0, [pc, #580]	; (808ad3c <etharp_find_entry+0x2d4>)
 808aaf8:	4613      	mov	r3, r2
 808aafa:	005b      	lsls	r3, r3, #1
 808aafc:	4413      	add	r3, r2
 808aafe:	00db      	lsls	r3, r3, #3
 808ab00:	4403      	add	r3, r0
 808ab02:	3304      	adds	r3, #4
 808ab04:	681b      	ldr	r3, [r3, #0]
 808ab06:	4299      	cmp	r1, r3
 808ab08:	d112      	bne.n	808ab30 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 808ab0a:	687b      	ldr	r3, [r7, #4]
 808ab0c:	2b00      	cmp	r3, #0
 808ab0e:	d00c      	beq.n	808ab2a <etharp_find_entry+0xc2>
 808ab10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ab14:	4989      	ldr	r1, [pc, #548]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ab16:	4613      	mov	r3, r2
 808ab18:	005b      	lsls	r3, r3, #1
 808ab1a:	4413      	add	r3, r2
 808ab1c:	00db      	lsls	r3, r3, #3
 808ab1e:	440b      	add	r3, r1
 808ab20:	3308      	adds	r3, #8
 808ab22:	681b      	ldr	r3, [r3, #0]
 808ab24:	687a      	ldr	r2, [r7, #4]
 808ab26:	429a      	cmp	r2, r3
 808ab28:	d102      	bne.n	808ab30 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 808ab2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 808ab2e:	e100      	b.n	808ad32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 808ab30:	7dfb      	ldrb	r3, [r7, #23]
 808ab32:	2b01      	cmp	r3, #1
 808ab34:	d140      	bne.n	808abb8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 808ab36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ab3a:	4980      	ldr	r1, [pc, #512]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ab3c:	4613      	mov	r3, r2
 808ab3e:	005b      	lsls	r3, r3, #1
 808ab40:	4413      	add	r3, r2
 808ab42:	00db      	lsls	r3, r3, #3
 808ab44:	440b      	add	r3, r1
 808ab46:	681b      	ldr	r3, [r3, #0]
 808ab48:	2b00      	cmp	r3, #0
 808ab4a:	d01a      	beq.n	808ab82 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 808ab4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ab50:	497a      	ldr	r1, [pc, #488]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ab52:	4613      	mov	r3, r2
 808ab54:	005b      	lsls	r3, r3, #1
 808ab56:	4413      	add	r3, r2
 808ab58:	00db      	lsls	r3, r3, #3
 808ab5a:	440b      	add	r3, r1
 808ab5c:	3312      	adds	r3, #18
 808ab5e:	881b      	ldrh	r3, [r3, #0]
 808ab60:	8bba      	ldrh	r2, [r7, #28]
 808ab62:	429a      	cmp	r2, r3
 808ab64:	d845      	bhi.n	808abf2 <etharp_find_entry+0x18a>
            old_queue = i;
 808ab66:	8c3b      	ldrh	r3, [r7, #32]
 808ab68:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 808ab6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ab6e:	4973      	ldr	r1, [pc, #460]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ab70:	4613      	mov	r3, r2
 808ab72:	005b      	lsls	r3, r3, #1
 808ab74:	4413      	add	r3, r2
 808ab76:	00db      	lsls	r3, r3, #3
 808ab78:	440b      	add	r3, r1
 808ab7a:	3312      	adds	r3, #18
 808ab7c:	881b      	ldrh	r3, [r3, #0]
 808ab7e:	83bb      	strh	r3, [r7, #28]
 808ab80:	e037      	b.n	808abf2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 808ab82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ab86:	496d      	ldr	r1, [pc, #436]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ab88:	4613      	mov	r3, r2
 808ab8a:	005b      	lsls	r3, r3, #1
 808ab8c:	4413      	add	r3, r2
 808ab8e:	00db      	lsls	r3, r3, #3
 808ab90:	440b      	add	r3, r1
 808ab92:	3312      	adds	r3, #18
 808ab94:	881b      	ldrh	r3, [r3, #0]
 808ab96:	8b7a      	ldrh	r2, [r7, #26]
 808ab98:	429a      	cmp	r2, r3
 808ab9a:	d82a      	bhi.n	808abf2 <etharp_find_entry+0x18a>
            old_pending = i;
 808ab9c:	8c3b      	ldrh	r3, [r7, #32]
 808ab9e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 808aba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808aba4:	4965      	ldr	r1, [pc, #404]	; (808ad3c <etharp_find_entry+0x2d4>)
 808aba6:	4613      	mov	r3, r2
 808aba8:	005b      	lsls	r3, r3, #1
 808abaa:	4413      	add	r3, r2
 808abac:	00db      	lsls	r3, r3, #3
 808abae:	440b      	add	r3, r1
 808abb0:	3312      	adds	r3, #18
 808abb2:	881b      	ldrh	r3, [r3, #0]
 808abb4:	837b      	strh	r3, [r7, #26]
 808abb6:	e01c      	b.n	808abf2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 808abb8:	7dfb      	ldrb	r3, [r7, #23]
 808abba:	2b01      	cmp	r3, #1
 808abbc:	d919      	bls.n	808abf2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 808abbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808abc2:	495e      	ldr	r1, [pc, #376]	; (808ad3c <etharp_find_entry+0x2d4>)
 808abc4:	4613      	mov	r3, r2
 808abc6:	005b      	lsls	r3, r3, #1
 808abc8:	4413      	add	r3, r2
 808abca:	00db      	lsls	r3, r3, #3
 808abcc:	440b      	add	r3, r1
 808abce:	3312      	adds	r3, #18
 808abd0:	881b      	ldrh	r3, [r3, #0]
 808abd2:	8b3a      	ldrh	r2, [r7, #24]
 808abd4:	429a      	cmp	r2, r3
 808abd6:	d80c      	bhi.n	808abf2 <etharp_find_entry+0x18a>
            old_stable = i;
 808abd8:	8c3b      	ldrh	r3, [r7, #32]
 808abda:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 808abdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808abe0:	4956      	ldr	r1, [pc, #344]	; (808ad3c <etharp_find_entry+0x2d4>)
 808abe2:	4613      	mov	r3, r2
 808abe4:	005b      	lsls	r3, r3, #1
 808abe6:	4413      	add	r3, r2
 808abe8:	00db      	lsls	r3, r3, #3
 808abea:	440b      	add	r3, r1
 808abec:	3312      	adds	r3, #18
 808abee:	881b      	ldrh	r3, [r3, #0]
 808abf0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808abf2:	8c3b      	ldrh	r3, [r7, #32]
 808abf4:	3301      	adds	r3, #1
 808abf6:	b29b      	uxth	r3, r3
 808abf8:	843b      	strh	r3, [r7, #32]
 808abfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 808abfe:	2b09      	cmp	r3, #9
 808ac00:	f77f af4c 	ble.w	808aa9c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 808ac04:	7afb      	ldrb	r3, [r7, #11]
 808ac06:	f003 0302 	and.w	r3, r3, #2
 808ac0a:	2b00      	cmp	r3, #0
 808ac0c:	d108      	bne.n	808ac20 <etharp_find_entry+0x1b8>
 808ac0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 808ac12:	2b0a      	cmp	r3, #10
 808ac14:	d107      	bne.n	808ac26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 808ac16:	7afb      	ldrb	r3, [r7, #11]
 808ac18:	f003 0301 	and.w	r3, r3, #1
 808ac1c:	2b00      	cmp	r3, #0
 808ac1e:	d102      	bne.n	808ac26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 808ac20:	f04f 33ff 	mov.w	r3, #4294967295
 808ac24:	e085      	b.n	808ad32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 808ac26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 808ac2a:	2b09      	cmp	r3, #9
 808ac2c:	dc02      	bgt.n	808ac34 <etharp_find_entry+0x1cc>
    i = empty;
 808ac2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808ac30:	843b      	strh	r3, [r7, #32]
 808ac32:	e039      	b.n	808aca8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 808ac34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 808ac38:	2b09      	cmp	r3, #9
 808ac3a:	dc14      	bgt.n	808ac66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 808ac3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808ac3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 808ac40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ac44:	493d      	ldr	r1, [pc, #244]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ac46:	4613      	mov	r3, r2
 808ac48:	005b      	lsls	r3, r3, #1
 808ac4a:	4413      	add	r3, r2
 808ac4c:	00db      	lsls	r3, r3, #3
 808ac4e:	440b      	add	r3, r1
 808ac50:	681b      	ldr	r3, [r3, #0]
 808ac52:	2b00      	cmp	r3, #0
 808ac54:	d018      	beq.n	808ac88 <etharp_find_entry+0x220>
 808ac56:	4b3a      	ldr	r3, [pc, #232]	; (808ad40 <etharp_find_entry+0x2d8>)
 808ac58:	f240 126d 	movw	r2, #365	; 0x16d
 808ac5c:	493b      	ldr	r1, [pc, #236]	; (808ad4c <etharp_find_entry+0x2e4>)
 808ac5e:	483a      	ldr	r0, [pc, #232]	; (808ad48 <etharp_find_entry+0x2e0>)
 808ac60:	f002 f938 	bl	808ced4 <iprintf>
 808ac64:	e010      	b.n	808ac88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 808ac66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 808ac6a:	2b09      	cmp	r3, #9
 808ac6c:	dc02      	bgt.n	808ac74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 808ac6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 808ac70:	843b      	strh	r3, [r7, #32]
 808ac72:	e009      	b.n	808ac88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 808ac74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 808ac78:	2b09      	cmp	r3, #9
 808ac7a:	dc02      	bgt.n	808ac82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 808ac7c:	8bfb      	ldrh	r3, [r7, #30]
 808ac7e:	843b      	strh	r3, [r7, #32]
 808ac80:	e002      	b.n	808ac88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 808ac82:	f04f 33ff 	mov.w	r3, #4294967295
 808ac86:	e054      	b.n	808ad32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 808ac88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 808ac8c:	2b09      	cmp	r3, #9
 808ac8e:	dd06      	ble.n	808ac9e <etharp_find_entry+0x236>
 808ac90:	4b2b      	ldr	r3, [pc, #172]	; (808ad40 <etharp_find_entry+0x2d8>)
 808ac92:	f240 127f 	movw	r2, #383	; 0x17f
 808ac96:	492e      	ldr	r1, [pc, #184]	; (808ad50 <etharp_find_entry+0x2e8>)
 808ac98:	482b      	ldr	r0, [pc, #172]	; (808ad48 <etharp_find_entry+0x2e0>)
 808ac9a:	f002 f91b 	bl	808ced4 <iprintf>
    etharp_free_entry(i);
 808ac9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 808aca2:	4618      	mov	r0, r3
 808aca4:	f7ff fe06 	bl	808a8b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 808aca8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 808acac:	2b09      	cmp	r3, #9
 808acae:	dd06      	ble.n	808acbe <etharp_find_entry+0x256>
 808acb0:	4b23      	ldr	r3, [pc, #140]	; (808ad40 <etharp_find_entry+0x2d8>)
 808acb2:	f240 1283 	movw	r2, #387	; 0x183
 808acb6:	4926      	ldr	r1, [pc, #152]	; (808ad50 <etharp_find_entry+0x2e8>)
 808acb8:	4823      	ldr	r0, [pc, #140]	; (808ad48 <etharp_find_entry+0x2e0>)
 808acba:	f002 f90b 	bl	808ced4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 808acbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808acc2:	491e      	ldr	r1, [pc, #120]	; (808ad3c <etharp_find_entry+0x2d4>)
 808acc4:	4613      	mov	r3, r2
 808acc6:	005b      	lsls	r3, r3, #1
 808acc8:	4413      	add	r3, r2
 808acca:	00db      	lsls	r3, r3, #3
 808accc:	440b      	add	r3, r1
 808acce:	3314      	adds	r3, #20
 808acd0:	781b      	ldrb	r3, [r3, #0]
 808acd2:	2b00      	cmp	r3, #0
 808acd4:	d006      	beq.n	808ace4 <etharp_find_entry+0x27c>
 808acd6:	4b1a      	ldr	r3, [pc, #104]	; (808ad40 <etharp_find_entry+0x2d8>)
 808acd8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 808acdc:	491d      	ldr	r1, [pc, #116]	; (808ad54 <etharp_find_entry+0x2ec>)
 808acde:	481a      	ldr	r0, [pc, #104]	; (808ad48 <etharp_find_entry+0x2e0>)
 808ace0:	f002 f8f8 	bl	808ced4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 808ace4:	68fb      	ldr	r3, [r7, #12]
 808ace6:	2b00      	cmp	r3, #0
 808ace8:	d00b      	beq.n	808ad02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 808acea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808acee:	68fb      	ldr	r3, [r7, #12]
 808acf0:	6819      	ldr	r1, [r3, #0]
 808acf2:	4812      	ldr	r0, [pc, #72]	; (808ad3c <etharp_find_entry+0x2d4>)
 808acf4:	4613      	mov	r3, r2
 808acf6:	005b      	lsls	r3, r3, #1
 808acf8:	4413      	add	r3, r2
 808acfa:	00db      	lsls	r3, r3, #3
 808acfc:	4403      	add	r3, r0
 808acfe:	3304      	adds	r3, #4
 808ad00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 808ad02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ad06:	490d      	ldr	r1, [pc, #52]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ad08:	4613      	mov	r3, r2
 808ad0a:	005b      	lsls	r3, r3, #1
 808ad0c:	4413      	add	r3, r2
 808ad0e:	00db      	lsls	r3, r3, #3
 808ad10:	440b      	add	r3, r1
 808ad12:	3312      	adds	r3, #18
 808ad14:	2200      	movs	r2, #0
 808ad16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 808ad18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 808ad1c:	4907      	ldr	r1, [pc, #28]	; (808ad3c <etharp_find_entry+0x2d4>)
 808ad1e:	4613      	mov	r3, r2
 808ad20:	005b      	lsls	r3, r3, #1
 808ad22:	4413      	add	r3, r2
 808ad24:	00db      	lsls	r3, r3, #3
 808ad26:	440b      	add	r3, r1
 808ad28:	3308      	adds	r3, #8
 808ad2a:	687a      	ldr	r2, [r7, #4]
 808ad2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 808ad2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 808ad32:	4618      	mov	r0, r3
 808ad34:	3728      	adds	r7, #40	; 0x28
 808ad36:	46bd      	mov	sp, r7
 808ad38:	bd80      	pop	{r7, pc}
 808ad3a:	bf00      	nop
 808ad3c:	20008294 	.word	0x20008294
 808ad40:	080902a8 	.word	0x080902a8
 808ad44:	080902e0 	.word	0x080902e0
 808ad48:	08090320 	.word	0x08090320
 808ad4c:	08090348 	.word	0x08090348
 808ad50:	08090360 	.word	0x08090360
 808ad54:	08090374 	.word	0x08090374

0808ad58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 808ad58:	b580      	push	{r7, lr}
 808ad5a:	b088      	sub	sp, #32
 808ad5c:	af02      	add	r7, sp, #8
 808ad5e:	60f8      	str	r0, [r7, #12]
 808ad60:	60b9      	str	r1, [r7, #8]
 808ad62:	607a      	str	r2, [r7, #4]
 808ad64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 808ad66:	68fb      	ldr	r3, [r7, #12]
 808ad68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808ad6c:	2b06      	cmp	r3, #6
 808ad6e:	d006      	beq.n	808ad7e <etharp_update_arp_entry+0x26>
 808ad70:	4b48      	ldr	r3, [pc, #288]	; (808ae94 <etharp_update_arp_entry+0x13c>)
 808ad72:	f240 12a9 	movw	r2, #425	; 0x1a9
 808ad76:	4948      	ldr	r1, [pc, #288]	; (808ae98 <etharp_update_arp_entry+0x140>)
 808ad78:	4848      	ldr	r0, [pc, #288]	; (808ae9c <etharp_update_arp_entry+0x144>)
 808ad7a:	f002 f8ab 	bl	808ced4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 808ad7e:	68bb      	ldr	r3, [r7, #8]
 808ad80:	2b00      	cmp	r3, #0
 808ad82:	d012      	beq.n	808adaa <etharp_update_arp_entry+0x52>
 808ad84:	68bb      	ldr	r3, [r7, #8]
 808ad86:	681b      	ldr	r3, [r3, #0]
 808ad88:	2b00      	cmp	r3, #0
 808ad8a:	d00e      	beq.n	808adaa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 808ad8c:	68bb      	ldr	r3, [r7, #8]
 808ad8e:	681b      	ldr	r3, [r3, #0]
 808ad90:	68f9      	ldr	r1, [r7, #12]
 808ad92:	4618      	mov	r0, r3
 808ad94:	f001 f8fe 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808ad98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 808ad9a:	2b00      	cmp	r3, #0
 808ad9c:	d105      	bne.n	808adaa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 808ad9e:	68bb      	ldr	r3, [r7, #8]
 808ada0:	681b      	ldr	r3, [r3, #0]
 808ada2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 808ada6:	2be0      	cmp	r3, #224	; 0xe0
 808ada8:	d102      	bne.n	808adb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 808adaa:	f06f 030f 	mvn.w	r3, #15
 808adae:	e06c      	b.n	808ae8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 808adb0:	78fb      	ldrb	r3, [r7, #3]
 808adb2:	68fa      	ldr	r2, [r7, #12]
 808adb4:	4619      	mov	r1, r3
 808adb6:	68b8      	ldr	r0, [r7, #8]
 808adb8:	f7ff fe56 	bl	808aa68 <etharp_find_entry>
 808adbc:	4603      	mov	r3, r0
 808adbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 808adc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 808adc4:	2b00      	cmp	r3, #0
 808adc6:	da02      	bge.n	808adce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 808adc8:	8afb      	ldrh	r3, [r7, #22]
 808adca:	b25b      	sxtb	r3, r3
 808adcc:	e05d      	b.n	808ae8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 808adce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808add2:	4933      	ldr	r1, [pc, #204]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808add4:	4613      	mov	r3, r2
 808add6:	005b      	lsls	r3, r3, #1
 808add8:	4413      	add	r3, r2
 808adda:	00db      	lsls	r3, r3, #3
 808addc:	440b      	add	r3, r1
 808adde:	3314      	adds	r3, #20
 808ade0:	2202      	movs	r2, #2
 808ade2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 808ade4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808ade8:	492d      	ldr	r1, [pc, #180]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808adea:	4613      	mov	r3, r2
 808adec:	005b      	lsls	r3, r3, #1
 808adee:	4413      	add	r3, r2
 808adf0:	00db      	lsls	r3, r3, #3
 808adf2:	440b      	add	r3, r1
 808adf4:	3308      	adds	r3, #8
 808adf6:	68fa      	ldr	r2, [r7, #12]
 808adf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 808adfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808adfe:	4613      	mov	r3, r2
 808ae00:	005b      	lsls	r3, r3, #1
 808ae02:	4413      	add	r3, r2
 808ae04:	00db      	lsls	r3, r3, #3
 808ae06:	3308      	adds	r3, #8
 808ae08:	4a25      	ldr	r2, [pc, #148]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808ae0a:	4413      	add	r3, r2
 808ae0c:	3304      	adds	r3, #4
 808ae0e:	2206      	movs	r2, #6
 808ae10:	6879      	ldr	r1, [r7, #4]
 808ae12:	4618      	mov	r0, r3
 808ae14:	f002 f848 	bl	808cea8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 808ae18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808ae1c:	4920      	ldr	r1, [pc, #128]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808ae1e:	4613      	mov	r3, r2
 808ae20:	005b      	lsls	r3, r3, #1
 808ae22:	4413      	add	r3, r2
 808ae24:	00db      	lsls	r3, r3, #3
 808ae26:	440b      	add	r3, r1
 808ae28:	3312      	adds	r3, #18
 808ae2a:	2200      	movs	r2, #0
 808ae2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 808ae2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808ae32:	491b      	ldr	r1, [pc, #108]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808ae34:	4613      	mov	r3, r2
 808ae36:	005b      	lsls	r3, r3, #1
 808ae38:	4413      	add	r3, r2
 808ae3a:	00db      	lsls	r3, r3, #3
 808ae3c:	440b      	add	r3, r1
 808ae3e:	681b      	ldr	r3, [r3, #0]
 808ae40:	2b00      	cmp	r3, #0
 808ae42:	d021      	beq.n	808ae88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 808ae44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808ae48:	4915      	ldr	r1, [pc, #84]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808ae4a:	4613      	mov	r3, r2
 808ae4c:	005b      	lsls	r3, r3, #1
 808ae4e:	4413      	add	r3, r2
 808ae50:	00db      	lsls	r3, r3, #3
 808ae52:	440b      	add	r3, r1
 808ae54:	681b      	ldr	r3, [r3, #0]
 808ae56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 808ae58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 808ae5c:	4910      	ldr	r1, [pc, #64]	; (808aea0 <etharp_update_arp_entry+0x148>)
 808ae5e:	4613      	mov	r3, r2
 808ae60:	005b      	lsls	r3, r3, #1
 808ae62:	4413      	add	r3, r2
 808ae64:	00db      	lsls	r3, r3, #3
 808ae66:	440b      	add	r3, r1
 808ae68:	2200      	movs	r2, #0
 808ae6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 808ae6c:	68fb      	ldr	r3, [r7, #12]
 808ae6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 808ae72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808ae76:	9300      	str	r3, [sp, #0]
 808ae78:	687b      	ldr	r3, [r7, #4]
 808ae7a:	6939      	ldr	r1, [r7, #16]
 808ae7c:	68f8      	ldr	r0, [r7, #12]
 808ae7e:	f001 ff97 	bl	808cdb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 808ae82:	6938      	ldr	r0, [r7, #16]
 808ae84:	f7f9 fe6a 	bl	8084b5c <pbuf_free>
  }
  return ERR_OK;
 808ae88:	2300      	movs	r3, #0
}
 808ae8a:	4618      	mov	r0, r3
 808ae8c:	3718      	adds	r7, #24
 808ae8e:	46bd      	mov	sp, r7
 808ae90:	bd80      	pop	{r7, pc}
 808ae92:	bf00      	nop
 808ae94:	080902a8 	.word	0x080902a8
 808ae98:	080903a0 	.word	0x080903a0
 808ae9c:	08090320 	.word	0x08090320
 808aea0:	20008294 	.word	0x20008294

0808aea4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 808aea4:	b580      	push	{r7, lr}
 808aea6:	b084      	sub	sp, #16
 808aea8:	af00      	add	r7, sp, #0
 808aeaa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808aeac:	2300      	movs	r3, #0
 808aeae:	60fb      	str	r3, [r7, #12]
 808aeb0:	e01e      	b.n	808aef0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 808aeb2:	4913      	ldr	r1, [pc, #76]	; (808af00 <etharp_cleanup_netif+0x5c>)
 808aeb4:	68fa      	ldr	r2, [r7, #12]
 808aeb6:	4613      	mov	r3, r2
 808aeb8:	005b      	lsls	r3, r3, #1
 808aeba:	4413      	add	r3, r2
 808aebc:	00db      	lsls	r3, r3, #3
 808aebe:	440b      	add	r3, r1
 808aec0:	3314      	adds	r3, #20
 808aec2:	781b      	ldrb	r3, [r3, #0]
 808aec4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 808aec6:	7afb      	ldrb	r3, [r7, #11]
 808aec8:	2b00      	cmp	r3, #0
 808aeca:	d00e      	beq.n	808aeea <etharp_cleanup_netif+0x46>
 808aecc:	490c      	ldr	r1, [pc, #48]	; (808af00 <etharp_cleanup_netif+0x5c>)
 808aece:	68fa      	ldr	r2, [r7, #12]
 808aed0:	4613      	mov	r3, r2
 808aed2:	005b      	lsls	r3, r3, #1
 808aed4:	4413      	add	r3, r2
 808aed6:	00db      	lsls	r3, r3, #3
 808aed8:	440b      	add	r3, r1
 808aeda:	3308      	adds	r3, #8
 808aedc:	681b      	ldr	r3, [r3, #0]
 808aede:	687a      	ldr	r2, [r7, #4]
 808aee0:	429a      	cmp	r2, r3
 808aee2:	d102      	bne.n	808aeea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 808aee4:	68f8      	ldr	r0, [r7, #12]
 808aee6:	f7ff fce5 	bl	808a8b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 808aeea:	68fb      	ldr	r3, [r7, #12]
 808aeec:	3301      	adds	r3, #1
 808aeee:	60fb      	str	r3, [r7, #12]
 808aef0:	68fb      	ldr	r3, [r7, #12]
 808aef2:	2b09      	cmp	r3, #9
 808aef4:	dddd      	ble.n	808aeb2 <etharp_cleanup_netif+0xe>
    }
  }
}
 808aef6:	bf00      	nop
 808aef8:	bf00      	nop
 808aefa:	3710      	adds	r7, #16
 808aefc:	46bd      	mov	sp, r7
 808aefe:	bd80      	pop	{r7, pc}
 808af00:	20008294 	.word	0x20008294

0808af04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 808af04:	b5b0      	push	{r4, r5, r7, lr}
 808af06:	b08a      	sub	sp, #40	; 0x28
 808af08:	af04      	add	r7, sp, #16
 808af0a:	6078      	str	r0, [r7, #4]
 808af0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 808af0e:	683b      	ldr	r3, [r7, #0]
 808af10:	2b00      	cmp	r3, #0
 808af12:	d107      	bne.n	808af24 <etharp_input+0x20>
 808af14:	4b3d      	ldr	r3, [pc, #244]	; (808b00c <etharp_input+0x108>)
 808af16:	f240 228a 	movw	r2, #650	; 0x28a
 808af1a:	493d      	ldr	r1, [pc, #244]	; (808b010 <etharp_input+0x10c>)
 808af1c:	483d      	ldr	r0, [pc, #244]	; (808b014 <etharp_input+0x110>)
 808af1e:	f001 ffd9 	bl	808ced4 <iprintf>
 808af22:	e06f      	b.n	808b004 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 808af24:	687b      	ldr	r3, [r7, #4]
 808af26:	685b      	ldr	r3, [r3, #4]
 808af28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 808af2a:	693b      	ldr	r3, [r7, #16]
 808af2c:	881b      	ldrh	r3, [r3, #0]
 808af2e:	b29b      	uxth	r3, r3
 808af30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 808af34:	d10c      	bne.n	808af50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 808af36:	693b      	ldr	r3, [r7, #16]
 808af38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 808af3a:	2b06      	cmp	r3, #6
 808af3c:	d108      	bne.n	808af50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 808af3e:	693b      	ldr	r3, [r7, #16]
 808af40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 808af42:	2b04      	cmp	r3, #4
 808af44:	d104      	bne.n	808af50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 808af46:	693b      	ldr	r3, [r7, #16]
 808af48:	885b      	ldrh	r3, [r3, #2]
 808af4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 808af4c:	2b08      	cmp	r3, #8
 808af4e:	d003      	beq.n	808af58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 808af50:	6878      	ldr	r0, [r7, #4]
 808af52:	f7f9 fe03 	bl	8084b5c <pbuf_free>
    return;
 808af56:	e055      	b.n	808b004 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 808af58:	693b      	ldr	r3, [r7, #16]
 808af5a:	330e      	adds	r3, #14
 808af5c:	681b      	ldr	r3, [r3, #0]
 808af5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 808af60:	693b      	ldr	r3, [r7, #16]
 808af62:	3318      	adds	r3, #24
 808af64:	681b      	ldr	r3, [r3, #0]
 808af66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 808af68:	683b      	ldr	r3, [r7, #0]
 808af6a:	3304      	adds	r3, #4
 808af6c:	681b      	ldr	r3, [r3, #0]
 808af6e:	2b00      	cmp	r3, #0
 808af70:	d102      	bne.n	808af78 <etharp_input+0x74>
    for_us = 0;
 808af72:	2300      	movs	r3, #0
 808af74:	75fb      	strb	r3, [r7, #23]
 808af76:	e009      	b.n	808af8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 808af78:	68ba      	ldr	r2, [r7, #8]
 808af7a:	683b      	ldr	r3, [r7, #0]
 808af7c:	3304      	adds	r3, #4
 808af7e:	681b      	ldr	r3, [r3, #0]
 808af80:	429a      	cmp	r2, r3
 808af82:	bf0c      	ite	eq
 808af84:	2301      	moveq	r3, #1
 808af86:	2300      	movne	r3, #0
 808af88:	b2db      	uxtb	r3, r3
 808af8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 808af8c:	693b      	ldr	r3, [r7, #16]
 808af8e:	f103 0208 	add.w	r2, r3, #8
 808af92:	7dfb      	ldrb	r3, [r7, #23]
 808af94:	2b00      	cmp	r3, #0
 808af96:	d001      	beq.n	808af9c <etharp_input+0x98>
 808af98:	2301      	movs	r3, #1
 808af9a:	e000      	b.n	808af9e <etharp_input+0x9a>
 808af9c:	2302      	movs	r3, #2
 808af9e:	f107 010c 	add.w	r1, r7, #12
 808afa2:	6838      	ldr	r0, [r7, #0]
 808afa4:	f7ff fed8 	bl	808ad58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 808afa8:	693b      	ldr	r3, [r7, #16]
 808afaa:	88db      	ldrh	r3, [r3, #6]
 808afac:	b29b      	uxth	r3, r3
 808afae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 808afb2:	d003      	beq.n	808afbc <etharp_input+0xb8>
 808afb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808afb8:	d01e      	beq.n	808aff8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 808afba:	e020      	b.n	808affe <etharp_input+0xfa>
      if (for_us) {
 808afbc:	7dfb      	ldrb	r3, [r7, #23]
 808afbe:	2b00      	cmp	r3, #0
 808afc0:	d01c      	beq.n	808affc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 808afc2:	683b      	ldr	r3, [r7, #0]
 808afc4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 808afc8:	693b      	ldr	r3, [r7, #16]
 808afca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 808afce:	683b      	ldr	r3, [r7, #0]
 808afd0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 808afd4:	683b      	ldr	r3, [r7, #0]
 808afd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 808afd8:	693a      	ldr	r2, [r7, #16]
 808afda:	3208      	adds	r2, #8
        etharp_raw(netif,
 808afdc:	2102      	movs	r1, #2
 808afde:	9103      	str	r1, [sp, #12]
 808afe0:	f107 010c 	add.w	r1, r7, #12
 808afe4:	9102      	str	r1, [sp, #8]
 808afe6:	9201      	str	r2, [sp, #4]
 808afe8:	9300      	str	r3, [sp, #0]
 808afea:	462b      	mov	r3, r5
 808afec:	4622      	mov	r2, r4
 808afee:	4601      	mov	r1, r0
 808aff0:	6838      	ldr	r0, [r7, #0]
 808aff2:	f000 faeb 	bl	808b5cc <etharp_raw>
      break;
 808aff6:	e001      	b.n	808affc <etharp_input+0xf8>
      break;
 808aff8:	bf00      	nop
 808affa:	e000      	b.n	808affe <etharp_input+0xfa>
      break;
 808affc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 808affe:	6878      	ldr	r0, [r7, #4]
 808b000:	f7f9 fdac 	bl	8084b5c <pbuf_free>
}
 808b004:	3718      	adds	r7, #24
 808b006:	46bd      	mov	sp, r7
 808b008:	bdb0      	pop	{r4, r5, r7, pc}
 808b00a:	bf00      	nop
 808b00c:	080902a8 	.word	0x080902a8
 808b010:	080903f8 	.word	0x080903f8
 808b014:	08090320 	.word	0x08090320

0808b018 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 808b018:	b580      	push	{r7, lr}
 808b01a:	b086      	sub	sp, #24
 808b01c:	af02      	add	r7, sp, #8
 808b01e:	60f8      	str	r0, [r7, #12]
 808b020:	60b9      	str	r1, [r7, #8]
 808b022:	4613      	mov	r3, r2
 808b024:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 808b026:	79fa      	ldrb	r2, [r7, #7]
 808b028:	4944      	ldr	r1, [pc, #272]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b02a:	4613      	mov	r3, r2
 808b02c:	005b      	lsls	r3, r3, #1
 808b02e:	4413      	add	r3, r2
 808b030:	00db      	lsls	r3, r3, #3
 808b032:	440b      	add	r3, r1
 808b034:	3314      	adds	r3, #20
 808b036:	781b      	ldrb	r3, [r3, #0]
 808b038:	2b01      	cmp	r3, #1
 808b03a:	d806      	bhi.n	808b04a <etharp_output_to_arp_index+0x32>
 808b03c:	4b40      	ldr	r3, [pc, #256]	; (808b140 <etharp_output_to_arp_index+0x128>)
 808b03e:	f240 22ee 	movw	r2, #750	; 0x2ee
 808b042:	4940      	ldr	r1, [pc, #256]	; (808b144 <etharp_output_to_arp_index+0x12c>)
 808b044:	4840      	ldr	r0, [pc, #256]	; (808b148 <etharp_output_to_arp_index+0x130>)
 808b046:	f001 ff45 	bl	808ced4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 808b04a:	79fa      	ldrb	r2, [r7, #7]
 808b04c:	493b      	ldr	r1, [pc, #236]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b04e:	4613      	mov	r3, r2
 808b050:	005b      	lsls	r3, r3, #1
 808b052:	4413      	add	r3, r2
 808b054:	00db      	lsls	r3, r3, #3
 808b056:	440b      	add	r3, r1
 808b058:	3314      	adds	r3, #20
 808b05a:	781b      	ldrb	r3, [r3, #0]
 808b05c:	2b02      	cmp	r3, #2
 808b05e:	d153      	bne.n	808b108 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 808b060:	79fa      	ldrb	r2, [r7, #7]
 808b062:	4936      	ldr	r1, [pc, #216]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b064:	4613      	mov	r3, r2
 808b066:	005b      	lsls	r3, r3, #1
 808b068:	4413      	add	r3, r2
 808b06a:	00db      	lsls	r3, r3, #3
 808b06c:	440b      	add	r3, r1
 808b06e:	3312      	adds	r3, #18
 808b070:	881b      	ldrh	r3, [r3, #0]
 808b072:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 808b076:	d919      	bls.n	808b0ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 808b078:	79fa      	ldrb	r2, [r7, #7]
 808b07a:	4613      	mov	r3, r2
 808b07c:	005b      	lsls	r3, r3, #1
 808b07e:	4413      	add	r3, r2
 808b080:	00db      	lsls	r3, r3, #3
 808b082:	4a2e      	ldr	r2, [pc, #184]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b084:	4413      	add	r3, r2
 808b086:	3304      	adds	r3, #4
 808b088:	4619      	mov	r1, r3
 808b08a:	68f8      	ldr	r0, [r7, #12]
 808b08c:	f000 fb4c 	bl	808b728 <etharp_request>
 808b090:	4603      	mov	r3, r0
 808b092:	2b00      	cmp	r3, #0
 808b094:	d138      	bne.n	808b108 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 808b096:	79fa      	ldrb	r2, [r7, #7]
 808b098:	4928      	ldr	r1, [pc, #160]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b09a:	4613      	mov	r3, r2
 808b09c:	005b      	lsls	r3, r3, #1
 808b09e:	4413      	add	r3, r2
 808b0a0:	00db      	lsls	r3, r3, #3
 808b0a2:	440b      	add	r3, r1
 808b0a4:	3314      	adds	r3, #20
 808b0a6:	2203      	movs	r2, #3
 808b0a8:	701a      	strb	r2, [r3, #0]
 808b0aa:	e02d      	b.n	808b108 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 808b0ac:	79fa      	ldrb	r2, [r7, #7]
 808b0ae:	4923      	ldr	r1, [pc, #140]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b0b0:	4613      	mov	r3, r2
 808b0b2:	005b      	lsls	r3, r3, #1
 808b0b4:	4413      	add	r3, r2
 808b0b6:	00db      	lsls	r3, r3, #3
 808b0b8:	440b      	add	r3, r1
 808b0ba:	3312      	adds	r3, #18
 808b0bc:	881b      	ldrh	r3, [r3, #0]
 808b0be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 808b0c2:	d321      	bcc.n	808b108 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 808b0c4:	79fa      	ldrb	r2, [r7, #7]
 808b0c6:	4613      	mov	r3, r2
 808b0c8:	005b      	lsls	r3, r3, #1
 808b0ca:	4413      	add	r3, r2
 808b0cc:	00db      	lsls	r3, r3, #3
 808b0ce:	4a1b      	ldr	r2, [pc, #108]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b0d0:	4413      	add	r3, r2
 808b0d2:	1d19      	adds	r1, r3, #4
 808b0d4:	79fa      	ldrb	r2, [r7, #7]
 808b0d6:	4613      	mov	r3, r2
 808b0d8:	005b      	lsls	r3, r3, #1
 808b0da:	4413      	add	r3, r2
 808b0dc:	00db      	lsls	r3, r3, #3
 808b0de:	3308      	adds	r3, #8
 808b0e0:	4a16      	ldr	r2, [pc, #88]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b0e2:	4413      	add	r3, r2
 808b0e4:	3304      	adds	r3, #4
 808b0e6:	461a      	mov	r2, r3
 808b0e8:	68f8      	ldr	r0, [r7, #12]
 808b0ea:	f000 fafb 	bl	808b6e4 <etharp_request_dst>
 808b0ee:	4603      	mov	r3, r0
 808b0f0:	2b00      	cmp	r3, #0
 808b0f2:	d109      	bne.n	808b108 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 808b0f4:	79fa      	ldrb	r2, [r7, #7]
 808b0f6:	4911      	ldr	r1, [pc, #68]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b0f8:	4613      	mov	r3, r2
 808b0fa:	005b      	lsls	r3, r3, #1
 808b0fc:	4413      	add	r3, r2
 808b0fe:	00db      	lsls	r3, r3, #3
 808b100:	440b      	add	r3, r1
 808b102:	3314      	adds	r3, #20
 808b104:	2203      	movs	r2, #3
 808b106:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 808b108:	68fb      	ldr	r3, [r7, #12]
 808b10a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 808b10e:	79fa      	ldrb	r2, [r7, #7]
 808b110:	4613      	mov	r3, r2
 808b112:	005b      	lsls	r3, r3, #1
 808b114:	4413      	add	r3, r2
 808b116:	00db      	lsls	r3, r3, #3
 808b118:	3308      	adds	r3, #8
 808b11a:	4a08      	ldr	r2, [pc, #32]	; (808b13c <etharp_output_to_arp_index+0x124>)
 808b11c:	4413      	add	r3, r2
 808b11e:	3304      	adds	r3, #4
 808b120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 808b124:	9200      	str	r2, [sp, #0]
 808b126:	460a      	mov	r2, r1
 808b128:	68b9      	ldr	r1, [r7, #8]
 808b12a:	68f8      	ldr	r0, [r7, #12]
 808b12c:	f001 fe40 	bl	808cdb0 <ethernet_output>
 808b130:	4603      	mov	r3, r0
}
 808b132:	4618      	mov	r0, r3
 808b134:	3710      	adds	r7, #16
 808b136:	46bd      	mov	sp, r7
 808b138:	bd80      	pop	{r7, pc}
 808b13a:	bf00      	nop
 808b13c:	20008294 	.word	0x20008294
 808b140:	080902a8 	.word	0x080902a8
 808b144:	08090418 	.word	0x08090418
 808b148:	08090320 	.word	0x08090320

0808b14c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 808b14c:	b580      	push	{r7, lr}
 808b14e:	b08a      	sub	sp, #40	; 0x28
 808b150:	af02      	add	r7, sp, #8
 808b152:	60f8      	str	r0, [r7, #12]
 808b154:	60b9      	str	r1, [r7, #8]
 808b156:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 808b158:	687b      	ldr	r3, [r7, #4]
 808b15a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 808b15c:	68fb      	ldr	r3, [r7, #12]
 808b15e:	2b00      	cmp	r3, #0
 808b160:	d106      	bne.n	808b170 <etharp_output+0x24>
 808b162:	4b73      	ldr	r3, [pc, #460]	; (808b330 <etharp_output+0x1e4>)
 808b164:	f240 321e 	movw	r2, #798	; 0x31e
 808b168:	4972      	ldr	r1, [pc, #456]	; (808b334 <etharp_output+0x1e8>)
 808b16a:	4873      	ldr	r0, [pc, #460]	; (808b338 <etharp_output+0x1ec>)
 808b16c:	f001 feb2 	bl	808ced4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 808b170:	68bb      	ldr	r3, [r7, #8]
 808b172:	2b00      	cmp	r3, #0
 808b174:	d106      	bne.n	808b184 <etharp_output+0x38>
 808b176:	4b6e      	ldr	r3, [pc, #440]	; (808b330 <etharp_output+0x1e4>)
 808b178:	f240 321f 	movw	r2, #799	; 0x31f
 808b17c:	496f      	ldr	r1, [pc, #444]	; (808b33c <etharp_output+0x1f0>)
 808b17e:	486e      	ldr	r0, [pc, #440]	; (808b338 <etharp_output+0x1ec>)
 808b180:	f001 fea8 	bl	808ced4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 808b184:	687b      	ldr	r3, [r7, #4]
 808b186:	2b00      	cmp	r3, #0
 808b188:	d106      	bne.n	808b198 <etharp_output+0x4c>
 808b18a:	4b69      	ldr	r3, [pc, #420]	; (808b330 <etharp_output+0x1e4>)
 808b18c:	f44f 7248 	mov.w	r2, #800	; 0x320
 808b190:	496b      	ldr	r1, [pc, #428]	; (808b340 <etharp_output+0x1f4>)
 808b192:	4869      	ldr	r0, [pc, #420]	; (808b338 <etharp_output+0x1ec>)
 808b194:	f001 fe9e 	bl	808ced4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 808b198:	687b      	ldr	r3, [r7, #4]
 808b19a:	681b      	ldr	r3, [r3, #0]
 808b19c:	68f9      	ldr	r1, [r7, #12]
 808b19e:	4618      	mov	r0, r3
 808b1a0:	f000 fef8 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808b1a4:	4603      	mov	r3, r0
 808b1a6:	2b00      	cmp	r3, #0
 808b1a8:	d002      	beq.n	808b1b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 808b1aa:	4b66      	ldr	r3, [pc, #408]	; (808b344 <etharp_output+0x1f8>)
 808b1ac:	61fb      	str	r3, [r7, #28]
 808b1ae:	e0af      	b.n	808b310 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 808b1b0:	687b      	ldr	r3, [r7, #4]
 808b1b2:	681b      	ldr	r3, [r3, #0]
 808b1b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808b1b8:	2be0      	cmp	r3, #224	; 0xe0
 808b1ba:	d118      	bne.n	808b1ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 808b1bc:	2301      	movs	r3, #1
 808b1be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 808b1c0:	2300      	movs	r3, #0
 808b1c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 808b1c4:	235e      	movs	r3, #94	; 0x5e
 808b1c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 808b1c8:	687b      	ldr	r3, [r7, #4]
 808b1ca:	3301      	adds	r3, #1
 808b1cc:	781b      	ldrb	r3, [r3, #0]
 808b1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808b1d2:	b2db      	uxtb	r3, r3
 808b1d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 808b1d6:	687b      	ldr	r3, [r7, #4]
 808b1d8:	3302      	adds	r3, #2
 808b1da:	781b      	ldrb	r3, [r3, #0]
 808b1dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 808b1de:	687b      	ldr	r3, [r7, #4]
 808b1e0:	3303      	adds	r3, #3
 808b1e2:	781b      	ldrb	r3, [r3, #0]
 808b1e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 808b1e6:	f107 0310 	add.w	r3, r7, #16
 808b1ea:	61fb      	str	r3, [r7, #28]
 808b1ec:	e090      	b.n	808b310 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 808b1ee:	687b      	ldr	r3, [r7, #4]
 808b1f0:	681a      	ldr	r2, [r3, #0]
 808b1f2:	68fb      	ldr	r3, [r7, #12]
 808b1f4:	3304      	adds	r3, #4
 808b1f6:	681b      	ldr	r3, [r3, #0]
 808b1f8:	405a      	eors	r2, r3
 808b1fa:	68fb      	ldr	r3, [r7, #12]
 808b1fc:	3308      	adds	r3, #8
 808b1fe:	681b      	ldr	r3, [r3, #0]
 808b200:	4013      	ands	r3, r2
 808b202:	2b00      	cmp	r3, #0
 808b204:	d012      	beq.n	808b22c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 808b206:	687b      	ldr	r3, [r7, #4]
 808b208:	681b      	ldr	r3, [r3, #0]
 808b20a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 808b20c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 808b210:	4293      	cmp	r3, r2
 808b212:	d00b      	beq.n	808b22c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 808b214:	68fb      	ldr	r3, [r7, #12]
 808b216:	330c      	adds	r3, #12
 808b218:	681b      	ldr	r3, [r3, #0]
 808b21a:	2b00      	cmp	r3, #0
 808b21c:	d003      	beq.n	808b226 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 808b21e:	68fb      	ldr	r3, [r7, #12]
 808b220:	330c      	adds	r3, #12
 808b222:	61bb      	str	r3, [r7, #24]
 808b224:	e002      	b.n	808b22c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 808b226:	f06f 0303 	mvn.w	r3, #3
 808b22a:	e07d      	b.n	808b328 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 808b22c:	4b46      	ldr	r3, [pc, #280]	; (808b348 <etharp_output+0x1fc>)
 808b22e:	781b      	ldrb	r3, [r3, #0]
 808b230:	4619      	mov	r1, r3
 808b232:	4a46      	ldr	r2, [pc, #280]	; (808b34c <etharp_output+0x200>)
 808b234:	460b      	mov	r3, r1
 808b236:	005b      	lsls	r3, r3, #1
 808b238:	440b      	add	r3, r1
 808b23a:	00db      	lsls	r3, r3, #3
 808b23c:	4413      	add	r3, r2
 808b23e:	3314      	adds	r3, #20
 808b240:	781b      	ldrb	r3, [r3, #0]
 808b242:	2b01      	cmp	r3, #1
 808b244:	d925      	bls.n	808b292 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 808b246:	4b40      	ldr	r3, [pc, #256]	; (808b348 <etharp_output+0x1fc>)
 808b248:	781b      	ldrb	r3, [r3, #0]
 808b24a:	4619      	mov	r1, r3
 808b24c:	4a3f      	ldr	r2, [pc, #252]	; (808b34c <etharp_output+0x200>)
 808b24e:	460b      	mov	r3, r1
 808b250:	005b      	lsls	r3, r3, #1
 808b252:	440b      	add	r3, r1
 808b254:	00db      	lsls	r3, r3, #3
 808b256:	4413      	add	r3, r2
 808b258:	3308      	adds	r3, #8
 808b25a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 808b25c:	68fa      	ldr	r2, [r7, #12]
 808b25e:	429a      	cmp	r2, r3
 808b260:	d117      	bne.n	808b292 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 808b262:	69bb      	ldr	r3, [r7, #24]
 808b264:	681a      	ldr	r2, [r3, #0]
 808b266:	4b38      	ldr	r3, [pc, #224]	; (808b348 <etharp_output+0x1fc>)
 808b268:	781b      	ldrb	r3, [r3, #0]
 808b26a:	4618      	mov	r0, r3
 808b26c:	4937      	ldr	r1, [pc, #220]	; (808b34c <etharp_output+0x200>)
 808b26e:	4603      	mov	r3, r0
 808b270:	005b      	lsls	r3, r3, #1
 808b272:	4403      	add	r3, r0
 808b274:	00db      	lsls	r3, r3, #3
 808b276:	440b      	add	r3, r1
 808b278:	3304      	adds	r3, #4
 808b27a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 808b27c:	429a      	cmp	r2, r3
 808b27e:	d108      	bne.n	808b292 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 808b280:	4b31      	ldr	r3, [pc, #196]	; (808b348 <etharp_output+0x1fc>)
 808b282:	781b      	ldrb	r3, [r3, #0]
 808b284:	461a      	mov	r2, r3
 808b286:	68b9      	ldr	r1, [r7, #8]
 808b288:	68f8      	ldr	r0, [r7, #12]
 808b28a:	f7ff fec5 	bl	808b018 <etharp_output_to_arp_index>
 808b28e:	4603      	mov	r3, r0
 808b290:	e04a      	b.n	808b328 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 808b292:	2300      	movs	r3, #0
 808b294:	75fb      	strb	r3, [r7, #23]
 808b296:	e031      	b.n	808b2fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 808b298:	7dfa      	ldrb	r2, [r7, #23]
 808b29a:	492c      	ldr	r1, [pc, #176]	; (808b34c <etharp_output+0x200>)
 808b29c:	4613      	mov	r3, r2
 808b29e:	005b      	lsls	r3, r3, #1
 808b2a0:	4413      	add	r3, r2
 808b2a2:	00db      	lsls	r3, r3, #3
 808b2a4:	440b      	add	r3, r1
 808b2a6:	3314      	adds	r3, #20
 808b2a8:	781b      	ldrb	r3, [r3, #0]
 808b2aa:	2b01      	cmp	r3, #1
 808b2ac:	d923      	bls.n	808b2f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 808b2ae:	7dfa      	ldrb	r2, [r7, #23]
 808b2b0:	4926      	ldr	r1, [pc, #152]	; (808b34c <etharp_output+0x200>)
 808b2b2:	4613      	mov	r3, r2
 808b2b4:	005b      	lsls	r3, r3, #1
 808b2b6:	4413      	add	r3, r2
 808b2b8:	00db      	lsls	r3, r3, #3
 808b2ba:	440b      	add	r3, r1
 808b2bc:	3308      	adds	r3, #8
 808b2be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 808b2c0:	68fa      	ldr	r2, [r7, #12]
 808b2c2:	429a      	cmp	r2, r3
 808b2c4:	d117      	bne.n	808b2f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 808b2c6:	69bb      	ldr	r3, [r7, #24]
 808b2c8:	6819      	ldr	r1, [r3, #0]
 808b2ca:	7dfa      	ldrb	r2, [r7, #23]
 808b2cc:	481f      	ldr	r0, [pc, #124]	; (808b34c <etharp_output+0x200>)
 808b2ce:	4613      	mov	r3, r2
 808b2d0:	005b      	lsls	r3, r3, #1
 808b2d2:	4413      	add	r3, r2
 808b2d4:	00db      	lsls	r3, r3, #3
 808b2d6:	4403      	add	r3, r0
 808b2d8:	3304      	adds	r3, #4
 808b2da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 808b2dc:	4299      	cmp	r1, r3
 808b2de:	d10a      	bne.n	808b2f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 808b2e0:	4a19      	ldr	r2, [pc, #100]	; (808b348 <etharp_output+0x1fc>)
 808b2e2:	7dfb      	ldrb	r3, [r7, #23]
 808b2e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 808b2e6:	7dfb      	ldrb	r3, [r7, #23]
 808b2e8:	461a      	mov	r2, r3
 808b2ea:	68b9      	ldr	r1, [r7, #8]
 808b2ec:	68f8      	ldr	r0, [r7, #12]
 808b2ee:	f7ff fe93 	bl	808b018 <etharp_output_to_arp_index>
 808b2f2:	4603      	mov	r3, r0
 808b2f4:	e018      	b.n	808b328 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 808b2f6:	7dfb      	ldrb	r3, [r7, #23]
 808b2f8:	3301      	adds	r3, #1
 808b2fa:	75fb      	strb	r3, [r7, #23]
 808b2fc:	7dfb      	ldrb	r3, [r7, #23]
 808b2fe:	2b09      	cmp	r3, #9
 808b300:	d9ca      	bls.n	808b298 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 808b302:	68ba      	ldr	r2, [r7, #8]
 808b304:	69b9      	ldr	r1, [r7, #24]
 808b306:	68f8      	ldr	r0, [r7, #12]
 808b308:	f000 f822 	bl	808b350 <etharp_query>
 808b30c:	4603      	mov	r3, r0
 808b30e:	e00b      	b.n	808b328 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 808b310:	68fb      	ldr	r3, [r7, #12]
 808b312:	f103 0226 	add.w	r2, r3, #38	; 0x26
 808b316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808b31a:	9300      	str	r3, [sp, #0]
 808b31c:	69fb      	ldr	r3, [r7, #28]
 808b31e:	68b9      	ldr	r1, [r7, #8]
 808b320:	68f8      	ldr	r0, [r7, #12]
 808b322:	f001 fd45 	bl	808cdb0 <ethernet_output>
 808b326:	4603      	mov	r3, r0
}
 808b328:	4618      	mov	r0, r3
 808b32a:	3720      	adds	r7, #32
 808b32c:	46bd      	mov	sp, r7
 808b32e:	bd80      	pop	{r7, pc}
 808b330:	080902a8 	.word	0x080902a8
 808b334:	080903f8 	.word	0x080903f8
 808b338:	08090320 	.word	0x08090320
 808b33c:	08090448 	.word	0x08090448
 808b340:	080903e8 	.word	0x080903e8
 808b344:	08090a5c 	.word	0x08090a5c
 808b348:	20008384 	.word	0x20008384
 808b34c:	20008294 	.word	0x20008294

0808b350 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 808b350:	b580      	push	{r7, lr}
 808b352:	b08c      	sub	sp, #48	; 0x30
 808b354:	af02      	add	r7, sp, #8
 808b356:	60f8      	str	r0, [r7, #12]
 808b358:	60b9      	str	r1, [r7, #8]
 808b35a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 808b35c:	68fb      	ldr	r3, [r7, #12]
 808b35e:	3326      	adds	r3, #38	; 0x26
 808b360:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 808b362:	23ff      	movs	r3, #255	; 0xff
 808b364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 808b368:	2300      	movs	r3, #0
 808b36a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 808b36c:	68bb      	ldr	r3, [r7, #8]
 808b36e:	681b      	ldr	r3, [r3, #0]
 808b370:	68f9      	ldr	r1, [r7, #12]
 808b372:	4618      	mov	r0, r3
 808b374:	f000 fe0e 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808b378:	4603      	mov	r3, r0
 808b37a:	2b00      	cmp	r3, #0
 808b37c:	d10c      	bne.n	808b398 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 808b37e:	68bb      	ldr	r3, [r7, #8]
 808b380:	681b      	ldr	r3, [r3, #0]
 808b382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 808b386:	2be0      	cmp	r3, #224	; 0xe0
 808b388:	d006      	beq.n	808b398 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 808b38a:	68bb      	ldr	r3, [r7, #8]
 808b38c:	2b00      	cmp	r3, #0
 808b38e:	d003      	beq.n	808b398 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 808b390:	68bb      	ldr	r3, [r7, #8]
 808b392:	681b      	ldr	r3, [r3, #0]
 808b394:	2b00      	cmp	r3, #0
 808b396:	d102      	bne.n	808b39e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 808b398:	f06f 030f 	mvn.w	r3, #15
 808b39c:	e101      	b.n	808b5a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 808b39e:	68fa      	ldr	r2, [r7, #12]
 808b3a0:	2101      	movs	r1, #1
 808b3a2:	68b8      	ldr	r0, [r7, #8]
 808b3a4:	f7ff fb60 	bl	808aa68 <etharp_find_entry>
 808b3a8:	4603      	mov	r3, r0
 808b3aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 808b3ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 808b3b0:	2b00      	cmp	r3, #0
 808b3b2:	da02      	bge.n	808b3ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 808b3b4:	8a7b      	ldrh	r3, [r7, #18]
 808b3b6:	b25b      	sxtb	r3, r3
 808b3b8:	e0f3      	b.n	808b5a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 808b3ba:	8a7b      	ldrh	r3, [r7, #18]
 808b3bc:	2b7e      	cmp	r3, #126	; 0x7e
 808b3be:	d906      	bls.n	808b3ce <etharp_query+0x7e>
 808b3c0:	4b7a      	ldr	r3, [pc, #488]	; (808b5ac <etharp_query+0x25c>)
 808b3c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 808b3c6:	497a      	ldr	r1, [pc, #488]	; (808b5b0 <etharp_query+0x260>)
 808b3c8:	487a      	ldr	r0, [pc, #488]	; (808b5b4 <etharp_query+0x264>)
 808b3ca:	f001 fd83 	bl	808ced4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 808b3ce:	8a7b      	ldrh	r3, [r7, #18]
 808b3d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 808b3d2:	7c7a      	ldrb	r2, [r7, #17]
 808b3d4:	4978      	ldr	r1, [pc, #480]	; (808b5b8 <etharp_query+0x268>)
 808b3d6:	4613      	mov	r3, r2
 808b3d8:	005b      	lsls	r3, r3, #1
 808b3da:	4413      	add	r3, r2
 808b3dc:	00db      	lsls	r3, r3, #3
 808b3de:	440b      	add	r3, r1
 808b3e0:	3314      	adds	r3, #20
 808b3e2:	781b      	ldrb	r3, [r3, #0]
 808b3e4:	2b00      	cmp	r3, #0
 808b3e6:	d115      	bne.n	808b414 <etharp_query+0xc4>
    is_new_entry = 1;
 808b3e8:	2301      	movs	r3, #1
 808b3ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 808b3ec:	7c7a      	ldrb	r2, [r7, #17]
 808b3ee:	4972      	ldr	r1, [pc, #456]	; (808b5b8 <etharp_query+0x268>)
 808b3f0:	4613      	mov	r3, r2
 808b3f2:	005b      	lsls	r3, r3, #1
 808b3f4:	4413      	add	r3, r2
 808b3f6:	00db      	lsls	r3, r3, #3
 808b3f8:	440b      	add	r3, r1
 808b3fa:	3314      	adds	r3, #20
 808b3fc:	2201      	movs	r2, #1
 808b3fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 808b400:	7c7a      	ldrb	r2, [r7, #17]
 808b402:	496d      	ldr	r1, [pc, #436]	; (808b5b8 <etharp_query+0x268>)
 808b404:	4613      	mov	r3, r2
 808b406:	005b      	lsls	r3, r3, #1
 808b408:	4413      	add	r3, r2
 808b40a:	00db      	lsls	r3, r3, #3
 808b40c:	440b      	add	r3, r1
 808b40e:	3308      	adds	r3, #8
 808b410:	68fa      	ldr	r2, [r7, #12]
 808b412:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 808b414:	7c7a      	ldrb	r2, [r7, #17]
 808b416:	4968      	ldr	r1, [pc, #416]	; (808b5b8 <etharp_query+0x268>)
 808b418:	4613      	mov	r3, r2
 808b41a:	005b      	lsls	r3, r3, #1
 808b41c:	4413      	add	r3, r2
 808b41e:	00db      	lsls	r3, r3, #3
 808b420:	440b      	add	r3, r1
 808b422:	3314      	adds	r3, #20
 808b424:	781b      	ldrb	r3, [r3, #0]
 808b426:	2b01      	cmp	r3, #1
 808b428:	d011      	beq.n	808b44e <etharp_query+0xfe>
 808b42a:	7c7a      	ldrb	r2, [r7, #17]
 808b42c:	4962      	ldr	r1, [pc, #392]	; (808b5b8 <etharp_query+0x268>)
 808b42e:	4613      	mov	r3, r2
 808b430:	005b      	lsls	r3, r3, #1
 808b432:	4413      	add	r3, r2
 808b434:	00db      	lsls	r3, r3, #3
 808b436:	440b      	add	r3, r1
 808b438:	3314      	adds	r3, #20
 808b43a:	781b      	ldrb	r3, [r3, #0]
 808b43c:	2b01      	cmp	r3, #1
 808b43e:	d806      	bhi.n	808b44e <etharp_query+0xfe>
 808b440:	4b5a      	ldr	r3, [pc, #360]	; (808b5ac <etharp_query+0x25c>)
 808b442:	f240 32cd 	movw	r2, #973	; 0x3cd
 808b446:	495d      	ldr	r1, [pc, #372]	; (808b5bc <etharp_query+0x26c>)
 808b448:	485a      	ldr	r0, [pc, #360]	; (808b5b4 <etharp_query+0x264>)
 808b44a:	f001 fd43 	bl	808ced4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 808b44e:	6a3b      	ldr	r3, [r7, #32]
 808b450:	2b00      	cmp	r3, #0
 808b452:	d102      	bne.n	808b45a <etharp_query+0x10a>
 808b454:	687b      	ldr	r3, [r7, #4]
 808b456:	2b00      	cmp	r3, #0
 808b458:	d10c      	bne.n	808b474 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 808b45a:	68b9      	ldr	r1, [r7, #8]
 808b45c:	68f8      	ldr	r0, [r7, #12]
 808b45e:	f000 f963 	bl	808b728 <etharp_request>
 808b462:	4603      	mov	r3, r0
 808b464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 808b468:	687b      	ldr	r3, [r7, #4]
 808b46a:	2b00      	cmp	r3, #0
 808b46c:	d102      	bne.n	808b474 <etharp_query+0x124>
      return result;
 808b46e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 808b472:	e096      	b.n	808b5a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 808b474:	687b      	ldr	r3, [r7, #4]
 808b476:	2b00      	cmp	r3, #0
 808b478:	d106      	bne.n	808b488 <etharp_query+0x138>
 808b47a:	4b4c      	ldr	r3, [pc, #304]	; (808b5ac <etharp_query+0x25c>)
 808b47c:	f240 32e1 	movw	r2, #993	; 0x3e1
 808b480:	494f      	ldr	r1, [pc, #316]	; (808b5c0 <etharp_query+0x270>)
 808b482:	484c      	ldr	r0, [pc, #304]	; (808b5b4 <etharp_query+0x264>)
 808b484:	f001 fd26 	bl	808ced4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 808b488:	7c7a      	ldrb	r2, [r7, #17]
 808b48a:	494b      	ldr	r1, [pc, #300]	; (808b5b8 <etharp_query+0x268>)
 808b48c:	4613      	mov	r3, r2
 808b48e:	005b      	lsls	r3, r3, #1
 808b490:	4413      	add	r3, r2
 808b492:	00db      	lsls	r3, r3, #3
 808b494:	440b      	add	r3, r1
 808b496:	3314      	adds	r3, #20
 808b498:	781b      	ldrb	r3, [r3, #0]
 808b49a:	2b01      	cmp	r3, #1
 808b49c:	d917      	bls.n	808b4ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 808b49e:	4a49      	ldr	r2, [pc, #292]	; (808b5c4 <etharp_query+0x274>)
 808b4a0:	7c7b      	ldrb	r3, [r7, #17]
 808b4a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 808b4a4:	7c7a      	ldrb	r2, [r7, #17]
 808b4a6:	4613      	mov	r3, r2
 808b4a8:	005b      	lsls	r3, r3, #1
 808b4aa:	4413      	add	r3, r2
 808b4ac:	00db      	lsls	r3, r3, #3
 808b4ae:	3308      	adds	r3, #8
 808b4b0:	4a41      	ldr	r2, [pc, #260]	; (808b5b8 <etharp_query+0x268>)
 808b4b2:	4413      	add	r3, r2
 808b4b4:	3304      	adds	r3, #4
 808b4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 808b4ba:	9200      	str	r2, [sp, #0]
 808b4bc:	697a      	ldr	r2, [r7, #20]
 808b4be:	6879      	ldr	r1, [r7, #4]
 808b4c0:	68f8      	ldr	r0, [r7, #12]
 808b4c2:	f001 fc75 	bl	808cdb0 <ethernet_output>
 808b4c6:	4603      	mov	r3, r0
 808b4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 808b4cc:	e067      	b.n	808b59e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 808b4ce:	7c7a      	ldrb	r2, [r7, #17]
 808b4d0:	4939      	ldr	r1, [pc, #228]	; (808b5b8 <etharp_query+0x268>)
 808b4d2:	4613      	mov	r3, r2
 808b4d4:	005b      	lsls	r3, r3, #1
 808b4d6:	4413      	add	r3, r2
 808b4d8:	00db      	lsls	r3, r3, #3
 808b4da:	440b      	add	r3, r1
 808b4dc:	3314      	adds	r3, #20
 808b4de:	781b      	ldrb	r3, [r3, #0]
 808b4e0:	2b01      	cmp	r3, #1
 808b4e2:	d15c      	bne.n	808b59e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 808b4e4:	2300      	movs	r3, #0
 808b4e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 808b4e8:	687b      	ldr	r3, [r7, #4]
 808b4ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 808b4ec:	e01c      	b.n	808b528 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 808b4ee:	69fb      	ldr	r3, [r7, #28]
 808b4f0:	895a      	ldrh	r2, [r3, #10]
 808b4f2:	69fb      	ldr	r3, [r7, #28]
 808b4f4:	891b      	ldrh	r3, [r3, #8]
 808b4f6:	429a      	cmp	r2, r3
 808b4f8:	d10a      	bne.n	808b510 <etharp_query+0x1c0>
 808b4fa:	69fb      	ldr	r3, [r7, #28]
 808b4fc:	681b      	ldr	r3, [r3, #0]
 808b4fe:	2b00      	cmp	r3, #0
 808b500:	d006      	beq.n	808b510 <etharp_query+0x1c0>
 808b502:	4b2a      	ldr	r3, [pc, #168]	; (808b5ac <etharp_query+0x25c>)
 808b504:	f240 32f1 	movw	r2, #1009	; 0x3f1
 808b508:	492f      	ldr	r1, [pc, #188]	; (808b5c8 <etharp_query+0x278>)
 808b50a:	482a      	ldr	r0, [pc, #168]	; (808b5b4 <etharp_query+0x264>)
 808b50c:	f001 fce2 	bl	808ced4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 808b510:	69fb      	ldr	r3, [r7, #28]
 808b512:	7b1b      	ldrb	r3, [r3, #12]
 808b514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808b518:	2b00      	cmp	r3, #0
 808b51a:	d002      	beq.n	808b522 <etharp_query+0x1d2>
        copy_needed = 1;
 808b51c:	2301      	movs	r3, #1
 808b51e:	61bb      	str	r3, [r7, #24]
        break;
 808b520:	e005      	b.n	808b52e <etharp_query+0x1de>
      }
      p = p->next;
 808b522:	69fb      	ldr	r3, [r7, #28]
 808b524:	681b      	ldr	r3, [r3, #0]
 808b526:	61fb      	str	r3, [r7, #28]
    while (p) {
 808b528:	69fb      	ldr	r3, [r7, #28]
 808b52a:	2b00      	cmp	r3, #0
 808b52c:	d1df      	bne.n	808b4ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 808b52e:	69bb      	ldr	r3, [r7, #24]
 808b530:	2b00      	cmp	r3, #0
 808b532:	d007      	beq.n	808b544 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 808b534:	687a      	ldr	r2, [r7, #4]
 808b536:	f44f 7120 	mov.w	r1, #640	; 0x280
 808b53a:	200e      	movs	r0, #14
 808b53c:	f7f9 fd6a 	bl	8085014 <pbuf_clone>
 808b540:	61f8      	str	r0, [r7, #28]
 808b542:	e004      	b.n	808b54e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 808b544:	687b      	ldr	r3, [r7, #4]
 808b546:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 808b548:	69f8      	ldr	r0, [r7, #28]
 808b54a:	f7f9 fba7 	bl	8084c9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 808b54e:	69fb      	ldr	r3, [r7, #28]
 808b550:	2b00      	cmp	r3, #0
 808b552:	d021      	beq.n	808b598 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 808b554:	7c7a      	ldrb	r2, [r7, #17]
 808b556:	4918      	ldr	r1, [pc, #96]	; (808b5b8 <etharp_query+0x268>)
 808b558:	4613      	mov	r3, r2
 808b55a:	005b      	lsls	r3, r3, #1
 808b55c:	4413      	add	r3, r2
 808b55e:	00db      	lsls	r3, r3, #3
 808b560:	440b      	add	r3, r1
 808b562:	681b      	ldr	r3, [r3, #0]
 808b564:	2b00      	cmp	r3, #0
 808b566:	d00a      	beq.n	808b57e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 808b568:	7c7a      	ldrb	r2, [r7, #17]
 808b56a:	4913      	ldr	r1, [pc, #76]	; (808b5b8 <etharp_query+0x268>)
 808b56c:	4613      	mov	r3, r2
 808b56e:	005b      	lsls	r3, r3, #1
 808b570:	4413      	add	r3, r2
 808b572:	00db      	lsls	r3, r3, #3
 808b574:	440b      	add	r3, r1
 808b576:	681b      	ldr	r3, [r3, #0]
 808b578:	4618      	mov	r0, r3
 808b57a:	f7f9 faef 	bl	8084b5c <pbuf_free>
      }
      arp_table[i].q = p;
 808b57e:	7c7a      	ldrb	r2, [r7, #17]
 808b580:	490d      	ldr	r1, [pc, #52]	; (808b5b8 <etharp_query+0x268>)
 808b582:	4613      	mov	r3, r2
 808b584:	005b      	lsls	r3, r3, #1
 808b586:	4413      	add	r3, r2
 808b588:	00db      	lsls	r3, r3, #3
 808b58a:	440b      	add	r3, r1
 808b58c:	69fa      	ldr	r2, [r7, #28]
 808b58e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 808b590:	2300      	movs	r3, #0
 808b592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 808b596:	e002      	b.n	808b59e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 808b598:	23ff      	movs	r3, #255	; 0xff
 808b59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 808b59e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 808b5a2:	4618      	mov	r0, r3
 808b5a4:	3728      	adds	r7, #40	; 0x28
 808b5a6:	46bd      	mov	sp, r7
 808b5a8:	bd80      	pop	{r7, pc}
 808b5aa:	bf00      	nop
 808b5ac:	080902a8 	.word	0x080902a8
 808b5b0:	08090454 	.word	0x08090454
 808b5b4:	08090320 	.word	0x08090320
 808b5b8:	20008294 	.word	0x20008294
 808b5bc:	08090464 	.word	0x08090464
 808b5c0:	08090448 	.word	0x08090448
 808b5c4:	20008384 	.word	0x20008384
 808b5c8:	0809048c 	.word	0x0809048c

0808b5cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 808b5cc:	b580      	push	{r7, lr}
 808b5ce:	b08a      	sub	sp, #40	; 0x28
 808b5d0:	af02      	add	r7, sp, #8
 808b5d2:	60f8      	str	r0, [r7, #12]
 808b5d4:	60b9      	str	r1, [r7, #8]
 808b5d6:	607a      	str	r2, [r7, #4]
 808b5d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 808b5da:	2300      	movs	r3, #0
 808b5dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 808b5de:	68fb      	ldr	r3, [r7, #12]
 808b5e0:	2b00      	cmp	r3, #0
 808b5e2:	d106      	bne.n	808b5f2 <etharp_raw+0x26>
 808b5e4:	4b3a      	ldr	r3, [pc, #232]	; (808b6d0 <etharp_raw+0x104>)
 808b5e6:	f240 4257 	movw	r2, #1111	; 0x457
 808b5ea:	493a      	ldr	r1, [pc, #232]	; (808b6d4 <etharp_raw+0x108>)
 808b5ec:	483a      	ldr	r0, [pc, #232]	; (808b6d8 <etharp_raw+0x10c>)
 808b5ee:	f001 fc71 	bl	808ced4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 808b5f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 808b5f6:	211c      	movs	r1, #28
 808b5f8:	200e      	movs	r0, #14
 808b5fa:	f7f8 ffcb 	bl	8084594 <pbuf_alloc>
 808b5fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 808b600:	69bb      	ldr	r3, [r7, #24]
 808b602:	2b00      	cmp	r3, #0
 808b604:	d102      	bne.n	808b60c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 808b606:	f04f 33ff 	mov.w	r3, #4294967295
 808b60a:	e05d      	b.n	808b6c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 808b60c:	69bb      	ldr	r3, [r7, #24]
 808b60e:	895b      	ldrh	r3, [r3, #10]
 808b610:	2b1b      	cmp	r3, #27
 808b612:	d806      	bhi.n	808b622 <etharp_raw+0x56>
 808b614:	4b2e      	ldr	r3, [pc, #184]	; (808b6d0 <etharp_raw+0x104>)
 808b616:	f240 4262 	movw	r2, #1122	; 0x462
 808b61a:	4930      	ldr	r1, [pc, #192]	; (808b6dc <etharp_raw+0x110>)
 808b61c:	482e      	ldr	r0, [pc, #184]	; (808b6d8 <etharp_raw+0x10c>)
 808b61e:	f001 fc59 	bl	808ced4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 808b622:	69bb      	ldr	r3, [r7, #24]
 808b624:	685b      	ldr	r3, [r3, #4]
 808b626:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 808b628:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 808b62a:	4618      	mov	r0, r3
 808b62c:	f7f7 ff58 	bl	80834e0 <lwip_htons>
 808b630:	4603      	mov	r3, r0
 808b632:	461a      	mov	r2, r3
 808b634:	697b      	ldr	r3, [r7, #20]
 808b636:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 808b638:	68fb      	ldr	r3, [r7, #12]
 808b63a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808b63e:	2b06      	cmp	r3, #6
 808b640:	d006      	beq.n	808b650 <etharp_raw+0x84>
 808b642:	4b23      	ldr	r3, [pc, #140]	; (808b6d0 <etharp_raw+0x104>)
 808b644:	f240 4269 	movw	r2, #1129	; 0x469
 808b648:	4925      	ldr	r1, [pc, #148]	; (808b6e0 <etharp_raw+0x114>)
 808b64a:	4823      	ldr	r0, [pc, #140]	; (808b6d8 <etharp_raw+0x10c>)
 808b64c:	f001 fc42 	bl	808ced4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 808b650:	697b      	ldr	r3, [r7, #20]
 808b652:	3308      	adds	r3, #8
 808b654:	2206      	movs	r2, #6
 808b656:	6839      	ldr	r1, [r7, #0]
 808b658:	4618      	mov	r0, r3
 808b65a:	f001 fc25 	bl	808cea8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 808b65e:	697b      	ldr	r3, [r7, #20]
 808b660:	3312      	adds	r3, #18
 808b662:	2206      	movs	r2, #6
 808b664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 808b666:	4618      	mov	r0, r3
 808b668:	f001 fc1e 	bl	808cea8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 808b66c:	697b      	ldr	r3, [r7, #20]
 808b66e:	330e      	adds	r3, #14
 808b670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 808b672:	6812      	ldr	r2, [r2, #0]
 808b674:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 808b676:	697b      	ldr	r3, [r7, #20]
 808b678:	3318      	adds	r3, #24
 808b67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808b67c:	6812      	ldr	r2, [r2, #0]
 808b67e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 808b680:	697b      	ldr	r3, [r7, #20]
 808b682:	2200      	movs	r2, #0
 808b684:	701a      	strb	r2, [r3, #0]
 808b686:	2200      	movs	r2, #0
 808b688:	f042 0201 	orr.w	r2, r2, #1
 808b68c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 808b68e:	697b      	ldr	r3, [r7, #20]
 808b690:	2200      	movs	r2, #0
 808b692:	f042 0208 	orr.w	r2, r2, #8
 808b696:	709a      	strb	r2, [r3, #2]
 808b698:	2200      	movs	r2, #0
 808b69a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 808b69c:	697b      	ldr	r3, [r7, #20]
 808b69e:	2206      	movs	r2, #6
 808b6a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 808b6a2:	697b      	ldr	r3, [r7, #20]
 808b6a4:	2204      	movs	r2, #4
 808b6a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 808b6a8:	f640 0306 	movw	r3, #2054	; 0x806
 808b6ac:	9300      	str	r3, [sp, #0]
 808b6ae:	687b      	ldr	r3, [r7, #4]
 808b6b0:	68ba      	ldr	r2, [r7, #8]
 808b6b2:	69b9      	ldr	r1, [r7, #24]
 808b6b4:	68f8      	ldr	r0, [r7, #12]
 808b6b6:	f001 fb7b 	bl	808cdb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 808b6ba:	69b8      	ldr	r0, [r7, #24]
 808b6bc:	f7f9 fa4e 	bl	8084b5c <pbuf_free>
  p = NULL;
 808b6c0:	2300      	movs	r3, #0
 808b6c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 808b6c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 808b6c8:	4618      	mov	r0, r3
 808b6ca:	3720      	adds	r7, #32
 808b6cc:	46bd      	mov	sp, r7
 808b6ce:	bd80      	pop	{r7, pc}
 808b6d0:	080902a8 	.word	0x080902a8
 808b6d4:	080903f8 	.word	0x080903f8
 808b6d8:	08090320 	.word	0x08090320
 808b6dc:	080904a8 	.word	0x080904a8
 808b6e0:	080904dc 	.word	0x080904dc

0808b6e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 808b6e4:	b580      	push	{r7, lr}
 808b6e6:	b088      	sub	sp, #32
 808b6e8:	af04      	add	r7, sp, #16
 808b6ea:	60f8      	str	r0, [r7, #12]
 808b6ec:	60b9      	str	r1, [r7, #8]
 808b6ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 808b6f0:	68fb      	ldr	r3, [r7, #12]
 808b6f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 808b6f6:	68fb      	ldr	r3, [r7, #12]
 808b6f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 808b6fc:	68fb      	ldr	r3, [r7, #12]
 808b6fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 808b700:	2201      	movs	r2, #1
 808b702:	9203      	str	r2, [sp, #12]
 808b704:	68ba      	ldr	r2, [r7, #8]
 808b706:	9202      	str	r2, [sp, #8]
 808b708:	4a06      	ldr	r2, [pc, #24]	; (808b724 <etharp_request_dst+0x40>)
 808b70a:	9201      	str	r2, [sp, #4]
 808b70c:	9300      	str	r3, [sp, #0]
 808b70e:	4603      	mov	r3, r0
 808b710:	687a      	ldr	r2, [r7, #4]
 808b712:	68f8      	ldr	r0, [r7, #12]
 808b714:	f7ff ff5a 	bl	808b5cc <etharp_raw>
 808b718:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 808b71a:	4618      	mov	r0, r3
 808b71c:	3710      	adds	r7, #16
 808b71e:	46bd      	mov	sp, r7
 808b720:	bd80      	pop	{r7, pc}
 808b722:	bf00      	nop
 808b724:	08090a64 	.word	0x08090a64

0808b728 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 808b728:	b580      	push	{r7, lr}
 808b72a:	b082      	sub	sp, #8
 808b72c:	af00      	add	r7, sp, #0
 808b72e:	6078      	str	r0, [r7, #4]
 808b730:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 808b732:	4a05      	ldr	r2, [pc, #20]	; (808b748 <etharp_request+0x20>)
 808b734:	6839      	ldr	r1, [r7, #0]
 808b736:	6878      	ldr	r0, [r7, #4]
 808b738:	f7ff ffd4 	bl	808b6e4 <etharp_request_dst>
 808b73c:	4603      	mov	r3, r0
}
 808b73e:	4618      	mov	r0, r3
 808b740:	3708      	adds	r7, #8
 808b742:	46bd      	mov	sp, r7
 808b744:	bd80      	pop	{r7, pc}
 808b746:	bf00      	nop
 808b748:	08090a5c 	.word	0x08090a5c

0808b74c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 808b74c:	b580      	push	{r7, lr}
 808b74e:	b08e      	sub	sp, #56	; 0x38
 808b750:	af04      	add	r7, sp, #16
 808b752:	6078      	str	r0, [r7, #4]
 808b754:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 808b756:	4b79      	ldr	r3, [pc, #484]	; (808b93c <icmp_input+0x1f0>)
 808b758:	689b      	ldr	r3, [r3, #8]
 808b75a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 808b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808b75e:	781b      	ldrb	r3, [r3, #0]
 808b760:	f003 030f 	and.w	r3, r3, #15
 808b764:	b2db      	uxtb	r3, r3
 808b766:	009b      	lsls	r3, r3, #2
 808b768:	b2db      	uxtb	r3, r3
 808b76a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 808b76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b76e:	2b13      	cmp	r3, #19
 808b770:	f240 80cd 	bls.w	808b90e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 808b774:	687b      	ldr	r3, [r7, #4]
 808b776:	895b      	ldrh	r3, [r3, #10]
 808b778:	2b03      	cmp	r3, #3
 808b77a:	f240 80ca 	bls.w	808b912 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 808b77e:	687b      	ldr	r3, [r7, #4]
 808b780:	685b      	ldr	r3, [r3, #4]
 808b782:	781b      	ldrb	r3, [r3, #0]
 808b784:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 808b788:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 808b78c:	2b00      	cmp	r3, #0
 808b78e:	f000 80b7 	beq.w	808b900 <icmp_input+0x1b4>
 808b792:	2b08      	cmp	r3, #8
 808b794:	f040 80b7 	bne.w	808b906 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 808b798:	4b69      	ldr	r3, [pc, #420]	; (808b940 <icmp_input+0x1f4>)
 808b79a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 808b79c:	4b67      	ldr	r3, [pc, #412]	; (808b93c <icmp_input+0x1f0>)
 808b79e:	695b      	ldr	r3, [r3, #20]
 808b7a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808b7a4:	2be0      	cmp	r3, #224	; 0xe0
 808b7a6:	f000 80bb 	beq.w	808b920 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 808b7aa:	4b64      	ldr	r3, [pc, #400]	; (808b93c <icmp_input+0x1f0>)
 808b7ac:	695b      	ldr	r3, [r3, #20]
 808b7ae:	4a63      	ldr	r2, [pc, #396]	; (808b93c <icmp_input+0x1f0>)
 808b7b0:	6812      	ldr	r2, [r2, #0]
 808b7b2:	4611      	mov	r1, r2
 808b7b4:	4618      	mov	r0, r3
 808b7b6:	f000 fbed 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808b7ba:	4603      	mov	r3, r0
 808b7bc:	2b00      	cmp	r3, #0
 808b7be:	f040 80b1 	bne.w	808b924 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 808b7c2:	687b      	ldr	r3, [r7, #4]
 808b7c4:	891b      	ldrh	r3, [r3, #8]
 808b7c6:	2b07      	cmp	r3, #7
 808b7c8:	f240 80a5 	bls.w	808b916 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 808b7cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b7ce:	330e      	adds	r3, #14
 808b7d0:	4619      	mov	r1, r3
 808b7d2:	6878      	ldr	r0, [r7, #4]
 808b7d4:	f7f9 f92c 	bl	8084a30 <pbuf_add_header>
 808b7d8:	4603      	mov	r3, r0
 808b7da:	2b00      	cmp	r3, #0
 808b7dc:	d04b      	beq.n	808b876 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 808b7de:	687b      	ldr	r3, [r7, #4]
 808b7e0:	891a      	ldrh	r2, [r3, #8]
 808b7e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b7e4:	4413      	add	r3, r2
 808b7e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 808b7e8:	687b      	ldr	r3, [r7, #4]
 808b7ea:	891b      	ldrh	r3, [r3, #8]
 808b7ec:	8b7a      	ldrh	r2, [r7, #26]
 808b7ee:	429a      	cmp	r2, r3
 808b7f0:	f0c0 809a 	bcc.w	808b928 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 808b7f4:	8b7b      	ldrh	r3, [r7, #26]
 808b7f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 808b7fa:	4619      	mov	r1, r3
 808b7fc:	200e      	movs	r0, #14
 808b7fe:	f7f8 fec9 	bl	8084594 <pbuf_alloc>
 808b802:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 808b804:	697b      	ldr	r3, [r7, #20]
 808b806:	2b00      	cmp	r3, #0
 808b808:	f000 8090 	beq.w	808b92c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 808b80c:	697b      	ldr	r3, [r7, #20]
 808b80e:	895b      	ldrh	r3, [r3, #10]
 808b810:	461a      	mov	r2, r3
 808b812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b814:	3308      	adds	r3, #8
 808b816:	429a      	cmp	r2, r3
 808b818:	d203      	bcs.n	808b822 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 808b81a:	6978      	ldr	r0, [r7, #20]
 808b81c:	f7f9 f99e 	bl	8084b5c <pbuf_free>
          goto icmperr;
 808b820:	e085      	b.n	808b92e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 808b822:	697b      	ldr	r3, [r7, #20]
 808b824:	685b      	ldr	r3, [r3, #4]
 808b826:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 808b828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 808b82a:	4618      	mov	r0, r3
 808b82c:	f001 fb3c 	bl	808cea8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 808b830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b832:	4619      	mov	r1, r3
 808b834:	6978      	ldr	r0, [r7, #20]
 808b836:	f7f9 f90b 	bl	8084a50 <pbuf_remove_header>
 808b83a:	4603      	mov	r3, r0
 808b83c:	2b00      	cmp	r3, #0
 808b83e:	d009      	beq.n	808b854 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 808b840:	4b40      	ldr	r3, [pc, #256]	; (808b944 <icmp_input+0x1f8>)
 808b842:	22b6      	movs	r2, #182	; 0xb6
 808b844:	4940      	ldr	r1, [pc, #256]	; (808b948 <icmp_input+0x1fc>)
 808b846:	4841      	ldr	r0, [pc, #260]	; (808b94c <icmp_input+0x200>)
 808b848:	f001 fb44 	bl	808ced4 <iprintf>
          pbuf_free(r);
 808b84c:	6978      	ldr	r0, [r7, #20]
 808b84e:	f7f9 f985 	bl	8084b5c <pbuf_free>
          goto icmperr;
 808b852:	e06c      	b.n	808b92e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 808b854:	6879      	ldr	r1, [r7, #4]
 808b856:	6978      	ldr	r0, [r7, #20]
 808b858:	f7f9 fa98 	bl	8084d8c <pbuf_copy>
 808b85c:	4603      	mov	r3, r0
 808b85e:	2b00      	cmp	r3, #0
 808b860:	d003      	beq.n	808b86a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 808b862:	6978      	ldr	r0, [r7, #20]
 808b864:	f7f9 f97a 	bl	8084b5c <pbuf_free>
          goto icmperr;
 808b868:	e061      	b.n	808b92e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 808b86a:	6878      	ldr	r0, [r7, #4]
 808b86c:	f7f9 f976 	bl	8084b5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 808b870:	697b      	ldr	r3, [r7, #20]
 808b872:	607b      	str	r3, [r7, #4]
 808b874:	e00f      	b.n	808b896 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 808b876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b878:	330e      	adds	r3, #14
 808b87a:	4619      	mov	r1, r3
 808b87c:	6878      	ldr	r0, [r7, #4]
 808b87e:	f7f9 f8e7 	bl	8084a50 <pbuf_remove_header>
 808b882:	4603      	mov	r3, r0
 808b884:	2b00      	cmp	r3, #0
 808b886:	d006      	beq.n	808b896 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 808b888:	4b2e      	ldr	r3, [pc, #184]	; (808b944 <icmp_input+0x1f8>)
 808b88a:	22c7      	movs	r2, #199	; 0xc7
 808b88c:	4930      	ldr	r1, [pc, #192]	; (808b950 <icmp_input+0x204>)
 808b88e:	482f      	ldr	r0, [pc, #188]	; (808b94c <icmp_input+0x200>)
 808b890:	f001 fb20 	bl	808ced4 <iprintf>
          goto icmperr;
 808b894:	e04b      	b.n	808b92e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 808b896:	687b      	ldr	r3, [r7, #4]
 808b898:	685b      	ldr	r3, [r3, #4]
 808b89a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 808b89c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 808b89e:	4619      	mov	r1, r3
 808b8a0:	6878      	ldr	r0, [r7, #4]
 808b8a2:	f7f9 f8c5 	bl	8084a30 <pbuf_add_header>
 808b8a6:	4603      	mov	r3, r0
 808b8a8:	2b00      	cmp	r3, #0
 808b8aa:	d12b      	bne.n	808b904 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 808b8ac:	687b      	ldr	r3, [r7, #4]
 808b8ae:	685b      	ldr	r3, [r3, #4]
 808b8b0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 808b8b2:	69fb      	ldr	r3, [r7, #28]
 808b8b4:	681a      	ldr	r2, [r3, #0]
 808b8b6:	68fb      	ldr	r3, [r7, #12]
 808b8b8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 808b8ba:	4b20      	ldr	r3, [pc, #128]	; (808b93c <icmp_input+0x1f0>)
 808b8bc:	691a      	ldr	r2, [r3, #16]
 808b8be:	68fb      	ldr	r3, [r7, #12]
 808b8c0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 808b8c2:	693b      	ldr	r3, [r7, #16]
 808b8c4:	2200      	movs	r2, #0
 808b8c6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 808b8c8:	693b      	ldr	r3, [r7, #16]
 808b8ca:	2200      	movs	r2, #0
 808b8cc:	709a      	strb	r2, [r3, #2]
 808b8ce:	2200      	movs	r2, #0
 808b8d0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 808b8d2:	68fb      	ldr	r3, [r7, #12]
 808b8d4:	22ff      	movs	r2, #255	; 0xff
 808b8d6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 808b8d8:	68fb      	ldr	r3, [r7, #12]
 808b8da:	2200      	movs	r2, #0
 808b8dc:	729a      	strb	r2, [r3, #10]
 808b8de:	2200      	movs	r2, #0
 808b8e0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 808b8e2:	683b      	ldr	r3, [r7, #0]
 808b8e4:	9302      	str	r3, [sp, #8]
 808b8e6:	2301      	movs	r3, #1
 808b8e8:	9301      	str	r3, [sp, #4]
 808b8ea:	2300      	movs	r3, #0
 808b8ec:	9300      	str	r3, [sp, #0]
 808b8ee:	23ff      	movs	r3, #255	; 0xff
 808b8f0:	2200      	movs	r2, #0
 808b8f2:	69f9      	ldr	r1, [r7, #28]
 808b8f4:	6878      	ldr	r0, [r7, #4]
 808b8f6:	f000 fa75 	bl	808bde4 <ip4_output_if>
 808b8fa:	4603      	mov	r3, r0
 808b8fc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 808b8fe:	e001      	b.n	808b904 <icmp_input+0x1b8>
      break;
 808b900:	bf00      	nop
 808b902:	e000      	b.n	808b906 <icmp_input+0x1ba>
      break;
 808b904:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 808b906:	6878      	ldr	r0, [r7, #4]
 808b908:	f7f9 f928 	bl	8084b5c <pbuf_free>
  return;
 808b90c:	e013      	b.n	808b936 <icmp_input+0x1ea>
    goto lenerr;
 808b90e:	bf00      	nop
 808b910:	e002      	b.n	808b918 <icmp_input+0x1cc>
    goto lenerr;
 808b912:	bf00      	nop
 808b914:	e000      	b.n	808b918 <icmp_input+0x1cc>
        goto lenerr;
 808b916:	bf00      	nop
lenerr:
  pbuf_free(p);
 808b918:	6878      	ldr	r0, [r7, #4]
 808b91a:	f7f9 f91f 	bl	8084b5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 808b91e:	e00a      	b.n	808b936 <icmp_input+0x1ea>
        goto icmperr;
 808b920:	bf00      	nop
 808b922:	e004      	b.n	808b92e <icmp_input+0x1e2>
        goto icmperr;
 808b924:	bf00      	nop
 808b926:	e002      	b.n	808b92e <icmp_input+0x1e2>
          goto icmperr;
 808b928:	bf00      	nop
 808b92a:	e000      	b.n	808b92e <icmp_input+0x1e2>
          goto icmperr;
 808b92c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 808b92e:	6878      	ldr	r0, [r7, #4]
 808b930:	f7f9 f914 	bl	8084b5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 808b934:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 808b936:	3728      	adds	r7, #40	; 0x28
 808b938:	46bd      	mov	sp, r7
 808b93a:	bd80      	pop	{r7, pc}
 808b93c:	20004cc4 	.word	0x20004cc4
 808b940:	20004cd8 	.word	0x20004cd8
 808b944:	08090520 	.word	0x08090520
 808b948:	08090558 	.word	0x08090558
 808b94c:	08090590 	.word	0x08090590
 808b950:	080905b8 	.word	0x080905b8

0808b954 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 808b954:	b580      	push	{r7, lr}
 808b956:	b082      	sub	sp, #8
 808b958:	af00      	add	r7, sp, #0
 808b95a:	6078      	str	r0, [r7, #4]
 808b95c:	460b      	mov	r3, r1
 808b95e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 808b960:	78fb      	ldrb	r3, [r7, #3]
 808b962:	461a      	mov	r2, r3
 808b964:	2103      	movs	r1, #3
 808b966:	6878      	ldr	r0, [r7, #4]
 808b968:	f000 f814 	bl	808b994 <icmp_send_response>
}
 808b96c:	bf00      	nop
 808b96e:	3708      	adds	r7, #8
 808b970:	46bd      	mov	sp, r7
 808b972:	bd80      	pop	{r7, pc}

0808b974 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 808b974:	b580      	push	{r7, lr}
 808b976:	b082      	sub	sp, #8
 808b978:	af00      	add	r7, sp, #0
 808b97a:	6078      	str	r0, [r7, #4]
 808b97c:	460b      	mov	r3, r1
 808b97e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 808b980:	78fb      	ldrb	r3, [r7, #3]
 808b982:	461a      	mov	r2, r3
 808b984:	210b      	movs	r1, #11
 808b986:	6878      	ldr	r0, [r7, #4]
 808b988:	f000 f804 	bl	808b994 <icmp_send_response>
}
 808b98c:	bf00      	nop
 808b98e:	3708      	adds	r7, #8
 808b990:	46bd      	mov	sp, r7
 808b992:	bd80      	pop	{r7, pc}

0808b994 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 808b994:	b580      	push	{r7, lr}
 808b996:	b08c      	sub	sp, #48	; 0x30
 808b998:	af04      	add	r7, sp, #16
 808b99a:	6078      	str	r0, [r7, #4]
 808b99c:	460b      	mov	r3, r1
 808b99e:	70fb      	strb	r3, [r7, #3]
 808b9a0:	4613      	mov	r3, r2
 808b9a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 808b9a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 808b9a8:	2124      	movs	r1, #36	; 0x24
 808b9aa:	2022      	movs	r0, #34	; 0x22
 808b9ac:	f7f8 fdf2 	bl	8084594 <pbuf_alloc>
 808b9b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 808b9b2:	69fb      	ldr	r3, [r7, #28]
 808b9b4:	2b00      	cmp	r3, #0
 808b9b6:	d04c      	beq.n	808ba52 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 808b9b8:	69fb      	ldr	r3, [r7, #28]
 808b9ba:	895b      	ldrh	r3, [r3, #10]
 808b9bc:	2b23      	cmp	r3, #35	; 0x23
 808b9be:	d806      	bhi.n	808b9ce <icmp_send_response+0x3a>
 808b9c0:	4b26      	ldr	r3, [pc, #152]	; (808ba5c <icmp_send_response+0xc8>)
 808b9c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 808b9c6:	4926      	ldr	r1, [pc, #152]	; (808ba60 <icmp_send_response+0xcc>)
 808b9c8:	4826      	ldr	r0, [pc, #152]	; (808ba64 <icmp_send_response+0xd0>)
 808b9ca:	f001 fa83 	bl	808ced4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 808b9ce:	687b      	ldr	r3, [r7, #4]
 808b9d0:	685b      	ldr	r3, [r3, #4]
 808b9d2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 808b9d4:	69fb      	ldr	r3, [r7, #28]
 808b9d6:	685b      	ldr	r3, [r3, #4]
 808b9d8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 808b9da:	697b      	ldr	r3, [r7, #20]
 808b9dc:	78fa      	ldrb	r2, [r7, #3]
 808b9de:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 808b9e0:	697b      	ldr	r3, [r7, #20]
 808b9e2:	78ba      	ldrb	r2, [r7, #2]
 808b9e4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 808b9e6:	697b      	ldr	r3, [r7, #20]
 808b9e8:	2200      	movs	r2, #0
 808b9ea:	711a      	strb	r2, [r3, #4]
 808b9ec:	2200      	movs	r2, #0
 808b9ee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 808b9f0:	697b      	ldr	r3, [r7, #20]
 808b9f2:	2200      	movs	r2, #0
 808b9f4:	719a      	strb	r2, [r3, #6]
 808b9f6:	2200      	movs	r2, #0
 808b9f8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 808b9fa:	69fb      	ldr	r3, [r7, #28]
 808b9fc:	685b      	ldr	r3, [r3, #4]
 808b9fe:	f103 0008 	add.w	r0, r3, #8
 808ba02:	687b      	ldr	r3, [r7, #4]
 808ba04:	685b      	ldr	r3, [r3, #4]
 808ba06:	221c      	movs	r2, #28
 808ba08:	4619      	mov	r1, r3
 808ba0a:	f001 fa4d 	bl	808cea8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 808ba0e:	69bb      	ldr	r3, [r7, #24]
 808ba10:	68db      	ldr	r3, [r3, #12]
 808ba12:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 808ba14:	f107 030c 	add.w	r3, r7, #12
 808ba18:	4618      	mov	r0, r3
 808ba1a:	f000 f825 	bl	808ba68 <ip4_route>
 808ba1e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 808ba20:	693b      	ldr	r3, [r7, #16]
 808ba22:	2b00      	cmp	r3, #0
 808ba24:	d011      	beq.n	808ba4a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 808ba26:	697b      	ldr	r3, [r7, #20]
 808ba28:	2200      	movs	r2, #0
 808ba2a:	709a      	strb	r2, [r3, #2]
 808ba2c:	2200      	movs	r2, #0
 808ba2e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 808ba30:	f107 020c 	add.w	r2, r7, #12
 808ba34:	693b      	ldr	r3, [r7, #16]
 808ba36:	9302      	str	r3, [sp, #8]
 808ba38:	2301      	movs	r3, #1
 808ba3a:	9301      	str	r3, [sp, #4]
 808ba3c:	2300      	movs	r3, #0
 808ba3e:	9300      	str	r3, [sp, #0]
 808ba40:	23ff      	movs	r3, #255	; 0xff
 808ba42:	2100      	movs	r1, #0
 808ba44:	69f8      	ldr	r0, [r7, #28]
 808ba46:	f000 f9cd 	bl	808bde4 <ip4_output_if>
  }
  pbuf_free(q);
 808ba4a:	69f8      	ldr	r0, [r7, #28]
 808ba4c:	f7f9 f886 	bl	8084b5c <pbuf_free>
 808ba50:	e000      	b.n	808ba54 <icmp_send_response+0xc0>
    return;
 808ba52:	bf00      	nop
}
 808ba54:	3720      	adds	r7, #32
 808ba56:	46bd      	mov	sp, r7
 808ba58:	bd80      	pop	{r7, pc}
 808ba5a:	bf00      	nop
 808ba5c:	08090520 	.word	0x08090520
 808ba60:	080905ec 	.word	0x080905ec
 808ba64:	08090590 	.word	0x08090590

0808ba68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 808ba68:	b480      	push	{r7}
 808ba6a:	b085      	sub	sp, #20
 808ba6c:	af00      	add	r7, sp, #0
 808ba6e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 808ba70:	4b33      	ldr	r3, [pc, #204]	; (808bb40 <ip4_route+0xd8>)
 808ba72:	681b      	ldr	r3, [r3, #0]
 808ba74:	60fb      	str	r3, [r7, #12]
 808ba76:	e036      	b.n	808bae6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 808ba78:	68fb      	ldr	r3, [r7, #12]
 808ba7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808ba7e:	f003 0301 	and.w	r3, r3, #1
 808ba82:	b2db      	uxtb	r3, r3
 808ba84:	2b00      	cmp	r3, #0
 808ba86:	d02b      	beq.n	808bae0 <ip4_route+0x78>
 808ba88:	68fb      	ldr	r3, [r7, #12]
 808ba8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808ba8e:	089b      	lsrs	r3, r3, #2
 808ba90:	f003 0301 	and.w	r3, r3, #1
 808ba94:	b2db      	uxtb	r3, r3
 808ba96:	2b00      	cmp	r3, #0
 808ba98:	d022      	beq.n	808bae0 <ip4_route+0x78>
 808ba9a:	68fb      	ldr	r3, [r7, #12]
 808ba9c:	3304      	adds	r3, #4
 808ba9e:	681b      	ldr	r3, [r3, #0]
 808baa0:	2b00      	cmp	r3, #0
 808baa2:	d01d      	beq.n	808bae0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 808baa4:	687b      	ldr	r3, [r7, #4]
 808baa6:	681a      	ldr	r2, [r3, #0]
 808baa8:	68fb      	ldr	r3, [r7, #12]
 808baaa:	3304      	adds	r3, #4
 808baac:	681b      	ldr	r3, [r3, #0]
 808baae:	405a      	eors	r2, r3
 808bab0:	68fb      	ldr	r3, [r7, #12]
 808bab2:	3308      	adds	r3, #8
 808bab4:	681b      	ldr	r3, [r3, #0]
 808bab6:	4013      	ands	r3, r2
 808bab8:	2b00      	cmp	r3, #0
 808baba:	d101      	bne.n	808bac0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 808babc:	68fb      	ldr	r3, [r7, #12]
 808babe:	e038      	b.n	808bb32 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 808bac0:	68fb      	ldr	r3, [r7, #12]
 808bac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bac6:	f003 0302 	and.w	r3, r3, #2
 808baca:	2b00      	cmp	r3, #0
 808bacc:	d108      	bne.n	808bae0 <ip4_route+0x78>
 808bace:	687b      	ldr	r3, [r7, #4]
 808bad0:	681a      	ldr	r2, [r3, #0]
 808bad2:	68fb      	ldr	r3, [r7, #12]
 808bad4:	330c      	adds	r3, #12
 808bad6:	681b      	ldr	r3, [r3, #0]
 808bad8:	429a      	cmp	r2, r3
 808bada:	d101      	bne.n	808bae0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 808badc:	68fb      	ldr	r3, [r7, #12]
 808bade:	e028      	b.n	808bb32 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 808bae0:	68fb      	ldr	r3, [r7, #12]
 808bae2:	681b      	ldr	r3, [r3, #0]
 808bae4:	60fb      	str	r3, [r7, #12]
 808bae6:	68fb      	ldr	r3, [r7, #12]
 808bae8:	2b00      	cmp	r3, #0
 808baea:	d1c5      	bne.n	808ba78 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 808baec:	4b15      	ldr	r3, [pc, #84]	; (808bb44 <ip4_route+0xdc>)
 808baee:	681b      	ldr	r3, [r3, #0]
 808baf0:	2b00      	cmp	r3, #0
 808baf2:	d01a      	beq.n	808bb2a <ip4_route+0xc2>
 808baf4:	4b13      	ldr	r3, [pc, #76]	; (808bb44 <ip4_route+0xdc>)
 808baf6:	681b      	ldr	r3, [r3, #0]
 808baf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bafc:	f003 0301 	and.w	r3, r3, #1
 808bb00:	2b00      	cmp	r3, #0
 808bb02:	d012      	beq.n	808bb2a <ip4_route+0xc2>
 808bb04:	4b0f      	ldr	r3, [pc, #60]	; (808bb44 <ip4_route+0xdc>)
 808bb06:	681b      	ldr	r3, [r3, #0]
 808bb08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bb0c:	f003 0304 	and.w	r3, r3, #4
 808bb10:	2b00      	cmp	r3, #0
 808bb12:	d00a      	beq.n	808bb2a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 808bb14:	4b0b      	ldr	r3, [pc, #44]	; (808bb44 <ip4_route+0xdc>)
 808bb16:	681b      	ldr	r3, [r3, #0]
 808bb18:	3304      	adds	r3, #4
 808bb1a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 808bb1c:	2b00      	cmp	r3, #0
 808bb1e:	d004      	beq.n	808bb2a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 808bb20:	687b      	ldr	r3, [r7, #4]
 808bb22:	681b      	ldr	r3, [r3, #0]
 808bb24:	b2db      	uxtb	r3, r3
 808bb26:	2b7f      	cmp	r3, #127	; 0x7f
 808bb28:	d101      	bne.n	808bb2e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 808bb2a:	2300      	movs	r3, #0
 808bb2c:	e001      	b.n	808bb32 <ip4_route+0xca>
  }

  return netif_default;
 808bb2e:	4b05      	ldr	r3, [pc, #20]	; (808bb44 <ip4_route+0xdc>)
 808bb30:	681b      	ldr	r3, [r3, #0]
}
 808bb32:	4618      	mov	r0, r3
 808bb34:	3714      	adds	r7, #20
 808bb36:	46bd      	mov	sp, r7
 808bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 808bb3c:	4770      	bx	lr
 808bb3e:	bf00      	nop
 808bb40:	20008228 	.word	0x20008228
 808bb44:	2000822c 	.word	0x2000822c

0808bb48 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 808bb48:	b580      	push	{r7, lr}
 808bb4a:	b082      	sub	sp, #8
 808bb4c:	af00      	add	r7, sp, #0
 808bb4e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 808bb50:	687b      	ldr	r3, [r7, #4]
 808bb52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bb56:	f003 0301 	and.w	r3, r3, #1
 808bb5a:	b2db      	uxtb	r3, r3
 808bb5c:	2b00      	cmp	r3, #0
 808bb5e:	d016      	beq.n	808bb8e <ip4_input_accept+0x46>
 808bb60:	687b      	ldr	r3, [r7, #4]
 808bb62:	3304      	adds	r3, #4
 808bb64:	681b      	ldr	r3, [r3, #0]
 808bb66:	2b00      	cmp	r3, #0
 808bb68:	d011      	beq.n	808bb8e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 808bb6a:	4b0b      	ldr	r3, [pc, #44]	; (808bb98 <ip4_input_accept+0x50>)
 808bb6c:	695a      	ldr	r2, [r3, #20]
 808bb6e:	687b      	ldr	r3, [r7, #4]
 808bb70:	3304      	adds	r3, #4
 808bb72:	681b      	ldr	r3, [r3, #0]
 808bb74:	429a      	cmp	r2, r3
 808bb76:	d008      	beq.n	808bb8a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 808bb78:	4b07      	ldr	r3, [pc, #28]	; (808bb98 <ip4_input_accept+0x50>)
 808bb7a:	695b      	ldr	r3, [r3, #20]
 808bb7c:	6879      	ldr	r1, [r7, #4]
 808bb7e:	4618      	mov	r0, r3
 808bb80:	f000 fa08 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808bb84:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 808bb86:	2b00      	cmp	r3, #0
 808bb88:	d001      	beq.n	808bb8e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 808bb8a:	2301      	movs	r3, #1
 808bb8c:	e000      	b.n	808bb90 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 808bb8e:	2300      	movs	r3, #0
}
 808bb90:	4618      	mov	r0, r3
 808bb92:	3708      	adds	r7, #8
 808bb94:	46bd      	mov	sp, r7
 808bb96:	bd80      	pop	{r7, pc}
 808bb98:	20004cc4 	.word	0x20004cc4

0808bb9c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 808bb9c:	b580      	push	{r7, lr}
 808bb9e:	b086      	sub	sp, #24
 808bba0:	af00      	add	r7, sp, #0
 808bba2:	6078      	str	r0, [r7, #4]
 808bba4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 808bba6:	687b      	ldr	r3, [r7, #4]
 808bba8:	685b      	ldr	r3, [r3, #4]
 808bbaa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 808bbac:	697b      	ldr	r3, [r7, #20]
 808bbae:	781b      	ldrb	r3, [r3, #0]
 808bbb0:	091b      	lsrs	r3, r3, #4
 808bbb2:	b2db      	uxtb	r3, r3
 808bbb4:	2b04      	cmp	r3, #4
 808bbb6:	d004      	beq.n	808bbc2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 808bbb8:	6878      	ldr	r0, [r7, #4]
 808bbba:	f7f8 ffcf 	bl	8084b5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 808bbbe:	2300      	movs	r3, #0
 808bbc0:	e107      	b.n	808bdd2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 808bbc2:	697b      	ldr	r3, [r7, #20]
 808bbc4:	781b      	ldrb	r3, [r3, #0]
 808bbc6:	f003 030f 	and.w	r3, r3, #15
 808bbca:	b2db      	uxtb	r3, r3
 808bbcc:	009b      	lsls	r3, r3, #2
 808bbce:	b2db      	uxtb	r3, r3
 808bbd0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 808bbd2:	697b      	ldr	r3, [r7, #20]
 808bbd4:	885b      	ldrh	r3, [r3, #2]
 808bbd6:	b29b      	uxth	r3, r3
 808bbd8:	4618      	mov	r0, r3
 808bbda:	f7f7 fc81 	bl	80834e0 <lwip_htons>
 808bbde:	4603      	mov	r3, r0
 808bbe0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 808bbe2:	687b      	ldr	r3, [r7, #4]
 808bbe4:	891b      	ldrh	r3, [r3, #8]
 808bbe6:	89ba      	ldrh	r2, [r7, #12]
 808bbe8:	429a      	cmp	r2, r3
 808bbea:	d204      	bcs.n	808bbf6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 808bbec:	89bb      	ldrh	r3, [r7, #12]
 808bbee:	4619      	mov	r1, r3
 808bbf0:	6878      	ldr	r0, [r7, #4]
 808bbf2:	f7f8 fe2d 	bl	8084850 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 808bbf6:	687b      	ldr	r3, [r7, #4]
 808bbf8:	895b      	ldrh	r3, [r3, #10]
 808bbfa:	89fa      	ldrh	r2, [r7, #14]
 808bbfc:	429a      	cmp	r2, r3
 808bbfe:	d807      	bhi.n	808bc10 <ip4_input+0x74>
 808bc00:	687b      	ldr	r3, [r7, #4]
 808bc02:	891b      	ldrh	r3, [r3, #8]
 808bc04:	89ba      	ldrh	r2, [r7, #12]
 808bc06:	429a      	cmp	r2, r3
 808bc08:	d802      	bhi.n	808bc10 <ip4_input+0x74>
 808bc0a:	89fb      	ldrh	r3, [r7, #14]
 808bc0c:	2b13      	cmp	r3, #19
 808bc0e:	d804      	bhi.n	808bc1a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 808bc10:	6878      	ldr	r0, [r7, #4]
 808bc12:	f7f8 ffa3 	bl	8084b5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 808bc16:	2300      	movs	r3, #0
 808bc18:	e0db      	b.n	808bdd2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 808bc1a:	697b      	ldr	r3, [r7, #20]
 808bc1c:	691b      	ldr	r3, [r3, #16]
 808bc1e:	4a6f      	ldr	r2, [pc, #444]	; (808bddc <ip4_input+0x240>)
 808bc20:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 808bc22:	697b      	ldr	r3, [r7, #20]
 808bc24:	68db      	ldr	r3, [r3, #12]
 808bc26:	4a6d      	ldr	r2, [pc, #436]	; (808bddc <ip4_input+0x240>)
 808bc28:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 808bc2a:	4b6c      	ldr	r3, [pc, #432]	; (808bddc <ip4_input+0x240>)
 808bc2c:	695b      	ldr	r3, [r3, #20]
 808bc2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808bc32:	2be0      	cmp	r3, #224	; 0xe0
 808bc34:	d112      	bne.n	808bc5c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 808bc36:	683b      	ldr	r3, [r7, #0]
 808bc38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bc3c:	f003 0301 	and.w	r3, r3, #1
 808bc40:	b2db      	uxtb	r3, r3
 808bc42:	2b00      	cmp	r3, #0
 808bc44:	d007      	beq.n	808bc56 <ip4_input+0xba>
 808bc46:	683b      	ldr	r3, [r7, #0]
 808bc48:	3304      	adds	r3, #4
 808bc4a:	681b      	ldr	r3, [r3, #0]
 808bc4c:	2b00      	cmp	r3, #0
 808bc4e:	d002      	beq.n	808bc56 <ip4_input+0xba>
      netif = inp;
 808bc50:	683b      	ldr	r3, [r7, #0]
 808bc52:	613b      	str	r3, [r7, #16]
 808bc54:	e02a      	b.n	808bcac <ip4_input+0x110>
    } else {
      netif = NULL;
 808bc56:	2300      	movs	r3, #0
 808bc58:	613b      	str	r3, [r7, #16]
 808bc5a:	e027      	b.n	808bcac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 808bc5c:	6838      	ldr	r0, [r7, #0]
 808bc5e:	f7ff ff73 	bl	808bb48 <ip4_input_accept>
 808bc62:	4603      	mov	r3, r0
 808bc64:	2b00      	cmp	r3, #0
 808bc66:	d002      	beq.n	808bc6e <ip4_input+0xd2>
      netif = inp;
 808bc68:	683b      	ldr	r3, [r7, #0]
 808bc6a:	613b      	str	r3, [r7, #16]
 808bc6c:	e01e      	b.n	808bcac <ip4_input+0x110>
    } else {
      netif = NULL;
 808bc6e:	2300      	movs	r3, #0
 808bc70:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 808bc72:	4b5a      	ldr	r3, [pc, #360]	; (808bddc <ip4_input+0x240>)
 808bc74:	695b      	ldr	r3, [r3, #20]
 808bc76:	b2db      	uxtb	r3, r3
 808bc78:	2b7f      	cmp	r3, #127	; 0x7f
 808bc7a:	d017      	beq.n	808bcac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 808bc7c:	4b58      	ldr	r3, [pc, #352]	; (808bde0 <ip4_input+0x244>)
 808bc7e:	681b      	ldr	r3, [r3, #0]
 808bc80:	613b      	str	r3, [r7, #16]
 808bc82:	e00e      	b.n	808bca2 <ip4_input+0x106>
          if (netif == inp) {
 808bc84:	693a      	ldr	r2, [r7, #16]
 808bc86:	683b      	ldr	r3, [r7, #0]
 808bc88:	429a      	cmp	r2, r3
 808bc8a:	d006      	beq.n	808bc9a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 808bc8c:	6938      	ldr	r0, [r7, #16]
 808bc8e:	f7ff ff5b 	bl	808bb48 <ip4_input_accept>
 808bc92:	4603      	mov	r3, r0
 808bc94:	2b00      	cmp	r3, #0
 808bc96:	d108      	bne.n	808bcaa <ip4_input+0x10e>
 808bc98:	e000      	b.n	808bc9c <ip4_input+0x100>
            continue;
 808bc9a:	bf00      	nop
        NETIF_FOREACH(netif) {
 808bc9c:	693b      	ldr	r3, [r7, #16]
 808bc9e:	681b      	ldr	r3, [r3, #0]
 808bca0:	613b      	str	r3, [r7, #16]
 808bca2:	693b      	ldr	r3, [r7, #16]
 808bca4:	2b00      	cmp	r3, #0
 808bca6:	d1ed      	bne.n	808bc84 <ip4_input+0xe8>
 808bca8:	e000      	b.n	808bcac <ip4_input+0x110>
            break;
 808bcaa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 808bcac:	4b4b      	ldr	r3, [pc, #300]	; (808bddc <ip4_input+0x240>)
 808bcae:	691b      	ldr	r3, [r3, #16]
 808bcb0:	6839      	ldr	r1, [r7, #0]
 808bcb2:	4618      	mov	r0, r3
 808bcb4:	f000 f96e 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808bcb8:	4603      	mov	r3, r0
 808bcba:	2b00      	cmp	r3, #0
 808bcbc:	d105      	bne.n	808bcca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 808bcbe:	4b47      	ldr	r3, [pc, #284]	; (808bddc <ip4_input+0x240>)
 808bcc0:	691b      	ldr	r3, [r3, #16]
 808bcc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 808bcc6:	2be0      	cmp	r3, #224	; 0xe0
 808bcc8:	d104      	bne.n	808bcd4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 808bcca:	6878      	ldr	r0, [r7, #4]
 808bccc:	f7f8 ff46 	bl	8084b5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 808bcd0:	2300      	movs	r3, #0
 808bcd2:	e07e      	b.n	808bdd2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 808bcd4:	693b      	ldr	r3, [r7, #16]
 808bcd6:	2b00      	cmp	r3, #0
 808bcd8:	d104      	bne.n	808bce4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 808bcda:	6878      	ldr	r0, [r7, #4]
 808bcdc:	f7f8 ff3e 	bl	8084b5c <pbuf_free>
    return ERR_OK;
 808bce0:	2300      	movs	r3, #0
 808bce2:	e076      	b.n	808bdd2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 808bce4:	697b      	ldr	r3, [r7, #20]
 808bce6:	88db      	ldrh	r3, [r3, #6]
 808bce8:	b29b      	uxth	r3, r3
 808bcea:	461a      	mov	r2, r3
 808bcec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 808bcf0:	4013      	ands	r3, r2
 808bcf2:	2b00      	cmp	r3, #0
 808bcf4:	d00b      	beq.n	808bd0e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 808bcf6:	6878      	ldr	r0, [r7, #4]
 808bcf8:	f000 fc92 	bl	808c620 <ip4_reass>
 808bcfc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 808bcfe:	687b      	ldr	r3, [r7, #4]
 808bd00:	2b00      	cmp	r3, #0
 808bd02:	d101      	bne.n	808bd08 <ip4_input+0x16c>
      return ERR_OK;
 808bd04:	2300      	movs	r3, #0
 808bd06:	e064      	b.n	808bdd2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 808bd08:	687b      	ldr	r3, [r7, #4]
 808bd0a:	685b      	ldr	r3, [r3, #4]
 808bd0c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 808bd0e:	4a33      	ldr	r2, [pc, #204]	; (808bddc <ip4_input+0x240>)
 808bd10:	693b      	ldr	r3, [r7, #16]
 808bd12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 808bd14:	4a31      	ldr	r2, [pc, #196]	; (808bddc <ip4_input+0x240>)
 808bd16:	683b      	ldr	r3, [r7, #0]
 808bd18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 808bd1a:	4a30      	ldr	r2, [pc, #192]	; (808bddc <ip4_input+0x240>)
 808bd1c:	697b      	ldr	r3, [r7, #20]
 808bd1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 808bd20:	697b      	ldr	r3, [r7, #20]
 808bd22:	781b      	ldrb	r3, [r3, #0]
 808bd24:	f003 030f 	and.w	r3, r3, #15
 808bd28:	b2db      	uxtb	r3, r3
 808bd2a:	009b      	lsls	r3, r3, #2
 808bd2c:	b2db      	uxtb	r3, r3
 808bd2e:	b29a      	uxth	r2, r3
 808bd30:	4b2a      	ldr	r3, [pc, #168]	; (808bddc <ip4_input+0x240>)
 808bd32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 808bd34:	89fb      	ldrh	r3, [r7, #14]
 808bd36:	4619      	mov	r1, r3
 808bd38:	6878      	ldr	r0, [r7, #4]
 808bd3a:	f7f8 fe89 	bl	8084a50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 808bd3e:	697b      	ldr	r3, [r7, #20]
 808bd40:	7a5b      	ldrb	r3, [r3, #9]
 808bd42:	2b11      	cmp	r3, #17
 808bd44:	d006      	beq.n	808bd54 <ip4_input+0x1b8>
 808bd46:	2b11      	cmp	r3, #17
 808bd48:	dc13      	bgt.n	808bd72 <ip4_input+0x1d6>
 808bd4a:	2b01      	cmp	r3, #1
 808bd4c:	d00c      	beq.n	808bd68 <ip4_input+0x1cc>
 808bd4e:	2b06      	cmp	r3, #6
 808bd50:	d005      	beq.n	808bd5e <ip4_input+0x1c2>
 808bd52:	e00e      	b.n	808bd72 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 808bd54:	6839      	ldr	r1, [r7, #0]
 808bd56:	6878      	ldr	r0, [r7, #4]
 808bd58:	f7fe fc68 	bl	808a62c <udp_input>
        break;
 808bd5c:	e026      	b.n	808bdac <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 808bd5e:	6839      	ldr	r1, [r7, #0]
 808bd60:	6878      	ldr	r0, [r7, #4]
 808bd62:	f7fa fd23 	bl	80867ac <tcp_input>
        break;
 808bd66:	e021      	b.n	808bdac <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 808bd68:	6839      	ldr	r1, [r7, #0]
 808bd6a:	6878      	ldr	r0, [r7, #4]
 808bd6c:	f7ff fcee 	bl	808b74c <icmp_input>
        break;
 808bd70:	e01c      	b.n	808bdac <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 808bd72:	4b1a      	ldr	r3, [pc, #104]	; (808bddc <ip4_input+0x240>)
 808bd74:	695b      	ldr	r3, [r3, #20]
 808bd76:	6939      	ldr	r1, [r7, #16]
 808bd78:	4618      	mov	r0, r3
 808bd7a:	f000 f90b 	bl	808bf94 <ip4_addr_isbroadcast_u32>
 808bd7e:	4603      	mov	r3, r0
 808bd80:	2b00      	cmp	r3, #0
 808bd82:	d10f      	bne.n	808bda4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 808bd84:	4b15      	ldr	r3, [pc, #84]	; (808bddc <ip4_input+0x240>)
 808bd86:	695b      	ldr	r3, [r3, #20]
 808bd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 808bd8c:	2be0      	cmp	r3, #224	; 0xe0
 808bd8e:	d009      	beq.n	808bda4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 808bd90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 808bd94:	4619      	mov	r1, r3
 808bd96:	6878      	ldr	r0, [r7, #4]
 808bd98:	f7f8 fecd 	bl	8084b36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 808bd9c:	2102      	movs	r1, #2
 808bd9e:	6878      	ldr	r0, [r7, #4]
 808bda0:	f7ff fdd8 	bl	808b954 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 808bda4:	6878      	ldr	r0, [r7, #4]
 808bda6:	f7f8 fed9 	bl	8084b5c <pbuf_free>
        break;
 808bdaa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 808bdac:	4b0b      	ldr	r3, [pc, #44]	; (808bddc <ip4_input+0x240>)
 808bdae:	2200      	movs	r2, #0
 808bdb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 808bdb2:	4b0a      	ldr	r3, [pc, #40]	; (808bddc <ip4_input+0x240>)
 808bdb4:	2200      	movs	r2, #0
 808bdb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 808bdb8:	4b08      	ldr	r3, [pc, #32]	; (808bddc <ip4_input+0x240>)
 808bdba:	2200      	movs	r2, #0
 808bdbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 808bdbe:	4b07      	ldr	r3, [pc, #28]	; (808bddc <ip4_input+0x240>)
 808bdc0:	2200      	movs	r2, #0
 808bdc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 808bdc4:	4b05      	ldr	r3, [pc, #20]	; (808bddc <ip4_input+0x240>)
 808bdc6:	2200      	movs	r2, #0
 808bdc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 808bdca:	4b04      	ldr	r3, [pc, #16]	; (808bddc <ip4_input+0x240>)
 808bdcc:	2200      	movs	r2, #0
 808bdce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 808bdd0:	2300      	movs	r3, #0
}
 808bdd2:	4618      	mov	r0, r3
 808bdd4:	3718      	adds	r7, #24
 808bdd6:	46bd      	mov	sp, r7
 808bdd8:	bd80      	pop	{r7, pc}
 808bdda:	bf00      	nop
 808bddc:	20004cc4 	.word	0x20004cc4
 808bde0:	20008228 	.word	0x20008228

0808bde4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 808bde4:	b580      	push	{r7, lr}
 808bde6:	b08a      	sub	sp, #40	; 0x28
 808bde8:	af04      	add	r7, sp, #16
 808bdea:	60f8      	str	r0, [r7, #12]
 808bdec:	60b9      	str	r1, [r7, #8]
 808bdee:	607a      	str	r2, [r7, #4]
 808bdf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 808bdf2:	68bb      	ldr	r3, [r7, #8]
 808bdf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 808bdf6:	687b      	ldr	r3, [r7, #4]
 808bdf8:	2b00      	cmp	r3, #0
 808bdfa:	d009      	beq.n	808be10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 808bdfc:	68bb      	ldr	r3, [r7, #8]
 808bdfe:	2b00      	cmp	r3, #0
 808be00:	d003      	beq.n	808be0a <ip4_output_if+0x26>
 808be02:	68bb      	ldr	r3, [r7, #8]
 808be04:	681b      	ldr	r3, [r3, #0]
 808be06:	2b00      	cmp	r3, #0
 808be08:	d102      	bne.n	808be10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 808be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808be0c:	3304      	adds	r3, #4
 808be0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 808be10:	78fa      	ldrb	r2, [r7, #3]
 808be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808be14:	9302      	str	r3, [sp, #8]
 808be16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 808be1a:	9301      	str	r3, [sp, #4]
 808be1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 808be20:	9300      	str	r3, [sp, #0]
 808be22:	4613      	mov	r3, r2
 808be24:	687a      	ldr	r2, [r7, #4]
 808be26:	6979      	ldr	r1, [r7, #20]
 808be28:	68f8      	ldr	r0, [r7, #12]
 808be2a:	f000 f805 	bl	808be38 <ip4_output_if_src>
 808be2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 808be30:	4618      	mov	r0, r3
 808be32:	3718      	adds	r7, #24
 808be34:	46bd      	mov	sp, r7
 808be36:	bd80      	pop	{r7, pc}

0808be38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 808be38:	b580      	push	{r7, lr}
 808be3a:	b088      	sub	sp, #32
 808be3c:	af00      	add	r7, sp, #0
 808be3e:	60f8      	str	r0, [r7, #12]
 808be40:	60b9      	str	r1, [r7, #8]
 808be42:	607a      	str	r2, [r7, #4]
 808be44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 808be46:	68fb      	ldr	r3, [r7, #12]
 808be48:	7b9b      	ldrb	r3, [r3, #14]
 808be4a:	2b01      	cmp	r3, #1
 808be4c:	d006      	beq.n	808be5c <ip4_output_if_src+0x24>
 808be4e:	4b4b      	ldr	r3, [pc, #300]	; (808bf7c <ip4_output_if_src+0x144>)
 808be50:	f44f 7255 	mov.w	r2, #852	; 0x354
 808be54:	494a      	ldr	r1, [pc, #296]	; (808bf80 <ip4_output_if_src+0x148>)
 808be56:	484b      	ldr	r0, [pc, #300]	; (808bf84 <ip4_output_if_src+0x14c>)
 808be58:	f001 f83c 	bl	808ced4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 808be5c:	687b      	ldr	r3, [r7, #4]
 808be5e:	2b00      	cmp	r3, #0
 808be60:	d060      	beq.n	808bf24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 808be62:	2314      	movs	r3, #20
 808be64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 808be66:	2114      	movs	r1, #20
 808be68:	68f8      	ldr	r0, [r7, #12]
 808be6a:	f7f8 fde1 	bl	8084a30 <pbuf_add_header>
 808be6e:	4603      	mov	r3, r0
 808be70:	2b00      	cmp	r3, #0
 808be72:	d002      	beq.n	808be7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 808be74:	f06f 0301 	mvn.w	r3, #1
 808be78:	e07c      	b.n	808bf74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 808be7a:	68fb      	ldr	r3, [r7, #12]
 808be7c:	685b      	ldr	r3, [r3, #4]
 808be7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 808be80:	68fb      	ldr	r3, [r7, #12]
 808be82:	895b      	ldrh	r3, [r3, #10]
 808be84:	2b13      	cmp	r3, #19
 808be86:	d806      	bhi.n	808be96 <ip4_output_if_src+0x5e>
 808be88:	4b3c      	ldr	r3, [pc, #240]	; (808bf7c <ip4_output_if_src+0x144>)
 808be8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 808be8e:	493e      	ldr	r1, [pc, #248]	; (808bf88 <ip4_output_if_src+0x150>)
 808be90:	483c      	ldr	r0, [pc, #240]	; (808bf84 <ip4_output_if_src+0x14c>)
 808be92:	f001 f81f 	bl	808ced4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 808be96:	69fb      	ldr	r3, [r7, #28]
 808be98:	78fa      	ldrb	r2, [r7, #3]
 808be9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 808be9c:	69fb      	ldr	r3, [r7, #28]
 808be9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 808bea2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 808bea4:	687b      	ldr	r3, [r7, #4]
 808bea6:	681a      	ldr	r2, [r3, #0]
 808bea8:	69fb      	ldr	r3, [r7, #28]
 808beaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 808beac:	8b7b      	ldrh	r3, [r7, #26]
 808beae:	089b      	lsrs	r3, r3, #2
 808beb0:	b29b      	uxth	r3, r3
 808beb2:	b2db      	uxtb	r3, r3
 808beb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808beb8:	b2da      	uxtb	r2, r3
 808beba:	69fb      	ldr	r3, [r7, #28]
 808bebc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 808bebe:	69fb      	ldr	r3, [r7, #28]
 808bec0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 808bec4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 808bec6:	68fb      	ldr	r3, [r7, #12]
 808bec8:	891b      	ldrh	r3, [r3, #8]
 808beca:	4618      	mov	r0, r3
 808becc:	f7f7 fb08 	bl	80834e0 <lwip_htons>
 808bed0:	4603      	mov	r3, r0
 808bed2:	461a      	mov	r2, r3
 808bed4:	69fb      	ldr	r3, [r7, #28]
 808bed6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 808bed8:	69fb      	ldr	r3, [r7, #28]
 808beda:	2200      	movs	r2, #0
 808bedc:	719a      	strb	r2, [r3, #6]
 808bede:	2200      	movs	r2, #0
 808bee0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 808bee2:	4b2a      	ldr	r3, [pc, #168]	; (808bf8c <ip4_output_if_src+0x154>)
 808bee4:	881b      	ldrh	r3, [r3, #0]
 808bee6:	4618      	mov	r0, r3
 808bee8:	f7f7 fafa 	bl	80834e0 <lwip_htons>
 808beec:	4603      	mov	r3, r0
 808beee:	461a      	mov	r2, r3
 808bef0:	69fb      	ldr	r3, [r7, #28]
 808bef2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 808bef4:	4b25      	ldr	r3, [pc, #148]	; (808bf8c <ip4_output_if_src+0x154>)
 808bef6:	881b      	ldrh	r3, [r3, #0]
 808bef8:	3301      	adds	r3, #1
 808befa:	b29a      	uxth	r2, r3
 808befc:	4b23      	ldr	r3, [pc, #140]	; (808bf8c <ip4_output_if_src+0x154>)
 808befe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 808bf00:	68bb      	ldr	r3, [r7, #8]
 808bf02:	2b00      	cmp	r3, #0
 808bf04:	d104      	bne.n	808bf10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 808bf06:	4b22      	ldr	r3, [pc, #136]	; (808bf90 <ip4_output_if_src+0x158>)
 808bf08:	681a      	ldr	r2, [r3, #0]
 808bf0a:	69fb      	ldr	r3, [r7, #28]
 808bf0c:	60da      	str	r2, [r3, #12]
 808bf0e:	e003      	b.n	808bf18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 808bf10:	68bb      	ldr	r3, [r7, #8]
 808bf12:	681a      	ldr	r2, [r3, #0]
 808bf14:	69fb      	ldr	r3, [r7, #28]
 808bf16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 808bf18:	69fb      	ldr	r3, [r7, #28]
 808bf1a:	2200      	movs	r2, #0
 808bf1c:	729a      	strb	r2, [r3, #10]
 808bf1e:	2200      	movs	r2, #0
 808bf20:	72da      	strb	r2, [r3, #11]
 808bf22:	e00f      	b.n	808bf44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 808bf24:	68fb      	ldr	r3, [r7, #12]
 808bf26:	895b      	ldrh	r3, [r3, #10]
 808bf28:	2b13      	cmp	r3, #19
 808bf2a:	d802      	bhi.n	808bf32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 808bf2c:	f06f 0301 	mvn.w	r3, #1
 808bf30:	e020      	b.n	808bf74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 808bf32:	68fb      	ldr	r3, [r7, #12]
 808bf34:	685b      	ldr	r3, [r3, #4]
 808bf36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 808bf38:	69fb      	ldr	r3, [r7, #28]
 808bf3a:	691b      	ldr	r3, [r3, #16]
 808bf3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 808bf3e:	f107 0314 	add.w	r3, r7, #20
 808bf42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 808bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808bf46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 808bf48:	2b00      	cmp	r3, #0
 808bf4a:	d00c      	beq.n	808bf66 <ip4_output_if_src+0x12e>
 808bf4c:	68fb      	ldr	r3, [r7, #12]
 808bf4e:	891a      	ldrh	r2, [r3, #8]
 808bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808bf52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 808bf54:	429a      	cmp	r2, r3
 808bf56:	d906      	bls.n	808bf66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 808bf58:	687a      	ldr	r2, [r7, #4]
 808bf5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 808bf5c:	68f8      	ldr	r0, [r7, #12]
 808bf5e:	f000 fd53 	bl	808ca08 <ip4_frag>
 808bf62:	4603      	mov	r3, r0
 808bf64:	e006      	b.n	808bf74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 808bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808bf68:	695b      	ldr	r3, [r3, #20]
 808bf6a:	687a      	ldr	r2, [r7, #4]
 808bf6c:	68f9      	ldr	r1, [r7, #12]
 808bf6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 808bf70:	4798      	blx	r3
 808bf72:	4603      	mov	r3, r0
}
 808bf74:	4618      	mov	r0, r3
 808bf76:	3720      	adds	r7, #32
 808bf78:	46bd      	mov	sp, r7
 808bf7a:	bd80      	pop	{r7, pc}
 808bf7c:	08090618 	.word	0x08090618
 808bf80:	0809064c 	.word	0x0809064c
 808bf84:	08090658 	.word	0x08090658
 808bf88:	08090680 	.word	0x08090680
 808bf8c:	20008386 	.word	0x20008386
 808bf90:	08090a58 	.word	0x08090a58

0808bf94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 808bf94:	b480      	push	{r7}
 808bf96:	b085      	sub	sp, #20
 808bf98:	af00      	add	r7, sp, #0
 808bf9a:	6078      	str	r0, [r7, #4]
 808bf9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 808bf9e:	687b      	ldr	r3, [r7, #4]
 808bfa0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 808bfa2:	687b      	ldr	r3, [r7, #4]
 808bfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 808bfa8:	d002      	beq.n	808bfb0 <ip4_addr_isbroadcast_u32+0x1c>
 808bfaa:	687b      	ldr	r3, [r7, #4]
 808bfac:	2b00      	cmp	r3, #0
 808bfae:	d101      	bne.n	808bfb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 808bfb0:	2301      	movs	r3, #1
 808bfb2:	e02a      	b.n	808c00a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 808bfb4:	683b      	ldr	r3, [r7, #0]
 808bfb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808bfba:	f003 0302 	and.w	r3, r3, #2
 808bfbe:	2b00      	cmp	r3, #0
 808bfc0:	d101      	bne.n	808bfc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 808bfc2:	2300      	movs	r3, #0
 808bfc4:	e021      	b.n	808c00a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 808bfc6:	683b      	ldr	r3, [r7, #0]
 808bfc8:	3304      	adds	r3, #4
 808bfca:	681b      	ldr	r3, [r3, #0]
 808bfcc:	687a      	ldr	r2, [r7, #4]
 808bfce:	429a      	cmp	r2, r3
 808bfd0:	d101      	bne.n	808bfd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 808bfd2:	2300      	movs	r3, #0
 808bfd4:	e019      	b.n	808c00a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 808bfd6:	68fa      	ldr	r2, [r7, #12]
 808bfd8:	683b      	ldr	r3, [r7, #0]
 808bfda:	3304      	adds	r3, #4
 808bfdc:	681b      	ldr	r3, [r3, #0]
 808bfde:	405a      	eors	r2, r3
 808bfe0:	683b      	ldr	r3, [r7, #0]
 808bfe2:	3308      	adds	r3, #8
 808bfe4:	681b      	ldr	r3, [r3, #0]
 808bfe6:	4013      	ands	r3, r2
 808bfe8:	2b00      	cmp	r3, #0
 808bfea:	d10d      	bne.n	808c008 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 808bfec:	683b      	ldr	r3, [r7, #0]
 808bfee:	3308      	adds	r3, #8
 808bff0:	681b      	ldr	r3, [r3, #0]
 808bff2:	43da      	mvns	r2, r3
 808bff4:	687b      	ldr	r3, [r7, #4]
 808bff6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 808bff8:	683b      	ldr	r3, [r7, #0]
 808bffa:	3308      	adds	r3, #8
 808bffc:	681b      	ldr	r3, [r3, #0]
 808bffe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 808c000:	429a      	cmp	r2, r3
 808c002:	d101      	bne.n	808c008 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 808c004:	2301      	movs	r3, #1
 808c006:	e000      	b.n	808c00a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 808c008:	2300      	movs	r3, #0
  }
}
 808c00a:	4618      	mov	r0, r3
 808c00c:	3714      	adds	r7, #20
 808c00e:	46bd      	mov	sp, r7
 808c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 808c014:	4770      	bx	lr
	...

0808c018 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 808c018:	b580      	push	{r7, lr}
 808c01a:	b084      	sub	sp, #16
 808c01c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 808c01e:	2300      	movs	r3, #0
 808c020:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 808c022:	4b12      	ldr	r3, [pc, #72]	; (808c06c <ip_reass_tmr+0x54>)
 808c024:	681b      	ldr	r3, [r3, #0]
 808c026:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 808c028:	e018      	b.n	808c05c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 808c02a:	68fb      	ldr	r3, [r7, #12]
 808c02c:	7fdb      	ldrb	r3, [r3, #31]
 808c02e:	2b00      	cmp	r3, #0
 808c030:	d00b      	beq.n	808c04a <ip_reass_tmr+0x32>
      r->timer--;
 808c032:	68fb      	ldr	r3, [r7, #12]
 808c034:	7fdb      	ldrb	r3, [r3, #31]
 808c036:	3b01      	subs	r3, #1
 808c038:	b2da      	uxtb	r2, r3
 808c03a:	68fb      	ldr	r3, [r7, #12]
 808c03c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 808c03e:	68fb      	ldr	r3, [r7, #12]
 808c040:	60bb      	str	r3, [r7, #8]
      r = r->next;
 808c042:	68fb      	ldr	r3, [r7, #12]
 808c044:	681b      	ldr	r3, [r3, #0]
 808c046:	60fb      	str	r3, [r7, #12]
 808c048:	e008      	b.n	808c05c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 808c04a:	68fb      	ldr	r3, [r7, #12]
 808c04c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 808c04e:	68fb      	ldr	r3, [r7, #12]
 808c050:	681b      	ldr	r3, [r3, #0]
 808c052:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 808c054:	68b9      	ldr	r1, [r7, #8]
 808c056:	6878      	ldr	r0, [r7, #4]
 808c058:	f000 f80a 	bl	808c070 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 808c05c:	68fb      	ldr	r3, [r7, #12]
 808c05e:	2b00      	cmp	r3, #0
 808c060:	d1e3      	bne.n	808c02a <ip_reass_tmr+0x12>
    }
  }
}
 808c062:	bf00      	nop
 808c064:	bf00      	nop
 808c066:	3710      	adds	r7, #16
 808c068:	46bd      	mov	sp, r7
 808c06a:	bd80      	pop	{r7, pc}
 808c06c:	20008388 	.word	0x20008388

0808c070 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 808c070:	b580      	push	{r7, lr}
 808c072:	b088      	sub	sp, #32
 808c074:	af00      	add	r7, sp, #0
 808c076:	6078      	str	r0, [r7, #4]
 808c078:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 808c07a:	2300      	movs	r3, #0
 808c07c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 808c07e:	683a      	ldr	r2, [r7, #0]
 808c080:	687b      	ldr	r3, [r7, #4]
 808c082:	429a      	cmp	r2, r3
 808c084:	d105      	bne.n	808c092 <ip_reass_free_complete_datagram+0x22>
 808c086:	4b45      	ldr	r3, [pc, #276]	; (808c19c <ip_reass_free_complete_datagram+0x12c>)
 808c088:	22ab      	movs	r2, #171	; 0xab
 808c08a:	4945      	ldr	r1, [pc, #276]	; (808c1a0 <ip_reass_free_complete_datagram+0x130>)
 808c08c:	4845      	ldr	r0, [pc, #276]	; (808c1a4 <ip_reass_free_complete_datagram+0x134>)
 808c08e:	f000 ff21 	bl	808ced4 <iprintf>
  if (prev != NULL) {
 808c092:	683b      	ldr	r3, [r7, #0]
 808c094:	2b00      	cmp	r3, #0
 808c096:	d00a      	beq.n	808c0ae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 808c098:	683b      	ldr	r3, [r7, #0]
 808c09a:	681b      	ldr	r3, [r3, #0]
 808c09c:	687a      	ldr	r2, [r7, #4]
 808c09e:	429a      	cmp	r2, r3
 808c0a0:	d005      	beq.n	808c0ae <ip_reass_free_complete_datagram+0x3e>
 808c0a2:	4b3e      	ldr	r3, [pc, #248]	; (808c19c <ip_reass_free_complete_datagram+0x12c>)
 808c0a4:	22ad      	movs	r2, #173	; 0xad
 808c0a6:	4940      	ldr	r1, [pc, #256]	; (808c1a8 <ip_reass_free_complete_datagram+0x138>)
 808c0a8:	483e      	ldr	r0, [pc, #248]	; (808c1a4 <ip_reass_free_complete_datagram+0x134>)
 808c0aa:	f000 ff13 	bl	808ced4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 808c0ae:	687b      	ldr	r3, [r7, #4]
 808c0b0:	685b      	ldr	r3, [r3, #4]
 808c0b2:	685b      	ldr	r3, [r3, #4]
 808c0b4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 808c0b6:	697b      	ldr	r3, [r7, #20]
 808c0b8:	889b      	ldrh	r3, [r3, #4]
 808c0ba:	b29b      	uxth	r3, r3
 808c0bc:	2b00      	cmp	r3, #0
 808c0be:	d12a      	bne.n	808c116 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 808c0c0:	687b      	ldr	r3, [r7, #4]
 808c0c2:	685b      	ldr	r3, [r3, #4]
 808c0c4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 808c0c6:	697b      	ldr	r3, [r7, #20]
 808c0c8:	681a      	ldr	r2, [r3, #0]
 808c0ca:	687b      	ldr	r3, [r7, #4]
 808c0cc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 808c0ce:	69bb      	ldr	r3, [r7, #24]
 808c0d0:	6858      	ldr	r0, [r3, #4]
 808c0d2:	687b      	ldr	r3, [r7, #4]
 808c0d4:	3308      	adds	r3, #8
 808c0d6:	2214      	movs	r2, #20
 808c0d8:	4619      	mov	r1, r3
 808c0da:	f000 fee5 	bl	808cea8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 808c0de:	2101      	movs	r1, #1
 808c0e0:	69b8      	ldr	r0, [r7, #24]
 808c0e2:	f7ff fc47 	bl	808b974 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 808c0e6:	69b8      	ldr	r0, [r7, #24]
 808c0e8:	f7f8 fdc0 	bl	8084c6c <pbuf_clen>
 808c0ec:	4603      	mov	r3, r0
 808c0ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 808c0f0:	8bfa      	ldrh	r2, [r7, #30]
 808c0f2:	8a7b      	ldrh	r3, [r7, #18]
 808c0f4:	4413      	add	r3, r2
 808c0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808c0fa:	db05      	blt.n	808c108 <ip_reass_free_complete_datagram+0x98>
 808c0fc:	4b27      	ldr	r3, [pc, #156]	; (808c19c <ip_reass_free_complete_datagram+0x12c>)
 808c0fe:	22bc      	movs	r2, #188	; 0xbc
 808c100:	492a      	ldr	r1, [pc, #168]	; (808c1ac <ip_reass_free_complete_datagram+0x13c>)
 808c102:	4828      	ldr	r0, [pc, #160]	; (808c1a4 <ip_reass_free_complete_datagram+0x134>)
 808c104:	f000 fee6 	bl	808ced4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 808c108:	8bfa      	ldrh	r2, [r7, #30]
 808c10a:	8a7b      	ldrh	r3, [r7, #18]
 808c10c:	4413      	add	r3, r2
 808c10e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 808c110:	69b8      	ldr	r0, [r7, #24]
 808c112:	f7f8 fd23 	bl	8084b5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 808c116:	687b      	ldr	r3, [r7, #4]
 808c118:	685b      	ldr	r3, [r3, #4]
 808c11a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 808c11c:	e01f      	b.n	808c15e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 808c11e:	69bb      	ldr	r3, [r7, #24]
 808c120:	685b      	ldr	r3, [r3, #4]
 808c122:	617b      	str	r3, [r7, #20]
    pcur = p;
 808c124:	69bb      	ldr	r3, [r7, #24]
 808c126:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 808c128:	697b      	ldr	r3, [r7, #20]
 808c12a:	681b      	ldr	r3, [r3, #0]
 808c12c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 808c12e:	68f8      	ldr	r0, [r7, #12]
 808c130:	f7f8 fd9c 	bl	8084c6c <pbuf_clen>
 808c134:	4603      	mov	r3, r0
 808c136:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 808c138:	8bfa      	ldrh	r2, [r7, #30]
 808c13a:	8a7b      	ldrh	r3, [r7, #18]
 808c13c:	4413      	add	r3, r2
 808c13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808c142:	db05      	blt.n	808c150 <ip_reass_free_complete_datagram+0xe0>
 808c144:	4b15      	ldr	r3, [pc, #84]	; (808c19c <ip_reass_free_complete_datagram+0x12c>)
 808c146:	22cc      	movs	r2, #204	; 0xcc
 808c148:	4918      	ldr	r1, [pc, #96]	; (808c1ac <ip_reass_free_complete_datagram+0x13c>)
 808c14a:	4816      	ldr	r0, [pc, #88]	; (808c1a4 <ip_reass_free_complete_datagram+0x134>)
 808c14c:	f000 fec2 	bl	808ced4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 808c150:	8bfa      	ldrh	r2, [r7, #30]
 808c152:	8a7b      	ldrh	r3, [r7, #18]
 808c154:	4413      	add	r3, r2
 808c156:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 808c158:	68f8      	ldr	r0, [r7, #12]
 808c15a:	f7f8 fcff 	bl	8084b5c <pbuf_free>
  while (p != NULL) {
 808c15e:	69bb      	ldr	r3, [r7, #24]
 808c160:	2b00      	cmp	r3, #0
 808c162:	d1dc      	bne.n	808c11e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 808c164:	6839      	ldr	r1, [r7, #0]
 808c166:	6878      	ldr	r0, [r7, #4]
 808c168:	f000 f8c2 	bl	808c2f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 808c16c:	4b10      	ldr	r3, [pc, #64]	; (808c1b0 <ip_reass_free_complete_datagram+0x140>)
 808c16e:	881b      	ldrh	r3, [r3, #0]
 808c170:	8bfa      	ldrh	r2, [r7, #30]
 808c172:	429a      	cmp	r2, r3
 808c174:	d905      	bls.n	808c182 <ip_reass_free_complete_datagram+0x112>
 808c176:	4b09      	ldr	r3, [pc, #36]	; (808c19c <ip_reass_free_complete_datagram+0x12c>)
 808c178:	22d2      	movs	r2, #210	; 0xd2
 808c17a:	490e      	ldr	r1, [pc, #56]	; (808c1b4 <ip_reass_free_complete_datagram+0x144>)
 808c17c:	4809      	ldr	r0, [pc, #36]	; (808c1a4 <ip_reass_free_complete_datagram+0x134>)
 808c17e:	f000 fea9 	bl	808ced4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 808c182:	4b0b      	ldr	r3, [pc, #44]	; (808c1b0 <ip_reass_free_complete_datagram+0x140>)
 808c184:	881a      	ldrh	r2, [r3, #0]
 808c186:	8bfb      	ldrh	r3, [r7, #30]
 808c188:	1ad3      	subs	r3, r2, r3
 808c18a:	b29a      	uxth	r2, r3
 808c18c:	4b08      	ldr	r3, [pc, #32]	; (808c1b0 <ip_reass_free_complete_datagram+0x140>)
 808c18e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 808c190:	8bfb      	ldrh	r3, [r7, #30]
}
 808c192:	4618      	mov	r0, r3
 808c194:	3720      	adds	r7, #32
 808c196:	46bd      	mov	sp, r7
 808c198:	bd80      	pop	{r7, pc}
 808c19a:	bf00      	nop
 808c19c:	080906b0 	.word	0x080906b0
 808c1a0:	080906ec 	.word	0x080906ec
 808c1a4:	080906f8 	.word	0x080906f8
 808c1a8:	08090720 	.word	0x08090720
 808c1ac:	08090734 	.word	0x08090734
 808c1b0:	2000838c 	.word	0x2000838c
 808c1b4:	08090754 	.word	0x08090754

0808c1b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 808c1b8:	b580      	push	{r7, lr}
 808c1ba:	b08a      	sub	sp, #40	; 0x28
 808c1bc:	af00      	add	r7, sp, #0
 808c1be:	6078      	str	r0, [r7, #4]
 808c1c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 808c1c2:	2300      	movs	r3, #0
 808c1c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 808c1c6:	2300      	movs	r3, #0
 808c1c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 808c1ca:	2300      	movs	r3, #0
 808c1cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 808c1ce:	2300      	movs	r3, #0
 808c1d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 808c1d2:	2300      	movs	r3, #0
 808c1d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 808c1d6:	4b28      	ldr	r3, [pc, #160]	; (808c278 <ip_reass_remove_oldest_datagram+0xc0>)
 808c1d8:	681b      	ldr	r3, [r3, #0]
 808c1da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 808c1dc:	e030      	b.n	808c240 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 808c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c1e0:	695a      	ldr	r2, [r3, #20]
 808c1e2:	687b      	ldr	r3, [r7, #4]
 808c1e4:	68db      	ldr	r3, [r3, #12]
 808c1e6:	429a      	cmp	r2, r3
 808c1e8:	d10c      	bne.n	808c204 <ip_reass_remove_oldest_datagram+0x4c>
 808c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c1ec:	699a      	ldr	r2, [r3, #24]
 808c1ee:	687b      	ldr	r3, [r7, #4]
 808c1f0:	691b      	ldr	r3, [r3, #16]
 808c1f2:	429a      	cmp	r2, r3
 808c1f4:	d106      	bne.n	808c204 <ip_reass_remove_oldest_datagram+0x4c>
 808c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c1f8:	899a      	ldrh	r2, [r3, #12]
 808c1fa:	687b      	ldr	r3, [r7, #4]
 808c1fc:	889b      	ldrh	r3, [r3, #4]
 808c1fe:	b29b      	uxth	r3, r3
 808c200:	429a      	cmp	r2, r3
 808c202:	d014      	beq.n	808c22e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 808c204:	693b      	ldr	r3, [r7, #16]
 808c206:	3301      	adds	r3, #1
 808c208:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 808c20a:	6a3b      	ldr	r3, [r7, #32]
 808c20c:	2b00      	cmp	r3, #0
 808c20e:	d104      	bne.n	808c21a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 808c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c212:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 808c214:	69fb      	ldr	r3, [r7, #28]
 808c216:	61bb      	str	r3, [r7, #24]
 808c218:	e009      	b.n	808c22e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 808c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c21c:	7fda      	ldrb	r2, [r3, #31]
 808c21e:	6a3b      	ldr	r3, [r7, #32]
 808c220:	7fdb      	ldrb	r3, [r3, #31]
 808c222:	429a      	cmp	r2, r3
 808c224:	d803      	bhi.n	808c22e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 808c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c228:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 808c22a:	69fb      	ldr	r3, [r7, #28]
 808c22c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 808c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c230:	681b      	ldr	r3, [r3, #0]
 808c232:	2b00      	cmp	r3, #0
 808c234:	d001      	beq.n	808c23a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 808c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c238:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 808c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c23c:	681b      	ldr	r3, [r3, #0]
 808c23e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 808c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c242:	2b00      	cmp	r3, #0
 808c244:	d1cb      	bne.n	808c1de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 808c246:	6a3b      	ldr	r3, [r7, #32]
 808c248:	2b00      	cmp	r3, #0
 808c24a:	d008      	beq.n	808c25e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 808c24c:	69b9      	ldr	r1, [r7, #24]
 808c24e:	6a38      	ldr	r0, [r7, #32]
 808c250:	f7ff ff0e 	bl	808c070 <ip_reass_free_complete_datagram>
 808c254:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 808c256:	697a      	ldr	r2, [r7, #20]
 808c258:	68fb      	ldr	r3, [r7, #12]
 808c25a:	4413      	add	r3, r2
 808c25c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 808c25e:	697a      	ldr	r2, [r7, #20]
 808c260:	683b      	ldr	r3, [r7, #0]
 808c262:	429a      	cmp	r2, r3
 808c264:	da02      	bge.n	808c26c <ip_reass_remove_oldest_datagram+0xb4>
 808c266:	693b      	ldr	r3, [r7, #16]
 808c268:	2b01      	cmp	r3, #1
 808c26a:	dcac      	bgt.n	808c1c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 808c26c:	697b      	ldr	r3, [r7, #20]
}
 808c26e:	4618      	mov	r0, r3
 808c270:	3728      	adds	r7, #40	; 0x28
 808c272:	46bd      	mov	sp, r7
 808c274:	bd80      	pop	{r7, pc}
 808c276:	bf00      	nop
 808c278:	20008388 	.word	0x20008388

0808c27c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 808c27c:	b580      	push	{r7, lr}
 808c27e:	b084      	sub	sp, #16
 808c280:	af00      	add	r7, sp, #0
 808c282:	6078      	str	r0, [r7, #4]
 808c284:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 808c286:	2004      	movs	r0, #4
 808c288:	f7f7 fda2 	bl	8083dd0 <memp_malloc>
 808c28c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 808c28e:	68fb      	ldr	r3, [r7, #12]
 808c290:	2b00      	cmp	r3, #0
 808c292:	d110      	bne.n	808c2b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 808c294:	6839      	ldr	r1, [r7, #0]
 808c296:	6878      	ldr	r0, [r7, #4]
 808c298:	f7ff ff8e 	bl	808c1b8 <ip_reass_remove_oldest_datagram>
 808c29c:	4602      	mov	r2, r0
 808c29e:	683b      	ldr	r3, [r7, #0]
 808c2a0:	4293      	cmp	r3, r2
 808c2a2:	dc03      	bgt.n	808c2ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 808c2a4:	2004      	movs	r0, #4
 808c2a6:	f7f7 fd93 	bl	8083dd0 <memp_malloc>
 808c2aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 808c2ac:	68fb      	ldr	r3, [r7, #12]
 808c2ae:	2b00      	cmp	r3, #0
 808c2b0:	d101      	bne.n	808c2b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 808c2b2:	2300      	movs	r3, #0
 808c2b4:	e016      	b.n	808c2e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 808c2b6:	2220      	movs	r2, #32
 808c2b8:	2100      	movs	r1, #0
 808c2ba:	68f8      	ldr	r0, [r7, #12]
 808c2bc:	f000 fe02 	bl	808cec4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 808c2c0:	68fb      	ldr	r3, [r7, #12]
 808c2c2:	220f      	movs	r2, #15
 808c2c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 808c2c6:	4b09      	ldr	r3, [pc, #36]	; (808c2ec <ip_reass_enqueue_new_datagram+0x70>)
 808c2c8:	681a      	ldr	r2, [r3, #0]
 808c2ca:	68fb      	ldr	r3, [r7, #12]
 808c2cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 808c2ce:	4a07      	ldr	r2, [pc, #28]	; (808c2ec <ip_reass_enqueue_new_datagram+0x70>)
 808c2d0:	68fb      	ldr	r3, [r7, #12]
 808c2d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 808c2d4:	68fb      	ldr	r3, [r7, #12]
 808c2d6:	3308      	adds	r3, #8
 808c2d8:	2214      	movs	r2, #20
 808c2da:	6879      	ldr	r1, [r7, #4]
 808c2dc:	4618      	mov	r0, r3
 808c2de:	f000 fde3 	bl	808cea8 <memcpy>
  return ipr;
 808c2e2:	68fb      	ldr	r3, [r7, #12]
}
 808c2e4:	4618      	mov	r0, r3
 808c2e6:	3710      	adds	r7, #16
 808c2e8:	46bd      	mov	sp, r7
 808c2ea:	bd80      	pop	{r7, pc}
 808c2ec:	20008388 	.word	0x20008388

0808c2f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 808c2f0:	b580      	push	{r7, lr}
 808c2f2:	b082      	sub	sp, #8
 808c2f4:	af00      	add	r7, sp, #0
 808c2f6:	6078      	str	r0, [r7, #4]
 808c2f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 808c2fa:	4b10      	ldr	r3, [pc, #64]	; (808c33c <ip_reass_dequeue_datagram+0x4c>)
 808c2fc:	681b      	ldr	r3, [r3, #0]
 808c2fe:	687a      	ldr	r2, [r7, #4]
 808c300:	429a      	cmp	r2, r3
 808c302:	d104      	bne.n	808c30e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 808c304:	687b      	ldr	r3, [r7, #4]
 808c306:	681b      	ldr	r3, [r3, #0]
 808c308:	4a0c      	ldr	r2, [pc, #48]	; (808c33c <ip_reass_dequeue_datagram+0x4c>)
 808c30a:	6013      	str	r3, [r2, #0]
 808c30c:	e00d      	b.n	808c32a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 808c30e:	683b      	ldr	r3, [r7, #0]
 808c310:	2b00      	cmp	r3, #0
 808c312:	d106      	bne.n	808c322 <ip_reass_dequeue_datagram+0x32>
 808c314:	4b0a      	ldr	r3, [pc, #40]	; (808c340 <ip_reass_dequeue_datagram+0x50>)
 808c316:	f240 1245 	movw	r2, #325	; 0x145
 808c31a:	490a      	ldr	r1, [pc, #40]	; (808c344 <ip_reass_dequeue_datagram+0x54>)
 808c31c:	480a      	ldr	r0, [pc, #40]	; (808c348 <ip_reass_dequeue_datagram+0x58>)
 808c31e:	f000 fdd9 	bl	808ced4 <iprintf>
    prev->next = ipr->next;
 808c322:	687b      	ldr	r3, [r7, #4]
 808c324:	681a      	ldr	r2, [r3, #0]
 808c326:	683b      	ldr	r3, [r7, #0]
 808c328:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 808c32a:	6879      	ldr	r1, [r7, #4]
 808c32c:	2004      	movs	r0, #4
 808c32e:	f7f7 fdbf 	bl	8083eb0 <memp_free>
}
 808c332:	bf00      	nop
 808c334:	3708      	adds	r7, #8
 808c336:	46bd      	mov	sp, r7
 808c338:	bd80      	pop	{r7, pc}
 808c33a:	bf00      	nop
 808c33c:	20008388 	.word	0x20008388
 808c340:	080906b0 	.word	0x080906b0
 808c344:	08090778 	.word	0x08090778
 808c348:	080906f8 	.word	0x080906f8

0808c34c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 808c34c:	b580      	push	{r7, lr}
 808c34e:	b08c      	sub	sp, #48	; 0x30
 808c350:	af00      	add	r7, sp, #0
 808c352:	60f8      	str	r0, [r7, #12]
 808c354:	60b9      	str	r1, [r7, #8]
 808c356:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 808c358:	2300      	movs	r3, #0
 808c35a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 808c35c:	2301      	movs	r3, #1
 808c35e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 808c360:	68bb      	ldr	r3, [r7, #8]
 808c362:	685b      	ldr	r3, [r3, #4]
 808c364:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 808c366:	69fb      	ldr	r3, [r7, #28]
 808c368:	885b      	ldrh	r3, [r3, #2]
 808c36a:	b29b      	uxth	r3, r3
 808c36c:	4618      	mov	r0, r3
 808c36e:	f7f7 f8b7 	bl	80834e0 <lwip_htons>
 808c372:	4603      	mov	r3, r0
 808c374:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 808c376:	69fb      	ldr	r3, [r7, #28]
 808c378:	781b      	ldrb	r3, [r3, #0]
 808c37a:	f003 030f 	and.w	r3, r3, #15
 808c37e:	b2db      	uxtb	r3, r3
 808c380:	009b      	lsls	r3, r3, #2
 808c382:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 808c384:	7e7b      	ldrb	r3, [r7, #25]
 808c386:	b29b      	uxth	r3, r3
 808c388:	8b7a      	ldrh	r2, [r7, #26]
 808c38a:	429a      	cmp	r2, r3
 808c38c:	d202      	bcs.n	808c394 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c38e:	f04f 33ff 	mov.w	r3, #4294967295
 808c392:	e135      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 808c394:	7e7b      	ldrb	r3, [r7, #25]
 808c396:	b29b      	uxth	r3, r3
 808c398:	8b7a      	ldrh	r2, [r7, #26]
 808c39a:	1ad3      	subs	r3, r2, r3
 808c39c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 808c39e:	69fb      	ldr	r3, [r7, #28]
 808c3a0:	88db      	ldrh	r3, [r3, #6]
 808c3a2:	b29b      	uxth	r3, r3
 808c3a4:	4618      	mov	r0, r3
 808c3a6:	f7f7 f89b 	bl	80834e0 <lwip_htons>
 808c3aa:	4603      	mov	r3, r0
 808c3ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 808c3b0:	b29b      	uxth	r3, r3
 808c3b2:	00db      	lsls	r3, r3, #3
 808c3b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 808c3b6:	68bb      	ldr	r3, [r7, #8]
 808c3b8:	685b      	ldr	r3, [r3, #4]
 808c3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 808c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c3be:	2200      	movs	r2, #0
 808c3c0:	701a      	strb	r2, [r3, #0]
 808c3c2:	2200      	movs	r2, #0
 808c3c4:	705a      	strb	r2, [r3, #1]
 808c3c6:	2200      	movs	r2, #0
 808c3c8:	709a      	strb	r2, [r3, #2]
 808c3ca:	2200      	movs	r2, #0
 808c3cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 808c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c3d0:	8afa      	ldrh	r2, [r7, #22]
 808c3d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 808c3d4:	8afa      	ldrh	r2, [r7, #22]
 808c3d6:	8b7b      	ldrh	r3, [r7, #26]
 808c3d8:	4413      	add	r3, r2
 808c3da:	b29a      	uxth	r2, r3
 808c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c3de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 808c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c3e2:	88db      	ldrh	r3, [r3, #6]
 808c3e4:	b29b      	uxth	r3, r3
 808c3e6:	8afa      	ldrh	r2, [r7, #22]
 808c3e8:	429a      	cmp	r2, r3
 808c3ea:	d902      	bls.n	808c3f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c3ec:	f04f 33ff 	mov.w	r3, #4294967295
 808c3f0:	e106      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 808c3f2:	68fb      	ldr	r3, [r7, #12]
 808c3f4:	685b      	ldr	r3, [r3, #4]
 808c3f6:	627b      	str	r3, [r7, #36]	; 0x24
 808c3f8:	e068      	b.n	808c4cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 808c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c3fc:	685b      	ldr	r3, [r3, #4]
 808c3fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 808c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c402:	889b      	ldrh	r3, [r3, #4]
 808c404:	b29a      	uxth	r2, r3
 808c406:	693b      	ldr	r3, [r7, #16]
 808c408:	889b      	ldrh	r3, [r3, #4]
 808c40a:	b29b      	uxth	r3, r3
 808c40c:	429a      	cmp	r2, r3
 808c40e:	d235      	bcs.n	808c47c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 808c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808c414:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 808c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c418:	2b00      	cmp	r3, #0
 808c41a:	d020      	beq.n	808c45e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 808c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c41e:	889b      	ldrh	r3, [r3, #4]
 808c420:	b29a      	uxth	r2, r3
 808c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c424:	88db      	ldrh	r3, [r3, #6]
 808c426:	b29b      	uxth	r3, r3
 808c428:	429a      	cmp	r2, r3
 808c42a:	d307      	bcc.n	808c43c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 808c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c42e:	88db      	ldrh	r3, [r3, #6]
 808c430:	b29a      	uxth	r2, r3
 808c432:	693b      	ldr	r3, [r7, #16]
 808c434:	889b      	ldrh	r3, [r3, #4]
 808c436:	b29b      	uxth	r3, r3
 808c438:	429a      	cmp	r2, r3
 808c43a:	d902      	bls.n	808c442 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c43c:	f04f 33ff 	mov.w	r3, #4294967295
 808c440:	e0de      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 808c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c444:	68ba      	ldr	r2, [r7, #8]
 808c446:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 808c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c44a:	88db      	ldrh	r3, [r3, #6]
 808c44c:	b29a      	uxth	r2, r3
 808c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c450:	889b      	ldrh	r3, [r3, #4]
 808c452:	b29b      	uxth	r3, r3
 808c454:	429a      	cmp	r2, r3
 808c456:	d03d      	beq.n	808c4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 808c458:	2300      	movs	r3, #0
 808c45a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 808c45c:	e03a      	b.n	808c4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 808c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c460:	88db      	ldrh	r3, [r3, #6]
 808c462:	b29a      	uxth	r2, r3
 808c464:	693b      	ldr	r3, [r7, #16]
 808c466:	889b      	ldrh	r3, [r3, #4]
 808c468:	b29b      	uxth	r3, r3
 808c46a:	429a      	cmp	r2, r3
 808c46c:	d902      	bls.n	808c474 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c46e:	f04f 33ff 	mov.w	r3, #4294967295
 808c472:	e0c5      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 808c474:	68fb      	ldr	r3, [r7, #12]
 808c476:	68ba      	ldr	r2, [r7, #8]
 808c478:	605a      	str	r2, [r3, #4]
      break;
 808c47a:	e02b      	b.n	808c4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 808c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c47e:	889b      	ldrh	r3, [r3, #4]
 808c480:	b29a      	uxth	r2, r3
 808c482:	693b      	ldr	r3, [r7, #16]
 808c484:	889b      	ldrh	r3, [r3, #4]
 808c486:	b29b      	uxth	r3, r3
 808c488:	429a      	cmp	r2, r3
 808c48a:	d102      	bne.n	808c492 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c48c:	f04f 33ff 	mov.w	r3, #4294967295
 808c490:	e0b6      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 808c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c494:	889b      	ldrh	r3, [r3, #4]
 808c496:	b29a      	uxth	r2, r3
 808c498:	693b      	ldr	r3, [r7, #16]
 808c49a:	88db      	ldrh	r3, [r3, #6]
 808c49c:	b29b      	uxth	r3, r3
 808c49e:	429a      	cmp	r2, r3
 808c4a0:	d202      	bcs.n	808c4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 808c4a2:	f04f 33ff 	mov.w	r3, #4294967295
 808c4a6:	e0ab      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 808c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c4aa:	2b00      	cmp	r3, #0
 808c4ac:	d009      	beq.n	808c4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 808c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c4b0:	88db      	ldrh	r3, [r3, #6]
 808c4b2:	b29a      	uxth	r2, r3
 808c4b4:	693b      	ldr	r3, [r7, #16]
 808c4b6:	889b      	ldrh	r3, [r3, #4]
 808c4b8:	b29b      	uxth	r3, r3
 808c4ba:	429a      	cmp	r2, r3
 808c4bc:	d001      	beq.n	808c4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 808c4be:	2300      	movs	r3, #0
 808c4c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 808c4c2:	693b      	ldr	r3, [r7, #16]
 808c4c4:	681b      	ldr	r3, [r3, #0]
 808c4c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 808c4c8:	693b      	ldr	r3, [r7, #16]
 808c4ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 808c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c4ce:	2b00      	cmp	r3, #0
 808c4d0:	d193      	bne.n	808c3fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 808c4d2:	e000      	b.n	808c4d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 808c4d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 808c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c4d8:	2b00      	cmp	r3, #0
 808c4da:	d12d      	bne.n	808c538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 808c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c4de:	2b00      	cmp	r3, #0
 808c4e0:	d01c      	beq.n	808c51c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 808c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c4e4:	88db      	ldrh	r3, [r3, #6]
 808c4e6:	b29a      	uxth	r2, r3
 808c4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c4ea:	889b      	ldrh	r3, [r3, #4]
 808c4ec:	b29b      	uxth	r3, r3
 808c4ee:	429a      	cmp	r2, r3
 808c4f0:	d906      	bls.n	808c500 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 808c4f2:	4b45      	ldr	r3, [pc, #276]	; (808c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 808c4f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 808c4f8:	4944      	ldr	r1, [pc, #272]	; (808c60c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 808c4fa:	4845      	ldr	r0, [pc, #276]	; (808c610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 808c4fc:	f000 fcea 	bl	808ced4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 808c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c502:	68ba      	ldr	r2, [r7, #8]
 808c504:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 808c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c508:	88db      	ldrh	r3, [r3, #6]
 808c50a:	b29a      	uxth	r2, r3
 808c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c50e:	889b      	ldrh	r3, [r3, #4]
 808c510:	b29b      	uxth	r3, r3
 808c512:	429a      	cmp	r2, r3
 808c514:	d010      	beq.n	808c538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 808c516:	2300      	movs	r3, #0
 808c518:	623b      	str	r3, [r7, #32]
 808c51a:	e00d      	b.n	808c538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 808c51c:	68fb      	ldr	r3, [r7, #12]
 808c51e:	685b      	ldr	r3, [r3, #4]
 808c520:	2b00      	cmp	r3, #0
 808c522:	d006      	beq.n	808c532 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 808c524:	4b38      	ldr	r3, [pc, #224]	; (808c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 808c526:	f44f 72df 	mov.w	r2, #446	; 0x1be
 808c52a:	493a      	ldr	r1, [pc, #232]	; (808c614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 808c52c:	4838      	ldr	r0, [pc, #224]	; (808c610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 808c52e:	f000 fcd1 	bl	808ced4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 808c532:	68fb      	ldr	r3, [r7, #12]
 808c534:	68ba      	ldr	r2, [r7, #8]
 808c536:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 808c538:	687b      	ldr	r3, [r7, #4]
 808c53a:	2b00      	cmp	r3, #0
 808c53c:	d105      	bne.n	808c54a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 808c53e:	68fb      	ldr	r3, [r7, #12]
 808c540:	7f9b      	ldrb	r3, [r3, #30]
 808c542:	f003 0301 	and.w	r3, r3, #1
 808c546:	2b00      	cmp	r3, #0
 808c548:	d059      	beq.n	808c5fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 808c54a:	6a3b      	ldr	r3, [r7, #32]
 808c54c:	2b00      	cmp	r3, #0
 808c54e:	d04f      	beq.n	808c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 808c550:	68fb      	ldr	r3, [r7, #12]
 808c552:	685b      	ldr	r3, [r3, #4]
 808c554:	2b00      	cmp	r3, #0
 808c556:	d006      	beq.n	808c566 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 808c558:	68fb      	ldr	r3, [r7, #12]
 808c55a:	685b      	ldr	r3, [r3, #4]
 808c55c:	685b      	ldr	r3, [r3, #4]
 808c55e:	889b      	ldrh	r3, [r3, #4]
 808c560:	b29b      	uxth	r3, r3
 808c562:	2b00      	cmp	r3, #0
 808c564:	d002      	beq.n	808c56c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 808c566:	2300      	movs	r3, #0
 808c568:	623b      	str	r3, [r7, #32]
 808c56a:	e041      	b.n	808c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 808c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c56e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 808c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c572:	681b      	ldr	r3, [r3, #0]
 808c574:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 808c576:	e012      	b.n	808c59e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 808c578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c57a:	685b      	ldr	r3, [r3, #4]
 808c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 808c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c580:	88db      	ldrh	r3, [r3, #6]
 808c582:	b29a      	uxth	r2, r3
 808c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c586:	889b      	ldrh	r3, [r3, #4]
 808c588:	b29b      	uxth	r3, r3
 808c58a:	429a      	cmp	r2, r3
 808c58c:	d002      	beq.n	808c594 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 808c58e:	2300      	movs	r3, #0
 808c590:	623b      	str	r3, [r7, #32]
            break;
 808c592:	e007      	b.n	808c5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 808c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c596:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 808c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c59a:	681b      	ldr	r3, [r3, #0]
 808c59c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 808c59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808c5a0:	2b00      	cmp	r3, #0
 808c5a2:	d1e9      	bne.n	808c578 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 808c5a4:	6a3b      	ldr	r3, [r7, #32]
 808c5a6:	2b00      	cmp	r3, #0
 808c5a8:	d022      	beq.n	808c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 808c5aa:	68fb      	ldr	r3, [r7, #12]
 808c5ac:	685b      	ldr	r3, [r3, #4]
 808c5ae:	2b00      	cmp	r3, #0
 808c5b0:	d106      	bne.n	808c5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 808c5b2:	4b15      	ldr	r3, [pc, #84]	; (808c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 808c5b4:	f240 12df 	movw	r2, #479	; 0x1df
 808c5b8:	4917      	ldr	r1, [pc, #92]	; (808c618 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 808c5ba:	4815      	ldr	r0, [pc, #84]	; (808c610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 808c5bc:	f000 fc8a 	bl	808ced4 <iprintf>
          LWIP_ASSERT("sanity check",
 808c5c0:	68fb      	ldr	r3, [r7, #12]
 808c5c2:	685b      	ldr	r3, [r3, #4]
 808c5c4:	685b      	ldr	r3, [r3, #4]
 808c5c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 808c5c8:	429a      	cmp	r2, r3
 808c5ca:	d106      	bne.n	808c5da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 808c5cc:	4b0e      	ldr	r3, [pc, #56]	; (808c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 808c5ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 808c5d2:	4911      	ldr	r1, [pc, #68]	; (808c618 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 808c5d4:	480e      	ldr	r0, [pc, #56]	; (808c610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 808c5d6:	f000 fc7d 	bl	808ced4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 808c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c5dc:	681b      	ldr	r3, [r3, #0]
 808c5de:	2b00      	cmp	r3, #0
 808c5e0:	d006      	beq.n	808c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 808c5e2:	4b09      	ldr	r3, [pc, #36]	; (808c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 808c5e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 808c5e8:	490c      	ldr	r1, [pc, #48]	; (808c61c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 808c5ea:	4809      	ldr	r0, [pc, #36]	; (808c610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 808c5ec:	f000 fc72 	bl	808ced4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 808c5f0:	6a3b      	ldr	r3, [r7, #32]
 808c5f2:	2b00      	cmp	r3, #0
 808c5f4:	bf14      	ite	ne
 808c5f6:	2301      	movne	r3, #1
 808c5f8:	2300      	moveq	r3, #0
 808c5fa:	b2db      	uxtb	r3, r3
 808c5fc:	e000      	b.n	808c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 808c5fe:	2300      	movs	r3, #0
}
 808c600:	4618      	mov	r0, r3
 808c602:	3730      	adds	r7, #48	; 0x30
 808c604:	46bd      	mov	sp, r7
 808c606:	bd80      	pop	{r7, pc}
 808c608:	080906b0 	.word	0x080906b0
 808c60c:	08090794 	.word	0x08090794
 808c610:	080906f8 	.word	0x080906f8
 808c614:	080907b4 	.word	0x080907b4
 808c618:	080907ec 	.word	0x080907ec
 808c61c:	080907fc 	.word	0x080907fc

0808c620 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 808c620:	b580      	push	{r7, lr}
 808c622:	b08e      	sub	sp, #56	; 0x38
 808c624:	af00      	add	r7, sp, #0
 808c626:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 808c628:	687b      	ldr	r3, [r7, #4]
 808c62a:	685b      	ldr	r3, [r3, #4]
 808c62c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 808c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c630:	781b      	ldrb	r3, [r3, #0]
 808c632:	f003 030f 	and.w	r3, r3, #15
 808c636:	b2db      	uxtb	r3, r3
 808c638:	009b      	lsls	r3, r3, #2
 808c63a:	b2db      	uxtb	r3, r3
 808c63c:	2b14      	cmp	r3, #20
 808c63e:	f040 8171 	bne.w	808c924 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 808c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c644:	88db      	ldrh	r3, [r3, #6]
 808c646:	b29b      	uxth	r3, r3
 808c648:	4618      	mov	r0, r3
 808c64a:	f7f6 ff49 	bl	80834e0 <lwip_htons>
 808c64e:	4603      	mov	r3, r0
 808c650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 808c654:	b29b      	uxth	r3, r3
 808c656:	00db      	lsls	r3, r3, #3
 808c658:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 808c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c65c:	885b      	ldrh	r3, [r3, #2]
 808c65e:	b29b      	uxth	r3, r3
 808c660:	4618      	mov	r0, r3
 808c662:	f7f6 ff3d 	bl	80834e0 <lwip_htons>
 808c666:	4603      	mov	r3, r0
 808c668:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 808c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c66c:	781b      	ldrb	r3, [r3, #0]
 808c66e:	f003 030f 	and.w	r3, r3, #15
 808c672:	b2db      	uxtb	r3, r3
 808c674:	009b      	lsls	r3, r3, #2
 808c676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 808c67a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 808c67e:	b29b      	uxth	r3, r3
 808c680:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 808c682:	429a      	cmp	r2, r3
 808c684:	f0c0 8150 	bcc.w	808c928 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 808c688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 808c68c:	b29b      	uxth	r3, r3
 808c68e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 808c690:	1ad3      	subs	r3, r2, r3
 808c692:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 808c694:	6878      	ldr	r0, [r7, #4]
 808c696:	f7f8 fae9 	bl	8084c6c <pbuf_clen>
 808c69a:	4603      	mov	r3, r0
 808c69c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 808c69e:	4b8c      	ldr	r3, [pc, #560]	; (808c8d0 <ip4_reass+0x2b0>)
 808c6a0:	881b      	ldrh	r3, [r3, #0]
 808c6a2:	461a      	mov	r2, r3
 808c6a4:	8c3b      	ldrh	r3, [r7, #32]
 808c6a6:	4413      	add	r3, r2
 808c6a8:	2b0a      	cmp	r3, #10
 808c6aa:	dd10      	ble.n	808c6ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 808c6ac:	8c3b      	ldrh	r3, [r7, #32]
 808c6ae:	4619      	mov	r1, r3
 808c6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 808c6b2:	f7ff fd81 	bl	808c1b8 <ip_reass_remove_oldest_datagram>
 808c6b6:	4603      	mov	r3, r0
 808c6b8:	2b00      	cmp	r3, #0
 808c6ba:	f000 8137 	beq.w	808c92c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 808c6be:	4b84      	ldr	r3, [pc, #528]	; (808c8d0 <ip4_reass+0x2b0>)
 808c6c0:	881b      	ldrh	r3, [r3, #0]
 808c6c2:	461a      	mov	r2, r3
 808c6c4:	8c3b      	ldrh	r3, [r7, #32]
 808c6c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 808c6c8:	2b0a      	cmp	r3, #10
 808c6ca:	f300 812f 	bgt.w	808c92c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 808c6ce:	4b81      	ldr	r3, [pc, #516]	; (808c8d4 <ip4_reass+0x2b4>)
 808c6d0:	681b      	ldr	r3, [r3, #0]
 808c6d2:	633b      	str	r3, [r7, #48]	; 0x30
 808c6d4:	e015      	b.n	808c702 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 808c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c6d8:	695a      	ldr	r2, [r3, #20]
 808c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c6dc:	68db      	ldr	r3, [r3, #12]
 808c6de:	429a      	cmp	r2, r3
 808c6e0:	d10c      	bne.n	808c6fc <ip4_reass+0xdc>
 808c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c6e4:	699a      	ldr	r2, [r3, #24]
 808c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c6e8:	691b      	ldr	r3, [r3, #16]
 808c6ea:	429a      	cmp	r2, r3
 808c6ec:	d106      	bne.n	808c6fc <ip4_reass+0xdc>
 808c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c6f0:	899a      	ldrh	r2, [r3, #12]
 808c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c6f4:	889b      	ldrh	r3, [r3, #4]
 808c6f6:	b29b      	uxth	r3, r3
 808c6f8:	429a      	cmp	r2, r3
 808c6fa:	d006      	beq.n	808c70a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 808c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c6fe:	681b      	ldr	r3, [r3, #0]
 808c700:	633b      	str	r3, [r7, #48]	; 0x30
 808c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c704:	2b00      	cmp	r3, #0
 808c706:	d1e6      	bne.n	808c6d6 <ip4_reass+0xb6>
 808c708:	e000      	b.n	808c70c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 808c70a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 808c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c70e:	2b00      	cmp	r3, #0
 808c710:	d109      	bne.n	808c726 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 808c712:	8c3b      	ldrh	r3, [r7, #32]
 808c714:	4619      	mov	r1, r3
 808c716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 808c718:	f7ff fdb0 	bl	808c27c <ip_reass_enqueue_new_datagram>
 808c71c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 808c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c720:	2b00      	cmp	r3, #0
 808c722:	d11c      	bne.n	808c75e <ip4_reass+0x13e>
      goto nullreturn;
 808c724:	e105      	b.n	808c932 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 808c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c728:	88db      	ldrh	r3, [r3, #6]
 808c72a:	b29b      	uxth	r3, r3
 808c72c:	4618      	mov	r0, r3
 808c72e:	f7f6 fed7 	bl	80834e0 <lwip_htons>
 808c732:	4603      	mov	r3, r0
 808c734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 808c738:	2b00      	cmp	r3, #0
 808c73a:	d110      	bne.n	808c75e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 808c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c73e:	89db      	ldrh	r3, [r3, #14]
 808c740:	4618      	mov	r0, r3
 808c742:	f7f6 fecd 	bl	80834e0 <lwip_htons>
 808c746:	4603      	mov	r3, r0
 808c748:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 808c74c:	2b00      	cmp	r3, #0
 808c74e:	d006      	beq.n	808c75e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 808c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c752:	3308      	adds	r3, #8
 808c754:	2214      	movs	r2, #20
 808c756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 808c758:	4618      	mov	r0, r3
 808c75a:	f000 fba5 	bl	808cea8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 808c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c760:	88db      	ldrh	r3, [r3, #6]
 808c762:	b29b      	uxth	r3, r3
 808c764:	f003 0320 	and.w	r3, r3, #32
 808c768:	2b00      	cmp	r3, #0
 808c76a:	bf0c      	ite	eq
 808c76c:	2301      	moveq	r3, #1
 808c76e:	2300      	movne	r3, #0
 808c770:	b2db      	uxtb	r3, r3
 808c772:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 808c774:	69fb      	ldr	r3, [r7, #28]
 808c776:	2b00      	cmp	r3, #0
 808c778:	d00e      	beq.n	808c798 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 808c77a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 808c77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808c77e:	4413      	add	r3, r2
 808c780:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 808c782:	8b7a      	ldrh	r2, [r7, #26]
 808c784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 808c786:	429a      	cmp	r2, r3
 808c788:	f0c0 80a0 	bcc.w	808c8cc <ip4_reass+0x2ac>
 808c78c:	8b7b      	ldrh	r3, [r7, #26]
 808c78e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 808c792:	4293      	cmp	r3, r2
 808c794:	f200 809a 	bhi.w	808c8cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 808c798:	69fa      	ldr	r2, [r7, #28]
 808c79a:	6879      	ldr	r1, [r7, #4]
 808c79c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 808c79e:	f7ff fdd5 	bl	808c34c <ip_reass_chain_frag_into_datagram_and_validate>
 808c7a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 808c7a4:	697b      	ldr	r3, [r7, #20]
 808c7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 808c7aa:	f000 809b 	beq.w	808c8e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 808c7ae:	4b48      	ldr	r3, [pc, #288]	; (808c8d0 <ip4_reass+0x2b0>)
 808c7b0:	881a      	ldrh	r2, [r3, #0]
 808c7b2:	8c3b      	ldrh	r3, [r7, #32]
 808c7b4:	4413      	add	r3, r2
 808c7b6:	b29a      	uxth	r2, r3
 808c7b8:	4b45      	ldr	r3, [pc, #276]	; (808c8d0 <ip4_reass+0x2b0>)
 808c7ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 808c7bc:	69fb      	ldr	r3, [r7, #28]
 808c7be:	2b00      	cmp	r3, #0
 808c7c0:	d00d      	beq.n	808c7de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 808c7c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 808c7c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808c7c6:	4413      	add	r3, r2
 808c7c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 808c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7cc:	8a7a      	ldrh	r2, [r7, #18]
 808c7ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 808c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7d2:	7f9b      	ldrb	r3, [r3, #30]
 808c7d4:	f043 0301 	orr.w	r3, r3, #1
 808c7d8:	b2da      	uxtb	r2, r3
 808c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 808c7de:	697b      	ldr	r3, [r7, #20]
 808c7e0:	2b01      	cmp	r3, #1
 808c7e2:	d171      	bne.n	808c8c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 808c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7e6:	8b9b      	ldrh	r3, [r3, #28]
 808c7e8:	3314      	adds	r3, #20
 808c7ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 808c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7ee:	685b      	ldr	r3, [r3, #4]
 808c7f0:	685b      	ldr	r3, [r3, #4]
 808c7f2:	681b      	ldr	r3, [r3, #0]
 808c7f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 808c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c7f8:	685b      	ldr	r3, [r3, #4]
 808c7fa:	685b      	ldr	r3, [r3, #4]
 808c7fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 808c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c800:	3308      	adds	r3, #8
 808c802:	2214      	movs	r2, #20
 808c804:	4619      	mov	r1, r3
 808c806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 808c808:	f000 fb4e 	bl	808cea8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 808c80c:	8a3b      	ldrh	r3, [r7, #16]
 808c80e:	4618      	mov	r0, r3
 808c810:	f7f6 fe66 	bl	80834e0 <lwip_htons>
 808c814:	4603      	mov	r3, r0
 808c816:	461a      	mov	r2, r3
 808c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c81a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 808c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c81e:	2200      	movs	r2, #0
 808c820:	719a      	strb	r2, [r3, #6]
 808c822:	2200      	movs	r2, #0
 808c824:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 808c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808c828:	2200      	movs	r2, #0
 808c82a:	729a      	strb	r2, [r3, #10]
 808c82c:	2200      	movs	r2, #0
 808c82e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 808c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c832:	685b      	ldr	r3, [r3, #4]
 808c834:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 808c836:	e00d      	b.n	808c854 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 808c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808c83a:	685b      	ldr	r3, [r3, #4]
 808c83c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 808c83e:	2114      	movs	r1, #20
 808c840:	6b78      	ldr	r0, [r7, #52]	; 0x34
 808c842:	f7f8 f905 	bl	8084a50 <pbuf_remove_header>
      pbuf_cat(p, r);
 808c846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 808c848:	6878      	ldr	r0, [r7, #4]
 808c84a:	f7f8 fa49 	bl	8084ce0 <pbuf_cat>
      r = iprh->next_pbuf;
 808c84e:	68fb      	ldr	r3, [r7, #12]
 808c850:	681b      	ldr	r3, [r3, #0]
 808c852:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 808c854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808c856:	2b00      	cmp	r3, #0
 808c858:	d1ee      	bne.n	808c838 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 808c85a:	4b1e      	ldr	r3, [pc, #120]	; (808c8d4 <ip4_reass+0x2b4>)
 808c85c:	681b      	ldr	r3, [r3, #0]
 808c85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808c860:	429a      	cmp	r2, r3
 808c862:	d102      	bne.n	808c86a <ip4_reass+0x24a>
      ipr_prev = NULL;
 808c864:	2300      	movs	r3, #0
 808c866:	62fb      	str	r3, [r7, #44]	; 0x2c
 808c868:	e010      	b.n	808c88c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 808c86a:	4b1a      	ldr	r3, [pc, #104]	; (808c8d4 <ip4_reass+0x2b4>)
 808c86c:	681b      	ldr	r3, [r3, #0]
 808c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
 808c870:	e007      	b.n	808c882 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 808c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c874:	681b      	ldr	r3, [r3, #0]
 808c876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808c878:	429a      	cmp	r2, r3
 808c87a:	d006      	beq.n	808c88a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 808c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c87e:	681b      	ldr	r3, [r3, #0]
 808c880:	62fb      	str	r3, [r7, #44]	; 0x2c
 808c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808c884:	2b00      	cmp	r3, #0
 808c886:	d1f4      	bne.n	808c872 <ip4_reass+0x252>
 808c888:	e000      	b.n	808c88c <ip4_reass+0x26c>
          break;
 808c88a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 808c88c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 808c88e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 808c890:	f7ff fd2e 	bl	808c2f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 808c894:	6878      	ldr	r0, [r7, #4]
 808c896:	f7f8 f9e9 	bl	8084c6c <pbuf_clen>
 808c89a:	4603      	mov	r3, r0
 808c89c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 808c89e:	4b0c      	ldr	r3, [pc, #48]	; (808c8d0 <ip4_reass+0x2b0>)
 808c8a0:	881b      	ldrh	r3, [r3, #0]
 808c8a2:	8c3a      	ldrh	r2, [r7, #32]
 808c8a4:	429a      	cmp	r2, r3
 808c8a6:	d906      	bls.n	808c8b6 <ip4_reass+0x296>
 808c8a8:	4b0b      	ldr	r3, [pc, #44]	; (808c8d8 <ip4_reass+0x2b8>)
 808c8aa:	f240 229b 	movw	r2, #667	; 0x29b
 808c8ae:	490b      	ldr	r1, [pc, #44]	; (808c8dc <ip4_reass+0x2bc>)
 808c8b0:	480b      	ldr	r0, [pc, #44]	; (808c8e0 <ip4_reass+0x2c0>)
 808c8b2:	f000 fb0f 	bl	808ced4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 808c8b6:	4b06      	ldr	r3, [pc, #24]	; (808c8d0 <ip4_reass+0x2b0>)
 808c8b8:	881a      	ldrh	r2, [r3, #0]
 808c8ba:	8c3b      	ldrh	r3, [r7, #32]
 808c8bc:	1ad3      	subs	r3, r2, r3
 808c8be:	b29a      	uxth	r2, r3
 808c8c0:	4b03      	ldr	r3, [pc, #12]	; (808c8d0 <ip4_reass+0x2b0>)
 808c8c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 808c8c4:	687b      	ldr	r3, [r7, #4]
 808c8c6:	e038      	b.n	808c93a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 808c8c8:	2300      	movs	r3, #0
 808c8ca:	e036      	b.n	808c93a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 808c8cc:	bf00      	nop
 808c8ce:	e00a      	b.n	808c8e6 <ip4_reass+0x2c6>
 808c8d0:	2000838c 	.word	0x2000838c
 808c8d4:	20008388 	.word	0x20008388
 808c8d8:	080906b0 	.word	0x080906b0
 808c8dc:	08090820 	.word	0x08090820
 808c8e0:	080906f8 	.word	0x080906f8
    goto nullreturn_ipr;
 808c8e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 808c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c8e8:	2b00      	cmp	r3, #0
 808c8ea:	d106      	bne.n	808c8fa <ip4_reass+0x2da>
 808c8ec:	4b15      	ldr	r3, [pc, #84]	; (808c944 <ip4_reass+0x324>)
 808c8ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 808c8f2:	4915      	ldr	r1, [pc, #84]	; (808c948 <ip4_reass+0x328>)
 808c8f4:	4815      	ldr	r0, [pc, #84]	; (808c94c <ip4_reass+0x32c>)
 808c8f6:	f000 faed 	bl	808ced4 <iprintf>
  if (ipr->p == NULL) {
 808c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808c8fc:	685b      	ldr	r3, [r3, #4]
 808c8fe:	2b00      	cmp	r3, #0
 808c900:	d116      	bne.n	808c930 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 808c902:	4b13      	ldr	r3, [pc, #76]	; (808c950 <ip4_reass+0x330>)
 808c904:	681b      	ldr	r3, [r3, #0]
 808c906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808c908:	429a      	cmp	r2, r3
 808c90a:	d006      	beq.n	808c91a <ip4_reass+0x2fa>
 808c90c:	4b0d      	ldr	r3, [pc, #52]	; (808c944 <ip4_reass+0x324>)
 808c90e:	f240 22ab 	movw	r2, #683	; 0x2ab
 808c912:	4910      	ldr	r1, [pc, #64]	; (808c954 <ip4_reass+0x334>)
 808c914:	480d      	ldr	r0, [pc, #52]	; (808c94c <ip4_reass+0x32c>)
 808c916:	f000 fadd 	bl	808ced4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 808c91a:	2100      	movs	r1, #0
 808c91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 808c91e:	f7ff fce7 	bl	808c2f0 <ip_reass_dequeue_datagram>
 808c922:	e006      	b.n	808c932 <ip4_reass+0x312>
    goto nullreturn;
 808c924:	bf00      	nop
 808c926:	e004      	b.n	808c932 <ip4_reass+0x312>
    goto nullreturn;
 808c928:	bf00      	nop
 808c92a:	e002      	b.n	808c932 <ip4_reass+0x312>
      goto nullreturn;
 808c92c:	bf00      	nop
 808c92e:	e000      	b.n	808c932 <ip4_reass+0x312>
  }

nullreturn:
 808c930:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 808c932:	6878      	ldr	r0, [r7, #4]
 808c934:	f7f8 f912 	bl	8084b5c <pbuf_free>
  return NULL;
 808c938:	2300      	movs	r3, #0
}
 808c93a:	4618      	mov	r0, r3
 808c93c:	3738      	adds	r7, #56	; 0x38
 808c93e:	46bd      	mov	sp, r7
 808c940:	bd80      	pop	{r7, pc}
 808c942:	bf00      	nop
 808c944:	080906b0 	.word	0x080906b0
 808c948:	0809083c 	.word	0x0809083c
 808c94c:	080906f8 	.word	0x080906f8
 808c950:	20008388 	.word	0x20008388
 808c954:	08090848 	.word	0x08090848

0808c958 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 808c958:	b580      	push	{r7, lr}
 808c95a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 808c95c:	2005      	movs	r0, #5
 808c95e:	f7f7 fa37 	bl	8083dd0 <memp_malloc>
 808c962:	4603      	mov	r3, r0
}
 808c964:	4618      	mov	r0, r3
 808c966:	bd80      	pop	{r7, pc}

0808c968 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 808c968:	b580      	push	{r7, lr}
 808c96a:	b082      	sub	sp, #8
 808c96c:	af00      	add	r7, sp, #0
 808c96e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 808c970:	687b      	ldr	r3, [r7, #4]
 808c972:	2b00      	cmp	r3, #0
 808c974:	d106      	bne.n	808c984 <ip_frag_free_pbuf_custom_ref+0x1c>
 808c976:	4b07      	ldr	r3, [pc, #28]	; (808c994 <ip_frag_free_pbuf_custom_ref+0x2c>)
 808c978:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 808c97c:	4906      	ldr	r1, [pc, #24]	; (808c998 <ip_frag_free_pbuf_custom_ref+0x30>)
 808c97e:	4807      	ldr	r0, [pc, #28]	; (808c99c <ip_frag_free_pbuf_custom_ref+0x34>)
 808c980:	f000 faa8 	bl	808ced4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 808c984:	6879      	ldr	r1, [r7, #4]
 808c986:	2005      	movs	r0, #5
 808c988:	f7f7 fa92 	bl	8083eb0 <memp_free>
}
 808c98c:	bf00      	nop
 808c98e:	3708      	adds	r7, #8
 808c990:	46bd      	mov	sp, r7
 808c992:	bd80      	pop	{r7, pc}
 808c994:	080906b0 	.word	0x080906b0
 808c998:	08090868 	.word	0x08090868
 808c99c:	080906f8 	.word	0x080906f8

0808c9a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 808c9a0:	b580      	push	{r7, lr}
 808c9a2:	b084      	sub	sp, #16
 808c9a4:	af00      	add	r7, sp, #0
 808c9a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 808c9a8:	687b      	ldr	r3, [r7, #4]
 808c9aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 808c9ac:	68fb      	ldr	r3, [r7, #12]
 808c9ae:	2b00      	cmp	r3, #0
 808c9b0:	d106      	bne.n	808c9c0 <ipfrag_free_pbuf_custom+0x20>
 808c9b2:	4b11      	ldr	r3, [pc, #68]	; (808c9f8 <ipfrag_free_pbuf_custom+0x58>)
 808c9b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 808c9b8:	4910      	ldr	r1, [pc, #64]	; (808c9fc <ipfrag_free_pbuf_custom+0x5c>)
 808c9ba:	4811      	ldr	r0, [pc, #68]	; (808ca00 <ipfrag_free_pbuf_custom+0x60>)
 808c9bc:	f000 fa8a 	bl	808ced4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 808c9c0:	68fa      	ldr	r2, [r7, #12]
 808c9c2:	687b      	ldr	r3, [r7, #4]
 808c9c4:	429a      	cmp	r2, r3
 808c9c6:	d006      	beq.n	808c9d6 <ipfrag_free_pbuf_custom+0x36>
 808c9c8:	4b0b      	ldr	r3, [pc, #44]	; (808c9f8 <ipfrag_free_pbuf_custom+0x58>)
 808c9ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 808c9ce:	490d      	ldr	r1, [pc, #52]	; (808ca04 <ipfrag_free_pbuf_custom+0x64>)
 808c9d0:	480b      	ldr	r0, [pc, #44]	; (808ca00 <ipfrag_free_pbuf_custom+0x60>)
 808c9d2:	f000 fa7f 	bl	808ced4 <iprintf>
  if (pcr->original != NULL) {
 808c9d6:	68fb      	ldr	r3, [r7, #12]
 808c9d8:	695b      	ldr	r3, [r3, #20]
 808c9da:	2b00      	cmp	r3, #0
 808c9dc:	d004      	beq.n	808c9e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 808c9de:	68fb      	ldr	r3, [r7, #12]
 808c9e0:	695b      	ldr	r3, [r3, #20]
 808c9e2:	4618      	mov	r0, r3
 808c9e4:	f7f8 f8ba 	bl	8084b5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 808c9e8:	68f8      	ldr	r0, [r7, #12]
 808c9ea:	f7ff ffbd 	bl	808c968 <ip_frag_free_pbuf_custom_ref>
}
 808c9ee:	bf00      	nop
 808c9f0:	3710      	adds	r7, #16
 808c9f2:	46bd      	mov	sp, r7
 808c9f4:	bd80      	pop	{r7, pc}
 808c9f6:	bf00      	nop
 808c9f8:	080906b0 	.word	0x080906b0
 808c9fc:	08090874 	.word	0x08090874
 808ca00:	080906f8 	.word	0x080906f8
 808ca04:	08090880 	.word	0x08090880

0808ca08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 808ca08:	b580      	push	{r7, lr}
 808ca0a:	b094      	sub	sp, #80	; 0x50
 808ca0c:	af02      	add	r7, sp, #8
 808ca0e:	60f8      	str	r0, [r7, #12]
 808ca10:	60b9      	str	r1, [r7, #8]
 808ca12:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 808ca14:	2300      	movs	r3, #0
 808ca16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 808ca1a:	68bb      	ldr	r3, [r7, #8]
 808ca1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 808ca1e:	3b14      	subs	r3, #20
 808ca20:	2b00      	cmp	r3, #0
 808ca22:	da00      	bge.n	808ca26 <ip4_frag+0x1e>
 808ca24:	3307      	adds	r3, #7
 808ca26:	10db      	asrs	r3, r3, #3
 808ca28:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 808ca2a:	2314      	movs	r3, #20
 808ca2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 808ca2e:	68fb      	ldr	r3, [r7, #12]
 808ca30:	685b      	ldr	r3, [r3, #4]
 808ca32:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 808ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808ca36:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 808ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808ca3a:	781b      	ldrb	r3, [r3, #0]
 808ca3c:	f003 030f 	and.w	r3, r3, #15
 808ca40:	b2db      	uxtb	r3, r3
 808ca42:	009b      	lsls	r3, r3, #2
 808ca44:	b2db      	uxtb	r3, r3
 808ca46:	2b14      	cmp	r3, #20
 808ca48:	d002      	beq.n	808ca50 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 808ca4a:	f06f 0305 	mvn.w	r3, #5
 808ca4e:	e110      	b.n	808cc72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 808ca50:	68fb      	ldr	r3, [r7, #12]
 808ca52:	895b      	ldrh	r3, [r3, #10]
 808ca54:	2b13      	cmp	r3, #19
 808ca56:	d809      	bhi.n	808ca6c <ip4_frag+0x64>
 808ca58:	4b88      	ldr	r3, [pc, #544]	; (808cc7c <ip4_frag+0x274>)
 808ca5a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 808ca5e:	4988      	ldr	r1, [pc, #544]	; (808cc80 <ip4_frag+0x278>)
 808ca60:	4888      	ldr	r0, [pc, #544]	; (808cc84 <ip4_frag+0x27c>)
 808ca62:	f000 fa37 	bl	808ced4 <iprintf>
 808ca66:	f06f 0305 	mvn.w	r3, #5
 808ca6a:	e102      	b.n	808cc72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 808ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808ca6e:	88db      	ldrh	r3, [r3, #6]
 808ca70:	b29b      	uxth	r3, r3
 808ca72:	4618      	mov	r0, r3
 808ca74:	f7f6 fd34 	bl	80834e0 <lwip_htons>
 808ca78:	4603      	mov	r3, r0
 808ca7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 808ca7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 808ca7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 808ca82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 808ca86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 808ca88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 808ca8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 808ca8e:	68fb      	ldr	r3, [r7, #12]
 808ca90:	891b      	ldrh	r3, [r3, #8]
 808ca92:	3b14      	subs	r3, #20
 808ca94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 808ca98:	e0e1      	b.n	808cc5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 808ca9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 808ca9c:	00db      	lsls	r3, r3, #3
 808ca9e:	b29b      	uxth	r3, r3
 808caa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 808caa4:	4293      	cmp	r3, r2
 808caa6:	bf28      	it	cs
 808caa8:	4613      	movcs	r3, r2
 808caaa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 808caac:	f44f 7220 	mov.w	r2, #640	; 0x280
 808cab0:	2114      	movs	r1, #20
 808cab2:	200e      	movs	r0, #14
 808cab4:	f7f7 fd6e 	bl	8084594 <pbuf_alloc>
 808cab8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 808caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808cabc:	2b00      	cmp	r3, #0
 808cabe:	f000 80d5 	beq.w	808cc6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 808cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808cac4:	895b      	ldrh	r3, [r3, #10]
 808cac6:	2b13      	cmp	r3, #19
 808cac8:	d806      	bhi.n	808cad8 <ip4_frag+0xd0>
 808caca:	4b6c      	ldr	r3, [pc, #432]	; (808cc7c <ip4_frag+0x274>)
 808cacc:	f44f 7249 	mov.w	r2, #804	; 0x324
 808cad0:	496d      	ldr	r1, [pc, #436]	; (808cc88 <ip4_frag+0x280>)
 808cad2:	486c      	ldr	r0, [pc, #432]	; (808cc84 <ip4_frag+0x27c>)
 808cad4:	f000 f9fe 	bl	808ced4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 808cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808cada:	685b      	ldr	r3, [r3, #4]
 808cadc:	2214      	movs	r2, #20
 808cade:	6b79      	ldr	r1, [r7, #52]	; 0x34
 808cae0:	4618      	mov	r0, r3
 808cae2:	f000 f9e1 	bl	808cea8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 808cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808cae8:	685b      	ldr	r3, [r3, #4]
 808caea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 808caec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 808caee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 808caf2:	e064      	b.n	808cbbe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 808caf4:	68fb      	ldr	r3, [r7, #12]
 808caf6:	895a      	ldrh	r2, [r3, #10]
 808caf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 808cafa:	1ad3      	subs	r3, r2, r3
 808cafc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 808cafe:	68fb      	ldr	r3, [r7, #12]
 808cb00:	895b      	ldrh	r3, [r3, #10]
 808cb02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 808cb04:	429a      	cmp	r2, r3
 808cb06:	d906      	bls.n	808cb16 <ip4_frag+0x10e>
 808cb08:	4b5c      	ldr	r3, [pc, #368]	; (808cc7c <ip4_frag+0x274>)
 808cb0a:	f240 322d 	movw	r2, #813	; 0x32d
 808cb0e:	495f      	ldr	r1, [pc, #380]	; (808cc8c <ip4_frag+0x284>)
 808cb10:	485c      	ldr	r0, [pc, #368]	; (808cc84 <ip4_frag+0x27c>)
 808cb12:	f000 f9df 	bl	808ced4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 808cb16:	8bfa      	ldrh	r2, [r7, #30]
 808cb18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 808cb1c:	4293      	cmp	r3, r2
 808cb1e:	bf28      	it	cs
 808cb20:	4613      	movcs	r3, r2
 808cb22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 808cb26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 808cb2a:	2b00      	cmp	r3, #0
 808cb2c:	d105      	bne.n	808cb3a <ip4_frag+0x132>
        poff = 0;
 808cb2e:	2300      	movs	r3, #0
 808cb30:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 808cb32:	68fb      	ldr	r3, [r7, #12]
 808cb34:	681b      	ldr	r3, [r3, #0]
 808cb36:	60fb      	str	r3, [r7, #12]
        continue;
 808cb38:	e041      	b.n	808cbbe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 808cb3a:	f7ff ff0d 	bl	808c958 <ip_frag_alloc_pbuf_custom_ref>
 808cb3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 808cb40:	69bb      	ldr	r3, [r7, #24]
 808cb42:	2b00      	cmp	r3, #0
 808cb44:	d103      	bne.n	808cb4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 808cb46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808cb48:	f7f8 f808 	bl	8084b5c <pbuf_free>
        goto memerr;
 808cb4c:	e08f      	b.n	808cc6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 808cb4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 808cb50:	68fb      	ldr	r3, [r7, #12]
 808cb52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 808cb54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 808cb56:	4413      	add	r3, r2
 808cb58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 808cb5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 808cb60:	9201      	str	r2, [sp, #4]
 808cb62:	9300      	str	r3, [sp, #0]
 808cb64:	4603      	mov	r3, r0
 808cb66:	2241      	movs	r2, #65	; 0x41
 808cb68:	2000      	movs	r0, #0
 808cb6a:	f7f7 fe3d 	bl	80847e8 <pbuf_alloced_custom>
 808cb6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 808cb70:	697b      	ldr	r3, [r7, #20]
 808cb72:	2b00      	cmp	r3, #0
 808cb74:	d106      	bne.n	808cb84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 808cb76:	69b8      	ldr	r0, [r7, #24]
 808cb78:	f7ff fef6 	bl	808c968 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 808cb7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808cb7e:	f7f7 ffed 	bl	8084b5c <pbuf_free>
        goto memerr;
 808cb82:	e074      	b.n	808cc6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 808cb84:	68f8      	ldr	r0, [r7, #12]
 808cb86:	f7f8 f889 	bl	8084c9c <pbuf_ref>
      pcr->original = p;
 808cb8a:	69bb      	ldr	r3, [r7, #24]
 808cb8c:	68fa      	ldr	r2, [r7, #12]
 808cb8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 808cb90:	69bb      	ldr	r3, [r7, #24]
 808cb92:	4a3f      	ldr	r2, [pc, #252]	; (808cc90 <ip4_frag+0x288>)
 808cb94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 808cb96:	6979      	ldr	r1, [r7, #20]
 808cb98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808cb9a:	f7f8 f8a1 	bl	8084ce0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 808cb9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 808cba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 808cba6:	1ad3      	subs	r3, r2, r3
 808cba8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 808cbac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 808cbb0:	2b00      	cmp	r3, #0
 808cbb2:	d004      	beq.n	808cbbe <ip4_frag+0x1b6>
        poff = 0;
 808cbb4:	2300      	movs	r3, #0
 808cbb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 808cbb8:	68fb      	ldr	r3, [r7, #12]
 808cbba:	681b      	ldr	r3, [r3, #0]
 808cbbc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 808cbbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 808cbc2:	2b00      	cmp	r3, #0
 808cbc4:	d196      	bne.n	808caf4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 808cbc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 808cbc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 808cbcc:	4413      	add	r3, r2
 808cbce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 808cbd0:	68bb      	ldr	r3, [r7, #8]
 808cbd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 808cbd4:	f1a3 0213 	sub.w	r2, r3, #19
 808cbd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 808cbdc:	429a      	cmp	r2, r3
 808cbde:	bfcc      	ite	gt
 808cbe0:	2301      	movgt	r3, #1
 808cbe2:	2300      	movle	r3, #0
 808cbe4:	b2db      	uxtb	r3, r3
 808cbe6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 808cbe8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 808cbec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 808cbf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 808cbf2:	6a3b      	ldr	r3, [r7, #32]
 808cbf4:	2b00      	cmp	r3, #0
 808cbf6:	d002      	beq.n	808cbfe <ip4_frag+0x1f6>
 808cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808cbfa:	2b00      	cmp	r3, #0
 808cbfc:	d003      	beq.n	808cc06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 808cbfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 808cc00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 808cc04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 808cc06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 808cc08:	4618      	mov	r0, r3
 808cc0a:	f7f6 fc69 	bl	80834e0 <lwip_htons>
 808cc0e:	4603      	mov	r3, r0
 808cc10:	461a      	mov	r2, r3
 808cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808cc14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 808cc16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 808cc18:	3314      	adds	r3, #20
 808cc1a:	b29b      	uxth	r3, r3
 808cc1c:	4618      	mov	r0, r3
 808cc1e:	f7f6 fc5f 	bl	80834e0 <lwip_htons>
 808cc22:	4603      	mov	r3, r0
 808cc24:	461a      	mov	r2, r3
 808cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808cc28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 808cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808cc2c:	2200      	movs	r2, #0
 808cc2e:	729a      	strb	r2, [r3, #10]
 808cc30:	2200      	movs	r2, #0
 808cc32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 808cc34:	68bb      	ldr	r3, [r7, #8]
 808cc36:	695b      	ldr	r3, [r3, #20]
 808cc38:	687a      	ldr	r2, [r7, #4]
 808cc3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 808cc3c:	68b8      	ldr	r0, [r7, #8]
 808cc3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 808cc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 808cc42:	f7f7 ff8b 	bl	8084b5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 808cc46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 808cc4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 808cc4c:	1ad3      	subs	r3, r2, r3
 808cc4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 808cc52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 808cc56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 808cc58:	4413      	add	r3, r2
 808cc5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 808cc5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 808cc62:	2b00      	cmp	r3, #0
 808cc64:	f47f af19 	bne.w	808ca9a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 808cc68:	2300      	movs	r3, #0
 808cc6a:	e002      	b.n	808cc72 <ip4_frag+0x26a>
      goto memerr;
 808cc6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 808cc6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 808cc72:	4618      	mov	r0, r3
 808cc74:	3748      	adds	r7, #72	; 0x48
 808cc76:	46bd      	mov	sp, r7
 808cc78:	bd80      	pop	{r7, pc}
 808cc7a:	bf00      	nop
 808cc7c:	080906b0 	.word	0x080906b0
 808cc80:	0809088c 	.word	0x0809088c
 808cc84:	080906f8 	.word	0x080906f8
 808cc88:	080908a8 	.word	0x080908a8
 808cc8c:	080908c8 	.word	0x080908c8
 808cc90:	0808c9a1 	.word	0x0808c9a1

0808cc94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 808cc94:	b580      	push	{r7, lr}
 808cc96:	b086      	sub	sp, #24
 808cc98:	af00      	add	r7, sp, #0
 808cc9a:	6078      	str	r0, [r7, #4]
 808cc9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 808cc9e:	230e      	movs	r3, #14
 808cca0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 808cca2:	687b      	ldr	r3, [r7, #4]
 808cca4:	895b      	ldrh	r3, [r3, #10]
 808cca6:	2b0e      	cmp	r3, #14
 808cca8:	d96e      	bls.n	808cd88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 808ccaa:	687b      	ldr	r3, [r7, #4]
 808ccac:	7bdb      	ldrb	r3, [r3, #15]
 808ccae:	2b00      	cmp	r3, #0
 808ccb0:	d106      	bne.n	808ccc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 808ccb2:	683b      	ldr	r3, [r7, #0]
 808ccb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 808ccb8:	3301      	adds	r3, #1
 808ccba:	b2da      	uxtb	r2, r3
 808ccbc:	687b      	ldr	r3, [r7, #4]
 808ccbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 808ccc0:	687b      	ldr	r3, [r7, #4]
 808ccc2:	685b      	ldr	r3, [r3, #4]
 808ccc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 808ccc6:	693b      	ldr	r3, [r7, #16]
 808ccc8:	7b1a      	ldrb	r2, [r3, #12]
 808ccca:	7b5b      	ldrb	r3, [r3, #13]
 808cccc:	021b      	lsls	r3, r3, #8
 808ccce:	4313      	orrs	r3, r2
 808ccd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 808ccd2:	693b      	ldr	r3, [r7, #16]
 808ccd4:	781b      	ldrb	r3, [r3, #0]
 808ccd6:	f003 0301 	and.w	r3, r3, #1
 808ccda:	2b00      	cmp	r3, #0
 808ccdc:	d023      	beq.n	808cd26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 808ccde:	693b      	ldr	r3, [r7, #16]
 808cce0:	781b      	ldrb	r3, [r3, #0]
 808cce2:	2b01      	cmp	r3, #1
 808cce4:	d10f      	bne.n	808cd06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 808cce6:	693b      	ldr	r3, [r7, #16]
 808cce8:	785b      	ldrb	r3, [r3, #1]
 808ccea:	2b00      	cmp	r3, #0
 808ccec:	d11b      	bne.n	808cd26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 808ccee:	693b      	ldr	r3, [r7, #16]
 808ccf0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 808ccf2:	2b5e      	cmp	r3, #94	; 0x5e
 808ccf4:	d117      	bne.n	808cd26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 808ccf6:	687b      	ldr	r3, [r7, #4]
 808ccf8:	7b5b      	ldrb	r3, [r3, #13]
 808ccfa:	f043 0310 	orr.w	r3, r3, #16
 808ccfe:	b2da      	uxtb	r2, r3
 808cd00:	687b      	ldr	r3, [r7, #4]
 808cd02:	735a      	strb	r2, [r3, #13]
 808cd04:	e00f      	b.n	808cd26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 808cd06:	693b      	ldr	r3, [r7, #16]
 808cd08:	2206      	movs	r2, #6
 808cd0a:	4928      	ldr	r1, [pc, #160]	; (808cdac <ethernet_input+0x118>)
 808cd0c:	4618      	mov	r0, r3
 808cd0e:	f000 f8bb 	bl	808ce88 <memcmp>
 808cd12:	4603      	mov	r3, r0
 808cd14:	2b00      	cmp	r3, #0
 808cd16:	d106      	bne.n	808cd26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 808cd18:	687b      	ldr	r3, [r7, #4]
 808cd1a:	7b5b      	ldrb	r3, [r3, #13]
 808cd1c:	f043 0308 	orr.w	r3, r3, #8
 808cd20:	b2da      	uxtb	r2, r3
 808cd22:	687b      	ldr	r3, [r7, #4]
 808cd24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 808cd26:	89fb      	ldrh	r3, [r7, #14]
 808cd28:	2b08      	cmp	r3, #8
 808cd2a:	d003      	beq.n	808cd34 <ethernet_input+0xa0>
 808cd2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 808cd30:	d014      	beq.n	808cd5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 808cd32:	e032      	b.n	808cd9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 808cd34:	683b      	ldr	r3, [r7, #0]
 808cd36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808cd3a:	f003 0308 	and.w	r3, r3, #8
 808cd3e:	2b00      	cmp	r3, #0
 808cd40:	d024      	beq.n	808cd8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 808cd42:	8afb      	ldrh	r3, [r7, #22]
 808cd44:	4619      	mov	r1, r3
 808cd46:	6878      	ldr	r0, [r7, #4]
 808cd48:	f7f7 fe82 	bl	8084a50 <pbuf_remove_header>
 808cd4c:	4603      	mov	r3, r0
 808cd4e:	2b00      	cmp	r3, #0
 808cd50:	d11e      	bne.n	808cd90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 808cd52:	6839      	ldr	r1, [r7, #0]
 808cd54:	6878      	ldr	r0, [r7, #4]
 808cd56:	f7fe ff21 	bl	808bb9c <ip4_input>
      break;
 808cd5a:	e013      	b.n	808cd84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 808cd5c:	683b      	ldr	r3, [r7, #0]
 808cd5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808cd62:	f003 0308 	and.w	r3, r3, #8
 808cd66:	2b00      	cmp	r3, #0
 808cd68:	d014      	beq.n	808cd94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 808cd6a:	8afb      	ldrh	r3, [r7, #22]
 808cd6c:	4619      	mov	r1, r3
 808cd6e:	6878      	ldr	r0, [r7, #4]
 808cd70:	f7f7 fe6e 	bl	8084a50 <pbuf_remove_header>
 808cd74:	4603      	mov	r3, r0
 808cd76:	2b00      	cmp	r3, #0
 808cd78:	d10e      	bne.n	808cd98 <ethernet_input+0x104>
        etharp_input(p, netif);
 808cd7a:	6839      	ldr	r1, [r7, #0]
 808cd7c:	6878      	ldr	r0, [r7, #4]
 808cd7e:	f7fe f8c1 	bl	808af04 <etharp_input>
      break;
 808cd82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 808cd84:	2300      	movs	r3, #0
 808cd86:	e00c      	b.n	808cda2 <ethernet_input+0x10e>
    goto free_and_return;
 808cd88:	bf00      	nop
 808cd8a:	e006      	b.n	808cd9a <ethernet_input+0x106>
        goto free_and_return;
 808cd8c:	bf00      	nop
 808cd8e:	e004      	b.n	808cd9a <ethernet_input+0x106>
        goto free_and_return;
 808cd90:	bf00      	nop
 808cd92:	e002      	b.n	808cd9a <ethernet_input+0x106>
        goto free_and_return;
 808cd94:	bf00      	nop
 808cd96:	e000      	b.n	808cd9a <ethernet_input+0x106>
        goto free_and_return;
 808cd98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 808cd9a:	6878      	ldr	r0, [r7, #4]
 808cd9c:	f7f7 fede 	bl	8084b5c <pbuf_free>
  return ERR_OK;
 808cda0:	2300      	movs	r3, #0
}
 808cda2:	4618      	mov	r0, r3
 808cda4:	3718      	adds	r7, #24
 808cda6:	46bd      	mov	sp, r7
 808cda8:	bd80      	pop	{r7, pc}
 808cdaa:	bf00      	nop
 808cdac:	08090a5c 	.word	0x08090a5c

0808cdb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 808cdb0:	b580      	push	{r7, lr}
 808cdb2:	b086      	sub	sp, #24
 808cdb4:	af00      	add	r7, sp, #0
 808cdb6:	60f8      	str	r0, [r7, #12]
 808cdb8:	60b9      	str	r1, [r7, #8]
 808cdba:	607a      	str	r2, [r7, #4]
 808cdbc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 808cdbe:	8c3b      	ldrh	r3, [r7, #32]
 808cdc0:	4618      	mov	r0, r3
 808cdc2:	f7f6 fb8d 	bl	80834e0 <lwip_htons>
 808cdc6:	4603      	mov	r3, r0
 808cdc8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 808cdca:	210e      	movs	r1, #14
 808cdcc:	68b8      	ldr	r0, [r7, #8]
 808cdce:	f7f7 fe2f 	bl	8084a30 <pbuf_add_header>
 808cdd2:	4603      	mov	r3, r0
 808cdd4:	2b00      	cmp	r3, #0
 808cdd6:	d125      	bne.n	808ce24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 808cdd8:	68bb      	ldr	r3, [r7, #8]
 808cdda:	685b      	ldr	r3, [r3, #4]
 808cddc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 808cdde:	693b      	ldr	r3, [r7, #16]
 808cde0:	8afa      	ldrh	r2, [r7, #22]
 808cde2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 808cde4:	693b      	ldr	r3, [r7, #16]
 808cde6:	2206      	movs	r2, #6
 808cde8:	6839      	ldr	r1, [r7, #0]
 808cdea:	4618      	mov	r0, r3
 808cdec:	f000 f85c 	bl	808cea8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 808cdf0:	693b      	ldr	r3, [r7, #16]
 808cdf2:	3306      	adds	r3, #6
 808cdf4:	2206      	movs	r2, #6
 808cdf6:	6879      	ldr	r1, [r7, #4]
 808cdf8:	4618      	mov	r0, r3
 808cdfa:	f000 f855 	bl	808cea8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 808cdfe:	68fb      	ldr	r3, [r7, #12]
 808ce00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808ce04:	2b06      	cmp	r3, #6
 808ce06:	d006      	beq.n	808ce16 <ethernet_output+0x66>
 808ce08:	4b0a      	ldr	r3, [pc, #40]	; (808ce34 <ethernet_output+0x84>)
 808ce0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 808ce0e:	490a      	ldr	r1, [pc, #40]	; (808ce38 <ethernet_output+0x88>)
 808ce10:	480a      	ldr	r0, [pc, #40]	; (808ce3c <ethernet_output+0x8c>)
 808ce12:	f000 f85f 	bl	808ced4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 808ce16:	68fb      	ldr	r3, [r7, #12]
 808ce18:	699b      	ldr	r3, [r3, #24]
 808ce1a:	68b9      	ldr	r1, [r7, #8]
 808ce1c:	68f8      	ldr	r0, [r7, #12]
 808ce1e:	4798      	blx	r3
 808ce20:	4603      	mov	r3, r0
 808ce22:	e002      	b.n	808ce2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 808ce24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 808ce26:	f06f 0301 	mvn.w	r3, #1
}
 808ce2a:	4618      	mov	r0, r3
 808ce2c:	3718      	adds	r7, #24
 808ce2e:	46bd      	mov	sp, r7
 808ce30:	bd80      	pop	{r7, pc}
 808ce32:	bf00      	nop
 808ce34:	080908d8 	.word	0x080908d8
 808ce38:	08090910 	.word	0x08090910
 808ce3c:	08090944 	.word	0x08090944

0808ce40 <__libc_init_array>:
 808ce40:	b570      	push	{r4, r5, r6, lr}
 808ce42:	4d0d      	ldr	r5, [pc, #52]	; (808ce78 <__libc_init_array+0x38>)
 808ce44:	4c0d      	ldr	r4, [pc, #52]	; (808ce7c <__libc_init_array+0x3c>)
 808ce46:	1b64      	subs	r4, r4, r5
 808ce48:	10a4      	asrs	r4, r4, #2
 808ce4a:	2600      	movs	r6, #0
 808ce4c:	42a6      	cmp	r6, r4
 808ce4e:	d109      	bne.n	808ce64 <__libc_init_array+0x24>
 808ce50:	4d0b      	ldr	r5, [pc, #44]	; (808ce80 <__libc_init_array+0x40>)
 808ce52:	4c0c      	ldr	r4, [pc, #48]	; (808ce84 <__libc_init_array+0x44>)
 808ce54:	f001 f88e 	bl	808df74 <_init>
 808ce58:	1b64      	subs	r4, r4, r5
 808ce5a:	10a4      	asrs	r4, r4, #2
 808ce5c:	2600      	movs	r6, #0
 808ce5e:	42a6      	cmp	r6, r4
 808ce60:	d105      	bne.n	808ce6e <__libc_init_array+0x2e>
 808ce62:	bd70      	pop	{r4, r5, r6, pc}
 808ce64:	f855 3b04 	ldr.w	r3, [r5], #4
 808ce68:	4798      	blx	r3
 808ce6a:	3601      	adds	r6, #1
 808ce6c:	e7ee      	b.n	808ce4c <__libc_init_array+0xc>
 808ce6e:	f855 3b04 	ldr.w	r3, [r5], #4
 808ce72:	4798      	blx	r3
 808ce74:	3601      	adds	r6, #1
 808ce76:	e7f2      	b.n	808ce5e <__libc_init_array+0x1e>
	...

0808ce88 <memcmp>:
 808ce88:	b510      	push	{r4, lr}
 808ce8a:	3901      	subs	r1, #1
 808ce8c:	4402      	add	r2, r0
 808ce8e:	4290      	cmp	r0, r2
 808ce90:	d101      	bne.n	808ce96 <memcmp+0xe>
 808ce92:	2000      	movs	r0, #0
 808ce94:	e005      	b.n	808cea2 <memcmp+0x1a>
 808ce96:	7803      	ldrb	r3, [r0, #0]
 808ce98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808ce9c:	42a3      	cmp	r3, r4
 808ce9e:	d001      	beq.n	808cea4 <memcmp+0x1c>
 808cea0:	1b18      	subs	r0, r3, r4
 808cea2:	bd10      	pop	{r4, pc}
 808cea4:	3001      	adds	r0, #1
 808cea6:	e7f2      	b.n	808ce8e <memcmp+0x6>

0808cea8 <memcpy>:
 808cea8:	440a      	add	r2, r1
 808ceaa:	4291      	cmp	r1, r2
 808ceac:	f100 33ff 	add.w	r3, r0, #4294967295
 808ceb0:	d100      	bne.n	808ceb4 <memcpy+0xc>
 808ceb2:	4770      	bx	lr
 808ceb4:	b510      	push	{r4, lr}
 808ceb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ceba:	f803 4f01 	strb.w	r4, [r3, #1]!
 808cebe:	4291      	cmp	r1, r2
 808cec0:	d1f9      	bne.n	808ceb6 <memcpy+0xe>
 808cec2:	bd10      	pop	{r4, pc}

0808cec4 <memset>:
 808cec4:	4402      	add	r2, r0
 808cec6:	4603      	mov	r3, r0
 808cec8:	4293      	cmp	r3, r2
 808ceca:	d100      	bne.n	808cece <memset+0xa>
 808cecc:	4770      	bx	lr
 808cece:	f803 1b01 	strb.w	r1, [r3], #1
 808ced2:	e7f9      	b.n	808cec8 <memset+0x4>

0808ced4 <iprintf>:
 808ced4:	b40f      	push	{r0, r1, r2, r3}
 808ced6:	4b0a      	ldr	r3, [pc, #40]	; (808cf00 <iprintf+0x2c>)
 808ced8:	b513      	push	{r0, r1, r4, lr}
 808ceda:	681c      	ldr	r4, [r3, #0]
 808cedc:	b124      	cbz	r4, 808cee8 <iprintf+0x14>
 808cede:	69a3      	ldr	r3, [r4, #24]
 808cee0:	b913      	cbnz	r3, 808cee8 <iprintf+0x14>
 808cee2:	4620      	mov	r0, r4
 808cee4:	f000 f8c2 	bl	808d06c <__sinit>
 808cee8:	ab05      	add	r3, sp, #20
 808ceea:	9a04      	ldr	r2, [sp, #16]
 808ceec:	68a1      	ldr	r1, [r4, #8]
 808ceee:	9301      	str	r3, [sp, #4]
 808cef0:	4620      	mov	r0, r4
 808cef2:	f000 fa7f 	bl	808d3f4 <_vfiprintf_r>
 808cef6:	b002      	add	sp, #8
 808cef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808cefc:	b004      	add	sp, #16
 808cefe:	4770      	bx	lr
 808cf00:	2000002c 	.word	0x2000002c

0808cf04 <rand>:
 808cf04:	4b16      	ldr	r3, [pc, #88]	; (808cf60 <rand+0x5c>)
 808cf06:	b510      	push	{r4, lr}
 808cf08:	681c      	ldr	r4, [r3, #0]
 808cf0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808cf0c:	b9b3      	cbnz	r3, 808cf3c <rand+0x38>
 808cf0e:	2018      	movs	r0, #24
 808cf10:	f000 f95e 	bl	808d1d0 <malloc>
 808cf14:	63a0      	str	r0, [r4, #56]	; 0x38
 808cf16:	b928      	cbnz	r0, 808cf24 <rand+0x20>
 808cf18:	4602      	mov	r2, r0
 808cf1a:	4b12      	ldr	r3, [pc, #72]	; (808cf64 <rand+0x60>)
 808cf1c:	4812      	ldr	r0, [pc, #72]	; (808cf68 <rand+0x64>)
 808cf1e:	214e      	movs	r1, #78	; 0x4e
 808cf20:	f000 f82e 	bl	808cf80 <__assert_func>
 808cf24:	4a11      	ldr	r2, [pc, #68]	; (808cf6c <rand+0x68>)
 808cf26:	4b12      	ldr	r3, [pc, #72]	; (808cf70 <rand+0x6c>)
 808cf28:	e9c0 2300 	strd	r2, r3, [r0]
 808cf2c:	4b11      	ldr	r3, [pc, #68]	; (808cf74 <rand+0x70>)
 808cf2e:	6083      	str	r3, [r0, #8]
 808cf30:	230b      	movs	r3, #11
 808cf32:	8183      	strh	r3, [r0, #12]
 808cf34:	2201      	movs	r2, #1
 808cf36:	2300      	movs	r3, #0
 808cf38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808cf3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 808cf3e:	4a0e      	ldr	r2, [pc, #56]	; (808cf78 <rand+0x74>)
 808cf40:	6920      	ldr	r0, [r4, #16]
 808cf42:	6963      	ldr	r3, [r4, #20]
 808cf44:	490d      	ldr	r1, [pc, #52]	; (808cf7c <rand+0x78>)
 808cf46:	4342      	muls	r2, r0
 808cf48:	fb01 2203 	mla	r2, r1, r3, r2
 808cf4c:	fba0 0101 	umull	r0, r1, r0, r1
 808cf50:	1c43      	adds	r3, r0, #1
 808cf52:	eb42 0001 	adc.w	r0, r2, r1
 808cf56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 808cf5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 808cf5e:	bd10      	pop	{r4, pc}
 808cf60:	2000002c 	.word	0x2000002c
 808cf64:	08090a70 	.word	0x08090a70
 808cf68:	08090a87 	.word	0x08090a87
 808cf6c:	abcd330e 	.word	0xabcd330e
 808cf70:	e66d1234 	.word	0xe66d1234
 808cf74:	0005deec 	.word	0x0005deec
 808cf78:	5851f42d 	.word	0x5851f42d
 808cf7c:	4c957f2d 	.word	0x4c957f2d

0808cf80 <__assert_func>:
 808cf80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808cf82:	4614      	mov	r4, r2
 808cf84:	461a      	mov	r2, r3
 808cf86:	4b09      	ldr	r3, [pc, #36]	; (808cfac <__assert_func+0x2c>)
 808cf88:	681b      	ldr	r3, [r3, #0]
 808cf8a:	4605      	mov	r5, r0
 808cf8c:	68d8      	ldr	r0, [r3, #12]
 808cf8e:	b14c      	cbz	r4, 808cfa4 <__assert_func+0x24>
 808cf90:	4b07      	ldr	r3, [pc, #28]	; (808cfb0 <__assert_func+0x30>)
 808cf92:	9100      	str	r1, [sp, #0]
 808cf94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 808cf98:	4906      	ldr	r1, [pc, #24]	; (808cfb4 <__assert_func+0x34>)
 808cf9a:	462b      	mov	r3, r5
 808cf9c:	f000 f8e4 	bl	808d168 <fiprintf>
 808cfa0:	f000 fe12 	bl	808dbc8 <abort>
 808cfa4:	4b04      	ldr	r3, [pc, #16]	; (808cfb8 <__assert_func+0x38>)
 808cfa6:	461c      	mov	r4, r3
 808cfa8:	e7f3      	b.n	808cf92 <__assert_func+0x12>
 808cfaa:	bf00      	nop
 808cfac:	2000002c 	.word	0x2000002c
 808cfb0:	08090ae2 	.word	0x08090ae2
 808cfb4:	08090aef 	.word	0x08090aef
 808cfb8:	08090b1d 	.word	0x08090b1d

0808cfbc <std>:
 808cfbc:	2300      	movs	r3, #0
 808cfbe:	b510      	push	{r4, lr}
 808cfc0:	4604      	mov	r4, r0
 808cfc2:	e9c0 3300 	strd	r3, r3, [r0]
 808cfc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808cfca:	6083      	str	r3, [r0, #8]
 808cfcc:	8181      	strh	r1, [r0, #12]
 808cfce:	6643      	str	r3, [r0, #100]	; 0x64
 808cfd0:	81c2      	strh	r2, [r0, #14]
 808cfd2:	6183      	str	r3, [r0, #24]
 808cfd4:	4619      	mov	r1, r3
 808cfd6:	2208      	movs	r2, #8
 808cfd8:	305c      	adds	r0, #92	; 0x5c
 808cfda:	f7ff ff73 	bl	808cec4 <memset>
 808cfde:	4b05      	ldr	r3, [pc, #20]	; (808cff4 <std+0x38>)
 808cfe0:	6263      	str	r3, [r4, #36]	; 0x24
 808cfe2:	4b05      	ldr	r3, [pc, #20]	; (808cff8 <std+0x3c>)
 808cfe4:	62a3      	str	r3, [r4, #40]	; 0x28
 808cfe6:	4b05      	ldr	r3, [pc, #20]	; (808cffc <std+0x40>)
 808cfe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 808cfea:	4b05      	ldr	r3, [pc, #20]	; (808d000 <std+0x44>)
 808cfec:	6224      	str	r4, [r4, #32]
 808cfee:	6323      	str	r3, [r4, #48]	; 0x30
 808cff0:	bd10      	pop	{r4, pc}
 808cff2:	bf00      	nop
 808cff4:	0808d99d 	.word	0x0808d99d
 808cff8:	0808d9bf 	.word	0x0808d9bf
 808cffc:	0808d9f7 	.word	0x0808d9f7
 808d000:	0808da1b 	.word	0x0808da1b

0808d004 <_cleanup_r>:
 808d004:	4901      	ldr	r1, [pc, #4]	; (808d00c <_cleanup_r+0x8>)
 808d006:	f000 b8c1 	b.w	808d18c <_fwalk_reent>
 808d00a:	bf00      	nop
 808d00c:	0808dd05 	.word	0x0808dd05

0808d010 <__sfmoreglue>:
 808d010:	b570      	push	{r4, r5, r6, lr}
 808d012:	2268      	movs	r2, #104	; 0x68
 808d014:	1e4d      	subs	r5, r1, #1
 808d016:	4355      	muls	r5, r2
 808d018:	460e      	mov	r6, r1
 808d01a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 808d01e:	f000 f94b 	bl	808d2b8 <_malloc_r>
 808d022:	4604      	mov	r4, r0
 808d024:	b140      	cbz	r0, 808d038 <__sfmoreglue+0x28>
 808d026:	2100      	movs	r1, #0
 808d028:	e9c0 1600 	strd	r1, r6, [r0]
 808d02c:	300c      	adds	r0, #12
 808d02e:	60a0      	str	r0, [r4, #8]
 808d030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 808d034:	f7ff ff46 	bl	808cec4 <memset>
 808d038:	4620      	mov	r0, r4
 808d03a:	bd70      	pop	{r4, r5, r6, pc}

0808d03c <__sfp_lock_acquire>:
 808d03c:	4801      	ldr	r0, [pc, #4]	; (808d044 <__sfp_lock_acquire+0x8>)
 808d03e:	f000 b8c5 	b.w	808d1cc <__retarget_lock_acquire_recursive>
 808d042:	bf00      	nop
 808d044:	20008395 	.word	0x20008395

0808d048 <__sfp_lock_release>:
 808d048:	4801      	ldr	r0, [pc, #4]	; (808d050 <__sfp_lock_release+0x8>)
 808d04a:	f000 b8c0 	b.w	808d1ce <__retarget_lock_release_recursive>
 808d04e:	bf00      	nop
 808d050:	20008395 	.word	0x20008395

0808d054 <__sinit_lock_acquire>:
 808d054:	4801      	ldr	r0, [pc, #4]	; (808d05c <__sinit_lock_acquire+0x8>)
 808d056:	f000 b8b9 	b.w	808d1cc <__retarget_lock_acquire_recursive>
 808d05a:	bf00      	nop
 808d05c:	20008396 	.word	0x20008396

0808d060 <__sinit_lock_release>:
 808d060:	4801      	ldr	r0, [pc, #4]	; (808d068 <__sinit_lock_release+0x8>)
 808d062:	f000 b8b4 	b.w	808d1ce <__retarget_lock_release_recursive>
 808d066:	bf00      	nop
 808d068:	20008396 	.word	0x20008396

0808d06c <__sinit>:
 808d06c:	b510      	push	{r4, lr}
 808d06e:	4604      	mov	r4, r0
 808d070:	f7ff fff0 	bl	808d054 <__sinit_lock_acquire>
 808d074:	69a3      	ldr	r3, [r4, #24]
 808d076:	b11b      	cbz	r3, 808d080 <__sinit+0x14>
 808d078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d07c:	f7ff bff0 	b.w	808d060 <__sinit_lock_release>
 808d080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 808d084:	6523      	str	r3, [r4, #80]	; 0x50
 808d086:	4b13      	ldr	r3, [pc, #76]	; (808d0d4 <__sinit+0x68>)
 808d088:	4a13      	ldr	r2, [pc, #76]	; (808d0d8 <__sinit+0x6c>)
 808d08a:	681b      	ldr	r3, [r3, #0]
 808d08c:	62a2      	str	r2, [r4, #40]	; 0x28
 808d08e:	42a3      	cmp	r3, r4
 808d090:	bf04      	itt	eq
 808d092:	2301      	moveq	r3, #1
 808d094:	61a3      	streq	r3, [r4, #24]
 808d096:	4620      	mov	r0, r4
 808d098:	f000 f820 	bl	808d0dc <__sfp>
 808d09c:	6060      	str	r0, [r4, #4]
 808d09e:	4620      	mov	r0, r4
 808d0a0:	f000 f81c 	bl	808d0dc <__sfp>
 808d0a4:	60a0      	str	r0, [r4, #8]
 808d0a6:	4620      	mov	r0, r4
 808d0a8:	f000 f818 	bl	808d0dc <__sfp>
 808d0ac:	2200      	movs	r2, #0
 808d0ae:	60e0      	str	r0, [r4, #12]
 808d0b0:	2104      	movs	r1, #4
 808d0b2:	6860      	ldr	r0, [r4, #4]
 808d0b4:	f7ff ff82 	bl	808cfbc <std>
 808d0b8:	68a0      	ldr	r0, [r4, #8]
 808d0ba:	2201      	movs	r2, #1
 808d0bc:	2109      	movs	r1, #9
 808d0be:	f7ff ff7d 	bl	808cfbc <std>
 808d0c2:	68e0      	ldr	r0, [r4, #12]
 808d0c4:	2202      	movs	r2, #2
 808d0c6:	2112      	movs	r1, #18
 808d0c8:	f7ff ff78 	bl	808cfbc <std>
 808d0cc:	2301      	movs	r3, #1
 808d0ce:	61a3      	str	r3, [r4, #24]
 808d0d0:	e7d2      	b.n	808d078 <__sinit+0xc>
 808d0d2:	bf00      	nop
 808d0d4:	08090a6c 	.word	0x08090a6c
 808d0d8:	0808d005 	.word	0x0808d005

0808d0dc <__sfp>:
 808d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808d0de:	4607      	mov	r7, r0
 808d0e0:	f7ff ffac 	bl	808d03c <__sfp_lock_acquire>
 808d0e4:	4b1e      	ldr	r3, [pc, #120]	; (808d160 <__sfp+0x84>)
 808d0e6:	681e      	ldr	r6, [r3, #0]
 808d0e8:	69b3      	ldr	r3, [r6, #24]
 808d0ea:	b913      	cbnz	r3, 808d0f2 <__sfp+0x16>
 808d0ec:	4630      	mov	r0, r6
 808d0ee:	f7ff ffbd 	bl	808d06c <__sinit>
 808d0f2:	3648      	adds	r6, #72	; 0x48
 808d0f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 808d0f8:	3b01      	subs	r3, #1
 808d0fa:	d503      	bpl.n	808d104 <__sfp+0x28>
 808d0fc:	6833      	ldr	r3, [r6, #0]
 808d0fe:	b30b      	cbz	r3, 808d144 <__sfp+0x68>
 808d100:	6836      	ldr	r6, [r6, #0]
 808d102:	e7f7      	b.n	808d0f4 <__sfp+0x18>
 808d104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 808d108:	b9d5      	cbnz	r5, 808d140 <__sfp+0x64>
 808d10a:	4b16      	ldr	r3, [pc, #88]	; (808d164 <__sfp+0x88>)
 808d10c:	60e3      	str	r3, [r4, #12]
 808d10e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 808d112:	6665      	str	r5, [r4, #100]	; 0x64
 808d114:	f000 f859 	bl	808d1ca <__retarget_lock_init_recursive>
 808d118:	f7ff ff96 	bl	808d048 <__sfp_lock_release>
 808d11c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 808d120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 808d124:	6025      	str	r5, [r4, #0]
 808d126:	61a5      	str	r5, [r4, #24]
 808d128:	2208      	movs	r2, #8
 808d12a:	4629      	mov	r1, r5
 808d12c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 808d130:	f7ff fec8 	bl	808cec4 <memset>
 808d134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 808d138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 808d13c:	4620      	mov	r0, r4
 808d13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808d140:	3468      	adds	r4, #104	; 0x68
 808d142:	e7d9      	b.n	808d0f8 <__sfp+0x1c>
 808d144:	2104      	movs	r1, #4
 808d146:	4638      	mov	r0, r7
 808d148:	f7ff ff62 	bl	808d010 <__sfmoreglue>
 808d14c:	4604      	mov	r4, r0
 808d14e:	6030      	str	r0, [r6, #0]
 808d150:	2800      	cmp	r0, #0
 808d152:	d1d5      	bne.n	808d100 <__sfp+0x24>
 808d154:	f7ff ff78 	bl	808d048 <__sfp_lock_release>
 808d158:	230c      	movs	r3, #12
 808d15a:	603b      	str	r3, [r7, #0]
 808d15c:	e7ee      	b.n	808d13c <__sfp+0x60>
 808d15e:	bf00      	nop
 808d160:	08090a6c 	.word	0x08090a6c
 808d164:	ffff0001 	.word	0xffff0001

0808d168 <fiprintf>:
 808d168:	b40e      	push	{r1, r2, r3}
 808d16a:	b503      	push	{r0, r1, lr}
 808d16c:	4601      	mov	r1, r0
 808d16e:	ab03      	add	r3, sp, #12
 808d170:	4805      	ldr	r0, [pc, #20]	; (808d188 <fiprintf+0x20>)
 808d172:	f853 2b04 	ldr.w	r2, [r3], #4
 808d176:	6800      	ldr	r0, [r0, #0]
 808d178:	9301      	str	r3, [sp, #4]
 808d17a:	f000 f93b 	bl	808d3f4 <_vfiprintf_r>
 808d17e:	b002      	add	sp, #8
 808d180:	f85d eb04 	ldr.w	lr, [sp], #4
 808d184:	b003      	add	sp, #12
 808d186:	4770      	bx	lr
 808d188:	2000002c 	.word	0x2000002c

0808d18c <_fwalk_reent>:
 808d18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d190:	4606      	mov	r6, r0
 808d192:	4688      	mov	r8, r1
 808d194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 808d198:	2700      	movs	r7, #0
 808d19a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 808d19e:	f1b9 0901 	subs.w	r9, r9, #1
 808d1a2:	d505      	bpl.n	808d1b0 <_fwalk_reent+0x24>
 808d1a4:	6824      	ldr	r4, [r4, #0]
 808d1a6:	2c00      	cmp	r4, #0
 808d1a8:	d1f7      	bne.n	808d19a <_fwalk_reent+0xe>
 808d1aa:	4638      	mov	r0, r7
 808d1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d1b0:	89ab      	ldrh	r3, [r5, #12]
 808d1b2:	2b01      	cmp	r3, #1
 808d1b4:	d907      	bls.n	808d1c6 <_fwalk_reent+0x3a>
 808d1b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 808d1ba:	3301      	adds	r3, #1
 808d1bc:	d003      	beq.n	808d1c6 <_fwalk_reent+0x3a>
 808d1be:	4629      	mov	r1, r5
 808d1c0:	4630      	mov	r0, r6
 808d1c2:	47c0      	blx	r8
 808d1c4:	4307      	orrs	r7, r0
 808d1c6:	3568      	adds	r5, #104	; 0x68
 808d1c8:	e7e9      	b.n	808d19e <_fwalk_reent+0x12>

0808d1ca <__retarget_lock_init_recursive>:
 808d1ca:	4770      	bx	lr

0808d1cc <__retarget_lock_acquire_recursive>:
 808d1cc:	4770      	bx	lr

0808d1ce <__retarget_lock_release_recursive>:
 808d1ce:	4770      	bx	lr

0808d1d0 <malloc>:
 808d1d0:	4b02      	ldr	r3, [pc, #8]	; (808d1dc <malloc+0xc>)
 808d1d2:	4601      	mov	r1, r0
 808d1d4:	6818      	ldr	r0, [r3, #0]
 808d1d6:	f000 b86f 	b.w	808d2b8 <_malloc_r>
 808d1da:	bf00      	nop
 808d1dc:	2000002c 	.word	0x2000002c

0808d1e0 <_free_r>:
 808d1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808d1e2:	2900      	cmp	r1, #0
 808d1e4:	d044      	beq.n	808d270 <_free_r+0x90>
 808d1e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808d1ea:	9001      	str	r0, [sp, #4]
 808d1ec:	2b00      	cmp	r3, #0
 808d1ee:	f1a1 0404 	sub.w	r4, r1, #4
 808d1f2:	bfb8      	it	lt
 808d1f4:	18e4      	addlt	r4, r4, r3
 808d1f6:	f000 fe39 	bl	808de6c <__malloc_lock>
 808d1fa:	4a1e      	ldr	r2, [pc, #120]	; (808d274 <_free_r+0x94>)
 808d1fc:	9801      	ldr	r0, [sp, #4]
 808d1fe:	6813      	ldr	r3, [r2, #0]
 808d200:	b933      	cbnz	r3, 808d210 <_free_r+0x30>
 808d202:	6063      	str	r3, [r4, #4]
 808d204:	6014      	str	r4, [r2, #0]
 808d206:	b003      	add	sp, #12
 808d208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 808d20c:	f000 be34 	b.w	808de78 <__malloc_unlock>
 808d210:	42a3      	cmp	r3, r4
 808d212:	d908      	bls.n	808d226 <_free_r+0x46>
 808d214:	6825      	ldr	r5, [r4, #0]
 808d216:	1961      	adds	r1, r4, r5
 808d218:	428b      	cmp	r3, r1
 808d21a:	bf01      	itttt	eq
 808d21c:	6819      	ldreq	r1, [r3, #0]
 808d21e:	685b      	ldreq	r3, [r3, #4]
 808d220:	1949      	addeq	r1, r1, r5
 808d222:	6021      	streq	r1, [r4, #0]
 808d224:	e7ed      	b.n	808d202 <_free_r+0x22>
 808d226:	461a      	mov	r2, r3
 808d228:	685b      	ldr	r3, [r3, #4]
 808d22a:	b10b      	cbz	r3, 808d230 <_free_r+0x50>
 808d22c:	42a3      	cmp	r3, r4
 808d22e:	d9fa      	bls.n	808d226 <_free_r+0x46>
 808d230:	6811      	ldr	r1, [r2, #0]
 808d232:	1855      	adds	r5, r2, r1
 808d234:	42a5      	cmp	r5, r4
 808d236:	d10b      	bne.n	808d250 <_free_r+0x70>
 808d238:	6824      	ldr	r4, [r4, #0]
 808d23a:	4421      	add	r1, r4
 808d23c:	1854      	adds	r4, r2, r1
 808d23e:	42a3      	cmp	r3, r4
 808d240:	6011      	str	r1, [r2, #0]
 808d242:	d1e0      	bne.n	808d206 <_free_r+0x26>
 808d244:	681c      	ldr	r4, [r3, #0]
 808d246:	685b      	ldr	r3, [r3, #4]
 808d248:	6053      	str	r3, [r2, #4]
 808d24a:	4421      	add	r1, r4
 808d24c:	6011      	str	r1, [r2, #0]
 808d24e:	e7da      	b.n	808d206 <_free_r+0x26>
 808d250:	d902      	bls.n	808d258 <_free_r+0x78>
 808d252:	230c      	movs	r3, #12
 808d254:	6003      	str	r3, [r0, #0]
 808d256:	e7d6      	b.n	808d206 <_free_r+0x26>
 808d258:	6825      	ldr	r5, [r4, #0]
 808d25a:	1961      	adds	r1, r4, r5
 808d25c:	428b      	cmp	r3, r1
 808d25e:	bf04      	itt	eq
 808d260:	6819      	ldreq	r1, [r3, #0]
 808d262:	685b      	ldreq	r3, [r3, #4]
 808d264:	6063      	str	r3, [r4, #4]
 808d266:	bf04      	itt	eq
 808d268:	1949      	addeq	r1, r1, r5
 808d26a:	6021      	streq	r1, [r4, #0]
 808d26c:	6054      	str	r4, [r2, #4]
 808d26e:	e7ca      	b.n	808d206 <_free_r+0x26>
 808d270:	b003      	add	sp, #12
 808d272:	bd30      	pop	{r4, r5, pc}
 808d274:	20008398 	.word	0x20008398

0808d278 <sbrk_aligned>:
 808d278:	b570      	push	{r4, r5, r6, lr}
 808d27a:	4e0e      	ldr	r6, [pc, #56]	; (808d2b4 <sbrk_aligned+0x3c>)
 808d27c:	460c      	mov	r4, r1
 808d27e:	6831      	ldr	r1, [r6, #0]
 808d280:	4605      	mov	r5, r0
 808d282:	b911      	cbnz	r1, 808d28a <sbrk_aligned+0x12>
 808d284:	f000 fb7a 	bl	808d97c <_sbrk_r>
 808d288:	6030      	str	r0, [r6, #0]
 808d28a:	4621      	mov	r1, r4
 808d28c:	4628      	mov	r0, r5
 808d28e:	f000 fb75 	bl	808d97c <_sbrk_r>
 808d292:	1c43      	adds	r3, r0, #1
 808d294:	d00a      	beq.n	808d2ac <sbrk_aligned+0x34>
 808d296:	1cc4      	adds	r4, r0, #3
 808d298:	f024 0403 	bic.w	r4, r4, #3
 808d29c:	42a0      	cmp	r0, r4
 808d29e:	d007      	beq.n	808d2b0 <sbrk_aligned+0x38>
 808d2a0:	1a21      	subs	r1, r4, r0
 808d2a2:	4628      	mov	r0, r5
 808d2a4:	f000 fb6a 	bl	808d97c <_sbrk_r>
 808d2a8:	3001      	adds	r0, #1
 808d2aa:	d101      	bne.n	808d2b0 <sbrk_aligned+0x38>
 808d2ac:	f04f 34ff 	mov.w	r4, #4294967295
 808d2b0:	4620      	mov	r0, r4
 808d2b2:	bd70      	pop	{r4, r5, r6, pc}
 808d2b4:	2000839c 	.word	0x2000839c

0808d2b8 <_malloc_r>:
 808d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d2bc:	1ccd      	adds	r5, r1, #3
 808d2be:	f025 0503 	bic.w	r5, r5, #3
 808d2c2:	3508      	adds	r5, #8
 808d2c4:	2d0c      	cmp	r5, #12
 808d2c6:	bf38      	it	cc
 808d2c8:	250c      	movcc	r5, #12
 808d2ca:	2d00      	cmp	r5, #0
 808d2cc:	4607      	mov	r7, r0
 808d2ce:	db01      	blt.n	808d2d4 <_malloc_r+0x1c>
 808d2d0:	42a9      	cmp	r1, r5
 808d2d2:	d905      	bls.n	808d2e0 <_malloc_r+0x28>
 808d2d4:	230c      	movs	r3, #12
 808d2d6:	603b      	str	r3, [r7, #0]
 808d2d8:	2600      	movs	r6, #0
 808d2da:	4630      	mov	r0, r6
 808d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d2e0:	4e2e      	ldr	r6, [pc, #184]	; (808d39c <_malloc_r+0xe4>)
 808d2e2:	f000 fdc3 	bl	808de6c <__malloc_lock>
 808d2e6:	6833      	ldr	r3, [r6, #0]
 808d2e8:	461c      	mov	r4, r3
 808d2ea:	bb34      	cbnz	r4, 808d33a <_malloc_r+0x82>
 808d2ec:	4629      	mov	r1, r5
 808d2ee:	4638      	mov	r0, r7
 808d2f0:	f7ff ffc2 	bl	808d278 <sbrk_aligned>
 808d2f4:	1c43      	adds	r3, r0, #1
 808d2f6:	4604      	mov	r4, r0
 808d2f8:	d14d      	bne.n	808d396 <_malloc_r+0xde>
 808d2fa:	6834      	ldr	r4, [r6, #0]
 808d2fc:	4626      	mov	r6, r4
 808d2fe:	2e00      	cmp	r6, #0
 808d300:	d140      	bne.n	808d384 <_malloc_r+0xcc>
 808d302:	6823      	ldr	r3, [r4, #0]
 808d304:	4631      	mov	r1, r6
 808d306:	4638      	mov	r0, r7
 808d308:	eb04 0803 	add.w	r8, r4, r3
 808d30c:	f000 fb36 	bl	808d97c <_sbrk_r>
 808d310:	4580      	cmp	r8, r0
 808d312:	d13a      	bne.n	808d38a <_malloc_r+0xd2>
 808d314:	6821      	ldr	r1, [r4, #0]
 808d316:	3503      	adds	r5, #3
 808d318:	1a6d      	subs	r5, r5, r1
 808d31a:	f025 0503 	bic.w	r5, r5, #3
 808d31e:	3508      	adds	r5, #8
 808d320:	2d0c      	cmp	r5, #12
 808d322:	bf38      	it	cc
 808d324:	250c      	movcc	r5, #12
 808d326:	4629      	mov	r1, r5
 808d328:	4638      	mov	r0, r7
 808d32a:	f7ff ffa5 	bl	808d278 <sbrk_aligned>
 808d32e:	3001      	adds	r0, #1
 808d330:	d02b      	beq.n	808d38a <_malloc_r+0xd2>
 808d332:	6823      	ldr	r3, [r4, #0]
 808d334:	442b      	add	r3, r5
 808d336:	6023      	str	r3, [r4, #0]
 808d338:	e00e      	b.n	808d358 <_malloc_r+0xa0>
 808d33a:	6822      	ldr	r2, [r4, #0]
 808d33c:	1b52      	subs	r2, r2, r5
 808d33e:	d41e      	bmi.n	808d37e <_malloc_r+0xc6>
 808d340:	2a0b      	cmp	r2, #11
 808d342:	d916      	bls.n	808d372 <_malloc_r+0xba>
 808d344:	1961      	adds	r1, r4, r5
 808d346:	42a3      	cmp	r3, r4
 808d348:	6025      	str	r5, [r4, #0]
 808d34a:	bf18      	it	ne
 808d34c:	6059      	strne	r1, [r3, #4]
 808d34e:	6863      	ldr	r3, [r4, #4]
 808d350:	bf08      	it	eq
 808d352:	6031      	streq	r1, [r6, #0]
 808d354:	5162      	str	r2, [r4, r5]
 808d356:	604b      	str	r3, [r1, #4]
 808d358:	4638      	mov	r0, r7
 808d35a:	f104 060b 	add.w	r6, r4, #11
 808d35e:	f000 fd8b 	bl	808de78 <__malloc_unlock>
 808d362:	f026 0607 	bic.w	r6, r6, #7
 808d366:	1d23      	adds	r3, r4, #4
 808d368:	1af2      	subs	r2, r6, r3
 808d36a:	d0b6      	beq.n	808d2da <_malloc_r+0x22>
 808d36c:	1b9b      	subs	r3, r3, r6
 808d36e:	50a3      	str	r3, [r4, r2]
 808d370:	e7b3      	b.n	808d2da <_malloc_r+0x22>
 808d372:	6862      	ldr	r2, [r4, #4]
 808d374:	42a3      	cmp	r3, r4
 808d376:	bf0c      	ite	eq
 808d378:	6032      	streq	r2, [r6, #0]
 808d37a:	605a      	strne	r2, [r3, #4]
 808d37c:	e7ec      	b.n	808d358 <_malloc_r+0xa0>
 808d37e:	4623      	mov	r3, r4
 808d380:	6864      	ldr	r4, [r4, #4]
 808d382:	e7b2      	b.n	808d2ea <_malloc_r+0x32>
 808d384:	4634      	mov	r4, r6
 808d386:	6876      	ldr	r6, [r6, #4]
 808d388:	e7b9      	b.n	808d2fe <_malloc_r+0x46>
 808d38a:	230c      	movs	r3, #12
 808d38c:	603b      	str	r3, [r7, #0]
 808d38e:	4638      	mov	r0, r7
 808d390:	f000 fd72 	bl	808de78 <__malloc_unlock>
 808d394:	e7a1      	b.n	808d2da <_malloc_r+0x22>
 808d396:	6025      	str	r5, [r4, #0]
 808d398:	e7de      	b.n	808d358 <_malloc_r+0xa0>
 808d39a:	bf00      	nop
 808d39c:	20008398 	.word	0x20008398

0808d3a0 <__sfputc_r>:
 808d3a0:	6893      	ldr	r3, [r2, #8]
 808d3a2:	3b01      	subs	r3, #1
 808d3a4:	2b00      	cmp	r3, #0
 808d3a6:	b410      	push	{r4}
 808d3a8:	6093      	str	r3, [r2, #8]
 808d3aa:	da08      	bge.n	808d3be <__sfputc_r+0x1e>
 808d3ac:	6994      	ldr	r4, [r2, #24]
 808d3ae:	42a3      	cmp	r3, r4
 808d3b0:	db01      	blt.n	808d3b6 <__sfputc_r+0x16>
 808d3b2:	290a      	cmp	r1, #10
 808d3b4:	d103      	bne.n	808d3be <__sfputc_r+0x1e>
 808d3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 808d3ba:	f000 bb33 	b.w	808da24 <__swbuf_r>
 808d3be:	6813      	ldr	r3, [r2, #0]
 808d3c0:	1c58      	adds	r0, r3, #1
 808d3c2:	6010      	str	r0, [r2, #0]
 808d3c4:	7019      	strb	r1, [r3, #0]
 808d3c6:	4608      	mov	r0, r1
 808d3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 808d3cc:	4770      	bx	lr

0808d3ce <__sfputs_r>:
 808d3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808d3d0:	4606      	mov	r6, r0
 808d3d2:	460f      	mov	r7, r1
 808d3d4:	4614      	mov	r4, r2
 808d3d6:	18d5      	adds	r5, r2, r3
 808d3d8:	42ac      	cmp	r4, r5
 808d3da:	d101      	bne.n	808d3e0 <__sfputs_r+0x12>
 808d3dc:	2000      	movs	r0, #0
 808d3de:	e007      	b.n	808d3f0 <__sfputs_r+0x22>
 808d3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 808d3e4:	463a      	mov	r2, r7
 808d3e6:	4630      	mov	r0, r6
 808d3e8:	f7ff ffda 	bl	808d3a0 <__sfputc_r>
 808d3ec:	1c43      	adds	r3, r0, #1
 808d3ee:	d1f3      	bne.n	808d3d8 <__sfputs_r+0xa>
 808d3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808d3f4 <_vfiprintf_r>:
 808d3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d3f8:	460d      	mov	r5, r1
 808d3fa:	b09d      	sub	sp, #116	; 0x74
 808d3fc:	4614      	mov	r4, r2
 808d3fe:	4698      	mov	r8, r3
 808d400:	4606      	mov	r6, r0
 808d402:	b118      	cbz	r0, 808d40c <_vfiprintf_r+0x18>
 808d404:	6983      	ldr	r3, [r0, #24]
 808d406:	b90b      	cbnz	r3, 808d40c <_vfiprintf_r+0x18>
 808d408:	f7ff fe30 	bl	808d06c <__sinit>
 808d40c:	4b89      	ldr	r3, [pc, #548]	; (808d634 <_vfiprintf_r+0x240>)
 808d40e:	429d      	cmp	r5, r3
 808d410:	d11b      	bne.n	808d44a <_vfiprintf_r+0x56>
 808d412:	6875      	ldr	r5, [r6, #4]
 808d414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808d416:	07d9      	lsls	r1, r3, #31
 808d418:	d405      	bmi.n	808d426 <_vfiprintf_r+0x32>
 808d41a:	89ab      	ldrh	r3, [r5, #12]
 808d41c:	059a      	lsls	r2, r3, #22
 808d41e:	d402      	bmi.n	808d426 <_vfiprintf_r+0x32>
 808d420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808d422:	f7ff fed3 	bl	808d1cc <__retarget_lock_acquire_recursive>
 808d426:	89ab      	ldrh	r3, [r5, #12]
 808d428:	071b      	lsls	r3, r3, #28
 808d42a:	d501      	bpl.n	808d430 <_vfiprintf_r+0x3c>
 808d42c:	692b      	ldr	r3, [r5, #16]
 808d42e:	b9eb      	cbnz	r3, 808d46c <_vfiprintf_r+0x78>
 808d430:	4629      	mov	r1, r5
 808d432:	4630      	mov	r0, r6
 808d434:	f000 fb5a 	bl	808daec <__swsetup_r>
 808d438:	b1c0      	cbz	r0, 808d46c <_vfiprintf_r+0x78>
 808d43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808d43c:	07dc      	lsls	r4, r3, #31
 808d43e:	d50e      	bpl.n	808d45e <_vfiprintf_r+0x6a>
 808d440:	f04f 30ff 	mov.w	r0, #4294967295
 808d444:	b01d      	add	sp, #116	; 0x74
 808d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d44a:	4b7b      	ldr	r3, [pc, #492]	; (808d638 <_vfiprintf_r+0x244>)
 808d44c:	429d      	cmp	r5, r3
 808d44e:	d101      	bne.n	808d454 <_vfiprintf_r+0x60>
 808d450:	68b5      	ldr	r5, [r6, #8]
 808d452:	e7df      	b.n	808d414 <_vfiprintf_r+0x20>
 808d454:	4b79      	ldr	r3, [pc, #484]	; (808d63c <_vfiprintf_r+0x248>)
 808d456:	429d      	cmp	r5, r3
 808d458:	bf08      	it	eq
 808d45a:	68f5      	ldreq	r5, [r6, #12]
 808d45c:	e7da      	b.n	808d414 <_vfiprintf_r+0x20>
 808d45e:	89ab      	ldrh	r3, [r5, #12]
 808d460:	0598      	lsls	r0, r3, #22
 808d462:	d4ed      	bmi.n	808d440 <_vfiprintf_r+0x4c>
 808d464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808d466:	f7ff feb2 	bl	808d1ce <__retarget_lock_release_recursive>
 808d46a:	e7e9      	b.n	808d440 <_vfiprintf_r+0x4c>
 808d46c:	2300      	movs	r3, #0
 808d46e:	9309      	str	r3, [sp, #36]	; 0x24
 808d470:	2320      	movs	r3, #32
 808d472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808d476:	f8cd 800c 	str.w	r8, [sp, #12]
 808d47a:	2330      	movs	r3, #48	; 0x30
 808d47c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 808d640 <_vfiprintf_r+0x24c>
 808d480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808d484:	f04f 0901 	mov.w	r9, #1
 808d488:	4623      	mov	r3, r4
 808d48a:	469a      	mov	sl, r3
 808d48c:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d490:	b10a      	cbz	r2, 808d496 <_vfiprintf_r+0xa2>
 808d492:	2a25      	cmp	r2, #37	; 0x25
 808d494:	d1f9      	bne.n	808d48a <_vfiprintf_r+0x96>
 808d496:	ebba 0b04 	subs.w	fp, sl, r4
 808d49a:	d00b      	beq.n	808d4b4 <_vfiprintf_r+0xc0>
 808d49c:	465b      	mov	r3, fp
 808d49e:	4622      	mov	r2, r4
 808d4a0:	4629      	mov	r1, r5
 808d4a2:	4630      	mov	r0, r6
 808d4a4:	f7ff ff93 	bl	808d3ce <__sfputs_r>
 808d4a8:	3001      	adds	r0, #1
 808d4aa:	f000 80aa 	beq.w	808d602 <_vfiprintf_r+0x20e>
 808d4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808d4b0:	445a      	add	r2, fp
 808d4b2:	9209      	str	r2, [sp, #36]	; 0x24
 808d4b4:	f89a 3000 	ldrb.w	r3, [sl]
 808d4b8:	2b00      	cmp	r3, #0
 808d4ba:	f000 80a2 	beq.w	808d602 <_vfiprintf_r+0x20e>
 808d4be:	2300      	movs	r3, #0
 808d4c0:	f04f 32ff 	mov.w	r2, #4294967295
 808d4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808d4c8:	f10a 0a01 	add.w	sl, sl, #1
 808d4cc:	9304      	str	r3, [sp, #16]
 808d4ce:	9307      	str	r3, [sp, #28]
 808d4d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808d4d4:	931a      	str	r3, [sp, #104]	; 0x68
 808d4d6:	4654      	mov	r4, sl
 808d4d8:	2205      	movs	r2, #5
 808d4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 808d4de:	4858      	ldr	r0, [pc, #352]	; (808d640 <_vfiprintf_r+0x24c>)
 808d4e0:	f7f2 fe56 	bl	8080190 <memchr>
 808d4e4:	9a04      	ldr	r2, [sp, #16]
 808d4e6:	b9d8      	cbnz	r0, 808d520 <_vfiprintf_r+0x12c>
 808d4e8:	06d1      	lsls	r1, r2, #27
 808d4ea:	bf44      	itt	mi
 808d4ec:	2320      	movmi	r3, #32
 808d4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808d4f2:	0713      	lsls	r3, r2, #28
 808d4f4:	bf44      	itt	mi
 808d4f6:	232b      	movmi	r3, #43	; 0x2b
 808d4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808d4fc:	f89a 3000 	ldrb.w	r3, [sl]
 808d500:	2b2a      	cmp	r3, #42	; 0x2a
 808d502:	d015      	beq.n	808d530 <_vfiprintf_r+0x13c>
 808d504:	9a07      	ldr	r2, [sp, #28]
 808d506:	4654      	mov	r4, sl
 808d508:	2000      	movs	r0, #0
 808d50a:	f04f 0c0a 	mov.w	ip, #10
 808d50e:	4621      	mov	r1, r4
 808d510:	f811 3b01 	ldrb.w	r3, [r1], #1
 808d514:	3b30      	subs	r3, #48	; 0x30
 808d516:	2b09      	cmp	r3, #9
 808d518:	d94e      	bls.n	808d5b8 <_vfiprintf_r+0x1c4>
 808d51a:	b1b0      	cbz	r0, 808d54a <_vfiprintf_r+0x156>
 808d51c:	9207      	str	r2, [sp, #28]
 808d51e:	e014      	b.n	808d54a <_vfiprintf_r+0x156>
 808d520:	eba0 0308 	sub.w	r3, r0, r8
 808d524:	fa09 f303 	lsl.w	r3, r9, r3
 808d528:	4313      	orrs	r3, r2
 808d52a:	9304      	str	r3, [sp, #16]
 808d52c:	46a2      	mov	sl, r4
 808d52e:	e7d2      	b.n	808d4d6 <_vfiprintf_r+0xe2>
 808d530:	9b03      	ldr	r3, [sp, #12]
 808d532:	1d19      	adds	r1, r3, #4
 808d534:	681b      	ldr	r3, [r3, #0]
 808d536:	9103      	str	r1, [sp, #12]
 808d538:	2b00      	cmp	r3, #0
 808d53a:	bfbb      	ittet	lt
 808d53c:	425b      	neglt	r3, r3
 808d53e:	f042 0202 	orrlt.w	r2, r2, #2
 808d542:	9307      	strge	r3, [sp, #28]
 808d544:	9307      	strlt	r3, [sp, #28]
 808d546:	bfb8      	it	lt
 808d548:	9204      	strlt	r2, [sp, #16]
 808d54a:	7823      	ldrb	r3, [r4, #0]
 808d54c:	2b2e      	cmp	r3, #46	; 0x2e
 808d54e:	d10c      	bne.n	808d56a <_vfiprintf_r+0x176>
 808d550:	7863      	ldrb	r3, [r4, #1]
 808d552:	2b2a      	cmp	r3, #42	; 0x2a
 808d554:	d135      	bne.n	808d5c2 <_vfiprintf_r+0x1ce>
 808d556:	9b03      	ldr	r3, [sp, #12]
 808d558:	1d1a      	adds	r2, r3, #4
 808d55a:	681b      	ldr	r3, [r3, #0]
 808d55c:	9203      	str	r2, [sp, #12]
 808d55e:	2b00      	cmp	r3, #0
 808d560:	bfb8      	it	lt
 808d562:	f04f 33ff 	movlt.w	r3, #4294967295
 808d566:	3402      	adds	r4, #2
 808d568:	9305      	str	r3, [sp, #20]
 808d56a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 808d650 <_vfiprintf_r+0x25c>
 808d56e:	7821      	ldrb	r1, [r4, #0]
 808d570:	2203      	movs	r2, #3
 808d572:	4650      	mov	r0, sl
 808d574:	f7f2 fe0c 	bl	8080190 <memchr>
 808d578:	b140      	cbz	r0, 808d58c <_vfiprintf_r+0x198>
 808d57a:	2340      	movs	r3, #64	; 0x40
 808d57c:	eba0 000a 	sub.w	r0, r0, sl
 808d580:	fa03 f000 	lsl.w	r0, r3, r0
 808d584:	9b04      	ldr	r3, [sp, #16]
 808d586:	4303      	orrs	r3, r0
 808d588:	3401      	adds	r4, #1
 808d58a:	9304      	str	r3, [sp, #16]
 808d58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 808d590:	482c      	ldr	r0, [pc, #176]	; (808d644 <_vfiprintf_r+0x250>)
 808d592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808d596:	2206      	movs	r2, #6
 808d598:	f7f2 fdfa 	bl	8080190 <memchr>
 808d59c:	2800      	cmp	r0, #0
 808d59e:	d03f      	beq.n	808d620 <_vfiprintf_r+0x22c>
 808d5a0:	4b29      	ldr	r3, [pc, #164]	; (808d648 <_vfiprintf_r+0x254>)
 808d5a2:	bb1b      	cbnz	r3, 808d5ec <_vfiprintf_r+0x1f8>
 808d5a4:	9b03      	ldr	r3, [sp, #12]
 808d5a6:	3307      	adds	r3, #7
 808d5a8:	f023 0307 	bic.w	r3, r3, #7
 808d5ac:	3308      	adds	r3, #8
 808d5ae:	9303      	str	r3, [sp, #12]
 808d5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d5b2:	443b      	add	r3, r7
 808d5b4:	9309      	str	r3, [sp, #36]	; 0x24
 808d5b6:	e767      	b.n	808d488 <_vfiprintf_r+0x94>
 808d5b8:	fb0c 3202 	mla	r2, ip, r2, r3
 808d5bc:	460c      	mov	r4, r1
 808d5be:	2001      	movs	r0, #1
 808d5c0:	e7a5      	b.n	808d50e <_vfiprintf_r+0x11a>
 808d5c2:	2300      	movs	r3, #0
 808d5c4:	3401      	adds	r4, #1
 808d5c6:	9305      	str	r3, [sp, #20]
 808d5c8:	4619      	mov	r1, r3
 808d5ca:	f04f 0c0a 	mov.w	ip, #10
 808d5ce:	4620      	mov	r0, r4
 808d5d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 808d5d4:	3a30      	subs	r2, #48	; 0x30
 808d5d6:	2a09      	cmp	r2, #9
 808d5d8:	d903      	bls.n	808d5e2 <_vfiprintf_r+0x1ee>
 808d5da:	2b00      	cmp	r3, #0
 808d5dc:	d0c5      	beq.n	808d56a <_vfiprintf_r+0x176>
 808d5de:	9105      	str	r1, [sp, #20]
 808d5e0:	e7c3      	b.n	808d56a <_vfiprintf_r+0x176>
 808d5e2:	fb0c 2101 	mla	r1, ip, r1, r2
 808d5e6:	4604      	mov	r4, r0
 808d5e8:	2301      	movs	r3, #1
 808d5ea:	e7f0      	b.n	808d5ce <_vfiprintf_r+0x1da>
 808d5ec:	ab03      	add	r3, sp, #12
 808d5ee:	9300      	str	r3, [sp, #0]
 808d5f0:	462a      	mov	r2, r5
 808d5f2:	4b16      	ldr	r3, [pc, #88]	; (808d64c <_vfiprintf_r+0x258>)
 808d5f4:	a904      	add	r1, sp, #16
 808d5f6:	4630      	mov	r0, r6
 808d5f8:	f3af 8000 	nop.w
 808d5fc:	4607      	mov	r7, r0
 808d5fe:	1c78      	adds	r0, r7, #1
 808d600:	d1d6      	bne.n	808d5b0 <_vfiprintf_r+0x1bc>
 808d602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808d604:	07d9      	lsls	r1, r3, #31
 808d606:	d405      	bmi.n	808d614 <_vfiprintf_r+0x220>
 808d608:	89ab      	ldrh	r3, [r5, #12]
 808d60a:	059a      	lsls	r2, r3, #22
 808d60c:	d402      	bmi.n	808d614 <_vfiprintf_r+0x220>
 808d60e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808d610:	f7ff fddd 	bl	808d1ce <__retarget_lock_release_recursive>
 808d614:	89ab      	ldrh	r3, [r5, #12]
 808d616:	065b      	lsls	r3, r3, #25
 808d618:	f53f af12 	bmi.w	808d440 <_vfiprintf_r+0x4c>
 808d61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 808d61e:	e711      	b.n	808d444 <_vfiprintf_r+0x50>
 808d620:	ab03      	add	r3, sp, #12
 808d622:	9300      	str	r3, [sp, #0]
 808d624:	462a      	mov	r2, r5
 808d626:	4b09      	ldr	r3, [pc, #36]	; (808d64c <_vfiprintf_r+0x258>)
 808d628:	a904      	add	r1, sp, #16
 808d62a:	4630      	mov	r0, r6
 808d62c:	f000 f880 	bl	808d730 <_printf_i>
 808d630:	e7e4      	b.n	808d5fc <_vfiprintf_r+0x208>
 808d632:	bf00      	nop
 808d634:	08090b40 	.word	0x08090b40
 808d638:	08090b60 	.word	0x08090b60
 808d63c:	08090b20 	.word	0x08090b20
 808d640:	08090b80 	.word	0x08090b80
 808d644:	08090b8a 	.word	0x08090b8a
 808d648:	00000000 	.word	0x00000000
 808d64c:	0808d3cf 	.word	0x0808d3cf
 808d650:	08090b86 	.word	0x08090b86

0808d654 <_printf_common>:
 808d654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d658:	4616      	mov	r6, r2
 808d65a:	4699      	mov	r9, r3
 808d65c:	688a      	ldr	r2, [r1, #8]
 808d65e:	690b      	ldr	r3, [r1, #16]
 808d660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808d664:	4293      	cmp	r3, r2
 808d666:	bfb8      	it	lt
 808d668:	4613      	movlt	r3, r2
 808d66a:	6033      	str	r3, [r6, #0]
 808d66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 808d670:	4607      	mov	r7, r0
 808d672:	460c      	mov	r4, r1
 808d674:	b10a      	cbz	r2, 808d67a <_printf_common+0x26>
 808d676:	3301      	adds	r3, #1
 808d678:	6033      	str	r3, [r6, #0]
 808d67a:	6823      	ldr	r3, [r4, #0]
 808d67c:	0699      	lsls	r1, r3, #26
 808d67e:	bf42      	ittt	mi
 808d680:	6833      	ldrmi	r3, [r6, #0]
 808d682:	3302      	addmi	r3, #2
 808d684:	6033      	strmi	r3, [r6, #0]
 808d686:	6825      	ldr	r5, [r4, #0]
 808d688:	f015 0506 	ands.w	r5, r5, #6
 808d68c:	d106      	bne.n	808d69c <_printf_common+0x48>
 808d68e:	f104 0a19 	add.w	sl, r4, #25
 808d692:	68e3      	ldr	r3, [r4, #12]
 808d694:	6832      	ldr	r2, [r6, #0]
 808d696:	1a9b      	subs	r3, r3, r2
 808d698:	42ab      	cmp	r3, r5
 808d69a:	dc26      	bgt.n	808d6ea <_printf_common+0x96>
 808d69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 808d6a0:	1e13      	subs	r3, r2, #0
 808d6a2:	6822      	ldr	r2, [r4, #0]
 808d6a4:	bf18      	it	ne
 808d6a6:	2301      	movne	r3, #1
 808d6a8:	0692      	lsls	r2, r2, #26
 808d6aa:	d42b      	bmi.n	808d704 <_printf_common+0xb0>
 808d6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 808d6b0:	4649      	mov	r1, r9
 808d6b2:	4638      	mov	r0, r7
 808d6b4:	47c0      	blx	r8
 808d6b6:	3001      	adds	r0, #1
 808d6b8:	d01e      	beq.n	808d6f8 <_printf_common+0xa4>
 808d6ba:	6823      	ldr	r3, [r4, #0]
 808d6bc:	68e5      	ldr	r5, [r4, #12]
 808d6be:	6832      	ldr	r2, [r6, #0]
 808d6c0:	f003 0306 	and.w	r3, r3, #6
 808d6c4:	2b04      	cmp	r3, #4
 808d6c6:	bf08      	it	eq
 808d6c8:	1aad      	subeq	r5, r5, r2
 808d6ca:	68a3      	ldr	r3, [r4, #8]
 808d6cc:	6922      	ldr	r2, [r4, #16]
 808d6ce:	bf0c      	ite	eq
 808d6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 808d6d4:	2500      	movne	r5, #0
 808d6d6:	4293      	cmp	r3, r2
 808d6d8:	bfc4      	itt	gt
 808d6da:	1a9b      	subgt	r3, r3, r2
 808d6dc:	18ed      	addgt	r5, r5, r3
 808d6de:	2600      	movs	r6, #0
 808d6e0:	341a      	adds	r4, #26
 808d6e2:	42b5      	cmp	r5, r6
 808d6e4:	d11a      	bne.n	808d71c <_printf_common+0xc8>
 808d6e6:	2000      	movs	r0, #0
 808d6e8:	e008      	b.n	808d6fc <_printf_common+0xa8>
 808d6ea:	2301      	movs	r3, #1
 808d6ec:	4652      	mov	r2, sl
 808d6ee:	4649      	mov	r1, r9
 808d6f0:	4638      	mov	r0, r7
 808d6f2:	47c0      	blx	r8
 808d6f4:	3001      	adds	r0, #1
 808d6f6:	d103      	bne.n	808d700 <_printf_common+0xac>
 808d6f8:	f04f 30ff 	mov.w	r0, #4294967295
 808d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d700:	3501      	adds	r5, #1
 808d702:	e7c6      	b.n	808d692 <_printf_common+0x3e>
 808d704:	18e1      	adds	r1, r4, r3
 808d706:	1c5a      	adds	r2, r3, #1
 808d708:	2030      	movs	r0, #48	; 0x30
 808d70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 808d70e:	4422      	add	r2, r4
 808d710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 808d714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 808d718:	3302      	adds	r3, #2
 808d71a:	e7c7      	b.n	808d6ac <_printf_common+0x58>
 808d71c:	2301      	movs	r3, #1
 808d71e:	4622      	mov	r2, r4
 808d720:	4649      	mov	r1, r9
 808d722:	4638      	mov	r0, r7
 808d724:	47c0      	blx	r8
 808d726:	3001      	adds	r0, #1
 808d728:	d0e6      	beq.n	808d6f8 <_printf_common+0xa4>
 808d72a:	3601      	adds	r6, #1
 808d72c:	e7d9      	b.n	808d6e2 <_printf_common+0x8e>
	...

0808d730 <_printf_i>:
 808d730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808d734:	7e0f      	ldrb	r7, [r1, #24]
 808d736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 808d738:	2f78      	cmp	r7, #120	; 0x78
 808d73a:	4691      	mov	r9, r2
 808d73c:	4680      	mov	r8, r0
 808d73e:	460c      	mov	r4, r1
 808d740:	469a      	mov	sl, r3
 808d742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 808d746:	d807      	bhi.n	808d758 <_printf_i+0x28>
 808d748:	2f62      	cmp	r7, #98	; 0x62
 808d74a:	d80a      	bhi.n	808d762 <_printf_i+0x32>
 808d74c:	2f00      	cmp	r7, #0
 808d74e:	f000 80d8 	beq.w	808d902 <_printf_i+0x1d2>
 808d752:	2f58      	cmp	r7, #88	; 0x58
 808d754:	f000 80a3 	beq.w	808d89e <_printf_i+0x16e>
 808d758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 808d75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 808d760:	e03a      	b.n	808d7d8 <_printf_i+0xa8>
 808d762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 808d766:	2b15      	cmp	r3, #21
 808d768:	d8f6      	bhi.n	808d758 <_printf_i+0x28>
 808d76a:	a101      	add	r1, pc, #4	; (adr r1, 808d770 <_printf_i+0x40>)
 808d76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 808d770:	0808d7c9 	.word	0x0808d7c9
 808d774:	0808d7dd 	.word	0x0808d7dd
 808d778:	0808d759 	.word	0x0808d759
 808d77c:	0808d759 	.word	0x0808d759
 808d780:	0808d759 	.word	0x0808d759
 808d784:	0808d759 	.word	0x0808d759
 808d788:	0808d7dd 	.word	0x0808d7dd
 808d78c:	0808d759 	.word	0x0808d759
 808d790:	0808d759 	.word	0x0808d759
 808d794:	0808d759 	.word	0x0808d759
 808d798:	0808d759 	.word	0x0808d759
 808d79c:	0808d8e9 	.word	0x0808d8e9
 808d7a0:	0808d80d 	.word	0x0808d80d
 808d7a4:	0808d8cb 	.word	0x0808d8cb
 808d7a8:	0808d759 	.word	0x0808d759
 808d7ac:	0808d759 	.word	0x0808d759
 808d7b0:	0808d90b 	.word	0x0808d90b
 808d7b4:	0808d759 	.word	0x0808d759
 808d7b8:	0808d80d 	.word	0x0808d80d
 808d7bc:	0808d759 	.word	0x0808d759
 808d7c0:	0808d759 	.word	0x0808d759
 808d7c4:	0808d8d3 	.word	0x0808d8d3
 808d7c8:	682b      	ldr	r3, [r5, #0]
 808d7ca:	1d1a      	adds	r2, r3, #4
 808d7cc:	681b      	ldr	r3, [r3, #0]
 808d7ce:	602a      	str	r2, [r5, #0]
 808d7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 808d7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 808d7d8:	2301      	movs	r3, #1
 808d7da:	e0a3      	b.n	808d924 <_printf_i+0x1f4>
 808d7dc:	6820      	ldr	r0, [r4, #0]
 808d7de:	6829      	ldr	r1, [r5, #0]
 808d7e0:	0606      	lsls	r6, r0, #24
 808d7e2:	f101 0304 	add.w	r3, r1, #4
 808d7e6:	d50a      	bpl.n	808d7fe <_printf_i+0xce>
 808d7e8:	680e      	ldr	r6, [r1, #0]
 808d7ea:	602b      	str	r3, [r5, #0]
 808d7ec:	2e00      	cmp	r6, #0
 808d7ee:	da03      	bge.n	808d7f8 <_printf_i+0xc8>
 808d7f0:	232d      	movs	r3, #45	; 0x2d
 808d7f2:	4276      	negs	r6, r6
 808d7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 808d7f8:	485e      	ldr	r0, [pc, #376]	; (808d974 <_printf_i+0x244>)
 808d7fa:	230a      	movs	r3, #10
 808d7fc:	e019      	b.n	808d832 <_printf_i+0x102>
 808d7fe:	680e      	ldr	r6, [r1, #0]
 808d800:	602b      	str	r3, [r5, #0]
 808d802:	f010 0f40 	tst.w	r0, #64	; 0x40
 808d806:	bf18      	it	ne
 808d808:	b236      	sxthne	r6, r6
 808d80a:	e7ef      	b.n	808d7ec <_printf_i+0xbc>
 808d80c:	682b      	ldr	r3, [r5, #0]
 808d80e:	6820      	ldr	r0, [r4, #0]
 808d810:	1d19      	adds	r1, r3, #4
 808d812:	6029      	str	r1, [r5, #0]
 808d814:	0601      	lsls	r1, r0, #24
 808d816:	d501      	bpl.n	808d81c <_printf_i+0xec>
 808d818:	681e      	ldr	r6, [r3, #0]
 808d81a:	e002      	b.n	808d822 <_printf_i+0xf2>
 808d81c:	0646      	lsls	r6, r0, #25
 808d81e:	d5fb      	bpl.n	808d818 <_printf_i+0xe8>
 808d820:	881e      	ldrh	r6, [r3, #0]
 808d822:	4854      	ldr	r0, [pc, #336]	; (808d974 <_printf_i+0x244>)
 808d824:	2f6f      	cmp	r7, #111	; 0x6f
 808d826:	bf0c      	ite	eq
 808d828:	2308      	moveq	r3, #8
 808d82a:	230a      	movne	r3, #10
 808d82c:	2100      	movs	r1, #0
 808d82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 808d832:	6865      	ldr	r5, [r4, #4]
 808d834:	60a5      	str	r5, [r4, #8]
 808d836:	2d00      	cmp	r5, #0
 808d838:	bfa2      	ittt	ge
 808d83a:	6821      	ldrge	r1, [r4, #0]
 808d83c:	f021 0104 	bicge.w	r1, r1, #4
 808d840:	6021      	strge	r1, [r4, #0]
 808d842:	b90e      	cbnz	r6, 808d848 <_printf_i+0x118>
 808d844:	2d00      	cmp	r5, #0
 808d846:	d04d      	beq.n	808d8e4 <_printf_i+0x1b4>
 808d848:	4615      	mov	r5, r2
 808d84a:	fbb6 f1f3 	udiv	r1, r6, r3
 808d84e:	fb03 6711 	mls	r7, r3, r1, r6
 808d852:	5dc7      	ldrb	r7, [r0, r7]
 808d854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 808d858:	4637      	mov	r7, r6
 808d85a:	42bb      	cmp	r3, r7
 808d85c:	460e      	mov	r6, r1
 808d85e:	d9f4      	bls.n	808d84a <_printf_i+0x11a>
 808d860:	2b08      	cmp	r3, #8
 808d862:	d10b      	bne.n	808d87c <_printf_i+0x14c>
 808d864:	6823      	ldr	r3, [r4, #0]
 808d866:	07de      	lsls	r6, r3, #31
 808d868:	d508      	bpl.n	808d87c <_printf_i+0x14c>
 808d86a:	6923      	ldr	r3, [r4, #16]
 808d86c:	6861      	ldr	r1, [r4, #4]
 808d86e:	4299      	cmp	r1, r3
 808d870:	bfde      	ittt	le
 808d872:	2330      	movle	r3, #48	; 0x30
 808d874:	f805 3c01 	strble.w	r3, [r5, #-1]
 808d878:	f105 35ff 	addle.w	r5, r5, #4294967295
 808d87c:	1b52      	subs	r2, r2, r5
 808d87e:	6122      	str	r2, [r4, #16]
 808d880:	f8cd a000 	str.w	sl, [sp]
 808d884:	464b      	mov	r3, r9
 808d886:	aa03      	add	r2, sp, #12
 808d888:	4621      	mov	r1, r4
 808d88a:	4640      	mov	r0, r8
 808d88c:	f7ff fee2 	bl	808d654 <_printf_common>
 808d890:	3001      	adds	r0, #1
 808d892:	d14c      	bne.n	808d92e <_printf_i+0x1fe>
 808d894:	f04f 30ff 	mov.w	r0, #4294967295
 808d898:	b004      	add	sp, #16
 808d89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d89e:	4835      	ldr	r0, [pc, #212]	; (808d974 <_printf_i+0x244>)
 808d8a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 808d8a4:	6829      	ldr	r1, [r5, #0]
 808d8a6:	6823      	ldr	r3, [r4, #0]
 808d8a8:	f851 6b04 	ldr.w	r6, [r1], #4
 808d8ac:	6029      	str	r1, [r5, #0]
 808d8ae:	061d      	lsls	r5, r3, #24
 808d8b0:	d514      	bpl.n	808d8dc <_printf_i+0x1ac>
 808d8b2:	07df      	lsls	r7, r3, #31
 808d8b4:	bf44      	itt	mi
 808d8b6:	f043 0320 	orrmi.w	r3, r3, #32
 808d8ba:	6023      	strmi	r3, [r4, #0]
 808d8bc:	b91e      	cbnz	r6, 808d8c6 <_printf_i+0x196>
 808d8be:	6823      	ldr	r3, [r4, #0]
 808d8c0:	f023 0320 	bic.w	r3, r3, #32
 808d8c4:	6023      	str	r3, [r4, #0]
 808d8c6:	2310      	movs	r3, #16
 808d8c8:	e7b0      	b.n	808d82c <_printf_i+0xfc>
 808d8ca:	6823      	ldr	r3, [r4, #0]
 808d8cc:	f043 0320 	orr.w	r3, r3, #32
 808d8d0:	6023      	str	r3, [r4, #0]
 808d8d2:	2378      	movs	r3, #120	; 0x78
 808d8d4:	4828      	ldr	r0, [pc, #160]	; (808d978 <_printf_i+0x248>)
 808d8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 808d8da:	e7e3      	b.n	808d8a4 <_printf_i+0x174>
 808d8dc:	0659      	lsls	r1, r3, #25
 808d8de:	bf48      	it	mi
 808d8e0:	b2b6      	uxthmi	r6, r6
 808d8e2:	e7e6      	b.n	808d8b2 <_printf_i+0x182>
 808d8e4:	4615      	mov	r5, r2
 808d8e6:	e7bb      	b.n	808d860 <_printf_i+0x130>
 808d8e8:	682b      	ldr	r3, [r5, #0]
 808d8ea:	6826      	ldr	r6, [r4, #0]
 808d8ec:	6961      	ldr	r1, [r4, #20]
 808d8ee:	1d18      	adds	r0, r3, #4
 808d8f0:	6028      	str	r0, [r5, #0]
 808d8f2:	0635      	lsls	r5, r6, #24
 808d8f4:	681b      	ldr	r3, [r3, #0]
 808d8f6:	d501      	bpl.n	808d8fc <_printf_i+0x1cc>
 808d8f8:	6019      	str	r1, [r3, #0]
 808d8fa:	e002      	b.n	808d902 <_printf_i+0x1d2>
 808d8fc:	0670      	lsls	r0, r6, #25
 808d8fe:	d5fb      	bpl.n	808d8f8 <_printf_i+0x1c8>
 808d900:	8019      	strh	r1, [r3, #0]
 808d902:	2300      	movs	r3, #0
 808d904:	6123      	str	r3, [r4, #16]
 808d906:	4615      	mov	r5, r2
 808d908:	e7ba      	b.n	808d880 <_printf_i+0x150>
 808d90a:	682b      	ldr	r3, [r5, #0]
 808d90c:	1d1a      	adds	r2, r3, #4
 808d90e:	602a      	str	r2, [r5, #0]
 808d910:	681d      	ldr	r5, [r3, #0]
 808d912:	6862      	ldr	r2, [r4, #4]
 808d914:	2100      	movs	r1, #0
 808d916:	4628      	mov	r0, r5
 808d918:	f7f2 fc3a 	bl	8080190 <memchr>
 808d91c:	b108      	cbz	r0, 808d922 <_printf_i+0x1f2>
 808d91e:	1b40      	subs	r0, r0, r5
 808d920:	6060      	str	r0, [r4, #4]
 808d922:	6863      	ldr	r3, [r4, #4]
 808d924:	6123      	str	r3, [r4, #16]
 808d926:	2300      	movs	r3, #0
 808d928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 808d92c:	e7a8      	b.n	808d880 <_printf_i+0x150>
 808d92e:	6923      	ldr	r3, [r4, #16]
 808d930:	462a      	mov	r2, r5
 808d932:	4649      	mov	r1, r9
 808d934:	4640      	mov	r0, r8
 808d936:	47d0      	blx	sl
 808d938:	3001      	adds	r0, #1
 808d93a:	d0ab      	beq.n	808d894 <_printf_i+0x164>
 808d93c:	6823      	ldr	r3, [r4, #0]
 808d93e:	079b      	lsls	r3, r3, #30
 808d940:	d413      	bmi.n	808d96a <_printf_i+0x23a>
 808d942:	68e0      	ldr	r0, [r4, #12]
 808d944:	9b03      	ldr	r3, [sp, #12]
 808d946:	4298      	cmp	r0, r3
 808d948:	bfb8      	it	lt
 808d94a:	4618      	movlt	r0, r3
 808d94c:	e7a4      	b.n	808d898 <_printf_i+0x168>
 808d94e:	2301      	movs	r3, #1
 808d950:	4632      	mov	r2, r6
 808d952:	4649      	mov	r1, r9
 808d954:	4640      	mov	r0, r8
 808d956:	47d0      	blx	sl
 808d958:	3001      	adds	r0, #1
 808d95a:	d09b      	beq.n	808d894 <_printf_i+0x164>
 808d95c:	3501      	adds	r5, #1
 808d95e:	68e3      	ldr	r3, [r4, #12]
 808d960:	9903      	ldr	r1, [sp, #12]
 808d962:	1a5b      	subs	r3, r3, r1
 808d964:	42ab      	cmp	r3, r5
 808d966:	dcf2      	bgt.n	808d94e <_printf_i+0x21e>
 808d968:	e7eb      	b.n	808d942 <_printf_i+0x212>
 808d96a:	2500      	movs	r5, #0
 808d96c:	f104 0619 	add.w	r6, r4, #25
 808d970:	e7f5      	b.n	808d95e <_printf_i+0x22e>
 808d972:	bf00      	nop
 808d974:	08090b91 	.word	0x08090b91
 808d978:	08090ba2 	.word	0x08090ba2

0808d97c <_sbrk_r>:
 808d97c:	b538      	push	{r3, r4, r5, lr}
 808d97e:	4d06      	ldr	r5, [pc, #24]	; (808d998 <_sbrk_r+0x1c>)
 808d980:	2300      	movs	r3, #0
 808d982:	4604      	mov	r4, r0
 808d984:	4608      	mov	r0, r1
 808d986:	602b      	str	r3, [r5, #0]
 808d988:	f7f2 ffbc 	bl	8080904 <_sbrk>
 808d98c:	1c43      	adds	r3, r0, #1
 808d98e:	d102      	bne.n	808d996 <_sbrk_r+0x1a>
 808d990:	682b      	ldr	r3, [r5, #0]
 808d992:	b103      	cbz	r3, 808d996 <_sbrk_r+0x1a>
 808d994:	6023      	str	r3, [r4, #0]
 808d996:	bd38      	pop	{r3, r4, r5, pc}
 808d998:	20008390 	.word	0x20008390

0808d99c <__sread>:
 808d99c:	b510      	push	{r4, lr}
 808d99e:	460c      	mov	r4, r1
 808d9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808d9a4:	f000 fa6e 	bl	808de84 <_read_r>
 808d9a8:	2800      	cmp	r0, #0
 808d9aa:	bfab      	itete	ge
 808d9ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 808d9ae:	89a3      	ldrhlt	r3, [r4, #12]
 808d9b0:	181b      	addge	r3, r3, r0
 808d9b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 808d9b6:	bfac      	ite	ge
 808d9b8:	6563      	strge	r3, [r4, #84]	; 0x54
 808d9ba:	81a3      	strhlt	r3, [r4, #12]
 808d9bc:	bd10      	pop	{r4, pc}

0808d9be <__swrite>:
 808d9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d9c2:	461f      	mov	r7, r3
 808d9c4:	898b      	ldrh	r3, [r1, #12]
 808d9c6:	05db      	lsls	r3, r3, #23
 808d9c8:	4605      	mov	r5, r0
 808d9ca:	460c      	mov	r4, r1
 808d9cc:	4616      	mov	r6, r2
 808d9ce:	d505      	bpl.n	808d9dc <__swrite+0x1e>
 808d9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808d9d4:	2302      	movs	r3, #2
 808d9d6:	2200      	movs	r2, #0
 808d9d8:	f000 f9d0 	bl	808dd7c <_lseek_r>
 808d9dc:	89a3      	ldrh	r3, [r4, #12]
 808d9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 808d9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 808d9e6:	81a3      	strh	r3, [r4, #12]
 808d9e8:	4632      	mov	r2, r6
 808d9ea:	463b      	mov	r3, r7
 808d9ec:	4628      	mov	r0, r5
 808d9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808d9f2:	f000 b869 	b.w	808dac8 <_write_r>

0808d9f6 <__sseek>:
 808d9f6:	b510      	push	{r4, lr}
 808d9f8:	460c      	mov	r4, r1
 808d9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808d9fe:	f000 f9bd 	bl	808dd7c <_lseek_r>
 808da02:	1c43      	adds	r3, r0, #1
 808da04:	89a3      	ldrh	r3, [r4, #12]
 808da06:	bf15      	itete	ne
 808da08:	6560      	strne	r0, [r4, #84]	; 0x54
 808da0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 808da0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 808da12:	81a3      	strheq	r3, [r4, #12]
 808da14:	bf18      	it	ne
 808da16:	81a3      	strhne	r3, [r4, #12]
 808da18:	bd10      	pop	{r4, pc}

0808da1a <__sclose>:
 808da1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808da1e:	f000 b8db 	b.w	808dbd8 <_close_r>
	...

0808da24 <__swbuf_r>:
 808da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808da26:	460e      	mov	r6, r1
 808da28:	4614      	mov	r4, r2
 808da2a:	4605      	mov	r5, r0
 808da2c:	b118      	cbz	r0, 808da36 <__swbuf_r+0x12>
 808da2e:	6983      	ldr	r3, [r0, #24]
 808da30:	b90b      	cbnz	r3, 808da36 <__swbuf_r+0x12>
 808da32:	f7ff fb1b 	bl	808d06c <__sinit>
 808da36:	4b21      	ldr	r3, [pc, #132]	; (808dabc <__swbuf_r+0x98>)
 808da38:	429c      	cmp	r4, r3
 808da3a:	d12b      	bne.n	808da94 <__swbuf_r+0x70>
 808da3c:	686c      	ldr	r4, [r5, #4]
 808da3e:	69a3      	ldr	r3, [r4, #24]
 808da40:	60a3      	str	r3, [r4, #8]
 808da42:	89a3      	ldrh	r3, [r4, #12]
 808da44:	071a      	lsls	r2, r3, #28
 808da46:	d52f      	bpl.n	808daa8 <__swbuf_r+0x84>
 808da48:	6923      	ldr	r3, [r4, #16]
 808da4a:	b36b      	cbz	r3, 808daa8 <__swbuf_r+0x84>
 808da4c:	6923      	ldr	r3, [r4, #16]
 808da4e:	6820      	ldr	r0, [r4, #0]
 808da50:	1ac0      	subs	r0, r0, r3
 808da52:	6963      	ldr	r3, [r4, #20]
 808da54:	b2f6      	uxtb	r6, r6
 808da56:	4283      	cmp	r3, r0
 808da58:	4637      	mov	r7, r6
 808da5a:	dc04      	bgt.n	808da66 <__swbuf_r+0x42>
 808da5c:	4621      	mov	r1, r4
 808da5e:	4628      	mov	r0, r5
 808da60:	f000 f950 	bl	808dd04 <_fflush_r>
 808da64:	bb30      	cbnz	r0, 808dab4 <__swbuf_r+0x90>
 808da66:	68a3      	ldr	r3, [r4, #8]
 808da68:	3b01      	subs	r3, #1
 808da6a:	60a3      	str	r3, [r4, #8]
 808da6c:	6823      	ldr	r3, [r4, #0]
 808da6e:	1c5a      	adds	r2, r3, #1
 808da70:	6022      	str	r2, [r4, #0]
 808da72:	701e      	strb	r6, [r3, #0]
 808da74:	6963      	ldr	r3, [r4, #20]
 808da76:	3001      	adds	r0, #1
 808da78:	4283      	cmp	r3, r0
 808da7a:	d004      	beq.n	808da86 <__swbuf_r+0x62>
 808da7c:	89a3      	ldrh	r3, [r4, #12]
 808da7e:	07db      	lsls	r3, r3, #31
 808da80:	d506      	bpl.n	808da90 <__swbuf_r+0x6c>
 808da82:	2e0a      	cmp	r6, #10
 808da84:	d104      	bne.n	808da90 <__swbuf_r+0x6c>
 808da86:	4621      	mov	r1, r4
 808da88:	4628      	mov	r0, r5
 808da8a:	f000 f93b 	bl	808dd04 <_fflush_r>
 808da8e:	b988      	cbnz	r0, 808dab4 <__swbuf_r+0x90>
 808da90:	4638      	mov	r0, r7
 808da92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808da94:	4b0a      	ldr	r3, [pc, #40]	; (808dac0 <__swbuf_r+0x9c>)
 808da96:	429c      	cmp	r4, r3
 808da98:	d101      	bne.n	808da9e <__swbuf_r+0x7a>
 808da9a:	68ac      	ldr	r4, [r5, #8]
 808da9c:	e7cf      	b.n	808da3e <__swbuf_r+0x1a>
 808da9e:	4b09      	ldr	r3, [pc, #36]	; (808dac4 <__swbuf_r+0xa0>)
 808daa0:	429c      	cmp	r4, r3
 808daa2:	bf08      	it	eq
 808daa4:	68ec      	ldreq	r4, [r5, #12]
 808daa6:	e7ca      	b.n	808da3e <__swbuf_r+0x1a>
 808daa8:	4621      	mov	r1, r4
 808daaa:	4628      	mov	r0, r5
 808daac:	f000 f81e 	bl	808daec <__swsetup_r>
 808dab0:	2800      	cmp	r0, #0
 808dab2:	d0cb      	beq.n	808da4c <__swbuf_r+0x28>
 808dab4:	f04f 37ff 	mov.w	r7, #4294967295
 808dab8:	e7ea      	b.n	808da90 <__swbuf_r+0x6c>
 808daba:	bf00      	nop
 808dabc:	08090b40 	.word	0x08090b40
 808dac0:	08090b60 	.word	0x08090b60
 808dac4:	08090b20 	.word	0x08090b20

0808dac8 <_write_r>:
 808dac8:	b538      	push	{r3, r4, r5, lr}
 808daca:	4d07      	ldr	r5, [pc, #28]	; (808dae8 <_write_r+0x20>)
 808dacc:	4604      	mov	r4, r0
 808dace:	4608      	mov	r0, r1
 808dad0:	4611      	mov	r1, r2
 808dad2:	2200      	movs	r2, #0
 808dad4:	602a      	str	r2, [r5, #0]
 808dad6:	461a      	mov	r2, r3
 808dad8:	f7f2 fec3 	bl	8080862 <_write>
 808dadc:	1c43      	adds	r3, r0, #1
 808dade:	d102      	bne.n	808dae6 <_write_r+0x1e>
 808dae0:	682b      	ldr	r3, [r5, #0]
 808dae2:	b103      	cbz	r3, 808dae6 <_write_r+0x1e>
 808dae4:	6023      	str	r3, [r4, #0]
 808dae6:	bd38      	pop	{r3, r4, r5, pc}
 808dae8:	20008390 	.word	0x20008390

0808daec <__swsetup_r>:
 808daec:	4b32      	ldr	r3, [pc, #200]	; (808dbb8 <__swsetup_r+0xcc>)
 808daee:	b570      	push	{r4, r5, r6, lr}
 808daf0:	681d      	ldr	r5, [r3, #0]
 808daf2:	4606      	mov	r6, r0
 808daf4:	460c      	mov	r4, r1
 808daf6:	b125      	cbz	r5, 808db02 <__swsetup_r+0x16>
 808daf8:	69ab      	ldr	r3, [r5, #24]
 808dafa:	b913      	cbnz	r3, 808db02 <__swsetup_r+0x16>
 808dafc:	4628      	mov	r0, r5
 808dafe:	f7ff fab5 	bl	808d06c <__sinit>
 808db02:	4b2e      	ldr	r3, [pc, #184]	; (808dbbc <__swsetup_r+0xd0>)
 808db04:	429c      	cmp	r4, r3
 808db06:	d10f      	bne.n	808db28 <__swsetup_r+0x3c>
 808db08:	686c      	ldr	r4, [r5, #4]
 808db0a:	89a3      	ldrh	r3, [r4, #12]
 808db0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808db10:	0719      	lsls	r1, r3, #28
 808db12:	d42c      	bmi.n	808db6e <__swsetup_r+0x82>
 808db14:	06dd      	lsls	r5, r3, #27
 808db16:	d411      	bmi.n	808db3c <__swsetup_r+0x50>
 808db18:	2309      	movs	r3, #9
 808db1a:	6033      	str	r3, [r6, #0]
 808db1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 808db20:	81a3      	strh	r3, [r4, #12]
 808db22:	f04f 30ff 	mov.w	r0, #4294967295
 808db26:	e03e      	b.n	808dba6 <__swsetup_r+0xba>
 808db28:	4b25      	ldr	r3, [pc, #148]	; (808dbc0 <__swsetup_r+0xd4>)
 808db2a:	429c      	cmp	r4, r3
 808db2c:	d101      	bne.n	808db32 <__swsetup_r+0x46>
 808db2e:	68ac      	ldr	r4, [r5, #8]
 808db30:	e7eb      	b.n	808db0a <__swsetup_r+0x1e>
 808db32:	4b24      	ldr	r3, [pc, #144]	; (808dbc4 <__swsetup_r+0xd8>)
 808db34:	429c      	cmp	r4, r3
 808db36:	bf08      	it	eq
 808db38:	68ec      	ldreq	r4, [r5, #12]
 808db3a:	e7e6      	b.n	808db0a <__swsetup_r+0x1e>
 808db3c:	0758      	lsls	r0, r3, #29
 808db3e:	d512      	bpl.n	808db66 <__swsetup_r+0x7a>
 808db40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808db42:	b141      	cbz	r1, 808db56 <__swsetup_r+0x6a>
 808db44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808db48:	4299      	cmp	r1, r3
 808db4a:	d002      	beq.n	808db52 <__swsetup_r+0x66>
 808db4c:	4630      	mov	r0, r6
 808db4e:	f7ff fb47 	bl	808d1e0 <_free_r>
 808db52:	2300      	movs	r3, #0
 808db54:	6363      	str	r3, [r4, #52]	; 0x34
 808db56:	89a3      	ldrh	r3, [r4, #12]
 808db58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 808db5c:	81a3      	strh	r3, [r4, #12]
 808db5e:	2300      	movs	r3, #0
 808db60:	6063      	str	r3, [r4, #4]
 808db62:	6923      	ldr	r3, [r4, #16]
 808db64:	6023      	str	r3, [r4, #0]
 808db66:	89a3      	ldrh	r3, [r4, #12]
 808db68:	f043 0308 	orr.w	r3, r3, #8
 808db6c:	81a3      	strh	r3, [r4, #12]
 808db6e:	6923      	ldr	r3, [r4, #16]
 808db70:	b94b      	cbnz	r3, 808db86 <__swsetup_r+0x9a>
 808db72:	89a3      	ldrh	r3, [r4, #12]
 808db74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 808db78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808db7c:	d003      	beq.n	808db86 <__swsetup_r+0x9a>
 808db7e:	4621      	mov	r1, r4
 808db80:	4630      	mov	r0, r6
 808db82:	f000 f933 	bl	808ddec <__smakebuf_r>
 808db86:	89a0      	ldrh	r0, [r4, #12]
 808db88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808db8c:	f010 0301 	ands.w	r3, r0, #1
 808db90:	d00a      	beq.n	808dba8 <__swsetup_r+0xbc>
 808db92:	2300      	movs	r3, #0
 808db94:	60a3      	str	r3, [r4, #8]
 808db96:	6963      	ldr	r3, [r4, #20]
 808db98:	425b      	negs	r3, r3
 808db9a:	61a3      	str	r3, [r4, #24]
 808db9c:	6923      	ldr	r3, [r4, #16]
 808db9e:	b943      	cbnz	r3, 808dbb2 <__swsetup_r+0xc6>
 808dba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 808dba4:	d1ba      	bne.n	808db1c <__swsetup_r+0x30>
 808dba6:	bd70      	pop	{r4, r5, r6, pc}
 808dba8:	0781      	lsls	r1, r0, #30
 808dbaa:	bf58      	it	pl
 808dbac:	6963      	ldrpl	r3, [r4, #20]
 808dbae:	60a3      	str	r3, [r4, #8]
 808dbb0:	e7f4      	b.n	808db9c <__swsetup_r+0xb0>
 808dbb2:	2000      	movs	r0, #0
 808dbb4:	e7f7      	b.n	808dba6 <__swsetup_r+0xba>
 808dbb6:	bf00      	nop
 808dbb8:	2000002c 	.word	0x2000002c
 808dbbc:	08090b40 	.word	0x08090b40
 808dbc0:	08090b60 	.word	0x08090b60
 808dbc4:	08090b20 	.word	0x08090b20

0808dbc8 <abort>:
 808dbc8:	b508      	push	{r3, lr}
 808dbca:	2006      	movs	r0, #6
 808dbcc:	f000 f994 	bl	808def8 <raise>
 808dbd0:	2001      	movs	r0, #1
 808dbd2:	f7f2 fe1f 	bl	8080814 <_exit>
	...

0808dbd8 <_close_r>:
 808dbd8:	b538      	push	{r3, r4, r5, lr}
 808dbda:	4d06      	ldr	r5, [pc, #24]	; (808dbf4 <_close_r+0x1c>)
 808dbdc:	2300      	movs	r3, #0
 808dbde:	4604      	mov	r4, r0
 808dbe0:	4608      	mov	r0, r1
 808dbe2:	602b      	str	r3, [r5, #0]
 808dbe4:	f7f2 fe59 	bl	808089a <_close>
 808dbe8:	1c43      	adds	r3, r0, #1
 808dbea:	d102      	bne.n	808dbf2 <_close_r+0x1a>
 808dbec:	682b      	ldr	r3, [r5, #0]
 808dbee:	b103      	cbz	r3, 808dbf2 <_close_r+0x1a>
 808dbf0:	6023      	str	r3, [r4, #0]
 808dbf2:	bd38      	pop	{r3, r4, r5, pc}
 808dbf4:	20008390 	.word	0x20008390

0808dbf8 <__sflush_r>:
 808dbf8:	898a      	ldrh	r2, [r1, #12]
 808dbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808dbfe:	4605      	mov	r5, r0
 808dc00:	0710      	lsls	r0, r2, #28
 808dc02:	460c      	mov	r4, r1
 808dc04:	d458      	bmi.n	808dcb8 <__sflush_r+0xc0>
 808dc06:	684b      	ldr	r3, [r1, #4]
 808dc08:	2b00      	cmp	r3, #0
 808dc0a:	dc05      	bgt.n	808dc18 <__sflush_r+0x20>
 808dc0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 808dc0e:	2b00      	cmp	r3, #0
 808dc10:	dc02      	bgt.n	808dc18 <__sflush_r+0x20>
 808dc12:	2000      	movs	r0, #0
 808dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808dc18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808dc1a:	2e00      	cmp	r6, #0
 808dc1c:	d0f9      	beq.n	808dc12 <__sflush_r+0x1a>
 808dc1e:	2300      	movs	r3, #0
 808dc20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 808dc24:	682f      	ldr	r7, [r5, #0]
 808dc26:	602b      	str	r3, [r5, #0]
 808dc28:	d032      	beq.n	808dc90 <__sflush_r+0x98>
 808dc2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 808dc2c:	89a3      	ldrh	r3, [r4, #12]
 808dc2e:	075a      	lsls	r2, r3, #29
 808dc30:	d505      	bpl.n	808dc3e <__sflush_r+0x46>
 808dc32:	6863      	ldr	r3, [r4, #4]
 808dc34:	1ac0      	subs	r0, r0, r3
 808dc36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808dc38:	b10b      	cbz	r3, 808dc3e <__sflush_r+0x46>
 808dc3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808dc3c:	1ac0      	subs	r0, r0, r3
 808dc3e:	2300      	movs	r3, #0
 808dc40:	4602      	mov	r2, r0
 808dc42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808dc44:	6a21      	ldr	r1, [r4, #32]
 808dc46:	4628      	mov	r0, r5
 808dc48:	47b0      	blx	r6
 808dc4a:	1c43      	adds	r3, r0, #1
 808dc4c:	89a3      	ldrh	r3, [r4, #12]
 808dc4e:	d106      	bne.n	808dc5e <__sflush_r+0x66>
 808dc50:	6829      	ldr	r1, [r5, #0]
 808dc52:	291d      	cmp	r1, #29
 808dc54:	d82c      	bhi.n	808dcb0 <__sflush_r+0xb8>
 808dc56:	4a2a      	ldr	r2, [pc, #168]	; (808dd00 <__sflush_r+0x108>)
 808dc58:	40ca      	lsrs	r2, r1
 808dc5a:	07d6      	lsls	r6, r2, #31
 808dc5c:	d528      	bpl.n	808dcb0 <__sflush_r+0xb8>
 808dc5e:	2200      	movs	r2, #0
 808dc60:	6062      	str	r2, [r4, #4]
 808dc62:	04d9      	lsls	r1, r3, #19
 808dc64:	6922      	ldr	r2, [r4, #16]
 808dc66:	6022      	str	r2, [r4, #0]
 808dc68:	d504      	bpl.n	808dc74 <__sflush_r+0x7c>
 808dc6a:	1c42      	adds	r2, r0, #1
 808dc6c:	d101      	bne.n	808dc72 <__sflush_r+0x7a>
 808dc6e:	682b      	ldr	r3, [r5, #0]
 808dc70:	b903      	cbnz	r3, 808dc74 <__sflush_r+0x7c>
 808dc72:	6560      	str	r0, [r4, #84]	; 0x54
 808dc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808dc76:	602f      	str	r7, [r5, #0]
 808dc78:	2900      	cmp	r1, #0
 808dc7a:	d0ca      	beq.n	808dc12 <__sflush_r+0x1a>
 808dc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808dc80:	4299      	cmp	r1, r3
 808dc82:	d002      	beq.n	808dc8a <__sflush_r+0x92>
 808dc84:	4628      	mov	r0, r5
 808dc86:	f7ff faab 	bl	808d1e0 <_free_r>
 808dc8a:	2000      	movs	r0, #0
 808dc8c:	6360      	str	r0, [r4, #52]	; 0x34
 808dc8e:	e7c1      	b.n	808dc14 <__sflush_r+0x1c>
 808dc90:	6a21      	ldr	r1, [r4, #32]
 808dc92:	2301      	movs	r3, #1
 808dc94:	4628      	mov	r0, r5
 808dc96:	47b0      	blx	r6
 808dc98:	1c41      	adds	r1, r0, #1
 808dc9a:	d1c7      	bne.n	808dc2c <__sflush_r+0x34>
 808dc9c:	682b      	ldr	r3, [r5, #0]
 808dc9e:	2b00      	cmp	r3, #0
 808dca0:	d0c4      	beq.n	808dc2c <__sflush_r+0x34>
 808dca2:	2b1d      	cmp	r3, #29
 808dca4:	d001      	beq.n	808dcaa <__sflush_r+0xb2>
 808dca6:	2b16      	cmp	r3, #22
 808dca8:	d101      	bne.n	808dcae <__sflush_r+0xb6>
 808dcaa:	602f      	str	r7, [r5, #0]
 808dcac:	e7b1      	b.n	808dc12 <__sflush_r+0x1a>
 808dcae:	89a3      	ldrh	r3, [r4, #12]
 808dcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808dcb4:	81a3      	strh	r3, [r4, #12]
 808dcb6:	e7ad      	b.n	808dc14 <__sflush_r+0x1c>
 808dcb8:	690f      	ldr	r7, [r1, #16]
 808dcba:	2f00      	cmp	r7, #0
 808dcbc:	d0a9      	beq.n	808dc12 <__sflush_r+0x1a>
 808dcbe:	0793      	lsls	r3, r2, #30
 808dcc0:	680e      	ldr	r6, [r1, #0]
 808dcc2:	bf08      	it	eq
 808dcc4:	694b      	ldreq	r3, [r1, #20]
 808dcc6:	600f      	str	r7, [r1, #0]
 808dcc8:	bf18      	it	ne
 808dcca:	2300      	movne	r3, #0
 808dccc:	eba6 0807 	sub.w	r8, r6, r7
 808dcd0:	608b      	str	r3, [r1, #8]
 808dcd2:	f1b8 0f00 	cmp.w	r8, #0
 808dcd6:	dd9c      	ble.n	808dc12 <__sflush_r+0x1a>
 808dcd8:	6a21      	ldr	r1, [r4, #32]
 808dcda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 808dcdc:	4643      	mov	r3, r8
 808dcde:	463a      	mov	r2, r7
 808dce0:	4628      	mov	r0, r5
 808dce2:	47b0      	blx	r6
 808dce4:	2800      	cmp	r0, #0
 808dce6:	dc06      	bgt.n	808dcf6 <__sflush_r+0xfe>
 808dce8:	89a3      	ldrh	r3, [r4, #12]
 808dcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808dcee:	81a3      	strh	r3, [r4, #12]
 808dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 808dcf4:	e78e      	b.n	808dc14 <__sflush_r+0x1c>
 808dcf6:	4407      	add	r7, r0
 808dcf8:	eba8 0800 	sub.w	r8, r8, r0
 808dcfc:	e7e9      	b.n	808dcd2 <__sflush_r+0xda>
 808dcfe:	bf00      	nop
 808dd00:	20400001 	.word	0x20400001

0808dd04 <_fflush_r>:
 808dd04:	b538      	push	{r3, r4, r5, lr}
 808dd06:	690b      	ldr	r3, [r1, #16]
 808dd08:	4605      	mov	r5, r0
 808dd0a:	460c      	mov	r4, r1
 808dd0c:	b913      	cbnz	r3, 808dd14 <_fflush_r+0x10>
 808dd0e:	2500      	movs	r5, #0
 808dd10:	4628      	mov	r0, r5
 808dd12:	bd38      	pop	{r3, r4, r5, pc}
 808dd14:	b118      	cbz	r0, 808dd1e <_fflush_r+0x1a>
 808dd16:	6983      	ldr	r3, [r0, #24]
 808dd18:	b90b      	cbnz	r3, 808dd1e <_fflush_r+0x1a>
 808dd1a:	f7ff f9a7 	bl	808d06c <__sinit>
 808dd1e:	4b14      	ldr	r3, [pc, #80]	; (808dd70 <_fflush_r+0x6c>)
 808dd20:	429c      	cmp	r4, r3
 808dd22:	d11b      	bne.n	808dd5c <_fflush_r+0x58>
 808dd24:	686c      	ldr	r4, [r5, #4]
 808dd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808dd2a:	2b00      	cmp	r3, #0
 808dd2c:	d0ef      	beq.n	808dd0e <_fflush_r+0xa>
 808dd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808dd30:	07d0      	lsls	r0, r2, #31
 808dd32:	d404      	bmi.n	808dd3e <_fflush_r+0x3a>
 808dd34:	0599      	lsls	r1, r3, #22
 808dd36:	d402      	bmi.n	808dd3e <_fflush_r+0x3a>
 808dd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808dd3a:	f7ff fa47 	bl	808d1cc <__retarget_lock_acquire_recursive>
 808dd3e:	4628      	mov	r0, r5
 808dd40:	4621      	mov	r1, r4
 808dd42:	f7ff ff59 	bl	808dbf8 <__sflush_r>
 808dd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808dd48:	07da      	lsls	r2, r3, #31
 808dd4a:	4605      	mov	r5, r0
 808dd4c:	d4e0      	bmi.n	808dd10 <_fflush_r+0xc>
 808dd4e:	89a3      	ldrh	r3, [r4, #12]
 808dd50:	059b      	lsls	r3, r3, #22
 808dd52:	d4dd      	bmi.n	808dd10 <_fflush_r+0xc>
 808dd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808dd56:	f7ff fa3a 	bl	808d1ce <__retarget_lock_release_recursive>
 808dd5a:	e7d9      	b.n	808dd10 <_fflush_r+0xc>
 808dd5c:	4b05      	ldr	r3, [pc, #20]	; (808dd74 <_fflush_r+0x70>)
 808dd5e:	429c      	cmp	r4, r3
 808dd60:	d101      	bne.n	808dd66 <_fflush_r+0x62>
 808dd62:	68ac      	ldr	r4, [r5, #8]
 808dd64:	e7df      	b.n	808dd26 <_fflush_r+0x22>
 808dd66:	4b04      	ldr	r3, [pc, #16]	; (808dd78 <_fflush_r+0x74>)
 808dd68:	429c      	cmp	r4, r3
 808dd6a:	bf08      	it	eq
 808dd6c:	68ec      	ldreq	r4, [r5, #12]
 808dd6e:	e7da      	b.n	808dd26 <_fflush_r+0x22>
 808dd70:	08090b40 	.word	0x08090b40
 808dd74:	08090b60 	.word	0x08090b60
 808dd78:	08090b20 	.word	0x08090b20

0808dd7c <_lseek_r>:
 808dd7c:	b538      	push	{r3, r4, r5, lr}
 808dd7e:	4d07      	ldr	r5, [pc, #28]	; (808dd9c <_lseek_r+0x20>)
 808dd80:	4604      	mov	r4, r0
 808dd82:	4608      	mov	r0, r1
 808dd84:	4611      	mov	r1, r2
 808dd86:	2200      	movs	r2, #0
 808dd88:	602a      	str	r2, [r5, #0]
 808dd8a:	461a      	mov	r2, r3
 808dd8c:	f7f2 fdac 	bl	80808e8 <_lseek>
 808dd90:	1c43      	adds	r3, r0, #1
 808dd92:	d102      	bne.n	808dd9a <_lseek_r+0x1e>
 808dd94:	682b      	ldr	r3, [r5, #0]
 808dd96:	b103      	cbz	r3, 808dd9a <_lseek_r+0x1e>
 808dd98:	6023      	str	r3, [r4, #0]
 808dd9a:	bd38      	pop	{r3, r4, r5, pc}
 808dd9c:	20008390 	.word	0x20008390

0808dda0 <__swhatbuf_r>:
 808dda0:	b570      	push	{r4, r5, r6, lr}
 808dda2:	460e      	mov	r6, r1
 808dda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808dda8:	2900      	cmp	r1, #0
 808ddaa:	b096      	sub	sp, #88	; 0x58
 808ddac:	4614      	mov	r4, r2
 808ddae:	461d      	mov	r5, r3
 808ddb0:	da08      	bge.n	808ddc4 <__swhatbuf_r+0x24>
 808ddb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 808ddb6:	2200      	movs	r2, #0
 808ddb8:	602a      	str	r2, [r5, #0]
 808ddba:	061a      	lsls	r2, r3, #24
 808ddbc:	d410      	bmi.n	808dde0 <__swhatbuf_r+0x40>
 808ddbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808ddc2:	e00e      	b.n	808dde2 <__swhatbuf_r+0x42>
 808ddc4:	466a      	mov	r2, sp
 808ddc6:	f000 f8b3 	bl	808df30 <_fstat_r>
 808ddca:	2800      	cmp	r0, #0
 808ddcc:	dbf1      	blt.n	808ddb2 <__swhatbuf_r+0x12>
 808ddce:	9a01      	ldr	r2, [sp, #4]
 808ddd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 808ddd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 808ddd8:	425a      	negs	r2, r3
 808ddda:	415a      	adcs	r2, r3
 808dddc:	602a      	str	r2, [r5, #0]
 808ddde:	e7ee      	b.n	808ddbe <__swhatbuf_r+0x1e>
 808dde0:	2340      	movs	r3, #64	; 0x40
 808dde2:	2000      	movs	r0, #0
 808dde4:	6023      	str	r3, [r4, #0]
 808dde6:	b016      	add	sp, #88	; 0x58
 808dde8:	bd70      	pop	{r4, r5, r6, pc}
	...

0808ddec <__smakebuf_r>:
 808ddec:	898b      	ldrh	r3, [r1, #12]
 808ddee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808ddf0:	079d      	lsls	r5, r3, #30
 808ddf2:	4606      	mov	r6, r0
 808ddf4:	460c      	mov	r4, r1
 808ddf6:	d507      	bpl.n	808de08 <__smakebuf_r+0x1c>
 808ddf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 808ddfc:	6023      	str	r3, [r4, #0]
 808ddfe:	6123      	str	r3, [r4, #16]
 808de00:	2301      	movs	r3, #1
 808de02:	6163      	str	r3, [r4, #20]
 808de04:	b002      	add	sp, #8
 808de06:	bd70      	pop	{r4, r5, r6, pc}
 808de08:	ab01      	add	r3, sp, #4
 808de0a:	466a      	mov	r2, sp
 808de0c:	f7ff ffc8 	bl	808dda0 <__swhatbuf_r>
 808de10:	9900      	ldr	r1, [sp, #0]
 808de12:	4605      	mov	r5, r0
 808de14:	4630      	mov	r0, r6
 808de16:	f7ff fa4f 	bl	808d2b8 <_malloc_r>
 808de1a:	b948      	cbnz	r0, 808de30 <__smakebuf_r+0x44>
 808de1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808de20:	059a      	lsls	r2, r3, #22
 808de22:	d4ef      	bmi.n	808de04 <__smakebuf_r+0x18>
 808de24:	f023 0303 	bic.w	r3, r3, #3
 808de28:	f043 0302 	orr.w	r3, r3, #2
 808de2c:	81a3      	strh	r3, [r4, #12]
 808de2e:	e7e3      	b.n	808ddf8 <__smakebuf_r+0xc>
 808de30:	4b0d      	ldr	r3, [pc, #52]	; (808de68 <__smakebuf_r+0x7c>)
 808de32:	62b3      	str	r3, [r6, #40]	; 0x28
 808de34:	89a3      	ldrh	r3, [r4, #12]
 808de36:	6020      	str	r0, [r4, #0]
 808de38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808de3c:	81a3      	strh	r3, [r4, #12]
 808de3e:	9b00      	ldr	r3, [sp, #0]
 808de40:	6163      	str	r3, [r4, #20]
 808de42:	9b01      	ldr	r3, [sp, #4]
 808de44:	6120      	str	r0, [r4, #16]
 808de46:	b15b      	cbz	r3, 808de60 <__smakebuf_r+0x74>
 808de48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 808de4c:	4630      	mov	r0, r6
 808de4e:	f000 f881 	bl	808df54 <_isatty_r>
 808de52:	b128      	cbz	r0, 808de60 <__smakebuf_r+0x74>
 808de54:	89a3      	ldrh	r3, [r4, #12]
 808de56:	f023 0303 	bic.w	r3, r3, #3
 808de5a:	f043 0301 	orr.w	r3, r3, #1
 808de5e:	81a3      	strh	r3, [r4, #12]
 808de60:	89a0      	ldrh	r0, [r4, #12]
 808de62:	4305      	orrs	r5, r0
 808de64:	81a5      	strh	r5, [r4, #12]
 808de66:	e7cd      	b.n	808de04 <__smakebuf_r+0x18>
 808de68:	0808d005 	.word	0x0808d005

0808de6c <__malloc_lock>:
 808de6c:	4801      	ldr	r0, [pc, #4]	; (808de74 <__malloc_lock+0x8>)
 808de6e:	f7ff b9ad 	b.w	808d1cc <__retarget_lock_acquire_recursive>
 808de72:	bf00      	nop
 808de74:	20008394 	.word	0x20008394

0808de78 <__malloc_unlock>:
 808de78:	4801      	ldr	r0, [pc, #4]	; (808de80 <__malloc_unlock+0x8>)
 808de7a:	f7ff b9a8 	b.w	808d1ce <__retarget_lock_release_recursive>
 808de7e:	bf00      	nop
 808de80:	20008394 	.word	0x20008394

0808de84 <_read_r>:
 808de84:	b538      	push	{r3, r4, r5, lr}
 808de86:	4d07      	ldr	r5, [pc, #28]	; (808dea4 <_read_r+0x20>)
 808de88:	4604      	mov	r4, r0
 808de8a:	4608      	mov	r0, r1
 808de8c:	4611      	mov	r1, r2
 808de8e:	2200      	movs	r2, #0
 808de90:	602a      	str	r2, [r5, #0]
 808de92:	461a      	mov	r2, r3
 808de94:	f7f2 fcc8 	bl	8080828 <_read>
 808de98:	1c43      	adds	r3, r0, #1
 808de9a:	d102      	bne.n	808dea2 <_read_r+0x1e>
 808de9c:	682b      	ldr	r3, [r5, #0]
 808de9e:	b103      	cbz	r3, 808dea2 <_read_r+0x1e>
 808dea0:	6023      	str	r3, [r4, #0]
 808dea2:	bd38      	pop	{r3, r4, r5, pc}
 808dea4:	20008390 	.word	0x20008390

0808dea8 <_raise_r>:
 808dea8:	291f      	cmp	r1, #31
 808deaa:	b538      	push	{r3, r4, r5, lr}
 808deac:	4604      	mov	r4, r0
 808deae:	460d      	mov	r5, r1
 808deb0:	d904      	bls.n	808debc <_raise_r+0x14>
 808deb2:	2316      	movs	r3, #22
 808deb4:	6003      	str	r3, [r0, #0]
 808deb6:	f04f 30ff 	mov.w	r0, #4294967295
 808deba:	bd38      	pop	{r3, r4, r5, pc}
 808debc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 808debe:	b112      	cbz	r2, 808dec6 <_raise_r+0x1e>
 808dec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808dec4:	b94b      	cbnz	r3, 808deda <_raise_r+0x32>
 808dec6:	4620      	mov	r0, r4
 808dec8:	f000 f830 	bl	808df2c <_getpid_r>
 808decc:	462a      	mov	r2, r5
 808dece:	4601      	mov	r1, r0
 808ded0:	4620      	mov	r0, r4
 808ded2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808ded6:	f000 b817 	b.w	808df08 <_kill_r>
 808deda:	2b01      	cmp	r3, #1
 808dedc:	d00a      	beq.n	808def4 <_raise_r+0x4c>
 808dede:	1c59      	adds	r1, r3, #1
 808dee0:	d103      	bne.n	808deea <_raise_r+0x42>
 808dee2:	2316      	movs	r3, #22
 808dee4:	6003      	str	r3, [r0, #0]
 808dee6:	2001      	movs	r0, #1
 808dee8:	e7e7      	b.n	808deba <_raise_r+0x12>
 808deea:	2400      	movs	r4, #0
 808deec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 808def0:	4628      	mov	r0, r5
 808def2:	4798      	blx	r3
 808def4:	2000      	movs	r0, #0
 808def6:	e7e0      	b.n	808deba <_raise_r+0x12>

0808def8 <raise>:
 808def8:	4b02      	ldr	r3, [pc, #8]	; (808df04 <raise+0xc>)
 808defa:	4601      	mov	r1, r0
 808defc:	6818      	ldr	r0, [r3, #0]
 808defe:	f7ff bfd3 	b.w	808dea8 <_raise_r>
 808df02:	bf00      	nop
 808df04:	2000002c 	.word	0x2000002c

0808df08 <_kill_r>:
 808df08:	b538      	push	{r3, r4, r5, lr}
 808df0a:	4d07      	ldr	r5, [pc, #28]	; (808df28 <_kill_r+0x20>)
 808df0c:	2300      	movs	r3, #0
 808df0e:	4604      	mov	r4, r0
 808df10:	4608      	mov	r0, r1
 808df12:	4611      	mov	r1, r2
 808df14:	602b      	str	r3, [r5, #0]
 808df16:	f7f2 fc6b 	bl	80807f0 <_kill>
 808df1a:	1c43      	adds	r3, r0, #1
 808df1c:	d102      	bne.n	808df24 <_kill_r+0x1c>
 808df1e:	682b      	ldr	r3, [r5, #0]
 808df20:	b103      	cbz	r3, 808df24 <_kill_r+0x1c>
 808df22:	6023      	str	r3, [r4, #0]
 808df24:	bd38      	pop	{r3, r4, r5, pc}
 808df26:	bf00      	nop
 808df28:	20008390 	.word	0x20008390

0808df2c <_getpid_r>:
 808df2c:	f7f2 bc58 	b.w	80807e0 <_getpid>

0808df30 <_fstat_r>:
 808df30:	b538      	push	{r3, r4, r5, lr}
 808df32:	4d07      	ldr	r5, [pc, #28]	; (808df50 <_fstat_r+0x20>)
 808df34:	2300      	movs	r3, #0
 808df36:	4604      	mov	r4, r0
 808df38:	4608      	mov	r0, r1
 808df3a:	4611      	mov	r1, r2
 808df3c:	602b      	str	r3, [r5, #0]
 808df3e:	f7f2 fcb8 	bl	80808b2 <_fstat>
 808df42:	1c43      	adds	r3, r0, #1
 808df44:	d102      	bne.n	808df4c <_fstat_r+0x1c>
 808df46:	682b      	ldr	r3, [r5, #0]
 808df48:	b103      	cbz	r3, 808df4c <_fstat_r+0x1c>
 808df4a:	6023      	str	r3, [r4, #0]
 808df4c:	bd38      	pop	{r3, r4, r5, pc}
 808df4e:	bf00      	nop
 808df50:	20008390 	.word	0x20008390

0808df54 <_isatty_r>:
 808df54:	b538      	push	{r3, r4, r5, lr}
 808df56:	4d06      	ldr	r5, [pc, #24]	; (808df70 <_isatty_r+0x1c>)
 808df58:	2300      	movs	r3, #0
 808df5a:	4604      	mov	r4, r0
 808df5c:	4608      	mov	r0, r1
 808df5e:	602b      	str	r3, [r5, #0]
 808df60:	f7f2 fcb7 	bl	80808d2 <_isatty>
 808df64:	1c43      	adds	r3, r0, #1
 808df66:	d102      	bne.n	808df6e <_isatty_r+0x1a>
 808df68:	682b      	ldr	r3, [r5, #0]
 808df6a:	b103      	cbz	r3, 808df6e <_isatty_r+0x1a>
 808df6c:	6023      	str	r3, [r4, #0]
 808df6e:	bd38      	pop	{r3, r4, r5, pc}
 808df70:	20008390 	.word	0x20008390

0808df74 <_init>:
 808df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808df76:	bf00      	nop
 808df78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808df7a:	bc08      	pop	{r3}
 808df7c:	469e      	mov	lr, r3
 808df7e:	4770      	bx	lr

0808df80 <_fini>:
 808df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808df82:	bf00      	nop
 808df84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808df86:	bc08      	pop	{r3}
 808df88:	469e      	mov	lr, r3
 808df8a:	4770      	bx	lr
